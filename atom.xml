<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>s0uthwood&#39;s Blog</title>
  
  
  <link href="https://s0uthwood.github.io/atom.xml" rel="self"/>
  
  <link href="https://s0uthwood.github.io/"/>
  <updated>2021-12-09T07:08:09.915Z</updated>
  <id>https://s0uthwood.github.io/</id>
  
  <author>
    <name>s0uthwood</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Learn Basic Signal from DNUICTF easyre</title>
    <link href="https://s0uthwood.github.io/2021/12/09/Learn-Basic-Signal-from-DNUICTF-easyre/"/>
    <id>https://s0uthwood.github.io/2021/12/09/Learn-Basic-Signal-from-DNUICTF-easyre/</id>
    <published>2021-12-09T07:05:55.000Z</published>
    <updated>2021-12-09T07:08:09.915Z</updated>
    
    <content type="html"><![CDATA[<p>暗泉杯第一次见到信号量实现的VM，稍微记录一下</p><a id="more"></a><h1 id="一些信号量函数的学习"><a href="#一些信号量函数的学习" class="headerlink" title="一些信号量函数的学习"></a>一些信号量函数的学习</h1><p>信号量的注册在init函数中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v2.sa_handler = (<span class="keyword">__sighandler_t</span>)sub_400E1D;</span><br><span class="line">v2.sa_flags = <span class="number">4</span>;</span><br><span class="line">sigaction(<span class="number">34</span>, &amp;v2, &amp;v1);</span><br></pre></td></tr></table></figure><p><code>sigaction()</code> 函数定义为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">const</span> struct sigaction *act, struct sigaction *oldact)</span></span>;</span><br></pre></td></tr></table></figure><p>sigaction 结构体定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> (*sa_handler) (<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">sigset_t</span> sa_mask;</span><br><span class="line">    <span class="keyword">int</span> sa_flags;       <span class="comment">// 用来设置信号处理的相关操作</span></span><br><span class="line">    <span class="keyword">void</span> (*sa_restorer) (<span class="keyword">void</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 <code>sa_flags</code> 的定义如下 (from <code>linux/include/uapi/asm-generic/signal-defs.h</code>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SA_NOCLDSTOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_NOCLDSTOP0x00000001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SA_NOCLDWAIT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_NOCLDWAIT0x00000002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SA_SIGINFO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_SIGINFO0x00000004</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/* 0x00000008 used on alpha, mips, parisc */</span></span><br><span class="line"><span class="comment">/* 0x00000010 used on alpha, parisc */</span></span><br><span class="line"><span class="comment">/* 0x00000020 used on alpha, parisc, sparc */</span></span><br><span class="line"><span class="comment">/* 0x00000040 used on alpha, parisc */</span></span><br><span class="line"><span class="comment">/* 0x00000080 used on parisc */</span></span><br><span class="line"><span class="comment">/* 0x00000100 used on sparc */</span></span><br><span class="line"><span class="comment">/* 0x00000200 used on sparc */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_UNSUPPORTED0x00000400</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_EXPOSE_TAGBITS0x00000800</span></span><br><span class="line"><span class="comment">/* 0x00010000 used on mips */</span></span><br><span class="line"><span class="comment">/* 0x00800000 used for internal SA_IMMUTABLE */</span></span><br><span class="line"><span class="comment">/* 0x01000000 used on x86 */</span></span><br><span class="line"><span class="comment">/* 0x02000000 used on x86 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * New architectures should not define the obsolete</span></span><br><span class="line"><span class="comment"> *SA_RESTORER0x04000000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SA_ONSTACK</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_ONSTACK0x08000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SA_RESTART</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_RESTART0x10000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SA_NODEFER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_NODEFER0x40000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SA_RESETHAND</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SA_RESETHAND0x80000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>题目中使用的是 <code>SA_SIGINFO</code>，对信号处理程序提供了附加信息：一个指向 <code>siginfo</code> 结构的指针以及一个指向上下文标识符的指针</p><p>比如上述部分就是将 <code>sub_400E1D</code> 函数注册为34信号的处理函数</p><p>主程序中，为 <code>2</code> 信号注册了一个处理函数，这个函数是用于对最终加密结果进行判断的，随后进行了一个初始化，接下来进入一个死循环，等待子程序发送 <code>2</code> 信号</p><p>接下来需要了解是如何读取指令的</p><p>子程序中调用了函数 <code>sub_400A0D(dword_4019C0, s1);</code>，其中，第一个参数是vm的指令码，s1是输入的 <code>flag</code></p><p>这个函数是由 <code>while</code> 循环和 <code>switch</code> 语句实现的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v41 = a1[(<span class="keyword">unsigned</span> __int8)qword_6030C8[<span class="number">20</span>]];</span><br><span class="line"><span class="keyword">if</span> ( v41 == <span class="number">23</span> )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">++qword_6030C8[<span class="number">20</span>];</span><br></pre></td></tr></table></figure><p>这里可以看出来 <code>a1</code> 存储了vm程序的机器码，<code>qword_6030C8[20]</code> 存放的是 <code>eip</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( v41 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">    v2 = qword_6030C8[<span class="number">20</span>];</span><br><span class="line">    qword_6030C8[<span class="number">20</span>] = v2 + <span class="number">1</span>;</span><br><span class="line">    *v42 = a1[v2];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>switch</code> 中判断指令码是否为 <code>0, 8, 9 ...</code>，如果是，将会进行 <code>eip+1</code> 的操作，并再从机器码中取出一位，说明这些指令含有参数</p><p>接下来选择几个指令，分析是如何传参的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  v3 = getppid();</span><br><span class="line">  sigqueue(v3, <span class="number">34</span>, (<span class="keyword">const</span> <span class="keyword">union</span> sigval)v42);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p><code>0</code> 指令发送了 <code>34</code> 信号量，将参数设置为 <code>sigval</code> 进行传递，这个指令仅传递了一个指令参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  val = qword_6030C8 + <span class="number">16</span>;</span><br><span class="line">  v4 = getppid();</span><br><span class="line">  sigqueue(v4, <span class="number">34</span>, (<span class="keyword">const</span> <span class="keyword">union</span> sigval)val);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  vala = qword_6030C8 + <span class="number">17</span>;</span><br><span class="line">  v5 = getppid();</span><br><span class="line">  sigqueue(v5, <span class="number">34</span>, (<span class="keyword">const</span> <span class="keyword">union</span> sigval)vala);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  valb = qword_6030C8 + <span class="number">18</span>;</span><br><span class="line">  v6 = getppid();</span><br><span class="line">  sigqueue(v6, <span class="number">34</span>, (<span class="keyword">const</span> <span class="keyword">union</span> sigval)valb);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p><code>1, 2, 3</code> 三条指令区别仅在于使用的全局变量地址不同（可以猜测出来是三个不同的寄存器）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">  valf = qword_6030C8 + <span class="number">16</span>;</span><br><span class="line">  v11 = getppid();</span><br><span class="line">  sigqueue(v11, <span class="number">37</span>, (<span class="keyword">const</span> <span class="keyword">union</span> sigval)valf);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>根据之前的分析，<code>8</code> 指令理应含有参数，但只传递了寄存器一个参数，因此观察处理函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_400F16</span><span class="params">(__int64 a1, <span class="keyword">siginfo_t</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  *(_BYTE *)a2-&gt;_sifields._timer.si_sigval.sival_ptr += s1[<span class="number">79</span>];</span><br><span class="line">  <span class="keyword">return</span> semop(semid, &amp;stru_6030BE, <span class="number">1u</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现使用了 <code>s1[79]</code> 这个变量，而 vm 函数中含有语句 <code>v42 = s1 + 79;</code> 因此，参数通过 <code>s1[79]</code> 这个全局变量传递到了处理函数中</p><p>还有一类指令只有kill</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">  v24 = getppid();</span><br><span class="line">  kill(v24, <span class="number">46</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这类指令仅传递了全局变量</p><p>最后经过对每条指令的分析，以及动调查看内存，确定 <code>qword_6030C8[19]</code> 是 <code>esp</code>，<code>*(_QWORD *)qword_6030C8</code> 模拟了栈，<code>*((_QWORD *)qword_6030C8 + 1)</code> 是输入的开始地址，<code>qword_6030C8[16, 17, 18]</code> 是三个寄存器，<code>qword_6030C8[21]</code> 是跳转用的 <code>ZF</code> 标志位</p><h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><p>先手动反汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">code = [</span><br><span class="line">    <span class="number">17</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">9</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">29</span>, <span class="number">6</span>, <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">64</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">29</span>, <span class="number">23</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">15</span>, </span><br><span class="line">    <span class="number">1</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">29</span>, <span class="number">5</span>, <span class="number">18</span>, </span><br><span class="line">    <span class="number">21</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">61</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">19</span>, <span class="number">52</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">7</span>, </span><br><span class="line">    <span class="number">1</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">19</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">18</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">sub_400E1D = <span class="string">&quot;push(&#123;&#125;);&quot;</span></span><br><span class="line">sub_400E78 = <span class="string">&quot;pop(&#123;&#125;);&quot;</span></span><br><span class="line">sub_400F16 = <span class="string">&quot;&#123;&#125; += &#123;&#125;;&quot;</span></span><br><span class="line">sub_400FA8 = <span class="string">&quot;&#123;&#125; -= &#123;&#125;;&quot;</span></span><br><span class="line"></span><br><span class="line">eip = <span class="number">0</span> <span class="comment"># 20</span></span><br><span class="line">eax = <span class="number">0</span> <span class="comment"># 16</span></span><br><span class="line">ebx = <span class="number">0</span> <span class="comment"># 17</span></span><br><span class="line">ecx = <span class="number">0</span> <span class="comment"># 18</span></span><br><span class="line">edx = <span class="number">0</span> <span class="comment"># 19</span></span><br><span class="line">memory = [<span class="number">2</span>] * <span class="number">0x1000</span></span><br><span class="line">memory2 = [<span class="number">1</span>] * <span class="number">50</span></span><br><span class="line"><span class="keyword">while</span> eip &lt; <span class="built_in">len</span>(code):</span><br><span class="line">    cur_op = code[eip]</span><br><span class="line">    <span class="keyword">if</span> cur_op == <span class="number">0</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % (eip), sub_400E1D.<span class="built_in">format</span>(cur_arg))</span><br><span class="line">        edx += <span class="number">1</span></span><br><span class="line">        memory[edx] = cur_arg</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">1</span>:</span><br><span class="line">        cur_arg = <span class="string">&quot;eax&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % (eip), sub_400E1D.<span class="built_in">format</span>(cur_arg))</span><br><span class="line">        edx += <span class="number">1</span></span><br><span class="line">        memory[edx] = eax</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">2</span>:</span><br><span class="line">        cur_arg = <span class="string">&quot;ebx&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % (eip), sub_400E1D.<span class="built_in">format</span>(cur_arg))</span><br><span class="line">        edx += <span class="number">1</span></span><br><span class="line">        memory[edx] = ebx</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">3</span>:</span><br><span class="line">        cur_arg = <span class="string">&quot;ecx&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % (eip), sub_400E1D.<span class="built_in">format</span>(cur_arg))</span><br><span class="line">        edx += <span class="number">1</span></span><br><span class="line">        memory[edx] = ecx</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">4</span>:</span><br><span class="line">        cur_arg = <span class="string">&quot;eax&quot;</span></span><br><span class="line">        edx -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400E78.<span class="built_in">format</span>(cur_arg))</span><br><span class="line">        eax = memory[edx]</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">5</span>:</span><br><span class="line">        cur_arg = <span class="string">&quot;ebx&quot;</span></span><br><span class="line">        edx -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400E78.<span class="built_in">format</span>(cur_arg))</span><br><span class="line">        ebx = memory[edx]</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">6</span>:</span><br><span class="line">        cur_arg = <span class="string">&quot;ecx&quot;</span></span><br><span class="line">        edx -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400E78.<span class="built_in">format</span>(cur_arg))</span><br><span class="line">        ecx = memory[edx]</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">7</span>:</span><br><span class="line">        eax += ebx</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">&quot;eax += ebx;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">8</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400F16.<span class="built_in">format</span>(<span class="string">&quot;eax&quot;</span>, cur_arg))</span><br><span class="line">        eax += cur_arg</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">9</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400F16.<span class="built_in">format</span>(<span class="string">&quot;ebx&quot;</span>, cur_arg))</span><br><span class="line">        ebx += cur_arg</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">10</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400F16.<span class="built_in">format</span>(<span class="string">&quot;ecx&quot;</span>, cur_arg))</span><br><span class="line">        ecx += cur_arg</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">11</span>:</span><br><span class="line">        eax -= ebx</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">&quot;eax -= ebx;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">12</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400FA8.<span class="built_in">format</span>(<span class="string">&quot;eax&quot;</span>, cur_arg))</span><br><span class="line">        eax -= cur_arg</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">13</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400FA8.<span class="built_in">format</span>(<span class="string">&quot;ebx&quot;</span>, cur_arg))</span><br><span class="line">        ebx -= cur_arg</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">14</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, sub_400FA8.<span class="built_in">format</span>(<span class="string">&quot;ecx&quot;</span>, cur_arg))</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">15</span>:</span><br><span class="line">        eax ^= ebx</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;eax ^= ebx;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">16</span>:</span><br><span class="line">        zf = (eax == ebx)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;zf = (eax == ebx);&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">17</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;push(eip+2); eip = <span class="subst">&#123;<span class="built_in">hex</span>(cur_arg)&#125;</span>;&quot;</span>)</span><br><span class="line">        memory[edx] = eip</span><br><span class="line">        edx += <span class="number">1</span></span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">18</span>:</span><br><span class="line">        edx -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;pop(eip);&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">19</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;eip = <span class="subst">&#123;<span class="built_in">hex</span>(cur_arg)&#125;</span>;&quot;</span>)</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">20</span>:</span><br><span class="line">        cur_arg = code[eip + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;if zf:    eip = <span class="subst">&#123;<span class="built_in">hex</span>(cur_arg)&#125;</span>;&quot;</span>)</span><br><span class="line">        eip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">21</span>:</span><br><span class="line">        memory[edx] = memory2[ecx]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;push(memory2[ecx]);&quot;</span>)</span><br><span class="line">        edx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">22</span>:</span><br><span class="line">        edx -= <span class="number">1</span></span><br><span class="line">        memory2[ecx] = memory[edx]</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">f&quot;pop(memory2[ecx]);&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">23</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;_%02X:&quot;</span> % eip, <span class="string">&quot;break;&quot;</span>)</span><br><span class="line">    eip += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>拿到反汇编结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">_00: push(eip+<span class="number">2</span>); eip = <span class="number">0x34</span>;</span><br><span class="line">_02: push(<span class="number">42</span>);</span><br><span class="line">_04: pop(ebx);</span><br><span class="line">_05: zf = (eax == ebx);</span><br><span class="line">_06: <span class="keyword">if</span> zf:    eip = <span class="number">0x9</span>;</span><br><span class="line">_08: <span class="keyword">break</span>;</span><br><span class="line">_09: push(<span class="number">36</span>);</span><br><span class="line">_0B: pop(ebx);</span><br><span class="line">_0C: push(ecx);</span><br><span class="line">_0D: push(eip+<span class="number">2</span>); eip = <span class="number">0x1d</span>;</span><br><span class="line">_0F: pop(ecx);</span><br><span class="line">_10: push(<span class="number">0</span>);</span><br><span class="line">_12: pop(ebx);</span><br><span class="line">_13: push(ecx);</span><br><span class="line">_14: push(eip+<span class="number">2</span>); eip = <span class="number">0x40</span>;</span><br><span class="line">_16: pop(ecx);</span><br><span class="line">_17: push(<span class="number">72</span>);</span><br><span class="line">_19: pop(ebx);</span><br><span class="line">_1A: push(eip+<span class="number">2</span>); eip = <span class="number">0x1d</span>;</span><br><span class="line">_1C: <span class="keyword">break</span>;</span><br><span class="line">_1D: ecx -= <span class="number">1</span>;</span><br><span class="line">_1F: push(memory2[ecx]);</span><br><span class="line">_20: pop(eax);</span><br><span class="line">_21: eax ^= ebx;</span><br><span class="line">_22: push(eax);</span><br><span class="line">_23: pop(memory2[ecx]);</span><br><span class="line">_24: push(ebx);</span><br><span class="line">_25: push(<span class="number">0</span>);</span><br><span class="line">_27: pop(eax);</span><br><span class="line">_28: push(ecx);</span><br><span class="line">_29: pop(ebx);</span><br><span class="line">_2A: zf = (eax == ebx);</span><br><span class="line">_2B: <span class="keyword">if</span> zf:    eip = <span class="number">0x32</span>;</span><br><span class="line">_2D: pop(ebx);</span><br><span class="line">_2E: ebx += <span class="number">2</span>;</span><br><span class="line">_30: eip = <span class="number">0x1d</span>;</span><br><span class="line">_32: pop(ebx);</span><br><span class="line">_33: pop(eip);</span><br><span class="line">_34: push(memory2[ecx]);</span><br><span class="line">_35: pop(eax);</span><br><span class="line">_36: zf = (eax == ebx);</span><br><span class="line">_37: <span class="keyword">if</span> zf:    eip = <span class="number">0x3d</span>;</span><br><span class="line">_39: ecx += <span class="number">1</span>;</span><br><span class="line">_3B: eip = <span class="number">0x34</span>;</span><br><span class="line">_3D: push(ecx);</span><br><span class="line">_3E: pop(eax);</span><br><span class="line">_3F: pop(eip);</span><br><span class="line">_40: ecx -= <span class="number">1</span>;</span><br><span class="line">_42: push(memory2[ecx]);</span><br><span class="line">_43: pop(eax);</span><br><span class="line">_44: eax += ebx;</span><br><span class="line">_45: push(eax);</span><br><span class="line">_46: pop(memory2[ecx]);</span><br><span class="line">_47: push(ebx);</span><br><span class="line">_48: push(<span class="number">0</span>);</span><br><span class="line">_4A: pop(eax);</span><br><span class="line">_4B: push(ecx);</span><br><span class="line">_4C: pop(ebx);</span><br><span class="line">_4D: zf = (eax == ebx);</span><br><span class="line">_4E: <span class="keyword">if</span> zf:    eip = <span class="number">0x55</span>;</span><br><span class="line">_50: pop(ebx);</span><br><span class="line">_51: ebx += <span class="number">1</span>;</span><br><span class="line">_53: eip = <span class="number">0x40</span>;</span><br><span class="line">_55: pop(ebx);</span><br><span class="line">_56: pop(eip);</span><br></pre></td></tr></table></figure><p>发现其实是调用了几个函数，分别在0x34、0x40、0x1D</p><p>0x34处的函数判断了长度，0x1D处的函数从后往前异或数字，每次加2，0x40处的函数从后往前进行加法，数字每次加1</p><p>所以最后的加密算法为：首先从后往前 ^36, ^38, ^40，随后从后往前+0, +1, +2…，最后从后往前 ^72, ^74, ^76…</p><p>反向解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s2 = [</span><br><span class="line">    <span class="number">0xA3</span>, <span class="number">0xD8</span>, <span class="number">0xAC</span>, <span class="number">0xA9</span>, <span class="number">0xA8</span>, <span class="number">0xD6</span>, <span class="number">0xA6</span>, <span class="number">0xCD</span>, <span class="number">0xD0</span>, <span class="number">0xD5</span>,</span><br><span class="line">    <span class="number">0xF7</span>, <span class="number">0xB7</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0x31</span>, <span class="number">0x2D</span>, <span class="number">0x40</span>, <span class="number">0x5B</span>, <span class="number">0x4B</span>, <span class="number">0x3A</span>,</span><br><span class="line">    <span class="number">0xFD</span>, <span class="number">0x57</span>, <span class="number">0x42</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x52</span>, <span class="number">0x54</span>, <span class="number">0x1B</span>, <span class="number">0x0C</span>, <span class="number">0x78</span>,</span><br><span class="line">    <span class="number">0x39</span>, <span class="number">0x2D</span>, <span class="number">0xD9</span>, <span class="number">0x3D</span>, <span class="number">0x35</span>, <span class="number">0x1F</span>, <span class="number">0x09</span>, <span class="number">0x41</span>, <span class="number">0x40</span>, <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x11</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">x = <span class="number">36</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line">z = <span class="number">72</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s2[::<span class="number">-1</span>]:</span><br><span class="line">    flag += <span class="built_in">chr</span>(((i ^ z) - y) ^ x)</span><br><span class="line">        x += <span class="number">2</span></span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line">        z += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (flag[::<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># &#x27;flag&#123;Now_Y0u_Know_th4_Signa1_0f_Linux!!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;暗泉杯第一次见到信号量实现的VM，稍微记录一下&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="Writeup" scheme="https://s0uthwood.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Resent RE Challenge</title>
    <link href="https://s0uthwood.github.io/2021/11/23/Resent-RE-Challenge/"/>
    <id>https://s0uthwood.github.io/2021/11/23/Resent-RE-Challenge/</id>
    <published>2021-11-23T06:06:23.000Z</published>
    <updated>2021-12-02T10:37:58.078Z</updated>
    
    <content type="html"><![CDATA[<p>最近有点懒，好久没有更新了，就决定把近期的一些题目一起放上来了</p><ul><li>[N1CTF 2021]babyrust</li><li>[N1CTF 2021]Py</li><li>[L3HCTF 2021]double-joy</li><li>[L3HCTF 2021]Load</li><li>[hack.lu]pycoin</li><li>[hack.lu]atareee</li></ul><p>TODO:</p><ul><li>[L3HCTF 2021]idaaaaaaaa</li></ul><a id="more"></a><h1 id="N1CTF-babyrust"><a href="#N1CTF-babyrust" class="headerlink" title="[N1CTF]babyrust"></a>[N1CTF]babyrust</h1><p>题目直接给了Rust源码，之前没有见过，现查文档学习</p><p>首先main函数里只是调用了一个 <code>check!</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = check!(@s <span class="comment">/*your answer*/</span>);</span><br></pre></td></tr></table></figure><p><code>main</code> 上面就是 <code>check</code> 的实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> check &#123;</span><br><span class="line">    (@s n1ctf&#123;$Never:tt&#125;) =&gt; &#123;</span><br><span class="line">        check!(<span class="built_in">stringify!</span>($Never))</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p><code>macro_rules!</code> 是个宏定义，里面的 <code>@s</code>，<code>@e</code> 应该是类似字符串匹配的东西</p><p>一开始的 <code>(@s n1ctf&#123;$Never:tt&#125;)</code> 就把flag中去除 <code>n1ctf&#123;&#125;</code> 的部分存到了 <code>$Never</code> 变量中，<code>stringify!</code> 将其转换为字符串常量</p><blockquote><p><code>stringify!</code> 为 Rust 内置宏。其接收一个 Rust 表达式，如 1 + 2 ， 然后在编译时将表达式转换为一个字符串常量，如 “1 + 2” 。</p></blockquote><p>接下来的宏定义有很多类似这个的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(@e ($Never:expr,$Gonna:expr,$Give:expr); (Never gonna give you up $($code:tt)*)) =&gt; &#123;</span><br><span class="line">    $Give += <span class="literal">true</span> <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">    check!(@e ($Never,$Gonna,$Give); ($($code)*));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>理解一下大概就是根据传入的 <code>code</code> 字符串开头是否为 <code>Never gonna give you up</code>，来判断是否进入这个定义，所以判断是一个根据字符串内容实现的Rust的简单vm，指令就是对 <code>$Never, $Gone, $Give</code>三个变量进行变化</p><p>为了快速分析，直接在各个指令上加个输出，然后编译运行，会发现整体逻辑大概就是：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$Gonna = $Never[$Give]; <span class="comment">// 将当前位置数据取出</span></span><br><span class="line">$Gonna += <span class="literal">true</span> <span class="keyword">as</span> <span class="built_in">u8</span>;   <span class="comment">// 每次加1，执行多次</span></span><br><span class="line">$Gonna -= <span class="literal">true</span> <span class="keyword">as</span> <span class="built_in">u8</span>;   <span class="comment">// 每次减1，执行多次</span></span><br><span class="line">$Never[$Give] = $Gonna; <span class="comment">// 将计算结果存回去</span></span><br><span class="line">$Give += <span class="literal">true</span> <span class="keyword">as</span> <span class="built_in">usize</span>; <span class="comment">// index + 1</span></span><br></pre></td></tr></table></figure><p>于是修改代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![recursion_limit=<span class="meta-string">&quot;8192&quot;</span>]</span>   <span class="comment">// 添加在开头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏定义如下两个定义添加输出，可以打印出明文和密文</span></span><br><span class="line">    (@e ($Never:expr,$Gonna:expr,$Give:expr); (Never gonna say goodbye $($code:tt)*)) =&gt; &#123;</span><br><span class="line">        $Gonna = $Never[$Give];</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Gonna = Never[Give: &#123;&#125;]: &#123;&#125;&quot;</span>, $Give, $Never[$Give]);</span><br><span class="line">        check!(@e ($Never,$Gonna,$Give); ($($code)*));</span><br><span class="line">    &#125;;</span><br><span class="line">    (@e ($Never:expr,$Gonna:expr,$Give:expr); (Never gonna tell a lie and hurt you $($code:tt)*)) =&gt; &#123;</span><br><span class="line">        $Never[$Give] = $Gonna;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Never[Give: &#123;&#125;] = Gonna: &#123;&#125;&quot;</span>, $Give, $Gonna);</span><br><span class="line">        check!(@e ($Never,$Gonna,$Give); ($($code)*));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随便设置一个容易计算的明文</span></span><br><span class="line"><span class="keyword">let</span> result = check!(@s n1ctf&#123;<span class="number">00000000000000000000000000000000</span>&#125;<span class="comment">/*your answer*/</span>);</span><br></pre></td></tr></table></figure><p>加密只有加减法，所以偏移始终相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cipher = [</span><br><span class="line">    <span class="number">148</span>, <span class="number">59</span>, <span class="number">143</span>, <span class="number">112</span>, <span class="number">121</span>, <span class="number">186</span>, <span class="number">106</span>, <span class="number">133</span>, <span class="number">55</span>, <span class="number">90</span>, <span class="number">164</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">121</span>, <span class="number">174</span>, <span class="number">147</span>, </span><br><span class="line">    <span class="number">148</span>, <span class="number">167</span>, <span class="number">99</span>, <span class="number">86</span>, <span class="number">81</span>, <span class="number">161</span>, <span class="number">151</span>, <span class="number">149</span>, <span class="number">132</span>, <span class="number">56</span>, <span class="number">88</span>, <span class="number">188</span>, <span class="number">141</span>, <span class="number">127</span>, <span class="number">151</span>, <span class="number">63</span></span><br><span class="line">]</span><br><span class="line">fake_cipher = [</span><br><span class="line">    <span class="number">131</span>, <span class="number">53</span>, <span class="number">124</span>, <span class="number">109</span>, <span class="number">118</span>, <span class="number">165</span>, <span class="number">89</span>, <span class="number">131</span>, <span class="number">50</span>, <span class="number">83</span>, <span class="number">163</span>, <span class="number">149</span>, <span class="number">165</span>, <span class="number">104</span>, <span class="number">153</span>, <span class="number">145</span>, </span><br><span class="line">    <span class="number">142</span>, <span class="number">149</span>, <span class="number">77</span>, <span class="number">69</span>, <span class="number">60</span>, <span class="number">154</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">115</span>, <span class="number">54</span>, <span class="number">69</span>, <span class="number">168</span>, <span class="number">133</span>, <span class="number">105</span>, <span class="number">146</span>, <span class="number">59</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> c, f <span class="keyword">in</span> <span class="built_in">zip</span>(cipher, fake_cipher):</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>(c - f + <span class="number">48</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># A6C33EA2571A2AE26BFAE7BEA2CD8F54</span></span><br></pre></td></tr></table></figure><h1 id="N1CTF-Py"><a href="#N1CTF-Py" class="headerlink" title="[N1CTF]Py"></a>[N1CTF]Py</h1><p>首先解包elf，能在目录下得到两个pyc</p><p>修改文件头，<code>0a5n.py</code> 为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">from</span> var <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_format</span>(<span class="params">flag</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">28</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdef&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1 = L.c1(v1, v2, v3)</span><br><span class="line">v6 = L.c2(v1, v4, v5)</span><br><span class="line">k = <span class="built_in">input</span>(<span class="string">&#x27;flag:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> check_format(k) == <span class="literal">True</span>:</span><br><span class="line">    v2 = L.f3(k)</span><br><span class="line">    v3 = v2 - v6</span><br><span class="line">    <span class="keyword">if</span> v3.a2 == g1 <span class="keyword">and</span> v3.a3 == g2:</span><br><span class="line">        print(<span class="string">&#x27;Congratulations! n1ctf&#123;%s&#125;&#x27;</span> + k)</span><br></pre></td></tr></table></figure><p>L.py 中有乱码，还原字节码能得到两个exec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z &#x3D; &#39;&#39;.join([chr(i ^ 2) for i in z])</span><br><span class="line">exec(z)</span><br></pre></td></tr></table></figure><p>这里实际还原出来的是 <code>&lt;&lt;</code> 运算，根据z中的数据猜测实际为 <code>^</code></p><p>能得到一个smc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="number">0</span></span><br><span class="line">libc = ctypes.CDLL(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">_ptrace = libc.ptrace</span><br><span class="line">key=_ptrace(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">_memcpy = libc.memcpy</span><br><span class="line">key += <span class="number">1</span></span><br><span class="line">address=<span class="built_in">id</span>(f1.__code__.co_code)+<span class="built_in">bytes</span>.__basicsize__<span class="number">-1</span></span><br><span class="line">codes=<span class="built_in">list</span>(f1.__code__.co_code)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(codes)):codes[i]^=key</span><br><span class="line">codes=<span class="built_in">bytearray</span>(codes)</span><br><span class="line">buff=(ctypes.c_byte*<span class="built_in">len</span>(codes)).from_buffer(codes)</span><br><span class="line">_memcpy(ctypes.c_char_p(address),ctypes.cast(buff,ctypes.POINTER(ctypes.c_char)),ctypes.c_int(<span class="built_in">len</span>(codes)))</span><br></pre></td></tr></table></figure><p>手动patch一下pyc文件，uncompyle6反编译后自己修复一下变量名，发现很多函数的逻辑很奇怪，根据刚才异或运算被解释成了左移运算，题目中的vm可能对基础运算符的opcode进行了相互的调换</p><p>通过使用的参数和函数的形式，猜测应该是个ECC算法，对其进行还原（这里只猜到了opcode被替换，但没有想到去哪里查看新的opcode）</p><p>肉眼还原了一下运算：把 <code>&amp;</code> 换成 <code>|</code>， <code>|</code> 换成 <code>&lt;&lt;</code>，<code>&lt;&lt;</code> 换成 <code>^</code>，<code>^</code> 换成 <code>+</code>，<code>+</code> 换成 <code>%</code>，<code>%</code> 换成 <code>-</code>，<code>-</code> 换成 <code>*</code>，<code>**</code> 换成 <code>//</code>，<code>&gt;&gt;</code> 换成 <code>&amp;</code></p><p>0a5n.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> L</span><br><span class="line"><span class="keyword">from</span> var <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_format</span>(<span class="params">flag</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">28</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdef&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">v1 = L.c1(v1, v2, v3)</span><br><span class="line">v6 = L.c2(v1, v4, v5)</span><br><span class="line">k = <span class="built_in">input</span>(<span class="string">&#x27;flag:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> check_format(k) == <span class="literal">True</span>:</span><br><span class="line">    v2 = L.f3(k)</span><br><span class="line">    v3 = v2 * v6</span><br><span class="line">    <span class="keyword">if</span> v3.a2 == g1 <span class="keyword">and</span> v3.a3 == g2:</span><br><span class="line">        print(<span class="string">&#x27;Congratulations! n1ctf&#123;%s&#125;&#x27;</span> % k)</span><br></pre></td></tr></table></figure><p>L.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_mod</span>(<span class="params">b, p</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span> <span class="keyword">or</span> p &lt;= b:</span><br><span class="line">        b = b % p</span><br><span class="line">    c, d = b, p</span><br><span class="line">    uc, vc, ud, vd, temp = <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> c != <span class="number">0</span>:</span><br><span class="line">        temp = c</span><br><span class="line">        q, c, d = d // c, d % c, temp</span><br><span class="line">        uc, vc, ud, vd = ud - q * uc, vd - q * vc, uc, vc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> d == <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> ud &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> ud</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ud + p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leftmost_bit</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> x &gt; <span class="number">0</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> result &lt;= x:</span><br><span class="line">        result = <span class="number">2</span> * result</span><br><span class="line">    <span class="keyword">return</span> result // <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Curve</span>(<span class="params"><span class="built_in">object</span></span>):</span>  <span class="comment"># c1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, p, a, b</span>):</span></span><br><span class="line">        var4 = p</span><br><span class="line">        var4 ^= <span class="number">0x10000000000000000000000000000000000000000L</span></span><br><span class="line">        self.p = var4</span><br><span class="line">        var5 = a</span><br><span class="line">        var5 -= <span class="number">1</span></span><br><span class="line">        var5 //= <span class="number">2</span></span><br><span class="line">        self.a = var5</span><br><span class="line">        var6 = b</span><br><span class="line">        var6 //= <span class="number">2</span></span><br><span class="line">        var6 += <span class="number">1</span></span><br><span class="line">        self.b = var6</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">s1</span>(<span class="params">self, x, y</span>):</span>  <span class="comment"># 判断是否在曲线上</span></span><br><span class="line">        <span class="keyword">return</span> (y * y) - (x * x * x + self.a * x + self.b) % self.p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params"><span class="built_in">object</span></span>):</span>   <span class="comment"># c2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, curve: Curve, x, y, order=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.curve = curve</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.order = order</span><br><span class="line">        <span class="keyword">if</span> self.a1:</span><br><span class="line">            <span class="keyword">assert</span> self.a1.s1(x, y)</span><br><span class="line">        <span class="keyword">if</span> order:</span><br><span class="line">            <span class="keyword">assert</span> self * order == g1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.curve == other.curve <span class="keyword">and</span> self.x == other.x <span class="keyword">and</span> self.y == other.y:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> other == g1:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">if</span> self == g1:</span><br><span class="line">            <span class="keyword">return</span> other</span><br><span class="line">        <span class="keyword">assert</span> self.curve == other.curve</span><br><span class="line">        <span class="keyword">if</span> self.x == other.x:</span><br><span class="line">            <span class="keyword">if</span> (self.y + other.y) % self.curve.p == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> g1</span><br><span class="line">            <span class="keyword">return</span> self.s1()</span><br><span class="line">        p = self.curve.p</span><br><span class="line">        l = other.y % self.y - inv_mod(other.x % self.x, p) + p</span><br><span class="line">        x3 = (l * l - self.x - other.x) % p</span><br><span class="line">        y3 = (l * (self.x - x3) - self.y) % p</span><br><span class="line">        <span class="keyword">return</span> Point(self.curve, x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        e = other</span><br><span class="line">        <span class="keyword">if</span> self.order:</span><br><span class="line">            e = e + self.order</span><br><span class="line">        <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> g1</span><br><span class="line">        <span class="keyword">if</span> self == g1:</span><br><span class="line">            <span class="keyword">return</span> g1</span><br><span class="line">        e3 = <span class="number">3</span> * e</span><br><span class="line">        negative_self = Point(self.curve, self.x, -self.y, self.order)</span><br><span class="line">        i = leftmost_bit(e3) ** <span class="number">2</span></span><br><span class="line">        result = self</span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">1</span>:</span><br><span class="line">            result = result.s1()</span><br><span class="line">            <span class="keyword">if</span> e3 &amp; i != <span class="number">0</span> <span class="keyword">and</span> e &amp; i == <span class="number">0</span>:</span><br><span class="line">                result = result + self</span><br><span class="line">            <span class="keyword">if</span> e3 &amp; i == <span class="number">0</span> <span class="keyword">and</span> e &amp; i != <span class="number">0</span>:</span><br><span class="line">                result = result + negative_self</span><br><span class="line">            i = i // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self * other</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">s1</span>(<span class="params">self</span>):</span>   <span class="comment"># double函数</span></span><br><span class="line">        <span class="keyword">if</span> self == g1:</span><br><span class="line">            <span class="keyword">return</span> g1</span><br><span class="line">        p = self.curve.p <span class="comment"># 曲线的p</span></span><br><span class="line">        a = self.curve.a <span class="comment"># 曲线的a</span></span><br><span class="line">        l = (<span class="number">3</span> * self.x * self.x + a) * inv_mod(<span class="number">2</span> * self.y, p) % p   <span class="comment"># 加法的lambda</span></span><br><span class="line">        x3 = (l * l) - (<span class="number">2</span> * self.x) % p                            <span class="comment"># 加法的x_3</span></span><br><span class="line">        y3 = ((l * (self.x - x3)) - self.y) % p                    <span class="comment"># 加法的y_3</span></span><br><span class="line">        <span class="keyword">return</span> Point(self.curve, x3, y3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = Point(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)   <span class="comment"># g1是INFINITY</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">var0</span>):</span></span><br><span class="line">    var1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> var0[::<span class="number">-1</span>]:</span><br><span class="line">        var1 = (var1 &lt;&lt; <span class="number">4</span>) | <span class="built_in">int</span>(i, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> var1</span><br></pre></td></tr></table></figure><p>接下来只需要寻找 <code>from var import *</code> 中的 <code>var</code> 即可</p><p>根据pyinstxtractor.py的报错，发现 magic number 和 python3.5 差了1，于是找到报错的位置，将工具对 <code>MAGIC_NUMBER</code> 的检查去掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> pyc_magic != pycHeader:</span><br><span class="line">    print(<span class="string">&#x27;[!] Warning: This script is running in a different Python version than the one used to build the executable.&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;[!] Please run this script in Python&#123;0&#125; to prevent extraction errors during unmarshalling&#x27;</span>.<span class="built_in">format</span>(self.pyver))</span><br><span class="line">    print(<span class="string">&#x27;[!] Skipping pyz extraction&#x27;</span>)</span><br><span class="line">    <span class="comment"># return</span></span><br></pre></td></tr></table></figure><p>用python3.5进行解包，可以得到 <code>var.pyc.encrypt</code></p><p>手动解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;nu1lnu1lnu1lnu1l&#x27;</span></span><br><span class="line"></span><br><span class="line">obj = <span class="built_in">open</span>(<span class="string">&#x27;var.pyc.encrypted&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">cipher = tinyaes.AES(key.encode(), obj[:<span class="number">16</span>])</span><br><span class="line">obj = cipher.CTR_xcrypt_buffer(obj[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line">obj = zlib.decompress(obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;var.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(obj)</span><br></pre></td></tr></table></figure><p>得到ECC的曲线和点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffeffffac73</span></span><br><span class="line">a = <span class="number">0xfffffffffffffffffffffffffffffffeffffac71</span></span><br><span class="line">b = <span class="number">0x21</span></span><br><span class="line"></span><br><span class="line">Px = <span class="number">0xf6f8b692899e1b4c5c82580820c2c7cb5597e12e</span></span><br><span class="line">Py = <span class="number">0xafb7be2af28b649dab76337b42ee310119413529</span></span><br><span class="line"></span><br><span class="line">Qx = <span class="number">0x4945e0d8dc57e88d5949f84bf09943f572dbebb1</span></span><br><span class="line">Qy = <span class="number">0xb1bf040fe1939c7144341d3af61f36d63f47e272</span></span><br></pre></td></tr></table></figure><p>上网抄了个sage实现的Pohlig-Hellman进行求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffeffffac73</span></span><br><span class="line">a = <span class="number">0xfffffffffffffffffffffffffffffffeffffac71</span></span><br><span class="line">b = <span class="number">0x21</span></span><br><span class="line"></span><br><span class="line">P = (<span class="number">0xf6f8b692899e1b4c5c82580820c2c7cb5597e12e</span>, <span class="number">0xafb7be2af28b649dab76337b42ee310119413529</span>)</span><br><span class="line">Q = (<span class="number">0x4945e0d8dc57e88d5949f84bf09943f572dbebb1</span>, <span class="number">0xb1bf040fe1939c7144341d3af61f36d63f47e272</span>)</span><br><span class="line"></span><br><span class="line">F = FiniteField(p)</span><br><span class="line">E = EllipticCurve(F, [a, b])</span><br><span class="line">P = E.point(P)</span><br><span class="line">Q = E.point(Q)</span><br><span class="line"></span><br><span class="line">print(factor(P.order()))</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>^<span class="number">6</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">79</span>, <span class="number">4457</span>, <span class="number">40591</span>, <span class="number">585977563</span>, <span class="number">1460624777797</span>, <span class="number">5490618741917</span>]</span><br><span class="line"></span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">    t = <span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac)</span><br><span class="line">    dlog = discrete_log(t*Q,t*P, operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    print(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog))</span><br><span class="line"></span><br><span class="line">crt(dlogs, primes)</span><br></pre></td></tr></table></figure><p>得到的结果计算十六进制并反转就是最后的flag</p><p>赛后查看了一下官方的WP，发现opcode就在 <code>opcode.pyc</code> 里面，因为一开始没有解包出来 <code>opcode.pyc</code> 所以就没有想到这里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">opcode module - potentially shared between dis and other modules which</span></span><br><span class="line"><span class="string">operate on bytecodes (e.g. peephole optimizers).</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">__all__ = [</span><br><span class="line"> <span class="string">&#x27;cmp_op&#x27;</span>, <span class="string">&#x27;hasconst&#x27;</span>, <span class="string">&#x27;hasname&#x27;</span>, <span class="string">&#x27;hasjrel&#x27;</span>, <span class="string">&#x27;hasjabs&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;haslocal&#x27;</span>, <span class="string">&#x27;hascompare&#x27;</span>, <span class="string">&#x27;hasfree&#x27;</span>, <span class="string">&#x27;opname&#x27;</span>, <span class="string">&#x27;opmap&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;HAVE_ARGUMENT&#x27;</span>, <span class="string">&#x27;EXTENDED_ARG&#x27;</span>, <span class="string">&#x27;hasnargs&#x27;</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> _opcode <span class="keyword">import</span> stack_effect</span><br><span class="line">    __all__.append(<span class="string">&#x27;stack_effect&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cmp_op = (<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;=&#x27;</span>, <span class="string">&#x27;==&#x27;</span>, <span class="string">&#x27;!=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;=&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;not in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;is not&#x27;</span>, <span class="string">&#x27;exception match&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;BAD&#x27;</span>)</span><br><span class="line">hasconst = []</span><br><span class="line">hasname = []</span><br><span class="line">hasjrel = []</span><br><span class="line">hasjabs = []</span><br><span class="line">haslocal = []</span><br><span class="line">hascompare = []</span><br><span class="line">hasfree = []</span><br><span class="line">hasnargs = []</span><br><span class="line">opmap = &#123;&#125;</span><br><span class="line">opname = [</span><br><span class="line"> <span class="string">&#x27;&#x27;</span>] - <span class="number">256</span>  <span class="comment"># 这里也改了，应该是 *</span></span><br><span class="line"><span class="keyword">for</span> op <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    opname[op] = <span class="string">&#x27;&lt;%r&gt;&#x27;</span> + (op,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> op</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">def_op</span>(<span class="params">name, op</span>):</span></span><br><span class="line">    opname[op] = name</span><br><span class="line">    opmap[name] = op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_op</span>(<span class="params">name, op</span>):</span></span><br><span class="line">    def_op(name, op)</span><br><span class="line">    hasname.append(op)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jrel_op</span>(<span class="params">name, op</span>):</span></span><br><span class="line">    def_op(name, op)</span><br><span class="line">    hasjrel.append(op)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jabs_op</span>(<span class="params">name, op</span>):</span></span><br><span class="line">    def_op(name, op)</span><br><span class="line">    hasjabs.append(op)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def_op(<span class="string">&#x27;POP_TOP&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">def_op(<span class="string">&#x27;ROT_TWO&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">def_op(<span class="string">&#x27;ROT_THREE&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">def_op(<span class="string">&#x27;DUP_TOP&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">def_op(<span class="string">&#x27;DUP_TOP_TWO&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">def_op(<span class="string">&#x27;NOP&#x27;</span>, <span class="number">9</span>)</span><br><span class="line">def_op(<span class="string">&#x27;UNARY_POSITIVE&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">def_op(<span class="string">&#x27;UNARY_NEGATIVE&#x27;</span>, <span class="number">11</span>)</span><br><span class="line">def_op(<span class="string">&#x27;UNARY_NOT&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">def_op(<span class="string">&#x27;UNARY_INVERT&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BINARY_MATRIX_MULTIPLY&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_MATRIX_MULTIPLY&#x27;</span>, <span class="number">17</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BINARY_POWER&#x27;</span>, <span class="number">26</span>)              <span class="comment">#define BINARY_FLOOR_DIVIDE      26</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_MULTIPLY&#x27;</span>, <span class="number">24</span>)           <span class="comment">#define BINARY_SUBTRACT          24</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_MODULO&#x27;</span>, <span class="number">23</span>)             <span class="comment">#define BINARY_ADD               23</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_ADD&#x27;</span>, <span class="number">65</span>)                <span class="comment">#define BINARY_XOR               65</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_SUBTRACT&#x27;</span>, <span class="number">22</span>)           <span class="comment">#define BINARY_MODULO            22</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_SUBSCR&#x27;</span>, <span class="number">25</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BINARY_FLOOR_DIVIDE&#x27;</span>, <span class="number">19</span>)       <span class="comment">#define BINARY_POWER             19</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_TRUE_DIVIDE&#x27;</span>, <span class="number">20</span>)        <span class="comment">#define BINARY_MULTIPLY          20</span></span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_FLOOR_DIVIDE&#x27;</span>, <span class="number">28</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_TRUE_DIVIDE&#x27;</span>, <span class="number">29</span>)</span><br><span class="line">def_op(<span class="string">&#x27;GET_AITER&#x27;</span>, <span class="number">50</span>)</span><br><span class="line">def_op(<span class="string">&#x27;GET_ANEXT&#x27;</span>, <span class="number">51</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BEFORE_ASYNC_WITH&#x27;</span>, <span class="number">52</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_ADD&#x27;</span>, <span class="number">55</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_SUBTRACT&#x27;</span>, <span class="number">56</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_MULTIPLY&#x27;</span>, <span class="number">57</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_MODULO&#x27;</span>, <span class="number">59</span>)</span><br><span class="line">def_op(<span class="string">&#x27;STORE_SUBSCR&#x27;</span>, <span class="number">60</span>)</span><br><span class="line">def_op(<span class="string">&#x27;DELETE_SUBSCR&#x27;</span>, <span class="number">61</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BINARY_LSHIFT&#x27;</span>, <span class="number">66</span>)             <span class="comment">#define BINARY_OR                66</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_RSHIFT&#x27;</span>, <span class="number">27</span>)             <span class="comment">#define BINARY_TRUE_DIVIDE       27</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_AND&#x27;</span>, <span class="number">63</span>)                <span class="comment">#define BINARY_RSHIFT            63</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_XOR&#x27;</span>, <span class="number">62</span>)                <span class="comment">#define BINARY_LSHIFT            62</span></span><br><span class="line">def_op(<span class="string">&#x27;BINARY_OR&#x27;</span>, <span class="number">64</span>)                 <span class="comment">#define BINARY_AND               64</span></span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_POWER&#x27;</span>, <span class="number">67</span>)</span><br><span class="line">def_op(<span class="string">&#x27;GET_ITER&#x27;</span>, <span class="number">68</span>)</span><br><span class="line">def_op(<span class="string">&#x27;GET_YIELD_FROM_ITER&#x27;</span>, <span class="number">69</span>)</span><br><span class="line">def_op(<span class="string">&#x27;PRINT_EXPR&#x27;</span>, <span class="number">70</span>)</span><br><span class="line">def_op(<span class="string">&#x27;LOAD_BUILD_CLASS&#x27;</span>, <span class="number">71</span>)</span><br><span class="line">def_op(<span class="string">&#x27;YIELD_FROM&#x27;</span>, <span class="number">72</span>)</span><br><span class="line">def_op(<span class="string">&#x27;GET_AWAITABLE&#x27;</span>, <span class="number">73</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_LSHIFT&#x27;</span>, <span class="number">75</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_RSHIFT&#x27;</span>, <span class="number">76</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_AND&#x27;</span>, <span class="number">77</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_XOR&#x27;</span>, <span class="number">78</span>)</span><br><span class="line">def_op(<span class="string">&#x27;INPLACE_OR&#x27;</span>, <span class="number">79</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BREAK_LOOP&#x27;</span>, <span class="number">80</span>)</span><br><span class="line">def_op(<span class="string">&#x27;WITH_CLEANUP_START&#x27;</span>, <span class="number">81</span>)</span><br><span class="line">def_op(<span class="string">&#x27;WITH_CLEANUP_FINISH&#x27;</span>, <span class="number">82</span>)</span><br><span class="line">def_op(<span class="string">&#x27;RETURN_VALUE&#x27;</span>, <span class="number">83</span>)</span><br><span class="line">def_op(<span class="string">&#x27;IMPORT_STAR&#x27;</span>, <span class="number">84</span>)</span><br><span class="line">def_op(<span class="string">&#x27;YIELD_VALUE&#x27;</span>, <span class="number">86</span>)</span><br><span class="line">def_op(<span class="string">&#x27;POP_BLOCK&#x27;</span>, <span class="number">87</span>)</span><br><span class="line">def_op(<span class="string">&#x27;END_FINALLY&#x27;</span>, <span class="number">88</span>)</span><br><span class="line">def_op(<span class="string">&#x27;POP_EXCEPT&#x27;</span>, <span class="number">89</span>)</span><br><span class="line">HAVE_ARGUMENT = <span class="number">90</span></span><br><span class="line">name_op(<span class="string">&#x27;STORE_NAME&#x27;</span>, <span class="number">90</span>)</span><br><span class="line">name_op(<span class="string">&#x27;DELETE_NAME&#x27;</span>, <span class="number">91</span>)</span><br><span class="line">def_op(<span class="string">&#x27;UNPACK_SEQUENCE&#x27;</span>, <span class="number">92</span>)</span><br><span class="line">jrel_op(<span class="string">&#x27;FOR_ITER&#x27;</span>, <span class="number">93</span>)</span><br><span class="line">def_op(<span class="string">&#x27;UNPACK_EX&#x27;</span>, <span class="number">94</span>)</span><br><span class="line">name_op(<span class="string">&#x27;STORE_ATTR&#x27;</span>, <span class="number">95</span>)</span><br><span class="line">name_op(<span class="string">&#x27;DELETE_ATTR&#x27;</span>, <span class="number">96</span>)</span><br><span class="line">name_op(<span class="string">&#x27;STORE_GLOBAL&#x27;</span>, <span class="number">97</span>)</span><br><span class="line">name_op(<span class="string">&#x27;DELETE_GLOBAL&#x27;</span>, <span class="number">98</span>)</span><br><span class="line">def_op(<span class="string">&#x27;LOAD_CONST&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">hasconst.append(<span class="number">100</span>)</span><br><span class="line">name_op(<span class="string">&#x27;LOAD_NAME&#x27;</span>, <span class="number">101</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_TUPLE&#x27;</span>, <span class="number">102</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_LIST&#x27;</span>, <span class="number">103</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_SET&#x27;</span>, <span class="number">104</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_MAP&#x27;</span>, <span class="number">105</span>)</span><br><span class="line">name_op(<span class="string">&#x27;LOAD_ATTR&#x27;</span>, <span class="number">106</span>)</span><br><span class="line">def_op(<span class="string">&#x27;COMPARE_OP&#x27;</span>, <span class="number">107</span>)</span><br><span class="line">hascompare.append(<span class="number">107</span>)</span><br><span class="line">name_op(<span class="string">&#x27;IMPORT_NAME&#x27;</span>, <span class="number">108</span>)</span><br><span class="line">name_op(<span class="string">&#x27;IMPORT_FROM&#x27;</span>, <span class="number">109</span>)</span><br><span class="line">jrel_op(<span class="string">&#x27;JUMP_FORWARD&#x27;</span>, <span class="number">110</span>)</span><br><span class="line">jabs_op(<span class="string">&#x27;JUMP_IF_FALSE_OR_POP&#x27;</span>, <span class="number">112</span>)</span><br><span class="line">jabs_op(<span class="string">&#x27;JUMP_IF_TRUE_OR_POP&#x27;</span>, <span class="number">111</span>)</span><br><span class="line">jabs_op(<span class="string">&#x27;JUMP_ABSOLUTE&#x27;</span>, <span class="number">113</span>)</span><br><span class="line">jabs_op(<span class="string">&#x27;POP_JUMP_IF_FALSE&#x27;</span>, <span class="number">114</span>)</span><br><span class="line">jabs_op(<span class="string">&#x27;POP_JUMP_IF_TRUE&#x27;</span>, <span class="number">115</span>)</span><br><span class="line">name_op(<span class="string">&#x27;LOAD_GLOBAL&#x27;</span>, <span class="number">116</span>)</span><br><span class="line">jabs_op(<span class="string">&#x27;CONTINUE_LOOP&#x27;</span>, <span class="number">119</span>)</span><br><span class="line">jrel_op(<span class="string">&#x27;SETUP_LOOP&#x27;</span>, <span class="number">120</span>)</span><br><span class="line">jrel_op(<span class="string">&#x27;SETUP_EXCEPT&#x27;</span>, <span class="number">121</span>)</span><br><span class="line">jrel_op(<span class="string">&#x27;SETUP_FINALLY&#x27;</span>, <span class="number">122</span>)</span><br><span class="line">def_op(<span class="string">&#x27;LOAD_FAST&#x27;</span>, <span class="number">124</span>)</span><br><span class="line">haslocal.append(<span class="number">124</span>)</span><br><span class="line">def_op(<span class="string">&#x27;STORE_FAST&#x27;</span>, <span class="number">125</span>)</span><br><span class="line">haslocal.append(<span class="number">125</span>)</span><br><span class="line">def_op(<span class="string">&#x27;DELETE_FAST&#x27;</span>, <span class="number">126</span>)</span><br><span class="line">haslocal.append(<span class="number">126</span>)</span><br><span class="line">def_op(<span class="string">&#x27;RAISE_VARARGS&#x27;</span>, <span class="number">130</span>)</span><br><span class="line">def_op(<span class="string">&#x27;CALL_FUNCTION&#x27;</span>, <span class="number">131</span>)</span><br><span class="line">hasnargs.append(<span class="number">131</span>)</span><br><span class="line">def_op(<span class="string">&#x27;MAKE_FUNCTION&#x27;</span>, <span class="number">132</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_SLICE&#x27;</span>, <span class="number">133</span>)</span><br><span class="line">def_op(<span class="string">&#x27;MAKE_CLOSURE&#x27;</span>, <span class="number">134</span>)</span><br><span class="line">def_op(<span class="string">&#x27;LOAD_CLOSURE&#x27;</span>, <span class="number">135</span>)</span><br><span class="line">hasfree.append(<span class="number">135</span>)</span><br><span class="line">def_op(<span class="string">&#x27;LOAD_DEREF&#x27;</span>, <span class="number">136</span>)</span><br><span class="line">hasfree.append(<span class="number">136</span>)</span><br><span class="line">def_op(<span class="string">&#x27;STORE_DEREF&#x27;</span>, <span class="number">137</span>)</span><br><span class="line">hasfree.append(<span class="number">137</span>)</span><br><span class="line">def_op(<span class="string">&#x27;DELETE_DEREF&#x27;</span>, <span class="number">138</span>)</span><br><span class="line">hasfree.append(<span class="number">138</span>)</span><br><span class="line">def_op(<span class="string">&#x27;CALL_FUNCTION_VAR&#x27;</span>, <span class="number">140</span>)</span><br><span class="line">hasnargs.append(<span class="number">140</span>)</span><br><span class="line">def_op(<span class="string">&#x27;CALL_FUNCTION_KW&#x27;</span>, <span class="number">141</span>)</span><br><span class="line">hasnargs.append(<span class="number">141</span>)</span><br><span class="line">def_op(<span class="string">&#x27;CALL_FUNCTION_VAR_KW&#x27;</span>, <span class="number">142</span>)</span><br><span class="line">hasnargs.append(<span class="number">142</span>)</span><br><span class="line">jrel_op(<span class="string">&#x27;SETUP_WITH&#x27;</span>, <span class="number">143</span>)</span><br><span class="line">def_op(<span class="string">&#x27;LIST_APPEND&#x27;</span>, <span class="number">145</span>)</span><br><span class="line">def_op(<span class="string">&#x27;SET_ADD&#x27;</span>, <span class="number">146</span>)</span><br><span class="line">def_op(<span class="string">&#x27;MAP_ADD&#x27;</span>, <span class="number">147</span>)</span><br><span class="line">def_op(<span class="string">&#x27;LOAD_CLASSDEREF&#x27;</span>, <span class="number">148</span>)</span><br><span class="line">hasfree.append(<span class="number">148</span>)</span><br><span class="line">jrel_op(<span class="string">&#x27;SETUP_ASYNC_WITH&#x27;</span>, <span class="number">154</span>)</span><br><span class="line">def_op(<span class="string">&#x27;EXTENDED_ARG&#x27;</span>, <span class="number">144</span>)</span><br><span class="line">EXTENDED_ARG = <span class="number">144</span></span><br><span class="line">def_op(<span class="string">&#x27;BUILD_LIST_UNPACK&#x27;</span>, <span class="number">149</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_MAP_UNPACK&#x27;</span>, <span class="number">150</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_MAP_UNPACK_WITH_CALL&#x27;</span>, <span class="number">151</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_TUPLE_UNPACK&#x27;</span>, <span class="number">152</span>)</span><br><span class="line">def_op(<span class="string">&#x27;BUILD_SET_UNPACK&#x27;</span>, <span class="number">153</span>)</span><br><span class="line"><span class="keyword">del</span> def_op</span><br><span class="line"><span class="keyword">del</span> name_op</span><br><span class="line"><span class="keyword">del</span> jrel_op</span><br><span class="line"><span class="keyword">del</span> jabs_op</span><br></pre></td></tr></table></figure><p>这下就很舒服了（如果全都改乱了，就得写个脚本全改回去了，不过这样的话这个程序是不是也看不懂了）</p><h1 id="L3HCTF-2021-double-joy"><a href="#L3HCTF-2021-double-joy" class="headerlink" title="[L3HCTF 2021]double-joy"></a>[L3HCTF 2021]double-joy</h1><p>恢复jmp表，发现是个vm，写一下反汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">opcode = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len_op:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">590</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    cur_op = opcode[i]</span><br><span class="line">    <span class="keyword">if</span> cur_op == <span class="number">0</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] += memory[<span class="subst">&#123;index&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">1</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] = memory[<span class="subst">&#123;index&#125;</span>] - memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">2</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] *= memory[<span class="subst">&#123;index&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">3</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] = memory[<span class="subst">&#123;index&#125;</span>] / memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">4</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] %= memory[<span class="subst">&#123;index&#125;</span>] % memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">5</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] &amp;= memory[<span class="subst">&#123;index&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">6</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] |= memory[<span class="subst">&#123;index&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">7</span>:</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>] ^= memory[<span class="subst">&#123;index&#125;</span>]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[memory[<span class="subst">&#123;index<span class="number">-2</span>&#125;</span>]] = memory[<span class="subst">&#123;index<span class="number">-1</span>&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="comment"># print (&quot;%04x:  &quot; % i, f&quot;index -= 2&quot;)</span></span><br><span class="line">        index = index - <span class="number">2</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>] = memory[memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>]]&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">10</span>:    <span class="comment">#和case 11的情况一样</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>] = (1 if memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>] == 0 else 0)&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">11</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>] = (1 if memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>] &lt; 0 else 0)&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">12</span>:    <span class="comment">#这个再仔细看看，不确定性有点高，脑袋有点糊</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>], memory[<span class="subst">&#123;index - <span class="number">2</span>&#125;</span>] = memory[<span class="subst">&#123;index - <span class="number">2</span>&#125;</span>], memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>]&quot;</span>)        </span><br><span class="line">        i += <span class="number">1</span>    </span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">13</span>:</span><br><span class="line">        print(<span class="string">&quot;%04x:  &quot;</span> % i,  <span class="string">&quot;index -= 1      # index = &#123;index&#125;&quot;</span>)</span><br><span class="line">        index -= <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span>    <span class="keyword">elif</span> cur_op == <span class="number">14</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;memory[<span class="subst">&#123;index&#125;</span>] = <span class="subst">&#123;<span class="built_in">int</span>.from_bytes(opcode[i + <span class="number">1</span>: i + <span class="number">5</span>], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)&#125;</span>&quot;</span>)        <span class="comment"># print (&quot;%04x:  &quot; % i, &quot;i += 5&quot;)</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        i += <span class="number">5</span>    </span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">15</span>:</span><br><span class="line">        print(<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;i = <span class="subst">&#123;<span class="built_in">hex</span>((<span class="built_in">int</span>.from_bytes(opcode[i + <span class="number">1</span>: i + <span class="number">5</span>], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>) + i + <span class="number">5</span>) &amp; <span class="number">0xffffffff</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># i = int.from_bytes(opcode[i + 1: i + 5], &#x27;little&#x27;, signed=False) + i + 5</span></span><br><span class="line">        i += <span class="number">5</span>    <span class="keyword">elif</span> cur_op == <span class="number">16</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;i += 5 + (<span class="subst">&#123;<span class="built_in">int</span>.from_bytes(opcode[i + <span class="number">1</span>: i + <span class="number">5</span>], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)&#125;</span> if memory[<span class="subst">&#123;index - <span class="number">1</span>&#125;</span>] != 0 else 0)&quot;</span>)</span><br><span class="line">        index = index - <span class="number">1</span></span><br><span class="line">        i += <span class="number">5</span>    <span class="keyword">elif</span> cur_op == <span class="number">17</span>:</span><br><span class="line">        print(<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;index += <span class="subst">&#123;<span class="built_in">int</span>.from_bytes(opcode[i + <span class="number">1</span>: i + <span class="number">5</span>], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># print(&quot;%04x i += 5&quot; % i)</span></span><br><span class="line">        index += <span class="built_in">int</span>.from_bytes(opcode[i + <span class="number">1</span>: i + <span class="number">5</span>], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">        i += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> cur_op == <span class="number">18</span>:</span><br><span class="line">        print(<span class="string">&quot;%04x:  &quot;</span> % i, <span class="string">f&quot;return (memory[<span class="subst">&#123;<span class="built_in">int</span>.from_bytes(opcode[i + <span class="number">1</span>: i + <span class="number">5</span>], <span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)&#125;</span>])&quot;</span>)</span><br><span class="line">        i += <span class="number">5</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Error @ %04x&quot;</span> % i)</span><br></pre></td></tr></table></figure><p>动调发现，总共有两个vm，flag的内存被共享，其他的状态分别保留，两个vm依次执行（能看到中间某个循环末尾有个return）分别是xtea加密和tea加密，相当于同时进行xtea和tea加密了写个求解脚本</p><p>需要注意是程序中为int类型，运算需要和题目中的一致（不能用位运算）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;     </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decipher</span><span class="params">(<span class="keyword">int32_t</span>* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> xtea_k[<span class="number">4</span>] = &#123;<span class="number">18764</span>, <span class="number">28534</span>, <span class="number">25888</span>, <span class="number">17237</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> v0, v1, xtea_delta=<span class="number">123456789</span>, xtea_sum=<span class="number">987654321</span> + xtea_delta * <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> tea_k[<span class="number">4</span>] = &#123;<span class="number">21332</span>, <span class="number">20301</span>, <span class="number">8308</span>, <span class="number">25953</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> tea_delta=<span class="number">22334455</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">int</span> tea_sum=<span class="number">1592647341</span> + tea_delta * <span class="number">100</span>;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">8</span>; j &gt;= <span class="number">0</span>; j -= <span class="number">2</span>)&#123;</span><br><span class="line">        v0 = v[j]; v1 = v[j + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            v1 -= ((v0&lt;&lt;<span class="number">4</span>) + tea_k[<span class="number">2</span>]) ^ (v0 + tea_sum) ^ ((v0 / <span class="number">32</span>) + tea_k[<span class="number">3</span>]);</span><br><span class="line">            v0 -= ((v1&lt;&lt;<span class="number">4</span>) + tea_k[<span class="number">0</span>]) ^ (v1 + tea_sum) ^ ((v1 / <span class="number">32</span>) + tea_k[<span class="number">1</span>]);</span><br><span class="line">            tea_sum -= tea_delta;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">19</span> &amp;&amp; j == <span class="number">0</span>)&#123;</span><br><span class="line">                v0 ^= <span class="number">0x1010101</span>;</span><br><span class="line">                v1 ^= <span class="number">0x1010101</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 / <span class="number">32</span>)) + v0) ^ (xtea_sum + xtea_k[(xtea_sum / <span class="number">2048</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">            xtea_sum -= xtea_delta;</span><br><span class="line">            v0 -= (((v1 *<span class="number">16</span> ) ^ (v1 / <span class="number">32</span>)) + v1) ^ (xtea_sum + xtea_k[xtea_sum &amp; <span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">19</span> &amp;&amp; j == <span class="number">0</span>)&#123;</span><br><span class="line">                v0 ^= <span class="number">0x1010101</span>;</span><br><span class="line">                v1 ^= <span class="number">0x1010101</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">        v[j]=v0; v[j + <span class="number">1</span>]=v1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v[<span class="number">10</span>] = &#123;<span class="number">0xAEE0FAE8</span>, <span class="number">0xFC3E4101</span>, <span class="number">0x167CAD92</span>, <span class="number">0x51EA6CBE</span>, <span class="number">0x242A0100</span>, <span class="number">0x1511A1B</span>, <span class="number">0x514D6694</span>, <span class="number">0x2F5FBFEB</span>, <span class="number">0x46D36398</span>, <span class="number">0x79EEE3F0</span>&#125;;</span><br><span class="line">    decipher(v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i+=<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x %x\n&quot;</span>,v[i],v[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0x6c427530, 0x4d765f65, 0x7431575f, 0x4f645f68, 0x65496275, 0x4145545f, 0x7d] </span></span><br><span class="line"><span class="comment">// L3HCTF&#123;D0uBle_vM_W1th_dOubIe_TEA&#125; // 第一组失败了，猜测是flag头和D</span></span><br></pre></td></tr></table></figure><h1 id="L3HCTF-2021-Load"><a href="#L3HCTF-2021-Load" class="headerlink" title="[L3HCTF 2021]Load"></a>[L3HCTF 2021]Load</h1><p>这题使用了进程镂空技术（找时间研究室一下这一系列的技术），需要先把PE文件提取出来</p><p>动调进入镂空的函数，会发现一个对PE的比较，网上找可以找到MZ头（name字符串下面），dump下来即可</p><p>分析PE</p><p>首先提取了flag的中间部分，随后将其两两一组转化成16进制，共13字节</p><p><img data-src="1.png" alt=""></p><p>401070函数是将13字节拆成9和4字节分别存入src和v27，分别是3<em>3和2</em>2的矩阵</p><p>401370函数较大，且调用了一个递归函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v11 = mul_matrix_4012A0(v17, v6) * a1[v5];</span><br><span class="line"><span class="keyword">if</span> ( (v5 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  v4 -= v11;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  v4 += v11;</span><br></pre></td></tr></table></figure><p>分析发现函数计算递归后与第一行的一个数字相乘，并根据奇偶进行加法和减法，重写该函数并验证后发现是求解矩阵行列式</p><p>再分析401370函数时发现，函数使用了一个数字除以行列式，猜测是用来求解逆矩阵的</p><p>调用完401370后就是验证部分，只需要满足所有等式即可</p><p>使用在线网站求解逆矩阵</p><p><img data-src="2.png" alt=""></p><p><img data-src="3.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">-8</span>, <span class="number">18</span>, <span class="number">-9</span>, <span class="number">6</span>, <span class="number">-13</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">13</span>, <span class="number">-3</span>, <span class="number">-30</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;%02x&#x27;</span> % (f &amp; <span class="number">0xff</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># f812f706f306ff02ff0dfde207</span></span><br></pre></td></tr></table></figure><h1 id="hack-lu-pycoin"><a href="#hack-lu-pycoin" class="headerlink" title="[hack.lu]pycoin"></a>[hack.lu]pycoin</h1><p>先使用uncompyle6反编译，发现执行了一串marshal字节码</p><p>将该字节码输出到文件，然后根据题目给的pyc补全文件头</p><p>再次反编译发现有花指令，开头和中间各有一个 jump_forward，中间还有两个连续的 rot_tow</p><p>这里尝试了一下新的patch方法：将花指令全替换成nop，但该方法的问题在于只能使用pycdc进行反编译，并不支持uncompyle6</p><blockquote><p>个人感觉uncompyle6反编译效果更好，但适用的版本范围更窄，3.7及之前的版本较为合适<br>pycdc一直更新最新版本，但反编译效果较差，而且在细节上容易出问题，新版本只能使用pycdc，但最好结合pycdas的结果进行分析</p></blockquote><p>另一种传统的patch方法就行把opcode去掉，然后把所有jmp修改到正确位置</p><p>patch后的结果如下：</p><p><img data-src="pycoin-1.png" alt=""></p><p><img data-src="pycoin-2.png" alt=""></p><p>最后反编译的结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">k = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&#x27;please supply a valid key:&#x27;</span>)).encode()</span><br><span class="line">correct = <span class="built_in">len</span>(k) == <span class="number">16</span> <span class="keyword">and</span> k[<span class="number">0</span>] == <span class="number">102</span> <span class="keyword">and</span> k[<span class="number">1</span>] == k[<span class="number">0</span>] + <span class="number">6</span> <span class="keyword">and</span> k[<span class="number">2</span>] == k[<span class="number">1</span>] - k[<span class="number">0</span>] + <span class="number">91</span> <span class="keyword">and</span> k[<span class="number">3</span>] == <span class="number">103</span> <span class="keyword">and</span> k[<span class="number">4</span>] == k[<span class="number">11</span>] * <span class="number">3</span> - <span class="number">42</span> <span class="keyword">and</span> k[<span class="number">5</span>] == <span class="built_in">sum</span>(k) - <span class="number">1322</span> <span class="keyword">and</span> k[<span class="number">6</span>] + k[<span class="number">7</span>] + k[<span class="number">10</span>] == <span class="number">260</span> <span class="keyword">and</span> <span class="built_in">int</span>(<span class="built_in">chr</span>(k[<span class="number">7</span>]) * <span class="number">2</span>) + <span class="number">1</span> == k[<span class="number">9</span>] <span class="keyword">and</span> k[<span class="number">8</span>] % <span class="number">17</span> == <span class="number">16</span> <span class="keyword">and</span> k[<span class="number">9</span>] == k[<span class="number">8</span>] * <span class="number">2</span> <span class="keyword">and</span> md5(k[<span class="number">10</span>] * <span class="string">b&#x27;a&#x27;</span>).digest()[<span class="number">0</span>] - <span class="number">1</span> == k[<span class="number">3</span>] <span class="keyword">and</span> k[<span class="number">11</span>] == <span class="number">55</span> <span class="keyword">and</span> k[<span class="number">12</span>] == k[<span class="number">14</span>] / <span class="number">2</span> - <span class="number">2</span> <span class="keyword">and</span> k[<span class="number">13</span>] == k[<span class="number">10</span>] * k[<span class="number">8</span>] % <span class="number">32</span> * <span class="number">2</span> - <span class="number">1</span> <span class="keyword">and</span> k[<span class="number">14</span>] == (k[<span class="number">12</span>] ^ k[<span class="number">9</span>] ^ k[<span class="number">15</span>]) * <span class="number">3</span> - <span class="number">23</span> <span class="keyword">and</span> k[<span class="number">15</span>] == <span class="number">125</span></span><br><span class="line">print(<span class="string">f&quot;valid key! <span class="subst">&#123;k.decode()&#125;</span>&quot;</span> <span class="keyword">if</span> correct <span class="keyword">else</span> <span class="string">&#x27;invalid key :(&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后一个z3就完事（tm k[5]约束了个寂寞）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">k = [BitVec(<span class="string">&#x27;k%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">s.add(k[<span class="number">0</span>] == <span class="number">102</span>)</span><br><span class="line">s.add(k[<span class="number">1</span>] == k[<span class="number">0</span>] + <span class="number">6</span>)</span><br><span class="line">s.add(k[<span class="number">2</span>] == (k[<span class="number">1</span>] - k[<span class="number">0</span>]) + <span class="number">91</span>)</span><br><span class="line">s.add(k[<span class="number">3</span>] == <span class="number">103</span>)</span><br><span class="line">s.add(k[<span class="number">4</span>] == k[<span class="number">11</span>] * <span class="number">3</span> - <span class="number">42</span>)</span><br><span class="line">s.add(k[<span class="number">11</span>] == <span class="number">55</span>)</span><br><span class="line">s.add(k[<span class="number">10</span>] == <span class="number">101</span>)</span><br><span class="line">s.add(k[<span class="number">15</span>] == <span class="number">125</span>)</span><br><span class="line">s.add(k[<span class="number">5</span>] == <span class="built_in">sum</span>(k) - <span class="number">1322</span>)</span><br><span class="line">s.add(k[<span class="number">6</span>] + k[<span class="number">7</span>] + k[<span class="number">10</span>] == <span class="number">260</span>)</span><br><span class="line">s.add(k[<span class="number">7</span>] &gt; <span class="number">0x30</span>)</span><br><span class="line">s.add(k[<span class="number">7</span>] &lt; <span class="number">0x40</span>)</span><br><span class="line">s.add((k[<span class="number">7</span>] - <span class="number">0x30</span>) * <span class="number">11</span> + <span class="number">1</span> == k[<span class="number">9</span>])</span><br><span class="line">s.add(k[<span class="number">8</span>] % <span class="number">17</span> == <span class="number">16</span>)</span><br><span class="line">s.add(k[<span class="number">9</span>] == k[<span class="number">8</span>] * <span class="number">2</span>)</span><br><span class="line">s.add(k[<span class="number">12</span>] == k[<span class="number">14</span>] / <span class="number">2</span> - <span class="number">2</span>)</span><br><span class="line">s.add(k[<span class="number">13</span>] == (k[<span class="number">10</span>] * k[<span class="number">8</span>] % <span class="number">32</span>) * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">s.add(k[<span class="number">14</span>] == (k[<span class="number">12</span>] ^ k[<span class="number">9</span>] ^ k[<span class="number">15</span>]) * <span class="number">3</span> - <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check():</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">5</span>: <span class="comment"># 这个位置根本没有约束，最后官方直接给出来了</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(model[k[i]].as_long()), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;No result&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="hack-lu-atareee"><a href="#hack-lu-atareee" class="headerlink" title="[hack.lu]atareee"></a>[hack.lu]atareee</h1><p><code>atareee.atstate2</code> 是内存状态，对其进行binwalk，可以得到 <code>memory.bin</code> 和 <code>savestate.json</code> 文件</p><p>根据分析可以得知是 <code>6052</code> 架构，用Ghidra打开，根据题目中提示的 <code>@061A</code> 找到验证逻辑的地址</p><p><img data-src="./atareee1.png" alt=""></p><p>加密函数和验证函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FUN_529e</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  byte bVar1;</span><br><span class="line">  byte bVar2;</span><br><span class="line">  byte bVar3;</span><br><span class="line">  byte in_C;</span><br><span class="line">  </span><br><span class="line">  bVar3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    write_1(PORTA,bVar3);</span><br><span class="line">    bVar1 = read_1(PORTA);</span><br><span class="line">    <span class="keyword">if</span> ((bVar1 &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_50c2[bVar3] ^ BYTE_ARRAY_50c2[(byte)(bVar3 + <span class="number">1</span>)];</span><br><span class="line">      bVar2 = read_1(PORTA);</span><br><span class="line">      BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_5234[bVar3];</span><br><span class="line">      bVar1 = BYTE_ARRAY_5234[bVar3];</span><br><span class="line">      BYTE_ARRAY_5234[bVar3] = bVar1 &lt;&lt; <span class="number">1</span> | CARRY1(bVar2,BYTE_ARRAY_50c2[bVar3]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_50c2[bVar3] ^ BYTE_ARRAY_5219[(byte)(bVar3 - <span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">      bVar1 = BYTE_ARRAY_5234[bVar3];</span><br><span class="line">      BYTE_ARRAY_5234[bVar3] = bVar1 &lt;&lt; <span class="number">1</span> | in_C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">bool</span>)(bVar1 &gt;&gt; <span class="number">7</span>)) &#123;</span><br><span class="line">      BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_5234[bVar3] + <span class="string">&#x27;\x01&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bVar3 = bVar3 + <span class="number">1</span>;</span><br><span class="line">    in_C = <span class="number">0x19</span> &lt; bVar3;</span><br><span class="line">  &#125; <span class="keyword">while</span> (bVar3 != <span class="number">0x1a</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">undefined <span class="title">FUN_52e8</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  byte bVar1;</span><br><span class="line">  </span><br><span class="line">  bVar1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (BYTE_ARRAY_5200[bVar1] != BYTE_ARRAY_5234[bVar1]) &#123;</span><br><span class="line">      FUN_531d();</span><br><span class="line">      bVar1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        BYTE_ARRAY_509a[bVar1] = s__NICE_TRY,_MAYBE_NEXT_TIME_ITS_C_5276[bVar1];</span><br><span class="line">        bVar1 = bVar1 + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">while</span> (bVar1 != <span class="number">0x28</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bVar1 = bVar1 + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (bVar1 != <span class="number">0x1a</span>);</span><br><span class="line">  bVar1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    BYTE_ARRAY_509a[bVar1] = s__GOOD_JOB!_ENJOY_THOSE_REVERSING_524e[bVar1];</span><br><span class="line">    bVar1 = bVar1 + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (bVar1 != <span class="number">0x28</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>savestate.json</code> 的PC位置（EIP）即可进行动调，发现输入被存入 <code>50c2</code> 中，复现该函数并爆破即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">target = [</span><br><span class="line">    <span class="number">0x14</span>,  <span class="number">0x1E</span>,   <span class="number">0xC</span>,  <span class="number">0xE0</span>,</span><br><span class="line">    <span class="number">0x30</span>,  <span class="number">0x5C</span>,  <span class="number">0xCE</span>,  <span class="number">0xF0</span>,</span><br><span class="line">    <span class="number">0x36</span>,  <span class="number">0xAE</span>,  <span class="number">0xFC</span>,  <span class="number">0x39</span>,</span><br><span class="line">    <span class="number">0x1A</span>,  <span class="number">0x91</span>,  <span class="number">0xCE</span>,  <span class="number">0xB4</span>,</span><br><span class="line">    <span class="number">0xC4</span>,   <span class="number">0xE</span>,  <span class="number">0x18</span>,  <span class="number">0xF3</span>,</span><br><span class="line">    <span class="number">0xC8</span>,  <span class="number">0x8E</span>,   <span class="number">0xA</span>,  <span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0xF6</span>, <span class="number">0xbd</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array_50c2 = [</span><br><span class="line">    <span class="number">0xD9</span>,  <span class="number">0x50</span>,  <span class="number">0x48</span>,  <span class="number">0xB9</span>,</span><br><span class="line">    <span class="number">0xD8</span>,  <span class="number">0x50</span>,  <span class="number">0x48</span>,  <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0x46</span>,  <span class="number">0x54</span>,  <span class="number">0x43</span>,  <span class="number">0x44</span>,</span><br><span class="line">    <span class="number">0x45</span>,  <span class="number">0x49</span>,  <span class="number">0x50</span>,  <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0x52</span>,  <span class="number">0x53</span>,  <span class="number">0x4C</span>,  <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0x58</span>,  <span class="number">0x51</span>,  <span class="number">0xF3</span>,  <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0x8</span>,  <span class="number">0x51</span>, <span class="number">0x10</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array_5219 = [</span><br><span class="line">    <span class="number">0xBD</span>,  <span class="number">0x43</span>,  <span class="number">0x11</span>,  <span class="number">0x37</span>,</span><br><span class="line">    <span class="number">0xF2</span>,  <span class="number">0x69</span>,  <span class="number">0xAB</span>,  <span class="number">0x2C</span>,</span><br><span class="line">    <span class="number">0x99</span>,  <span class="number">0x13</span>,  <span class="number">0x12</span>,  <span class="number">0xD1</span>,</span><br><span class="line">    <span class="number">0x7E</span>,  <span class="number">0x9A</span>,  <span class="number">0x8F</span>,   <span class="number">0xE</span>,</span><br><span class="line">    <span class="number">0x92</span>,  <span class="number">0x37</span>,  <span class="number">0xF4</span>,  <span class="number">0xAA</span>,</span><br><span class="line">    <span class="number">0x4D</span>,  <span class="number">0x77</span>,   <span class="number">0x3</span>,  <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0xCA</span>,  <span class="number">0xFF</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array_5234 = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1a</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">in_C = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x19</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    in_C = <span class="number">1</span> <span class="keyword">if</span> (<span class="number">0x19</span> &lt; i + <span class="number">1</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x30</span>, <span class="number">0x60</span>):</span><br><span class="line">        array_50c2[i] = j</span><br><span class="line">        var1 = i</span><br><span class="line">        </span><br><span class="line">        var2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> var1 &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            array_5234[i] = array_50c2[i] ^ array_50c2[i + <span class="number">1</span>]</span><br><span class="line">            var2 = i</span><br><span class="line">            var1 = array_5234[i]</span><br><span class="line">            array_5234[i] = ((var1 &lt;&lt; <span class="number">1</span>) | ((array_50c2[i] + i) &gt;&gt; <span class="number">7</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            array_5234[i] = array_50c2[i] ^ array_5219[i]</span><br><span class="line">            var1 = array_5234[i]</span><br><span class="line">            array_5234[i] = ((var1 &lt;&lt; <span class="number">1</span>) | in_C) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> var1 &gt;&gt; <span class="number">7</span> != <span class="number">0</span>:</span><br><span class="line">            array_5234[i] = array_5234[i] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> array_5234[i] == target[i]:</span><br><span class="line">            <span class="built_in">print</span> (<span class="built_in">chr</span>(j), end= <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近有点懒，好久没有更新了，就决定把近期的一些题目一起放上来了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[N1CTF 2021]babyrust&lt;/li&gt;
&lt;li&gt;[N1CTF 2021]Py&lt;/li&gt;
&lt;li&gt;[L3HCTF 2021]double-joy&lt;/li&gt;
&lt;li&gt;[L3HCTF 2021]Load&lt;/li&gt;
&lt;li&gt;[hack.lu]pycoin&lt;/li&gt;
&lt;li&gt;[hack.lu]atareee&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[L3HCTF 2021]idaaaaaaaa&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="N1CTF" scheme="https://s0uthwood.github.io/tags/N1CTF/"/>
    
    <category term="L3HCTF" scheme="https://s0uthwood.github.io/tags/L3HCTF/"/>
    
    <category term="hack.lu" scheme="https://s0uthwood.github.io/tags/hack-lu/"/>
    
  </entry>
  
  <entry>
    <title>pbctf2021 RE writeups</title>
    <link href="https://s0uthwood.github.io/2021/10/11/pbctf2021-RE-writeups/"/>
    <id>https://s0uthwood.github.io/2021/10/11/pbctf2021-RE-writeups/</id>
    <published>2021-10-11T08:07:41.000Z</published>
    <updated>2021-10-12T06:45:41.801Z</updated>
    
    <content type="html"><![CDATA[<p>又是被队友带飞的一场比赛呢</p><ul><li>[RE]cosmo</li><li>[RE]BinaryTree</li><li>[RE]switchingitup</li></ul><a id="more"></a><h1 id="cosmo"><a href="#cosmo" class="headerlink" title="cosmo"></a>cosmo</h1><p>main函数在 <code>sub_403066</code></p><p>要求长度是38，简单看了一下加密逻辑，发现是两个字符一起加密并验证，还想用pintools试试，结果发现根本跑不起来</p><p>于是又开始了快乐的手写爆破，不过这个比较简单，动调一下就知道只用了最下面的几行加密逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> qword_40C000[<span class="number">20</span>] = &#123;</span><br><span class="line">    <span class="number">21233875l</span>l,</span><br><span class="line">    <span class="number">69468586l</span>l,</span><br><span class="line">    <span class="number">146735755l</span>l,</span><br><span class="line">    <span class="number">251265871l</span>l,</span><br><span class="line">    <span class="number">379651085l</span>l,</span><br><span class="line">    <span class="number">536872170l</span>l,</span><br><span class="line">    <span class="number">719455639l</span>l,</span><br><span class="line">    <span class="number">924911196l</span>l,</span><br><span class="line">    <span class="number">1158088491l</span>l,</span><br><span class="line">    <span class="number">1412368333l</span>l,</span><br><span class="line">    <span class="number">1695680674l</span>l,</span><br><span class="line">    <span class="number">2005272944l</span>l,</span><br><span class="line">    <span class="number">2341407284l</span>l,</span><br><span class="line">    <span class="number">2698316511l</span>l,</span><br><span class="line">    <span class="number">3076262773l</span>l,</span><br><span class="line">    <span class="number">3483634782l</span>l,</span><br><span class="line">    <span class="number">3913551105l</span>l,</span><br><span class="line">    <span class="number">72486322l</span>l,</span><br><span class="line">    <span class="number">548474478l</span>l,</span><br><span class="line">    <span class="number">0l</span>l</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> len, <span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v5 = len;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> v3 = qword_40C000[cur - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> v6 = v3 &gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">int</span> v7 = v3 &amp; <span class="number">0xffff</span>;</span><br><span class="line">    <span class="keyword">while</span>(v5)&#123;</span><br><span class="line">        v7 += *a;</span><br><span class="line">        v6 += v7;</span><br><span class="line">        --v5;</span><br><span class="line">        ++a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v7 &gt; <span class="number">0xFFF0</span>)</span><br><span class="line">        v7 -= <span class="number">0xFFF1</span>;</span><br><span class="line">    <span class="keyword">return</span> v7 | ((v6 % <span class="number">0xFFF1</span>) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_cnt</span><span class="params">(<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x20</span>; i &lt; <span class="number">0x80</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0x20</span>; j &lt; <span class="number">0x80</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> a[] = &#123;i, j&#125;;</span><br><span class="line">            <span class="keyword">if</span> (encrypt(a, <span class="number">2</span>, cnt) == qword_40C000[cnt])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, i, j);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pbctf&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">19</span>; i++)</span><br><span class="line">        test_cnt(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了找main函数之外也没有什么特别的</p><h1 id="BinaryTree"><a href="#BinaryTree" class="headerlink" title="BinaryTree"></a>BinaryTree</h1><p>这题逻辑还是比较清晰的，就是根据800bit的输入进行了800层SMC</p><p>每一层都会对寄存器进行一个加法，然后决定下一个SMC的结果，大概是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  jz Label</span><br><span class="line">  mov r8, [rdi + 0x____]    ; 具体寄存器忘了，随便写了个，中间一堆nop省略了</span><br><span class="line">  add r9, 0x__</span><br><span class="line">Label:</span><br><span class="line">  mov r8, [rdi + 0x____]</span><br><span class="line">  add r9, 0x__</span><br><span class="line">  jmp SMC</span><br></pre></td></tr></table></figure><p>最后一层就是对寄存器进行cmp，小于等于某个值就行</p><p>一开始还想着出题人仁慈一点，贪心就是最小（想直接用idapython自动跑），结果直接gg</p><p>队友对每一层的可能性进行了遍历，发现每一层最多有16种可能</p><p>于是这题就成了有向无环图求单源最短路径</p><p>求解代码可以分成三个部分：从SMC结果提取关键数据，建图，跑SPFA</p><p>其中SPFA是抄的，路径输出稍微修改一下就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0xfffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 16 * 800 + 5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cur_smc</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> bytecode[<span class="number">0x30</span>];</span><br><span class="line">    <span class="keyword">int</span> depth;</span><br><span class="line">    <span class="keyword">int</span> len[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">Cur_smc cur_smc_code[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> smc_xor_code[<span class="number">0xFFFFF</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> path;</span><br><span class="line">    Edge(<span class="keyword">int</span> to, <span class="keyword">int</span> len, <span class="keyword">int</span> path): to(to), len(len), path(path) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;Edge&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> dist[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FLAG_exist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">my_strncmp</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">analysis_next</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> direction)</span></span>&#123;</span><br><span class="line">    <span class="comment">// direction == 0 for bellow, direction == 1 for above</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur_smc_code[cur].bytecode[i] == <span class="string">&#x27;\x90&#x27;</span>)&#123;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125; <span class="comment">// pass &quot;nop&quot;</span></span><br><span class="line">    <span class="keyword">int</span> end_left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> index_xor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> START = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> END = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (cur_smc_code[cur].bytecode[i] == <span class="string">&#x27;\x74&#x27;</span>) <span class="comment">// always starts as &quot;jz label1&quot;</span></span><br><span class="line">        end_left = cur_smc_code[cur].bytecode[++i] + (++i);</span><br><span class="line">    <span class="keyword">if</span> (direction == <span class="number">1</span>)&#123;        <span class="comment">// if input bit is 1</span></span><br><span class="line">        START = <span class="number">0</span>;</span><br><span class="line">        END = end_left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="number">0</span>)&#123;  <span class="comment">// if input bit is 0</span></span><br><span class="line">        START = end_left;</span><br><span class="line">        END = <span class="number">0x20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = START; i &lt; END; ++i)&#123;</span><br><span class="line">        <span class="comment">// read &quot;add r9, xx&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (cur_smc_code[cur].bytecode[i] == <span class="string">&#x27;\x49&#x27;</span> &amp;&amp; cur_smc_code[cur].bytecode[i + <span class="number">1</span>] == <span class="string">&#x27;\x83&#x27;</span> &amp;&amp; cur_smc_code[cur].bytecode[i + <span class="number">2</span>] == <span class="string">&#x27;\xC1&#x27;</span>)</span><br><span class="line">            cur_smc_code[cur].len[direction] = cur_smc_code[cur].bytecode[i + <span class="number">3</span>];</span><br><span class="line">        <span class="comment">// read next key to SMC</span></span><br><span class="line">        <span class="keyword">if</span> (cur_smc_code[cur].bytecode[i] == <span class="string">&#x27;\x48&#x27;</span> &amp;&amp; cur_smc_code[cur].bytecode[i + <span class="number">1</span>] == <span class="string">&#x27;\x8D&#x27;</span> &amp;&amp; cur_smc_code[cur].bytecode[i + <span class="number">2</span>] == <span class="string">&#x27;\x5F&#x27;</span>)</span><br><span class="line">            index_xor = cur_smc_code[cur].bytecode[i + <span class="number">3</span>] &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur_smc_code[cur].bytecode[i] == <span class="string">&#x27;\x48&#x27;</span> &amp;&amp; cur_smc_code[cur].bytecode[i + <span class="number">1</span>] == <span class="string">&#x27;\x8D&#x27;</span> &amp;&amp; cur_smc_code[cur].bytecode[i + <span class="number">2</span>] == <span class="string">&#x27;\x9F&#x27;</span>)&#123;</span><br><span class="line">            index_xor = cur_smc_code[cur].bytecode[i + <span class="number">3</span>] &amp; <span class="number">0xff</span>;</span><br><span class="line">            index_xor |= (cur_smc_code[cur].bytecode[i + <span class="number">4</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            index_xor |= (cur_smc_code[cur].bytecode[i + <span class="number">5</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">            index_xor |= (cur_smc_code[cur].bytecode[i + <span class="number">6</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> next_smc[<span class="number">0x30</span>];</span><br><span class="line">    <span class="built_in">memset</span>(next_smc, <span class="number">0</span>, <span class="keyword">sizeof</span>(next_smc));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; i++)&#123;</span><br><span class="line">        next_smc[i] = (<span class="keyword">char</span>)(cur_smc_code[cur].bytecode[i] ^ smc_xor_code[index_xor + i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> next_depth = cur_smc_code[cur].depth + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = (next_depth - <span class="number">1</span>) * <span class="number">16</span>; i &lt; (next_depth) * <span class="number">16</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur_smc_code[i].depth == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (my_strncmp(next_smc, cur_smc_code[i].bytecode, <span class="number">0x20</span>))&#123;</span><br><span class="line">            FLAG_exist = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FLAG_exist = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x20</span>; j++)&#123;</span><br><span class="line">        cur_smc_code[i].bytecode[j] = next_smc[j];</span><br><span class="line">    &#125;</span><br><span class="line">    cur_smc_code[i].depth = next_depth;</span><br><span class="line">    <span class="keyword">if</span> (next_depth == <span class="number">801</span>)&#123;</span><br><span class="line">        FLAG_exist = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_up_map</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">int</span> left = analysis_next(tmp, <span class="number">1</span>);</span><br><span class="line">        G[tmp].push_back(Edge(left, cur_smc_code[tmp].len[<span class="number">1</span>], <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (FLAG_exist) Q.push(left);</span><br><span class="line">        <span class="keyword">int</span> right = analysis_next(tmp, <span class="number">0</span>);</span><br><span class="line">        G[tmp].push_back(Edge(right, cur_smc_code[tmp].len[<span class="number">0</span>], <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span> (FLAG_exist) Q.push(right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Path[MAXN], flag[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span> Start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dist[Start] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Edge&gt; Q;</span><br><span class="line">    Q.push(Edge(Start, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( !Q.empty() ) &#123;</span><br><span class="line">        Edge P = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        vis[P.to] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> len = G[P.to].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">            Edge Pn = G[P.to][i];</span><br><span class="line">            <span class="keyword">if</span>(dist[Pn.to] &gt; dist[P.to] + Pn.len) &#123;</span><br><span class="line">                dist[Pn.to] = dist[P.to] + Pn.len;</span><br><span class="line">                Path[Pn.to] = P.to;</span><br><span class="line">                flag[Pn.to] = Pn.path;</span><br><span class="line">                <span class="keyword">if</span>( !vis[Pn.to] ) &#123;</span><br><span class="line">                    Q.push(Pn);</span><br><span class="line">                    vis[Pn.to] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PutPath</span><span class="params">(<span class="keyword">int</span> Star,<span class="keyword">int</span> End)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Star == End)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    PutPath(Star, Path[End]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, flag[End]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++) &#123;</span><br><span class="line">        G[i].clear();</span><br><span class="line">        dist[i] = INF;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        Path[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;smc_code.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xC73E0</span>; ++i)&#123;</span><br><span class="line">        smc_xor_code[i] = fgetc(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(cur_smc_code[<span class="number">0</span>].bytecode, <span class="string">&quot;\x90\x74\x0D\x48\x8D\x5F\x40\x90\x49\x83\xC1\x49\xEB\xC5\x90\x90\x48\x8D\x5F\x20\x90\x90\x90\x49\x83\xC1\x11\x90\x90\x90\xEB\xB3&quot;</span>, <span class="number">0x21</span>);</span><br><span class="line">    cur_smc_code[<span class="number">0</span>].depth = <span class="number">1</span>;</span><br><span class="line">    set_up_map();</span><br><span class="line">    Spfa(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, dist[<span class="number">16</span> * <span class="number">800</span>]);</span><br><span class="line">    PutPath(<span class="number">0</span>, <span class="number">16</span> * <span class="number">800</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>好久没有用c写这些东西了，一开始全是bug（</del></p><h1 id="switchingitup"><a href="#switchingitup" class="headerlink" title="switchingitup"></a>switchingitup</h1><p>题目描述就说了是 python 3.10.0，一开始还以为没啥区别，结果发现pycdas只支持到了3.9，3.10连反汇编都出不来，好在pycdc的pull requests里有人提交了一份3.10的（现在已经更新了）<del>差点考虑自己魔改pycdc了</del></p><p>3.10加了一些新东西，一开始不知道看得很痛苦，后来查到之后感觉就不难了</p><p>上一下目前手动反编译的结果</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func</span>():</span></span><br><span class="line"><span class="meta">    @__import__(&#x27;dataclasses&#x27;).dataclass</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">a1</span>:</span></span><br><span class="line">        x: <span class="built_in">int</span></span><br><span class="line">        y: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">key</span>(<span class="params">v1</span>):</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> v1:</span><br><span class="line">            <span class="keyword">yield</span> e ^ <span class="number">1337</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gene</span>(<span class="params">a</span>):</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">yield</span> e</span><br><span class="line">    </span><br><span class="line">    a1 = a1()</span><br><span class="line">    a3 = <span class="built_in">bytes</span>(key(<span class="built_in">iter</span>((<span class="number">1385</span>, <span class="number">1403</span>, <span class="number">1402</span>, <span class="number">1389</span>, <span class="number">1407</span>))))</span><br><span class="line">    a6 = <span class="built_in">__import__</span>(<span class="string">&#x27;hashlib&#x27;</span>).md5</span><br><span class="line">    I = <span class="built_in">input</span>(<span class="string">&quot;flag? &quot;</span>)</span><br><span class="line">    a4 = <span class="keyword">lambda</span> x: a6(x).hexdigest()</span><br><span class="line">    a5 = <span class="built_in">list</span>(I)</span><br><span class="line">    a2 = &#123;&#125;</span><br><span class="line">    a7 = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> a5:</span><br><span class="line">        match a5:</span><br><span class="line">            case [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, *R, <span class="string">&#x27;&#125;&#x27;</span>]:</span><br><span class="line">                a7 = a7 + <span class="number">1</span></span><br><span class="line">                a2 |= &#123;<span class="number">0</span>:<span class="number">112</span>&#125; <span class="keyword">if</span> a7 <span class="keyword">or</span> <span class="built_in">len</span>(R) != <span class="number">32</span> <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">                a5 = <span class="built_in">list</span>(gene(<span class="built_in">enumerate</span>(R)))</span><br><span class="line">            case a1(x, y):</span><br><span class="line">                a7 = a7 + <span class="number">1</span></span><br><span class="line">                a2 |= &#123;x:y&#125; <span class="keyword">if</span> x + <span class="number">1</span> != a7 <span class="keyword">or</span> a4(a3 * x)[x] != y <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">            case _:</span><br><span class="line">                a2 |= &#123;<span class="number">1</span>:<span class="number">125</span>&#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&#x27;Correct&#x27;</span> <span class="keyword">if</span> <span class="keyword">not</span> a2 <span class="keyword">else</span> <span class="string">&#x27;Nope&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (dis.dis(test_func))</span><br></pre></td></tr></table></figure><p>新的特性就是 <code>match case</code> 语句，感觉还是很实用的，学到了</p><p>目前还有几个地方不太知道怎么写的</p><p>一个是 <code>a2 |= &#123;&#125; if () else &#123;&#125;</code> 这里，题目里应该是把 <code>a7=a7+1</code> 放到了这一行里</p><p>还有一个是 <code>GET_ITER</code> 和 <code>FOR_ITER</code> 在迭代部分是分开的，不太懂了</p><p>不过仿照这这个逻辑写有些问题</p><p>解决方案就是直接在 <code>.pyc</code> 文件里加一个输出，<code>a4(a3 * x)[x] != y</code> 给这个逻辑套上输出就行，改完后的pyasm文件长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">276     LOAD_NAME               12: a2</span><br><span class="line">278     LOAD_NAME               13: a7</span><br><span class="line">280     LOAD_CONST              21: 1</span><br><span class="line">282     BINARY_ADD              </span><br><span class="line">284     DUP_TOP                 </span><br><span class="line">286     STORE_NAME              13: a7</span><br><span class="line">288     LOAD_NAME               18: x</span><br><span class="line">290     LOAD_CONST              21: 1</span><br><span class="line">292     BINARY_ADD              </span><br><span class="line">294     COMPARE_OP              3 (!&#x3D;)</span><br><span class="line">296     POP_JUMP_IF_TRUE        159 (to 318)</span><br><span class="line">                    --&gt; LOAD_NAME 20: print</span><br><span class="line">298     LOAD_NAME               9: a4</span><br><span class="line">300     LOAD_NAME               4: a3</span><br><span class="line">302     LOAD_NAME               18: x</span><br><span class="line">304     BINARY_MULTIPLY         </span><br><span class="line">306     CALL_FUNCTION           1</span><br><span class="line">308     LOAD_NAME               18: x</span><br><span class="line">310     BINARY_SUBSCR           </span><br><span class="line">                    --&gt; CALL_FUNCTION 1</span><br><span class="line">312     LOAD_NAME               19: y</span><br><span class="line">314     COMPARE_OP              3 (!&#x3D;)</span><br><span class="line">316     POP_JUMP_IF_FALSE       163 (to 326)</span><br></pre></td></tr></table></figure><p>然后还有手动修改一下各个 <code>jump</code> 的目的地址，最后的二进制文件长这样</p><p><img data-src="./patch_pyc.png" alt="patch_pyc"></p><p>运行一下就有结果了</p><p><img data-src="./pyc_result.png" alt="pyc_result"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是被队友带飞的一场比赛呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[RE]cosmo&lt;/li&gt;
&lt;li&gt;[RE]BinaryTree&lt;/li&gt;
&lt;li&gt;[RE]switchingitup&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="Writeup" scheme="https://s0uthwood.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>TSGCTF2021 RE WP</title>
    <link href="https://s0uthwood.github.io/2021/10/09/TSGCTF2021-RE-WP/"/>
    <id>https://s0uthwood.github.io/2021/10/09/TSGCTF2021-RE-WP/</id>
    <published>2021-10-09T14:22:33.000Z</published>
    <updated>2021-10-09T14:47:22.941Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Beginners Rev</li><li>natural flag processing</li><li>*optimized</li></ul><a id="more"></a><h1 id="Beginners-Rev"><a href="#Beginners-Rev" class="headerlink" title="Beginners Rev"></a>Beginners Rev</h1><p>用 <code>fork()</code> 遍历了 32 位输入，每个输入都分别进行一次函数运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  ++v2;</span><br><span class="line">  <span class="keyword">if</span> ( !fork() )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    v1 |= <span class="number">1</span> &lt;&lt; v3;</span><br><span class="line">    v7 = open(<span class="string">&quot;/dev/null&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    dup2(v7, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ++v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v3 != <span class="number">5</span> );</span><br></pre></td></tr></table></figure><p>每个函数运算都是将输入迭代好多次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">v4 = (<span class="keyword">unsigned</span> __int8 *)&amp;key + a2;</span><br><span class="line">v5 = v4[<span class="number">2</span>];</span><br><span class="line">v6 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="number">-1217102449</span> * v5 + <span class="number">1217102449</span>) &gt; <span class="number">0xB2927C</span> )</span><br><span class="line">&#123;</span><br><span class="line">  ++v6;</span><br><span class="line">  v5 += v4[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">if</span> ( v6 == <span class="number">367</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">v7 = v4[<span class="number">4</span>];</span><br><span class="line">v8 = v4[<span class="number">3</span>] * ((a1 + *v4) % <span class="number">367</span> * v4[<span class="number">1</span>] % <span class="number">367</span> * v6 % <span class="number">367</span>) % <span class="number">367</span>;</span><br></pre></td></tr></table></figure><p>被retaddr坑了一会，后面才反应过来开头那个 <code>if ( retaddr - (_BYTE *)check != 95 )</code> 的意思</p><p>解法就是先将while循环内的运算解出来，然后用z3求解就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0xA5</span>, <span class="number">0x43</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xE5</span>, <span class="number">0x50</span>, <span class="number">0x95</span>, <span class="number">0x29</span>, <span class="number">0xFB</span>, </span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x34</span>, <span class="number">0xF6</span>, <span class="number">0x6D</span>, <span class="number">0xF7</span>, <span class="number">0x9A</span>, <span class="number">0x5E</span>, <span class="number">0x8A</span>, <span class="number">0x6F</span>, <span class="number">0x0F</span>, </span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0x6A</span>, <span class="number">0x78</span>, <span class="number">0x41</span>, <span class="number">0x02</span>, <span class="number">0x46</span>, <span class="number">0x8B</span>, <span class="number">0xAE</span>, <span class="number">0xB6</span>, <span class="number">0x83</span>, </span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x54</span>, <span class="number">0x74</span>, <span class="number">0x8D</span>, <span class="number">0xF4</span>, <span class="number">0x79</span>, <span class="number">0xD2</span>, <span class="number">0xFE</span>, <span class="number">0x2D</span>, </span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x1B</span>, <span class="number">0x11</span>, <span class="number">0x57</span>, <span class="number">0xB7</span>, <span class="number">0x9F</span>, <span class="number">0x4E</span>, <span class="number">0xC4</span>, <span class="number">0x52</span>, <span class="number">0x9E</span>, </span><br><span class="line">    <span class="number">0xF5</span>, <span class="number">0xFF</span>, <span class="number">0x56</span>, <span class="number">0x71</span>, <span class="number">0x3C</span>, <span class="number">0x1B</span>, <span class="number">0x60</span>, <span class="number">0x22</span>, <span class="number">0x9C</span>, <span class="number">0x56</span>, </span><br><span class="line">    <span class="number">0xA7</span>, <span class="number">0xCF</span>, <span class="number">0x8E</span>, <span class="number">0x45</span>, <span class="number">0x16</span>, <span class="number">0x5C</span>, <span class="number">0xA5</span>, <span class="number">0xF4</span>, <span class="number">0x28</span>, <span class="number">0xA0</span>, </span><br><span class="line">    <span class="number">0x30</span>, <span class="number">0x57</span>, <span class="number">0xA5</span>, <span class="number">0xB1</span>, <span class="number">0xC9</span>, <span class="number">0xC4</span>, <span class="number">0x86</span>, <span class="number">0x3E</span>, <span class="number">0xB8</span>, <span class="number">0x13</span>, </span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x4D</span>, <span class="number">0xBF</span>, <span class="number">0x97</span>, <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x96</span>, <span class="number">0x07</span>, <span class="number">0x8B</span>, <span class="number">0x9F</span>, </span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x12</span>, <span class="number">0x92</span>, <span class="number">0xC6</span>, <span class="number">0xC0</span>, <span class="number">0x8A</span>, <span class="number">0x69</span>, <span class="number">0xF5</span>, <span class="number">0xA5</span>, <span class="number">0x9D</span>, </span><br><span class="line">    <span class="number">0xF3</span>, <span class="number">0x3B</span>, <span class="number">0xB6</span>, <span class="number">0x99</span>, <span class="number">0x86</span>, <span class="number">0xD9</span>, <span class="number">0x67</span>, <span class="number">0x32</span>, <span class="number">0xB1</span>, <span class="number">0xBF</span>, </span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0x2E</span>, <span class="number">0x58</span>, <span class="number">0x55</span>, <span class="number">0xB0</span>, <span class="number">0x9C</span>, <span class="number">0x65</span>, <span class="number">0x9E</span>, <span class="number">0x9F</span>, <span class="number">0xE3</span>, </span><br><span class="line">    <span class="number">0xF0</span>, <span class="number">0xBF</span>, <span class="number">0xCF</span>, <span class="number">0xCD</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x34</span>, <span class="number">0x31</span>, <span class="number">0x78</span>, <span class="number">0x55</span>, </span><br><span class="line">    <span class="number">0x6E</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0xD7</span>, <span class="number">0xA8</span>, <span class="number">0x26</span>, <span class="number">0xFF</span>, <span class="number">0xD6</span>, <span class="number">0xCC</span>, <span class="number">0x99</span>, </span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xFB</span>, <span class="number">0xF6</span>, <span class="number">0xF4</span>, <span class="number">0x03</span>, <span class="number">0xFA</span>, <span class="number">0x61</span>, <span class="number">0xDF</span>, <span class="number">0x41</span>, <span class="number">0x98</span>, </span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0xBD</span>, <span class="number">0xBF</span>, <span class="number">0x88</span>, <span class="number">0x44</span>, <span class="number">0x5E</span>, <span class="number">0x56</span>, <span class="number">0xD2</span>, <span class="number">0xA9</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">time = [</span><br><span class="line">    <span class="number">0x127</span>, <span class="number">0x0ee</span>, <span class="number">0x07e</span>, <span class="number">0x068</span>, <span class="number">0x169</span>, <span class="number">0x0f2</span>, <span class="number">0x04e</span>, <span class="number">0x0ea</span>, </span><br><span class="line">    <span class="number">0x0bc</span>, <span class="number">0x0ae</span>, <span class="number">0x0f5</span>, <span class="number">0x078</span>, <span class="number">0x114</span>, <span class="number">0x10a</span>, <span class="number">0x13b</span>, <span class="number">0x0ff</span>, </span><br><span class="line">    <span class="number">0x052</span>, <span class="number">0x07d</span>, <span class="number">0x0cd</span>, <span class="number">0x031</span>, <span class="number">0x0fb</span>, <span class="number">0x142</span>, <span class="number">0x034</span>, <span class="number">0x060</span>, </span><br><span class="line">    <span class="number">0x0b8</span>, <span class="number">0x0c2</span>, <span class="number">0x12d</span>, <span class="number">0x0fb</span>, <span class="number">0x0f4</span>, <span class="number">0x161</span>, <span class="number">0x0cc</span>, <span class="number">0x0df</span>, </span><br><span class="line">    <span class="number">0x11c</span>, <span class="number">0x0c1</span>, <span class="number">0x0b1</span>, <span class="number">0x0b6</span>, <span class="number">0x05b</span>, <span class="number">0x0bb</span>, <span class="number">0x162</span>, <span class="number">0x105</span>, </span><br><span class="line">    <span class="number">0x034</span>, <span class="number">0x044</span>, <span class="number">0x06c</span>, <span class="number">0x087</span>, <span class="number">0x16d</span>, <span class="number">0x151</span>, <span class="number">0x050</span>, <span class="number">0x117</span>, </span><br><span class="line">    <span class="number">0x05e</span>, <span class="number">0x127</span>, <span class="number">0x003</span>, <span class="number">0x09a</span>, <span class="number">0x12f</span>, <span class="number">0x00d</span>, <span class="number">0x068</span>, <span class="number">0x044</span>, </span><br><span class="line">    <span class="number">0x041</span>, <span class="number">0x036</span>, <span class="number">0x028</span>, <span class="number">0x12f</span>, <span class="number">0x0bd</span>, <span class="number">0x148</span>, <span class="number">0x0a8</span>, <span class="number">0x0fa</span>, </span><br><span class="line">    <span class="number">0x13d</span>, <span class="number">0x004</span>, <span class="number">0x0ee</span>, <span class="number">0x0b6</span>, <span class="number">0x09c</span>, <span class="number">0x027</span>, <span class="number">0x082</span>, <span class="number">0x087</span>, </span><br><span class="line">    <span class="number">0x0ee</span>, <span class="number">0x08d</span>, <span class="number">0x02a</span>, <span class="number">0x117</span>, <span class="number">0x03f</span>, <span class="number">0x094</span>, <span class="number">0x002</span>, <span class="number">0x03a</span>, </span><br><span class="line">    <span class="number">0x01b</span>, <span class="number">0x08f</span>, <span class="number">0x062</span>, <span class="number">0x0af</span>, <span class="number">0x042</span>, <span class="number">0x132</span>, <span class="number">0x073</span>, <span class="number">0x069</span>, </span><br><span class="line">    <span class="number">0x12d</span>, <span class="number">0x151</span>, <span class="number">0x05e</span>, <span class="number">0x066</span>, <span class="number">0x112</span>, <span class="number">0x04c</span>, <span class="number">0x0d8</span>, <span class="number">0x07d</span>, </span><br><span class="line">    <span class="number">0x007</span>, <span class="number">0x003</span>, <span class="number">0x0ee</span>, <span class="number">0x0b4</span>, <span class="number">0x125</span>, <span class="number">0x038</span>, <span class="number">0x0f4</span>, <span class="number">0x00c</span>, </span><br><span class="line">    <span class="number">0x03f</span>, <span class="number">0x0fc</span>, <span class="number">0x136</span>, <span class="number">0x159</span>, <span class="number">0x08d</span>, <span class="number">0x062</span>, <span class="number">0x002</span>, <span class="number">0x008</span>, </span><br><span class="line">    <span class="number">0x0ab</span>, <span class="number">0x05f</span>, <span class="number">0x10d</span>, <span class="number">0x028</span>, <span class="number">0x102</span>, <span class="number">0x127</span>, <span class="number">0x151</span>, <span class="number">0x10e</span>, </span><br><span class="line">    <span class="number">0x01a</span>, <span class="number">0x062</span>, <span class="number">0x148</span>, <span class="number">0x06f</span>, <span class="number">0x11e</span>, <span class="number">0x0eb</span>, <span class="number">0x078</span>, <span class="number">0x00f</span>, </span><br><span class="line">    <span class="number">0x034</span>, <span class="number">0x05f</span>, <span class="number">0x165</span>, <span class="number">0x001</span>, <span class="number">0x0c1</span>, <span class="number">0x10c</span>, <span class="number">0x08e</span>, <span class="number">0x01d</span>, </span><br><span class="line">    <span class="number">0x09a</span>, <span class="number">0x163</span>, <span class="number">0x009</span>, <span class="number">0x00c</span>, <span class="number">0x091</span>, <span class="number">0x0ae</span>, <span class="number">0x114</span>, <span class="number">0x0b6</span>, </span><br><span class="line">    <span class="number">0x0f5</span>, <span class="number">0x045</span>, <span class="number">0x08c</span>, <span class="number">0x04f</span>, <span class="number">0x060</span>, <span class="number">0x063</span>, <span class="number">0x071</span>, <span class="number">0x0a7</span>, </span><br><span class="line">    <span class="number">0x062</span>, <span class="number">0x0c5</span>, <span class="number">0x01b</span>, <span class="number">0x052</span>, <span class="number">0x12f</span>, <span class="number">0x0bb</span>, <span class="number">0x123</span>, <span class="number">-1</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">enc = [</span><br><span class="line">    <span class="number">185</span>, <span class="number">180</span>, <span class="number">193</span>, <span class="number">107</span>, <span class="number">325</span>, <span class="number">148</span>, <span class="number">254</span>, <span class="number">342</span>,</span><br><span class="line">    <span class="number">56</span>, <span class="number">160</span>, <span class="number">338</span>, <span class="number">143</span>, <span class="number">58</span>, <span class="number">289</span>, <span class="number">362</span>, <span class="number">248</span>,</span><br><span class="line">    <span class="number">319</span>, <span class="number">339</span>, <span class="number">92</span>, <span class="number">66</span>, <span class="number">248</span>, <span class="number">72</span>, <span class="number">21</span>, <span class="number">229</span>,</span><br><span class="line">    <span class="number">122</span>, <span class="number">206</span>, <span class="number">101</span>, <span class="number">235</span>, <span class="number">113</span>, <span class="number">100</span>, <span class="number">45</span>, <span class="number">262</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    s = Solver()</span><br><span class="line">    a1 = Int(<span class="string">&quot;a1&quot;</span>)</span><br><span class="line">    s.add(a1 &gt;= <span class="number">0</span>)</span><br><span class="line">    s.add(a1 &lt;= <span class="number">128</span>)</span><br><span class="line">    v6 = time[i + <span class="number">2</span>]</span><br><span class="line">    v8 = key[i + <span class="number">3</span>] * ((a1 + key[i + <span class="number">0</span>]) % <span class="number">367</span> * key[i + <span class="number">1</span>] % <span class="number">367</span> * v6 % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v9 = time[i + <span class="number">4</span>]</span><br><span class="line">    v11 = time[i + <span class="number">7</span>]</span><br><span class="line">    v12 = (<span class="number">95</span> + (((v9 * v8 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">5</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">6</span>]) % <span class="number">367</span>)) % <span class="number">367</span></span><br><span class="line">    v13 = key[i + <span class="number">9</span>] * ((key[i + <span class="number">8</span>] + v11 * v12 % <span class="number">367</span>) % <span class="number">367</span>)</span><br><span class="line">    v15 = time[i + <span class="number">10</span>]</span><br><span class="line">    v16 = v13 % <span class="number">367</span></span><br><span class="line">    v17 = v15 * v16</span><br><span class="line">    v19 = time[i + <span class="number">11</span>]</span><br><span class="line">    v21 = (key[i + <span class="number">16</span>] + (key[i + <span class="number">15</span>] + key[i + <span class="number">14</span>] * (((key[i + <span class="number">12</span>] + v17 % <span class="number">367</span> * v19 % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">13</span>]) % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v22 = time[i + <span class="number">17</span>]</span><br><span class="line">    v24 = (key[i + <span class="number">19</span>] + key[i + <span class="number">18</span>] * (v21 * v22 % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v25 = time[i + <span class="number">20</span>]</span><br><span class="line">    v26 = key[i + <span class="number">28</span>] + key[i + <span class="number">27</span>] * (((key[i + <span class="number">25</span>] + (key[i + <span class="number">24</span>] + key[i + <span class="number">22</span>] * ((v24 * v25 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">21</span>]) % <span class="number">367</span>) % <span class="number">367</span> * key[i + <span class="number">23</span>] % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">26</span>]) % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v28 = time[i + <span class="number">30</span>]</span><br><span class="line">    v29 = <span class="number">95</span> + v26 % <span class="number">367</span> * key[i + <span class="number">29</span>] % <span class="number">367</span> - <span class="number">367</span> * ((<span class="number">95</span> + (v26 % <span class="number">367</span> * key[i + <span class="number">29</span>] % <span class="number">367</span>)) / <span class="number">367</span>)</span><br><span class="line">    v30 = (v29 * v28 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">31</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">32</span>]</span><br><span class="line">    v32 = time[i + <span class="number">33</span>]</span><br><span class="line">    v34 = key[i + <span class="number">35</span>] * ((key[i + <span class="number">34</span>] + v30 % <span class="number">367</span> * v32 % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span> * key[i + <span class="number">36</span>] % <span class="number">367</span></span><br><span class="line">    v35 = time[i + <span class="number">37</span>]</span><br><span class="line">    v37 = (key[i + <span class="number">43</span>] * (((((key[i + <span class="number">38</span>] * (v34 * v35 % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">39</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">40</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">41</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">42</span>]) % <span class="number">0x16F</span>) % <span class="number">0x16F</span> + key[i + <span class="number">44</span>]) % <span class="number">0x16F</span></span><br><span class="line">    v38 = time[i + <span class="number">45</span>]</span><br><span class="line">    v40 = (key[i + <span class="number">46</span>] + (v37 * v38) % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v41 = time[i + <span class="number">47</span>]</span><br><span class="line">    v43 = (key[i + <span class="number">49</span>] + (key[i + <span class="number">48</span>] + v40 * v41 % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v44 = time[i + <span class="number">50</span>]</span><br><span class="line">    v46 = key[i + <span class="number">55</span>] * ((key[i + <span class="number">54</span>] + ((key[i + <span class="number">52</span>] + (key[i + <span class="number">51</span>] + v43 * v44 % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">53</span>]) % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v47 = time[i + <span class="number">56</span>]</span><br><span class="line">    v49 = (v46 * v47 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">57</span>]) % <span class="number">367</span></span><br><span class="line">    v50 = time[i + <span class="number">58</span>]</span><br><span class="line">    v52 = ((<span class="number">95</span> + v49 * v50 % <span class="number">367</span>) % <span class="number">367</span> + key[i + <span class="number">59</span>]) % <span class="number">367</span></span><br><span class="line">    v53 = time[i + <span class="number">60</span>]</span><br><span class="line">    v54 = (key[i + <span class="number">63</span>] + key[i + <span class="number">62</span>] * ((key[i + <span class="number">61</span>] + v52 * v53 % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span> * key[i + <span class="number">64</span>] % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">65</span>]</span><br><span class="line">    v56 = time[i + <span class="number">67</span>]</span><br><span class="line">    v57 = v56 * ((key[i + <span class="number">66</span>] + v54 % <span class="number">367</span>) % <span class="number">367</span>)</span><br><span class="line">    v59 = time[i + <span class="number">68</span>]</span><br><span class="line">    v61 = (key[i + <span class="number">69</span>] * (v57 % <span class="number">367</span> * v59 % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">70</span>]) % <span class="number">367</span></span><br><span class="line">    v62 = time[i + <span class="number">71</span>]</span><br><span class="line">    v64 = (key[i + <span class="number">73</span>] * (key[i + <span class="number">72</span>] * (v61 * v62 % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">74</span>]) % <span class="number">367</span></span><br><span class="line">    v65 = time[i + <span class="number">75</span>]</span><br><span class="line">    v67 = (v64 * v65 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">76</span>]) % <span class="number">367</span></span><br><span class="line">    v68 = time[i + <span class="number">77</span>]</span><br><span class="line">    v70 = ((key[i + <span class="number">79</span>] + (v67 * v68 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">78</span>]) % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">80</span>]) % <span class="number">367</span></span><br><span class="line">    v71 = time[i + <span class="number">81</span>]</span><br><span class="line">    v73 = key[i + <span class="number">85</span>] * (((key[i + <span class="number">82</span>] * (v70 * v71 % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">83</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">84</span>]) % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v74 = time[i + <span class="number">86</span>]</span><br><span class="line">    v76 = (v73 * v74 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">87</span>]) % <span class="number">367</span></span><br><span class="line">    v77 = time[i + <span class="number">88</span>]</span><br><span class="line">    v78 = key[i + <span class="number">90</span>] * (((<span class="number">95</span> + v76 * v77 % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">89</span>]) % <span class="number">367</span>)</span><br><span class="line">    v79 = time[i + <span class="number">98</span>]</span><br><span class="line">    v82 = time[i + <span class="number">99</span>]</span><br><span class="line">    v84 = ((v82 * ((v79 * (((((((v78 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">91</span>]) % <span class="number">367</span> * key[i + <span class="number">92</span>] % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">93</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">94</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">95</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">96</span>]) % <span class="number">0x16F</span> + key[i + <span class="number">97</span>]) % <span class="number">0x16F</span>)) % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">100</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">101</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">102</span>]</span><br><span class="line">    v85 = time[i + <span class="number">108</span>]</span><br><span class="line">    v86 = <span class="number">95</span> + ((((v84 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">103</span>]) % <span class="number">0x16F</span> + key[i + <span class="number">104</span>]) % <span class="number">0x16F</span> + <span class="number">367</span> - key[i + <span class="number">105</span>]) % <span class="number">0x16F</span> * key[i + <span class="number">106</span>] % <span class="number">0x16F</span> + <span class="number">367</span> - key[i + <span class="number">107</span>]) % <span class="number">0x16F</span> - <span class="number">367</span> * ((<span class="number">95</span> + (((((v84 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">103</span>]) % <span class="number">0x16F</span> + key[i + <span class="number">104</span>]) % <span class="number">0x16F</span> + <span class="number">367</span> - key[i + <span class="number">105</span>]) % <span class="number">0x16F</span> * key[i + <span class="number">106</span>] % <span class="number">0x16F</span> + <span class="number">367</span> - key[i + <span class="number">107</span>]) % <span class="number">0x16F</span>)) / <span class="number">367</span>)</span><br><span class="line">    v87 = key[i + <span class="number">113</span>] * (((((key[i + <span class="number">109</span>] + v86 * v85 % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">110</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">111</span>]) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">112</span>]) % <span class="number">367</span>)</span><br><span class="line">    v89 = time[i + <span class="number">114</span>]</span><br><span class="line">    v90 = v89 * (v87 % <span class="number">367</span>)</span><br><span class="line">    v92 = time[i + <span class="number">115</span>]</span><br><span class="line">    v93 = v90 % <span class="number">367</span> * v92</span><br><span class="line">    v95 = time[i + <span class="number">117</span>]</span><br><span class="line">    v97 = (key[i + <span class="number">118</span>] + (key[i + <span class="number">116</span>] + v93 % <span class="number">367</span>) % <span class="number">367</span> * v95 % <span class="number">367</span>) % <span class="number">367</span></span><br><span class="line">    v98 = time[i + <span class="number">119</span>]</span><br><span class="line">    v100 = v97 * v98 % <span class="number">367</span></span><br><span class="line">    v101 = time[i + <span class="number">120</span>]</span><br><span class="line">    v103 = (v100 * v101 % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">121</span>]) % <span class="number">367</span></span><br><span class="line">    v104 = time[i + <span class="number">122</span>]</span><br><span class="line">    v105 = (key[i + <span class="number">124</span>] * ((key[i + <span class="number">123</span>] + v103 * v104 % <span class="number">367</span>) % <span class="number">367</span>) % <span class="number">367</span> + <span class="number">367</span> - key[i + <span class="number">125</span>]) % <span class="number">367</span> * key[i + <span class="number">126</span>]</span><br><span class="line">    v107 = time[i + <span class="number">127</span>]</span><br><span class="line">    s.add(enc[i] == ((v105 % <span class="number">367</span> * v107 % <span class="number">367</span>) + <span class="number">95</span>) % <span class="number">367</span>)</span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(s.model()[a1].as_long()), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;unsat&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><p>跑得倒是挺快，就是一行一行复制有点累…</p><h1 id="natural-flag-processing"><a href="#natural-flag-processing" class="headerlink" title="natural flag processing"></a>natural flag processing</h1><p>队友查看了out的参数，发现只有第314位为1，于是猜测只要满足第314位输出大于0，就通过验证了（在 <code>forward()</code> 函数里加一行就验证了）</p><p>先只输入 <code>TSGCTF&#123;</code> 测试了一下，然后惊奇地发现，每次运行完 <code>forward()</code> 后，都会有一位大于0，于是猜测错误的输入会使得大于0的位消失，且消失后无法再得到大于0，这样就可以爆破了，大于0的数字消失就剪掉</p><p>队友用dfs，我就用了bfs，主要就是在之前的代码上进行一些魔改（感觉这个更像misc啊）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">FLAG_CHARS = string.ascii_letters + string.digits + <span class="string">&quot;&#123;&#125;-&quot;</span></span><br><span class="line">CHARS = <span class="string">&quot;^$&quot;</span> + FLAG_CHARS</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sanity_check</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">global</span> FLAG_CHARS</span><br><span class="line">    <span class="keyword">assert</span> text[:<span class="number">7</span>] == <span class="string">&quot;TSGCTF&#123;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> text[<span class="number">-1</span>:] == <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([t <span class="keyword">in</span> FLAG_CHARS <span class="keyword">for</span> t <span class="keyword">in</span> text])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">embedding</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    x = torch.zeros((<span class="built_in">len</span>(text), <span class="built_in">len</span>(CHARS)))</span><br><span class="line">    <span class="keyword">for</span> i, t <span class="keyword">in</span> <span class="built_in">enumerate</span>(text):</span><br><span class="line">        x[i, CHARS.index(t)] = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inpt, hidden</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.cell = nn.RNNCell(inpt, hidden)</span><br><span class="line">        self.out = nn.Linear(hidden, <span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, xs</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        h = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">global</span> baopo</span><br><span class="line">        <span class="keyword">global</span> cur</span><br><span class="line">        <span class="comment"># print (xs)</span></span><br><span class="line">        <span class="comment"># print (&#x27;-------------------------------&#x27;)</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xs[:<span class="number">-1</span>]:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            h = self.cell(x, h)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>((h &gt; <span class="number">0</span>).nonzero()) != <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span> (cur)</span><br><span class="line">            baopo.append(cur)</span><br><span class="line">        x = xs[<span class="number">-1</span>]</span><br><span class="line">        h = self.cell(x, h)</span><br><span class="line">        <span class="keyword">return</span> self.out(h)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inference</span>(<span class="params">model, text</span>):</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        x = embedding(<span class="string">&quot;^&quot;</span>+text+<span class="string">&quot;$&quot;</span>).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        y = model(x)[<span class="number">0</span>].sigmoid().cpu().item()</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># baopo = [&#x27;mRNA-st4nDs-f0r-mANuaLLy-tun3d-RecurrEn7-N3uRAl-AutoM4toN&#125;&#x27;]</span></span><br><span class="line">baopo = [<span class="string">&#x27;m&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = baopo.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> FLAG_CHARS:</span><br><span class="line">        model = Model(<span class="built_in">len</span>(CHARS), <span class="number">520</span>)</span><br><span class="line">        model.load_state_dict(torch.load(<span class="string">&quot;model_final.pth&quot;</span>))</span><br><span class="line">    <span class="comment"># text = input(&quot;input flag:&quot;)</span></span><br><span class="line">    <span class="comment"># sanity_check(text)</span></span><br><span class="line">    <span class="comment"># for i in range(400):</span></span><br><span class="line">        text = <span class="string">&#x27;TSGCTF&#123;&#x27;</span> + i + j</span><br><span class="line">        <span class="comment"># print (i, j)</span></span><br><span class="line">        cur = i + j</span><br><span class="line">        res = inference(model, text)</span><br><span class="line">        <span class="keyword">if</span> res &gt; <span class="number">0.5</span>:</span><br><span class="line">            print(<span class="string">&quot;Congrats!&quot;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># print (cur)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">            <span class="comment"># print (res)</span></span><br><span class="line">            <span class="comment"># print(&quot;Wrong.&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爆破的时间有点久</p><h1 id="optimized"><a href="#optimized" class="headerlink" title="*optimized"></a>*optimized</h1><p>这道题的UPX特征被完全去除了，以至于比赛的时候只看出来了是个壳，但没发现是UPX壳（其实猜到了，但elf就有点懒了…）</p><p>只需要打开010，将所有的 <code>tsg_</code> 修改为 <code>UPX!</code> 就行</p><p>脱壳后发现就是简单的数学约束，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_mm_movemask_epi8(</span><br><span class="line">  _mm_cmpeq_epi8(</span><br><span class="line">    _mm_slli_si128((__m128i)<span class="number">0x9569</span>uLL, <span class="number">8</span>),</span><br><span class="line">    _mm_slli_si128(</span><br><span class="line">      (__m128i)(((<span class="number">0x2AF91</span> * (<span class="keyword">unsigned</span> __int128)(<span class="number">0x5F50DDCA7B17</span>LL * (<span class="keyword">unsigned</span> __int64)v8)) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>),</span><br><span class="line">        <span class="number">8</span>))) == <span class="number">0xFFFF</span></span><br></pre></td></tr></table></figure><p>去官网查了一下函数的定义，就是要求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(__m128i)(((<span class="number">0x2AF91</span> * (<span class="keyword">unsigned</span> __int128)(<span class="number">0x5F50DDCA7B17</span>LL * (<span class="keyword">unsigned</span> __int64)v8)) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>) == (__m128i)<span class="number">0x9569</span>uLL</span><br></pre></td></tr></table></figure><p>本来想用c或者汇编的，但128位一直会有一些问题，于是只好用python了…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0xffffffff</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0x9569</span> == (((i * <span class="number">0x5F50DDCA7B17</span> &amp; <span class="number">0xffffffffffffffff</span>) * <span class="number">0x2AF91</span>) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>) <span class="keyword">and</span> (<span class="number">0x26CF2</span> == (((i * <span class="number">0x4DC4591DAC8F</span> &amp; <span class="number">0xffffffffffffffff</span>) * <span class="number">0x34AB9</span>) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;v8 = <span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="built_in">hex</span>(i))</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0x20468</span> == (((i * <span class="number">0x4AE11552DF1A</span> &amp; <span class="number">0xffffffffffffffff</span>) * <span class="number">0x36B39</span>) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>) <span class="keyword">and</span> (<span class="number">0x3787A</span> == (((i * <span class="number">0x46680B140EFF</span> &amp; <span class="number">0xffffffffffffffff</span>) * <span class="number">0x3A2D3</span>) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;v9 = <span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="built_in">hex</span>(i))</span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">0x4D935BBD3E0</span> &amp; <span class="number">0xffffffffffffffff</span> &lt; <span class="number">0x4D935BBD3E0</span>) <span class="keyword">and</span> (<span class="number">0x5563</span> == (((i * <span class="number">0x66B9B431B9ED</span> &amp; <span class="number">0xffffffffffffffff</span>) * <span class="number">0x27DF9</span>) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;v10 = <span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="built_in">hex</span>(i))</span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">0x1E5D2BE81C5</span> &amp; <span class="number">0xffffffffffffffff</span> &lt; <span class="number">0x1E5D2BE81C5</span>) <span class="keyword">and</span> (<span class="number">0x133E7</span> == (((i * <span class="number">0x448626500938</span> &amp; <span class="number">0xffffffffffffffff</span>) * <span class="number">0x3BC65</span>) &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0x3FFFF</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;v11 = <span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="built_in">hex</span>(i))</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">0xffffff</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;time: <span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑亿会就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./optimized-unpacked</span></span><br><span class="line">Enter password: 772928896 2204180909 4273479145 1334930147</span><br><span class="line">TSGCTF&#123;F457_m0dul0!&#125;@</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Beginners Rev&lt;/li&gt;
&lt;li&gt;natural flag processing&lt;/li&gt;
&lt;li&gt;*optimized&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="WP" scheme="https://s0uthwood.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>angr ctf writeup</title>
    <link href="https://s0uthwood.github.io/2021/09/27/angr-ctf-writeup/"/>
    <id>https://s0uthwood.github.io/2021/09/27/angr-ctf-writeup/</id>
    <published>2021-09-27T13:03:03.000Z</published>
    <updated>2021-10-14T08:43:05.356Z</updated>
    
    <content type="html"><![CDATA[<p>开始学angr</p><p><del>就是在抄solution</del></p><a id="more"></a><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./00_angr_find&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>:<span class="number">0x8048000</span>&#125;)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">find_addr = <span class="number">0x8048675</span></span><br><span class="line">simgr.explore(find = find_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    simulations = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span> (simulations.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;no result&#x27;</span>)</span><br></pre></td></tr></table></figure><p>先用 <code>Project</code> 导入二进制文件</p><p>然后 <code>state</code> 为开始模拟时的状态，<code>entry_state</code> 为从入口点开始模拟</p><p><code>simgr</code> 是为 <code>simulation_manager</code> 导入这个状态，进行模拟执行</p><p><code>explore</code> 为模拟器设定了一个执行的目标，遇到avoid将停止执行，遇到find则会添加到found状态中，这里填写的是输出 <code>Success</code> 字符串的地址</p><p>最后从found中dumps出标准输入的值，就可以拿到flag</p><h1 id="avoid"><a href="#avoid" class="headerlink" title="avoid"></a>avoid</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">base_addr = <span class="number">0x8048000</span></span><br><span class="line">find_addr = <span class="number">0x80485E0</span></span><br><span class="line">avoid_addr = [<span class="number">0x80485A8</span>, <span class="number">0x80485F2</span>]</span><br><span class="line">proj = Project(<span class="string">&#x27;./01_angr_avoid&#x27;</span>, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>: base_addr&#125;)</span><br><span class="line"></span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = find_addr, avoid = avoid_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    simulation = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span> (simulation.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><p>没什么区别，就是增加了一个avoid参数</p><h1 id="find-condition"><a href="#find-condition" class="headerlink" title="find condition"></a>find condition</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./02_angr_find_condition&#x27;</span>, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>: <span class="number">0x8048000</span>&#125;)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_condition</span>(<span class="params">cur_state</span>):</span></span><br><span class="line">    output = cur_state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">avoid_condition</span>(<span class="params">cur_state</span>):</span></span><br><span class="line">    output = cur_state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line">simgr.explore(find=find_condition, avoid=avoid_condition)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="built_in">print</span> (simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>explore</code> 中，可以将find和avoid的参数设置为函数，当各种输出太多的时候，这种方法比较省事，而且可拓展性很强</p><p><code>dumps(1)</code> 则是从状态中获取标准输出</p><h1 id="symbolic-registers"><a href="#symbolic-registers" class="headerlink" title="symbolic registers"></a>symbolic registers</h1><p>symbolic的几个实验就是往初始状态里注入符号了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./03_angr_symbolic_registers&#x27;</span>, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>:<span class="number">0x8048000</span>&#125;)</span><br><span class="line">after_input_addr = <span class="number">0x8048980</span></span><br><span class="line">state = proj.factory.blank_state(addr = after_input_addr)</span><br><span class="line"></span><br><span class="line">user_input = [claripy.BVS(<span class="string">&#x27;user_input_%d&#x27;</span> % i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">state.regs.eax = user_input[<span class="number">0</span>]</span><br><span class="line">state.regs.ebx = user_input[<span class="number">1</span>]</span><br><span class="line">state.regs.edx = user_input[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">find_addr = <span class="number">0x80489E9</span></span><br><span class="line">avoid_addr = <span class="number">0x80489D7</span></span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(find = find_addr, avoid = avoid_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> user_input:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%x&#x27;</span> % simgr.found[<span class="number">0</span>].se.<span class="built_in">eval</span>(a), end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> ()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>claripy</code> 是 <code>angr</code> 中的约束求解器，<code>z3</code> 好像就是fork出来的</p><p>主要使用 <code>state.regs.eax</code> 之类的将符号注入到寄存器中</p><p>这里用寄存器是因为输入被存储到了寄存器中</p><p><code>main</code> 函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0804897B                 call    get_user_input</span><br><span class="line">.text:08048980                 mov     [ebp+var_14], eax    ; state starts here</span><br><span class="line">.text:08048983                 mov     [ebp+var_10], ebx</span><br><span class="line">.text:08048986                 mov     [ebp+var_C], edx</span><br></pre></td></tr></table></figure><p><code>get_user_input</code> 内部实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:0804892F                 call    ___isoc99_scanf</span><br><span class="line">.text:08048934                 add     esp, 10h</span><br><span class="line">.text:08048937                 mov     ecx, [ebp+var_18]</span><br><span class="line">.text:0804893A                 mov     eax, ecx</span><br><span class="line">.text:0804893C                 mov     ecx, [ebp+var_14]</span><br><span class="line">.text:0804893F                 mov     ebx, ecx</span><br><span class="line">.text:08048941                 mov     ecx, [ebp+var_10]</span><br><span class="line">.text:08048944                 mov     edx, ecx</span><br></pre></td></tr></table></figure><blockquote><p>写这题的时候，不小心把 <code>blank_state</code> 打成了 <code>entry_state</code>，但还是可以得到正确结果，不知道为啥</p></blockquote><h1 id="symbolic-stack"><a href="#symbolic-stack" class="headerlink" title="symbolic stack"></a>symbolic stack</h1><p>这题的输入直接存到了 <code>stack</code> 中，因此需要把符号注入到 <code>stack</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:08048682                 lea     eax, [ebp+var_10]     ; 2nd input stores here</span><br><span class="line">.text:08048685                 push    eax</span><br><span class="line">.text:08048686                 lea     eax, [ebp+var_C]      ; 1st input stores here</span><br><span class="line">.text:08048689                 push    eax</span><br><span class="line">.text:0804868A                 push    offset aUU      ; &quot;%u %u&quot;</span><br><span class="line">.text:0804868F                 call    ___isoc99_scanf</span><br><span class="line">.text:08048694                 add     esp, 10h</span><br><span class="line">.text:08048697                 mov     eax, [ebp+var_C]      ; state starts here</span><br><span class="line">.text:0804869A                 sub     esp, 0Ch</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./04_angr_symbolic_stack&#x27;</span>, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>:<span class="number">0x8048000</span>&#125;)</span><br><span class="line">after_input_addr = <span class="number">0x8048697</span></span><br><span class="line">state = proj.factory.entry_state(addr=after_input_addr)</span><br><span class="line"></span><br><span class="line">user_input = [claripy.BVS(<span class="string">&#x27;input_%d&#x27;</span> % i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># state.regs.ebp = state.regs.esp</span></span><br><span class="line">state.regs.esp = state.regs.ebp - <span class="number">8</span></span><br><span class="line">state.stack_push(user_input[<span class="number">0</span>])</span><br><span class="line">state.stack_push(user_input[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">find_addr = <span class="number">0x80486E4</span></span><br><span class="line">avoid_addr = <span class="number">0x80486D2</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=find_addr, avoid=avoid_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> user_input:</span><br><span class="line">        <span class="built_in">print</span> (simgr.found[<span class="number">0</span>].se.<span class="built_in">eval</span>(a), end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> ()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><p>用的方法是 <code>stack_push</code>，所以需要先把 <code>esp</code> 设置好</p><p>剩下的应该没什么变化</p><h1 id="symbolic-memory"><a href="#symbolic-memory" class="headerlink" title="symbolic memory"></a>symbolic memory</h1><p>这题是输入存到了 <code>.bss</code> 段中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:080485E0                 push    offset unk_A1BA1D8</span><br><span class="line">.text:080485E5                 push    offset unk_A1BA1D0</span><br><span class="line">.text:080485EA                 push    offset unk_A1BA1C8</span><br><span class="line">.text:080485EF                 push    offset user_input</span><br><span class="line">.text:080485F4                 push    offset a8s8s8s8s ; &quot;%8s %8s %8s %8s&quot;</span><br><span class="line">.text:080485F9                 call    ___isoc99_scanf</span><br><span class="line">.text:080485FE                 add     esp, 20h</span><br><span class="line">.text:08048601                 mov     [ebp+var_C], 0       ; state starts here</span><br><span class="line">.text:08048608                 jmp     short loc_8048637</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./05_angr_symbolic_memory&#x27;</span>, main_opts=&#123;<span class="string">&quot;base_addr&quot;</span>:<span class="number">0x8048000</span>&#125;)</span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x8048601</span></span><br><span class="line">state = proj.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">user_input = [claripy.BVS(<span class="string">&#x27;input_%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> user_input:</span><br><span class="line">    state.solver.add(u &gt;= <span class="number">0x20</span>)</span><br><span class="line">    state.solver.add(u &lt;= <span class="number">0x7f</span>)</span><br><span class="line"></span><br><span class="line">mem_addr = <span class="number">0xA1BA1C0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    state.memory.store(mem_addr + i, user_input[i])</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">find_addr = <span class="number">0x8048672</span></span><br><span class="line">avoid_addr = <span class="number">0x804865B</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=find_addr, avoid=avoid_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27; &#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(simgr.found[<span class="number">0</span>].se.<span class="built_in">eval</span>(user_input[i])), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> ()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><p>用的是 <code>memory.store(store_addr, store_symbolic)</code> 方法</p><h1 id="symbolic-dynamic-memory"><a href="#symbolic-dynamic-memory" class="headerlink" title="symbolic dynamic memory"></a>symbolic dynamic memory</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buffer0 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">buffer1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line"><span class="built_in">memset</span>(buffer0, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line"><span class="built_in">memset</span>(buffer1, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%8s %8s&quot;</span>, buffer0, buffer1, v6);</span><br></pre></td></tr></table></figure><p>这题的输入存储到了 <code>malloc</code> 中，这个地址动态的，如果仅仅使用 <code>memory.store()</code> 无法确定存储的地址</p><p>因此先将 <code>buffer</code> 的地址修改为一个自定义的虚假地址（因为 <code>buffer</code> 在 <code>.bss</code> 段上，地址是固定的），然后往这个地址中写入数据，后续程序的模拟执行会使用这个虚假地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./06_angr_symbolic_dynamic_memory&#x27;</span>, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>:<span class="number">0x8048000</span>&#125;)</span><br><span class="line"></span><br><span class="line">state_addr = <span class="number">0x8048699</span></span><br><span class="line">state = proj.factory.blank_state(addr = state_addr)</span><br><span class="line"></span><br><span class="line">buffer0_addr = <span class="number">0xABCC8A4</span></span><br><span class="line">buffer1_addr = <span class="number">0xABCC8AC</span></span><br><span class="line"></span><br><span class="line">fake_heap_addr0 = <span class="number">0xDEADBE00</span></span><br><span class="line">fake_heap_addr1 = <span class="number">0xDEADBF00</span></span><br><span class="line"></span><br><span class="line">state.memory.store(buffer0_addr, fake_heap_addr0, endness=proj.arch.memory_endness)</span><br><span class="line">state.memory.store(buffer1_addr, fake_heap_addr1, endness=proj.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">user_input = [claripy.BVS(<span class="string">&#x27;input_%d&#x27;</span> % i, <span class="number">8</span> * <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">state.memory.store(fake_heap_addr0, user_input[<span class="number">0</span>])</span><br><span class="line">state.memory.store(fake_heap_addr1, user_input[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">find_addr = <span class="number">0x8048759</span></span><br><span class="line">avoid_addr = <span class="number">0x8048747</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=find_addr, avoid=avoid_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="built_in">print</span> (simgr.found[<span class="number">0</span>].se.<span class="built_in">eval</span>(user_input[<span class="number">0</span>], cast_to=<span class="built_in">bytes</span>).decode(), simgr.found[<span class="number">0</span>].se.<span class="built_in">eval</span>(user_input[<span class="number">1</span>], cast_to=<span class="built_in">bytes</span>).decode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="symbolic-file"><a href="#symbolic-file" class="headerlink" title="symbolic file"></a>symbolic file</h1><p>这题没有用预期做法来做</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fp = fopen(<span class="string">&quot;OJKSQYDP.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">fread(buffer, <span class="number">1u</span>, <span class="number">0x40</span>u, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line">unlink(<span class="string">&quot;OJKSQYDP.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>既然这里有个从文件读取，那么可以直接把初始状态设置到文件读取后面，那么这道题就和之前做过的 <code>symbolic memory</code> 一样了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./07_angr_symbolic_file&#x27;</span>, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>:<span class="number">0x8048000</span>&#125;)</span><br><span class="line"></span><br><span class="line">init_addr = <span class="number">0x804893C</span></span><br><span class="line">state = proj.factory.blank_state(addr=init_addr)</span><br><span class="line"></span><br><span class="line">user_input = claripy.BVS(<span class="string">&#x27;user_input&#x27;</span>, <span class="number">8</span> * <span class="number">8</span>)</span><br><span class="line">mem_addr = <span class="number">0x804A0A0</span></span><br><span class="line">state.memory.store(mem_addr, user_input)</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">find_addr = <span class="number">0x80489B0</span></span><br><span class="line">avoid_addr = <span class="number">0x8048996</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=find_addr, avoid=avoid_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="built_in">print</span> (simgr.found[<span class="number">0</span>].se.<span class="built_in">eval</span>(user_input))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;no result&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="constraints"><a href="#constraints" class="headerlink" title="constraints"></a>constraints</h1><p>这题的解法是对运算结果手动做约束，不知道为什么用之前的方法做不出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./08_angr_constraints&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>:<span class="literal">False</span>&#125;, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>:<span class="number">0x8048000</span>&#125;)</span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x8048625</span></span><br><span class="line">start_state = proj.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">flag = claripy.BVS(<span class="string">&#x27;flag&#x27;</span>, <span class="number">8</span> * <span class="number">16</span>)</span><br><span class="line">buffer_addr = <span class="number">0x804A050</span></span><br><span class="line"></span><br><span class="line">start_state.memory.store(buffer_addr, flag)</span><br><span class="line"></span><br><span class="line">end_addr = <span class="number">0x804866E</span></span><br><span class="line">simgr = proj.factory.simgr(start_state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = end_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    end_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    calc_res = end_state.memory.load(buffer_addr, <span class="number">16</span>)</span><br><span class="line">    cipher = <span class="string">b&quot;AUPDNNPROEZRJWKB&quot;</span></span><br><span class="line">    end_state.add_constraints(calc_res == cipher)</span><br><span class="line">    <span class="built_in">print</span> (end_state.se.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;fail&#x27;</span>)</span><br></pre></td></tr></table></figure><p>仅模拟了for循环（加密部分），运行结束后直接使用 <code>add_constraints</code> 手动添加约束条件</p><h1 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h1><p>又来了次非预期</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, buffer);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  *(_BYTE *)(i + <span class="number">134520916</span>) = complex_function(*(<span class="keyword">char</span> *)(i + <span class="number">0x804A054</span>), <span class="number">18</span> - i);</span><br><span class="line">equals = check_equals_XYMKBKUHNIQYNQXE(buffer, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">  *(_BYTE *)(j + <span class="number">0x804A044</span>) = complex_function(*(<span class="keyword">char</span> *)(j + <span class="number">134520900</span>), j + <span class="number">9</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, buffer);</span><br><span class="line">v3 = equals &amp;&amp; !<span class="built_in">strncmp</span>(buffer, password, <span class="number">0x10</span>u);</span><br></pre></td></tr></table></figure><p>显然，这道题可以拆成两部分来做，第一部分使用 <code>constraints</code> 求解第一次输入；第二部分直接获取 password 的运算结果</p><p>于是相当于写了两次 <code>angr</code>（感觉完全可以合并起来，但稳妥起见，后面再试试）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./09_angr_hooks&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_state = <span class="number">0x8048665</span></span><br><span class="line">user_input = claripy.BVS(<span class="string">&#x27;user_input&#x27;</span>, <span class="number">8</span> * <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">init_state = proj.factory.blank_state(addr = start_state)</span><br><span class="line">buffer_addr = <span class="number">0x804A054</span></span><br><span class="line">init_state.memory.store(buffer_addr, user_input)</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">end_addr = <span class="number">0x80486AC</span></span><br><span class="line">simgr.explore(find = end_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    result = solution_state.memory.load(buffer_addr, <span class="number">16</span>)</span><br><span class="line">    solution_state.add_constraints(<span class="string">b&quot;XYMKBKUHNIQYNQXE&quot;</span> == result)</span><br><span class="line">    <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(user_input, cast_to=<span class="built_in">bytes</span>).decode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;fail&quot;</span>)</span><br><span class="line"></span><br><span class="line">second_start = <span class="number">0x80486C0</span></span><br><span class="line">second_state = proj.factory.blank_state(addr = second_start)</span><br><span class="line"></span><br><span class="line">second_state.memory.store(<span class="number">0x804A044</span>, <span class="string">b&quot;XYMKBKUHNIQYNQXE&quot;</span>)</span><br><span class="line"></span><br><span class="line">second_simgr = proj.factory.simgr(second_state)</span><br><span class="line"></span><br><span class="line">second_simgr.explore(find = <span class="number">0x8048700</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> second_simgr.found:</span><br><span class="line">    result = second_simgr.found[<span class="number">0</span>].memory.load(<span class="number">0x804A044</span>, <span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span> (second_simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(result, cast_to=<span class="built_in">bytes</span>).decode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter the password: ZXIDRXEORJOTFFJN</span><br><span class="line">WUFAOUBLOGLQCCGK</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><p>补上用hook写的，用了两种hook的写法（看到simprocedures那题才发现第二个是下一题的写法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./09_angr_hooks&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line">check_addr = <span class="number">0x80486B3</span></span><br><span class="line">instraction_len = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">choose_hook = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> choose_hook == <span class="number">1</span>:</span><br><span class="line"><span class="meta">@proj.hook(check_addr, length = instraction_len)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_check_equal</span>(<span class="params">state</span>):</span></span><br><span class="line">target = <span class="string">b&#x27;XYMKBKUHNIQYNQXE&#x27;</span> <span class="comment"># claripy will convert it to bytes if it is str.</span></span><br><span class="line">input_addr = <span class="number">0x804A054</span></span><br><span class="line">cipher = state.memory.load(input_addr, <span class="number">0x10</span>)</span><br><span class="line">state.regs.eax = claripy.If(cipher == target, claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> choose_hook == <span class="number">2</span>:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">replace_check_equal</span>(<span class="params">SimProcedure</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">target = <span class="string">b&#x27;XYMKBKUHNIQYNQXE&#x27;</span></span><br><span class="line">input_addr = <span class="number">0x804A054</span></span><br><span class="line">cipher = self.state.memory.load(input_addr, <span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">return</span> claripy.If(cipher == target, claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">check_equal_symbol = <span class="string">&#x27;check_equals_XYMKBKUHNIQYNQXE&#x27;</span></span><br><span class="line">proj.hook_symbol(check_equal_symbol, replace_check_equal())</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(start_state)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_avoid</span>(<span class="params">state</span>):</span></span><br><span class="line">output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_success, avoid = should_avoid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line"><span class="built_in">print</span> (simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;no solution&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="simprocedures"><a href="#simprocedures" class="headerlink" title="simprocedures"></a>simprocedures</h1><p>同样先用之前的方法写了一遍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./10_angr_simprocedures&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x80486C3</span></span><br><span class="line">init_state = proj.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">init_state.regs.esp = init_state.regs.ebp - <span class="number">0xD</span></span><br><span class="line"></span><br><span class="line">user_input1 = claripy.BVS(<span class="string">&#x27;user_input1&#x27;</span>, <span class="number">8</span> * <span class="number">4</span>)</span><br><span class="line">user_input2 = claripy.BVS(<span class="string">&#x27;user_input2&#x27;</span>, <span class="number">8</span> * <span class="number">4</span>)</span><br><span class="line">user_input3 = claripy.BVS(<span class="string">&#x27;user_input3&#x27;</span>, <span class="number">8</span> * <span class="number">4</span>)</span><br><span class="line">user_input4 = claripy.BVS(<span class="string">&#x27;user_input4&#x27;</span>, <span class="number">8</span> * <span class="number">4</span>)</span><br><span class="line">init_state.stack_push(user_input4)</span><br><span class="line">init_state.stack_push(user_input3)</span><br><span class="line">init_state.stack_push(user_input2)</span><br><span class="line">init_state.stack_push(user_input1)</span><br><span class="line"></span><br><span class="line">init_state.regs.esp = init_state.regs.ebp - <span class="number">0x28</span></span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">check_addr = <span class="number">0x80499F1</span></span><br><span class="line">simgr.explore(find = check_addr)</span><br><span class="line"></span><br><span class="line">ans = <span class="string">b&quot;ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    input_addr = solution_state.regs.ebp - <span class="number">0x1D</span></span><br><span class="line">    result1 = solution_state.memory.load(input_addr, <span class="number">4</span>)</span><br><span class="line">    result2 = solution_state.memory.load(input_addr + <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    result3 = solution_state.memory.load(input_addr + <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">    result4 = solution_state.memory.load(input_addr + <span class="number">12</span>, <span class="number">4</span>)</span><br><span class="line">    solution_state.add_constraints(ans[:<span class="number">4</span>] == result1)</span><br><span class="line">    solution_state.add_constraints(ans[<span class="number">4</span>:<span class="number">8</span>] == result2)</span><br><span class="line">    solution_state.add_constraints(ans[<span class="number">8</span>:<span class="number">12</span>] == result3)</span><br><span class="line">    solution_state.add_constraints(ans[<span class="number">12</span>:] == result4)</span><br><span class="line">    <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(user_input1, cast_to=<span class="built_in">bytes</span>).decode()[::<span class="number">-1</span>], end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(user_input2, cast_to=<span class="built_in">bytes</span>).decode()[::<span class="number">-1</span>], end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(user_input3, cast_to=<span class="built_in">bytes</span>).decode()[::<span class="number">-1</span>], end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(user_input4, cast_to=<span class="built_in">bytes</span>).decode()[::<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;no result&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后用 <code>hook_symbol</code> 试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./10_angr_simprocedures&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">replace_check_equals</span>(<span class="params">SimProcedure</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, to_check, length</span>):</span></span><br><span class="line">        target = <span class="string">b&#x27;ORSDDWXHZURJRBDH&#x27;</span></span><br><span class="line">        result = self.state.memory.load(to_check, length)</span><br><span class="line">        <span class="keyword">return</span> claripy.If(result == target, claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">check_equals_sym = <span class="string">&#x27;check_equals_ORSDDWXHZURJRBDH&#x27;</span></span><br><span class="line">proj.hook_symbol(check_equals_sym, replace_check_equals())</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(start_state)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_successful, avoid = should_abort)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="built_in">print</span> (simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;no result&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="sim-scanf"><a href="#sim-scanf" class="headerlink" title="sim_scanf"></a>sim_scanf</h1><p><code>simProcedure</code> 其实是 <code>angr</code> 用于缓解路径爆炸的一个策略，将一些有可能导致路径爆炸的库函数进行了重写，然而 <code>angr</code> 提供的重写可能存在不完善的地方，例如 <code>scanf</code> 无法支持多个参数，因此这道题目中，需要自己重写 <code>scanf</code> 的 <code>SimProcedure</code>，实现接收两个参数</p><p>这道题主要学到的就是利用 <code>globals</code> 存储注入的符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./11_angr_sim_scanf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line">start_state.<span class="built_in">globals</span>[<span class="string">&#x27;inputs&#x27;</span>] = []</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">replace_scanf</span>(<span class="params">SimProcedure</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, fmt, input1, input2</span>):</span></span><br><span class="line">        user_input1 = claripy.BVS(<span class="string">&#x27;user_input1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">        user_input2 = claripy.BVS(<span class="string">&#x27;user_input2&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">        self.state.memory.store(input1, user_input1, endness = proj.arch.memory_endness)</span><br><span class="line">        self.state.memory.store(input2, user_input2, endness = proj.arch.memory_endness)</span><br><span class="line">        self.state.<span class="built_in">globals</span>[<span class="string">&#x27;inputs&#x27;</span>].append((user_input1, user_input2))</span><br><span class="line"></span><br><span class="line">scanf_sym = <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line">proj.hook_symbol(scanf_sym, replace_scanf())</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(start_state)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_avoid</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_success, avoid = should_avoid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;inputs&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(res[<span class="number">0</span>]), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(res[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;no result&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="veritesting"><a href="#veritesting" class="headerlink" title="veritesting"></a>veritesting</h1><p>设置 <code>simulation_manager</code> 时，启用 <code>veritesting</code> 可以缓解一定程度的路径爆炸</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./12_angr_veritesting&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(start_state, veritesting=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_avoid</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_success, avoid = should_avoid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="built_in">print</span> (simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;No result&#x27;</span>)</span><br></pre></td></tr></table></figure><p>简单学习了一下 <code>veritesting</code> 的原理，在本题目的验证环节，代码为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i) &#123;</span><br><span class="line">  <span class="keyword">if</span> (buffer[i] == complex_function($&#123; write(<span class="string">&#x27;\&#x27;&#x27;</span> + letter0 + <span class="string">&#x27;\&#x27;&#x27;</span> ) &#125;$, i + $&#123; write(integer) &#125;$) ) &#123;</span><br><span class="line">    counter0++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果单纯以分支图来话，总共引入了 $2^{32}$ 种可能，然而事实上只有满足和不满足两种情况</p><p>开启 <code>veritesting</code> 后，angr会在遇到基础代码（无系统调用，间接跳转等语句）时，从动态符号执行（为每一条路径生成一个表达式）切换到静态符号执行（将程序转换为表达式）。因此，在执行这个循环时，先动态恢复控制流图，找到静态符号执行容易分析和难以分析的语句，并推断出易分析节点到难分析节点的影响，最后切换回动态分析来处理不易处理的情况。</p><h1 id="static-binary"><a href="#static-binary" class="headerlink" title="static binary"></a>static binary</h1><p>在 <code>sim_scanf</code> 中说到，angr 将部分库函数替换为自己实现的 <code>SimProcedures</code> 来避免路径爆炸，但当遇到静态编译的二进制文件时，由于没有调用库函数，这些静态的函数就有可能造成路径爆炸，需要我们手动替换为 <code>SimProcedures</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./13_angr_static_binary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line">proj.hook(<span class="number">0x804ED40</span>, SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;printf&#x27;</span>]())</span><br><span class="line">proj.hook(<span class="number">0x804ED80</span>, SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;scanf&#x27;</span>]())</span><br><span class="line">proj.hook(<span class="number">0x804F350</span>, SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;puts&#x27;</span>]())</span><br><span class="line">proj.hook(<span class="number">0x8048D10</span>, SIM_PROCEDURES[<span class="string">&#x27;glibc&#x27;</span>][<span class="string">&#x27;__libc_start_main&#x27;</span>]())</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(start_state, veritesting = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_avoid</span>(<span class="params">state</span>):</span></span><br><span class="line">output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_success, avoid = should_avoid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">solution = simgr.found[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> (solution.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;No result&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="shared-library"><a href="#shared-library" class="headerlink" title="shared library"></a>shared library</h1><p>这道题目将加密部分放到了 <code>so</code> 文件中，因此需要执行 <code>so</code> 文件</p><p>在执行时遇到的问题有</p><ul><li>基地址不确定：使用 <code>base_addr</code> 来控制程序的基地址</li><li>符号注入的地址未知：使用 <code>call_state</code> 来控制函数调用时的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">base_addr = <span class="number">0x400000</span></span><br><span class="line">proj = Project(<span class="string">&#x27;./lib14_angr_shared_library.so&#x27;</span>, main_opts=&#123;<span class="string">&#x27;base_addr&#x27;</span>:base_addr&#125;)</span><br><span class="line"></span><br><span class="line">store_addr = <span class="number">0x300000</span></span><br><span class="line"></span><br><span class="line">init_state = proj.factory.call_state(base_addr + <span class="number">0x6d7</span>, store_addr, claripy.BVV(<span class="number">8</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">user_input = claripy.BVS(<span class="string">&#x27;user_input&#x27;</span>, <span class="number">8</span> * <span class="number">8</span>)</span><br><span class="line">init_state.memory.store(store_addr, user_input, endness = proj.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">find_addr = base_addr + <span class="number">0x775</span></span><br><span class="line">simgr = proj.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = find_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">solution = simgr.found[<span class="number">0</span>]</span><br><span class="line">solution.add_constraints(solution.regs.eax != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span> (solution.solver.<span class="built_in">eval</span>(user_input, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;no result&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="arbitrary-read"><a href="#arbitrary-read" class="headerlink" title="arbitrary read"></a>arbitrary read</h1><p>这道题有些复杂，由于需要让输入的部分溢出，控制 puts 的输出参数</p><p>同样需要替换 <code>scanf</code>，同时，这道题目为了减小输入的可能性，需要手动添加一下对输入的约束，要求在可见字符范围内</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./15_angr_arbitrary_read&#x27;</span>)</span><br><span class="line"></span><br><span class="line">init_state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">replace_scanf</span>(<span class="params">SimProcedure</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, fmt, key_addr, stack_addr</span>):</span></span><br><span class="line">user_input1 = claripy.BVS(<span class="string">&#x27;user_input1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">user_input2 = claripy.BVS(<span class="string">&#x27;user_input2&#x27;</span>, <span class="number">20</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> user_input2.chop(bits = <span class="number">8</span>):</span><br><span class="line">self.state.add_constraints(i &gt; <span class="number">0x20</span>)</span><br><span class="line">self.state.add_constraints(i &lt; <span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">self.state.memory.store(key_addr, user_input1, endness = proj.arch.memory_endness)</span><br><span class="line">self.state.memory.store(stack_addr, user_input2)</span><br><span class="line">self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (user_input1, user_input2)</span><br><span class="line"></span><br><span class="line">proj.hook_symbol(<span class="string">&#x27;__isoc99_scanf&#x27;</span>, replace_scanf())</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_puts</span>(<span class="params">state</span>):</span></span><br><span class="line">output_addr = state.memory.load(state.regs.esp + <span class="number">4</span>, <span class="number">4</span>, endness = proj.arch.memory_endness)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> state.solver.symbolic(output_addr):</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">FLAG = output_addr == <span class="number">0x484F4A47</span></span><br><span class="line">copy_state = state.copy()</span><br><span class="line">copy_state.add_constraints(FLAG)</span><br><span class="line"><span class="keyword">if</span> copy_state.satisfiable():</span><br><span class="line">state.add_constraints(FLAG)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">puts_addr = <span class="number">0x8048370</span></span><br><span class="line"><span class="keyword">if</span> state.addr == puts_addr:</span><br><span class="line"><span class="keyword">return</span> check_puts(state)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_success)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">solution = simgr.found[<span class="number">0</span>]</span><br><span class="line">user_input1, user_input2 = solution.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (solution.solver.<span class="built_in">eval</span>(user_input1), solution.solver.<span class="built_in">eval</span>(user_input2, cast_to=<span class="built_in">bytes</span>).decode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;No result&quot;</span>)</span><br></pre></td></tr></table></figure><p>不是很理解的地方是，为什么要先添加判断这个 <code>constraints</code> 是否满足，然后再添加到 <code>state</code> 中</p><h1 id="arbitrary-write"><a href="#arbitrary-write" class="headerlink" title="arbitrary write"></a>arbitrary write</h1><p>思路和上一题比较接近，这次使用了 <code>strncpy</code> 函数的参数作为检查</p><p>遇到的一个问题是 <code>BV</code> 数据类型在选择部分数据上的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = Project(<span class="string">&#x27;./16_angr_arbitrary_write&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_state = proj.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">replace_scanf</span>(<span class="params">SimProcedure</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, fmt, key_addr, s_addr</span>):</span></span><br><span class="line">        user_input1 = claripy.BVS(<span class="string">&#x27;user_input1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">        user_input2 = claripy.BVS(<span class="string">&#x27;user_input2&#x27;</span>, <span class="number">8</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> user_input2.chop(bits = <span class="number">8</span>):</span><br><span class="line">            self.state.add_constraints(c &gt; <span class="number">0x20</span>)</span><br><span class="line">            self.state.add_constraints(c &lt; <span class="number">0x7f</span>)</span><br><span class="line">        </span><br><span class="line">        self.state.memory.store(key_addr, user_input1, endness = proj.arch.memory_endness)</span><br><span class="line">        self.state.memory.store(s_addr, user_input2)</span><br><span class="line">        self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (user_input1, user_input2)</span><br><span class="line">    </span><br><span class="line">proj.hook_symbol(<span class="string">&#x27;__isoc99_scanf&#x27;</span>, replace_scanf())</span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simgr(start_state)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_strncpy</span>(<span class="params">state</span>):</span></span><br><span class="line">    dest_addr = state.memory.load(state.regs.esp + <span class="number">4</span>, <span class="number">4</span>, endness = proj.arch.memory_endness)</span><br><span class="line">    src_addr = state.memory.load(state.regs.esp + <span class="number">8</span>, <span class="number">4</span>, endness = proj.arch.memory_endness)</span><br><span class="line">    length = state.memory.load(state.regs.esp + <span class="number">12</span>, <span class="number">4</span>, endness = proj.arch.memory_endness)</span><br><span class="line">    source = state.memory.load(src_addr, length)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> state.solver.symbolic(source) <span class="keyword">or</span> <span class="keyword">not</span> state.solver.symbolic(dest_addr):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    target_string = <span class="string">b&#x27;NDYNWEUJ&#x27;</span></span><br><span class="line">    target_dest = <span class="number">0x57584344</span></span><br><span class="line">    <span class="keyword">if</span> state.satisfiable(extra_constraints = (target_dest == dest_addr, target_string == source[<span class="number">-1</span>:<span class="number">-64</span>])):</span><br><span class="line">        state.add_constraints(target_dest == dest_addr, target_string == source[<span class="number">-1</span>:<span class="number">-64</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="keyword">if</span> state.addr == <span class="number">0x8048410</span>:</span><br><span class="line">        <span class="keyword">return</span> check_strncpy(state)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_successful)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    user_input1, user_input2 = solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span> (solution_state.solver.<span class="built_in">eval</span>(user_input1), solution_state.solver.<span class="built_in">eval</span>(user_input2, cast_to=<span class="built_in">bytes</span>).decode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;No result&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;开始学angr&lt;/p&gt;
&lt;p&gt;&lt;del&gt;就是在抄solution&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="angr" scheme="https://s0uthwood.github.io/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF 2021-09 Writeup</title>
    <link href="https://s0uthwood.github.io/2021/09/26/DASCTF-2021-09-Writeup/"/>
    <id>https://s0uthwood.github.io/2021/09/26/DASCTF-2021-09-Writeup/</id>
    <published>2021-09-25T16:10:18.000Z</published>
    <updated>2021-09-25T16:21:57.683Z</updated>
    
    <content type="html"><![CDATA[<p>被队友鸽了，久违的个人赛</p><ul><li>[RE-AK]</li><li>[Misc]Girlfriend’s account</li><li>[Misc]blind</li><li>[Crypto]签到</li></ul><a id="more"></a><h1 id="RE-ea5ycpp"><a href="#RE-ea5ycpp" class="headerlink" title="[RE]ea5ycpp"></a>[RE]ea5ycpp</h1><p>一开始还被逻辑绕了一下，结果发现核心部分就是brainfuck</p><p>有一些结构体，可以恢复一下，会比较好看</p><p>brainfuck解析出来就是简单的加减法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">9999</span>];</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">0</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">1</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">2</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">5</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">6</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">7</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">5</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">8</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">6</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">9</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">7</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">8</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">11</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">9</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">12</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">10</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">13</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">11</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">14</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">12</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">15</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">13</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">16</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">14</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">18</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">15</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">19</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">16</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">20</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">17</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">21</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">18</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">22</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">19</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">23</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">20</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">24</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">21</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">25</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">22</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">24</span>] += <span class="number">26</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">24</span>]) &#123;</span><br><span class="line">++a[<span class="number">23</span>];</span><br><span class="line">--a[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据字符串就能看到比较的位置，密文减一下就行</p><h1 id="RE-easy-math"><a href="#RE-easy-math" class="headerlink" title="[RE]easy_math"></a>[RE]easy_math</h1><p>几个加减法解一下就行，甚至不需要z3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v20 - v16 == <span class="number">0x61536369217D</span>i64 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( v19 - v16 == <span class="number">0x586531316F</span>i64 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v18 - v16 == <span class="number">0x5F3631626F4E</span>i64 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v16 + v18 + v19 + v20 == <span class="number">0xC121F9FCC23A</span>i64 )</span><br></pre></td></tr></table></figure><p>完事之后需要把flag拼一下，而且第一个输入好像没有用？</p><p>反正我的输入是这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">439904987003</span><br><span class="line">107079497490813</span><br><span class="line">448374321519</span><br><span class="line">104755080884046</span><br><span class="line">439904987003</span><br></pre></td></tr></table></figure><h1 id="RE-pig-brain-king"><a href="#RE-pig-brain-king" class="headerlink" title="[RE]pig_brain_king"></a>[RE]pig_brain_king</h1><p>玩了一下，发现是个记忆游戏，字符串越来越长，逻辑没有细看，感觉可能找到了flag生成函数吧，不过不重要，pwntools玩通就完事了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pig_brain_king.exe&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;questions!\r\n&#x27;</span>)</span><br><span class="line">    ans = p.recvline()</span><br><span class="line">    <span class="built_in">print</span> (ans)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;enter:&#x27;</span>)</span><br><span class="line">    p.send(ans)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>脚本没写好，最后一关需要自己动手复制一下（手动狗头）</p><p>AK的人有点多，沉思（</p><h1 id="Misc-Girlfriend’s-account"><a href="#Misc-Girlfriend’s-account" class="headerlink" title="[Misc]Girlfriend’s account"></a>[Misc]Girlfriend’s account</h1><p>一开始还想着找个工具，然后发现各种bug</p><p>但认认真真写代码转码是不可能的，这辈子也不可能的，用vscode批量操作一把梭不香吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">girl = [</span><br><span class="line">    (<span class="number">4</span> * <span class="number">100</span> + <span class="number">6</span> * <span class="number">10</span> + <span class="number">7</span> + <span class="number">3</span> * <span class="number">0.1</span> + <span class="number">4</span> * <span class="number">0.01</span>) * <span class="number">6</span>,</span><br><span class="line">    (<span class="number">1</span> * <span class="number">100</span> + <span class="number">6</span> * <span class="number">10</span> + <span class="number">9</span> + <span class="number">0</span>) * <span class="number">9</span>,</span><br><span class="line">    (<span class="number">4</span> * <span class="number">100</span> + <span class="number">7</span> * <span class="number">10</span> + <span class="number">8</span> + <span class="number">0</span>) * <span class="number">8</span>,</span><br><span class="line">    (<span class="number">9</span> * <span class="number">100</span> + <span class="number">6</span> * <span class="number">10</span> + <span class="number">2</span> + <span class="number">6</span> * <span class="number">0.1</span> + <span class="number">4</span> * <span class="number">0.01</span>) * <span class="number">5</span>,</span><br><span class="line">    (<span class="number">1</span> * <span class="number">100</span> + <span class="number">4</span> * <span class="number">10</span> + <span class="number">5</span> + <span class="number">8</span> * <span class="number">0.1</span> + <span class="number">1</span> * <span class="number">0.01</span>) * <span class="number">9</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    (<span class="number">5</span> * <span class="number">100</span> + <span class="number">8</span> * <span class="number">10</span> + <span class="number">3</span> + <span class="number">2</span> * <span class="number">0.1</span> + <span class="number">9</span> * <span class="number">0.01</span>) * <span class="number">7</span>,</span><br><span class="line">    (<span class="number">7</span> * <span class="number">100</span> + <span class="number">8</span> * <span class="number">10</span> + <span class="number">1</span> + <span class="number">9</span> * <span class="number">0.1</span> + <span class="number">0</span>) * <span class="number">5</span>,</span><br><span class="line">    (<span class="number">7</span> * <span class="number">100</span> + <span class="number">7</span> * <span class="number">10</span> +  + <span class="number">0</span>) * <span class="number">4</span>,</span><br><span class="line">    (<span class="number">1</span> * <span class="number">100</span> + <span class="number">1</span> * <span class="number">10</span> + <span class="number">9</span> + <span class="number">9</span> * <span class="number">0.1</span> + <span class="number">9</span> * <span class="number">0.01</span>) * <span class="number">5</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">spend = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> girl:</span><br><span class="line">    spend += g</span><br><span class="line"><span class="built_in">print</span> (spend)</span><br></pre></td></tr></table></figure><p>这账单，幸好没有npy</p><h1 id="Misc-blind"><a href="#Misc-blind" class="headerlink" title="[Misc]blind"></a>[Misc]blind</h1><p>压缩包里有俩“一样”的图片，用工具xor一看，发现只有一点蓝色，猜测可能是个盲水印，上网找工具装环境</p><p><img data-src="output.png" alt="output.png"></p><p>解出来发现是个盲文</p><p>网上找了半天，才发现是拼音盲文，麻了</p><h1 id="Crypto-签到"><a href="#Crypto-签到" class="headerlink" title="[Crypto]签到"></a>[Crypto]签到</h1><p>说出来可能不信，这求解脚本是我在贴吧找到的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e=discrete_log(c,mod(m,n))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;被队友鸽了，久违的个人赛&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[RE-AK]&lt;/li&gt;
&lt;li&gt;[Misc]Girlfriend’s account&lt;/li&gt;
&lt;li&gt;[Misc]blind&lt;/li&gt;
&lt;li&gt;[Crypto]签到&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
    <category term="Misc" scheme="https://s0uthwood.github.io/tags/Misc/"/>
    
    <category term="DASCTF" scheme="https://s0uthwood.github.io/tags/DASCTF/"/>
    
  </entry>
  
  <entry>
    <title>加密与解密学习笔记（持续更新ing）</title>
    <link href="https://s0uthwood.github.io/2021/09/25/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://s0uthwood.github.io/2021/09/25/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-24T18:15:45.000Z</published>
    <updated>2021-09-25T18:18:33.280Z</updated>
    
    <content type="html"><![CDATA[<p>suibiankankan</p><a id="more"></a><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="分析的一般途径和策略"><a href="#分析的一般途径和策略" class="headerlink" title="分析的一般途径和策略"></a>分析的一般途径和策略</h2><ol><li>学会软件的操作和使用方法 $\to$ 推测出软件的设计思想和编程思路</li><li>静态分析：阅读反汇编的程序清单，利用人机交互的提示信息了解片段所完成的功能，宏观了解软件的编程思路</li><li>动态跟踪：首先完成反反调试，并解密加密程序，了解初始化工作，获得各个模块之间的中间结果<ol><li>粗跟踪：不跟踪调用等指令，仅根据执行结果分析程序的功能</li><li>细跟踪：针对性跟踪分析关键模块</li></ol></li></ol><h2 id="文本字符"><a href="#文本字符" class="headerlink" title="文本字符"></a>文本字符</h2><h3 id="ASCII-和-Unicode"><a href="#ASCII-和-Unicode" class="headerlink" title="ASCII 和 Unicode"></a>ASCII 和 Unicode</h3><p>Unicode 是 ASCII 的扩展，所有字符都是 16 位</p><h3 id="字节存储顺序"><a href="#字节存储顺序" class="headerlink" title="字节存储顺序"></a>字节存储顺序</h3><p>小端序（Little-endian）：高位字节存入高地址，低位字节存入低地址</p><p>大端序（Big-endian）：高位字节存入低地址，低位字节存入高地址</p><div class="table-container"><table><thead><tr><th>字节序</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>大端序</td><td>12</td><td>34</td><td>56</td><td>78</td></tr><tr><td>小端序</td><td>78</td><td>56</td><td>34</td><td>12</td></tr></tbody></table></div><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="Win-32-API"><a href="#Win-32-API" class="headerlink" title="Win 32 API"></a>Win 32 API</h3><p>32位API与64位API在名称和功能上基本没有变化</p><p>Windows运转核心为DLL动态链接库</p><ul><li>KERNEL32.DLL：操作系统核心功能服务，进程与线程控制、内存管理、文件访问等</li><li>USER32.DLL：负责处理用户接口，包括键盘和鼠标输入、窗口和菜单管理等</li><li>GDI：图形设备接口，允许程序在屏幕和打印机上显示文本和图形</li></ul><h3 id="Windows消息机制"><a href="#Windows消息机制" class="headerlink" title="Windows消息机制"></a>Windows消息机制</h3><p>Windows使用Message提供应用程序与应用程序、应用程序与操作系统之间的通信</p><p>常用的函数如下：</p><h4 id="SendMessage"><a href="#SendMessage" class="headerlink" title="SendMessage"></a>SendMessage</h4><p>调用一个窗口的窗口函数，将一条消息发送给那个窗口。除非消息处理完毕，否则不会返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">SendMessage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HWND hwnd,<span class="comment">// 目的窗口的句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">UINT Msg,<span class="comment">// 消息标识符</span></span></span></span><br><span class="line"><span class="function"><span class="params">WPARAM wParam,<span class="comment">// 消息的WPARAM域</span></span></span></span><br><span class="line"><span class="function"><span class="params">LPARAM lParam<span class="comment">// 消息的LPARAM域</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：消息投递成功，返回非零</p><h4 id="WM-COMMAND"><a href="#WM-COMMAND" class="headerlink" title="WM_COMMAND"></a>WM_COMMAND</h4><p>当用户从菜单或按钮中选择一条命令或者一个控件时该消息被发送给它的父窗口，或者当一个快捷键被释放时发送该消息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WM_COMMAND</span><br><span class="line">wNotifyCode = HIWORD(wParam); <span class="comment">// 通告函数</span></span><br><span class="line">wID = LOWORD(wParam);<span class="comment">// 菜单条目、控件或快捷键的标识符</span></span><br><span class="line">hwndCtl = (HWND) lParam;<span class="comment">// 控件句柄</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：如果应用程序处理这条消息，则返回值为零</p><h4 id="WM-DESTORY"><a href="#WM-DESTORY" class="headerlink" title="WM_DESTORY"></a>WM_DESTORY</h4><p>当一个窗口被销毁时发送该消息。该消息对应 <code>0x02</code>，没有参数</p><p><strong>返回值</strong>：如果应用程序处理这条消息，则返回值为零</p><h4 id="WM-GETTEXT"><a href="#WM-GETTEXT" class="headerlink" title="WM_GETTEXT"></a>WM_GETTEXT</h4><p>当需要将一个窗口的文本复制到一个由呼叫程序提供的缓冲区中时，发送该消息。该消息对应 <code>0x0D</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WM_GETTEXT</span><br><span class="line">wParam = (WPARAM) cchTextMax;<span class="comment">// 需要复制的字符数</span></span><br><span class="line">lParam = (LPARAM) lpszText;<span class="comment">// 接收文本的缓冲区地址</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：被复制的字符数</p><h4 id="WM-QUIT"><a href="#WM-QUIT" class="headerlink" title="WM_QUIT"></a>WM_QUIT</h4><p>当应用程序调用 <code>PostQuitMessage</code> 时，生成 <code>WM_QUIT</code>消息，对应 <code>0x12</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WM_QUIT</span><br><span class="line">nExitCode = (<span class="keyword">int</span>) wParam;<span class="comment">// 退出代码</span></span><br></pre></td></tr></table></figure><p>无<strong>返回值</strong></p><h4 id="WM-LBUTTONDOWN"><a href="#WM-LBUTTONDOWN" class="headerlink" title="WM_LBUTTONDOWN"></a>WM_LBUTTONDOWN</h4><p>光标停在窗口客户区且点击左键时，发送此消息</p><p>如果鼠标未捕捉，将下发给光标下的窗口，否则发送给捕获鼠标动作的窗口</p><p>对应 <code>0x201</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WM_LBUTTONDOWN</span><br><span class="line">fwkeys = wParam;<span class="comment">// key旗帜</span></span><br><span class="line">xPos = LOWORD(lParam);<span class="comment">// 光标的水平位置</span></span><br><span class="line">yPos = HIWORD(lParam);<span class="comment">// 光标的垂直位置</span></span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：如果应用程序处理了这条消息，返回值为零</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><ul><li>应用程序不会直接访问物理地址</li><li>虚拟内存管理器通过虚拟地址的访问请求来控制所有的物理地址访问</li><li>每个应用都有独立的寻址空间，不同应用程序的地址空间是彼此隔离的</li><li>DLL程序没有私有空间，总是被映射到其他应用程序的地址空间中，作为程序的一部分运行</li></ul><h1 id="动态分析技术"><a href="#动态分析技术" class="headerlink" title="动态分析技术"></a>动态分析技术</h1><h1 id="逆向分析技术"><a href="#逆向分析技术" class="headerlink" title="逆向分析技术"></a>逆向分析技术</h1><h2 id="Win32"><a href="#Win32" class="headerlink" title="Win32"></a>Win32</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>程序先执行启动代码，随后调用 <code>WinMain</code> 函数</p><p>实例中的系统调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Call KERNEL32.GetVersion              ; 确定Windows系统版本</span><br><span class="line">Call KERNEL32.GetCommandLineA         ; 指向系统的完整命令行的指针</span><br><span class="line">Call KERNEL32.GetStartupInfoA         ; 获取一个进程的启动信息</span><br><span class="line">Call KERNEL32.GetModuleHandleA        ; 返回进程地址空间执行文件基地址</span><br><span class="line">call 00401000                         ; 调用WinMain</span><br><span class="line">call 004012EC                         ; 退出程序</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><blockquote><p>通常无需关注启动，直接查看 <code>WinMain</code> 即可</p></blockquote><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>编译器通常使用 <code>call</code> 和 <code>ret</code> 指令来调用函数</p><p><code>call</code> 指令将其之后的指令地址压入栈顶，<code>ret</code> 指令则返回到调用位置</p><p>有时可能利用寄存器进行间接调用，如： <code>call eax</code> </p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>调用函数时，将参数压入栈中</p><p>对于不同语言，有不同的调用约定</p><div class="table-container"><table><thead><tr><th>类型</th><th>C/C++(__cdecl)</th><th>pascal</th><th>stdcall</th><th>fastcall</th></tr></thead><tbody><tr><td>参数传递顺序</td><td>从右向左</td><td>从左向右</td><td>从右向左</td><td>使用寄存器和栈</td></tr><tr><td>平衡栈</td><td>调用者</td><td>子程序</td><td>子程序</td><td>子程序</td></tr><tr><td>VARARG</td><td>是</td><td>否</td><td>允许*</td></tr></tbody></table></div><blockquote><p>VARARG表示参数个数可以不确定</p><p>stdcall中，如果参数个数不确定，需要由调用程序来平衡栈</p></blockquote><p>程序执行过程：</p><ul><li>调用者将函数执行完毕时应返回的地址、参数压入栈</li><li>函数使用 <code>ebp</code> 指针+偏移量对栈中的参数进行寻址并取出，完成操作</li><li>子程序使用 <code>ret</code> 或 <code>retf</code> 指令返回， <code>eip</code> 置为栈中保存的地址，并继续执行</li></ul><p>栈的建立过程（两个参数时）：</p><ul><li>先将 <code>arg2</code> 压栈，<code>esp=K-04h</code></li><li>将 <code>arg1</code> 压栈，<code>esp=K-08h</code> </li><li>执行 <code>call</code> ，把返回地址压栈，<code>esp=K-0Ch</code></li><li>为了程序能够恢复，将 <code>ebp</code> 压栈，<code>esp=K-10h</code></li><li><code>move ebp, esp</code>，将当前的栈顶设置为栈底</li><li><code>sub esp, 8</code> ，定义局部变量，两个变量分别为 <code>[esp-4]</code> 和 <code>[esp-8]</code></li><li>函数结束时，<code>add esp, 8</code> 释放局部变量占用，或者使用 <code>ret 8</code> 来释放</li></ul><blockquote><p>还可以用enter和leave指令维护</p><p><code>enter</code> 指令：<code>push ebp</code>，<code>mov ebp, esp</code>，<code>sub esp, xxx</code></p><p><code>leave</code> 指令：<code>add esp, xxx</code>，<code>pop ebp</code></p></blockquote><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>通常遵循 <code>fastcall</code> 规范</p><ul><li>VC++：左边两个参数分别存入 <code>ecx</code>, <code>edx</code> 中，其余压栈</li><li>Borland Delphi/C++：左边三个参数分别存入 <code>eax</code>, <code>edx</code>, <code>ecx</code> 中，其余按PASCAL方式压栈</li></ul><p>C++非静态类成员默认调用 <code>thiscall</code> ，对象的每个函数隐含接受 <code>this</code> 参数，使用 <code>eax</code> 存放，其余参数从右到左压栈</p><h4 id="名称修饰约定"><a href="#名称修饰约定" class="headerlink" title="名称修饰约定"></a>名称修饰约定</h4><p>为了操作符和函数重载，C++编译器会按照规则修改入口点的符号名，从而允许同一个名字有多个用法。</p><p>C的规则如下：</p><ul><li>stdcall调用约定在输出函数名前加下划线，在后面加@，格式为 <code>_functionname@number</code></li><li>__cdecl调用约定格式为 <code>_functionname</code></li><li>Fastcall调用约定格式位 <code>@functionname@number</code></li></ul><p>均不改变大小写</p><p>C++规则如下：</p><ul><li>stdcall调用约定以 <code>?</code> 开头，函数名后以 <code>@@YG</code> 标识参数表开始，后跟参数表，参数表第一项位返回值类型，其后依次为参数的数据类型，指针标识在其所指数据类型前，参数表后，以 <code>@Z</code> 标识整个名字的结束，若无参数，则以 <code>Z</code> 结束。格式为 <code>?functionname@@YG******@Z</code> 或 <code>?functionname@@YG*XZ</code></li><li>__cdecl调用将 <code>@@YG</code> 替换为 <code>@@YA</code></li><li>Fastcall调用将 <code>@@YG</code> 替换为 <code>@@YI</code></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h4 id="return操作返回"><a href="#return操作返回" class="headerlink" title="return操作返回"></a>return操作返回</h4><p>存放在 <code>eax</code> 寄存器中，高32位存放在 <code>edx</code> 中</p><h4 id="传引用方式返回"><a href="#传引用方式返回" class="headerlink" title="传引用方式返回"></a>传引用方式返回</h4><p>传引用调用方式将变量的地址传递给函数，可以在子函数中修改该内存单元中变量的值，因此允许修改原始变量</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>函数内部定义的一个变量，作用域和生命周期仅局限于该函数内</p><h5 id="栈存放"><a href="#栈存放" class="headerlink" title="栈存放"></a>栈存放</h5><p>先将参数压入栈中，再修改 <code>ebp</code> ，最后减小 <code>esp</code>。因此 <code>[ebp+**h]</code> 表示参数， <code>[ebp-**h]</code> 表示局部变量</p><h5 id="寄存器存放"><a href="#寄存器存放" class="headerlink" title="寄存器存放"></a>寄存器存放</h5><p>有 6 个通用寄存器尽可能有效地存放局部变量， 因此需要注意确定当前的寄存器中存储的变量是哪个变量</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>局部变量存放在栈中，而全局变量存放在内存区中</p><p>版本标记等常数通常为全局变量</p><p>全局变量通常存放在数据区块 <code>.data</code> 的一个固定地址处，程序使用固定的硬编码地址进行寻址</p><p>如果在只读区块，说明是一个常量</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>一般通过基址+变址实现寻址，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, [407030h + eax]</span><br></pre></td></tr></table></figure><p>间接寻址一般用于给数组和结构赋值，<code>[base+n]</code> 根据n的不同对结构中的相应单元赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0040101D lea esi, dword ptr [esp+8]</span><br><span class="line">00401021 mov edi, 3</span><br><span class="line">00401026 mov eas, dword ptr [esi]</span><br><span class="line">...</span><br><span class="line">00401036 add esi, 4</span><br><span class="line">00401039 dec edi</span><br><span class="line">0040103A jnz short 00401026</span><br></pre></td></tr></table></figure><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><blockquote><p>C++面向对象中，最重要的概念就是虚函数</p></blockquote><p>虚函数是程序运行时定义的函数，其地址不能在编译时确定，只能在调用即将进行时确定。虚函数的引用存放在专用数组——虚函数表（Virtual Table，VTBL）中。</p><p>调用时首先通过虚函数指针找到虚函数表的地址，然后在虚函数表中找到该函数的入口地址，最后进行调用。</p><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><p>汇编形式通常为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp a, bjz  0040xxxxh  ; (jnz)</span><br></pre></td></tr></table></figure><p>可以用 <code>test eax, eax</code> 替代 <code>cmp</code> ，该语句（相当于逻辑与运算）表示当 <code>eax</code> 为 0 时，设置 <code>ZF</code> 为 1，<code>jz</code> 则表示 <code>ZF</code> 位为 1 时跳转</p><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h4><p>无优化版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0040101D cmp [ebp-08], 01    ; case 100401021 je  0040103100401023 cmp [ebp-08], 02    ; case 200401027 je  0040104000401029 cmp [ebp-08], 0A    ; case 100040102D je  0040104F0040102F jmp 0040105E        ; default</span><br></pre></td></tr></table></figure><p>使用 <code>dec</code> 指令替代 <code>cmp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, [esp+08]dec eax             ; case 1je  0040xxxxdec eax             ; case 2je  0040xxxxsub eax, 00000008   ; case 10je  0040xxxx</span><br></pre></td></tr></table></figure><p>跳转表实现（case的取值为算术级数时）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp dword ptr [4*eax+004010B0]   ; 跳转表</span><br></pre></td></tr></table></figure><h4 id="转移指令机器码计算"><a href="#转移指令机器码计算" class="headerlink" title="转移指令机器码计算"></a>转移指令机器码计算</h4><p>位移量=目的地址-起始地址-跳转指令长度</p><p>转移指令机器码=转移类别机器码+位移量</p><p>转移指令可以分为短转移，长转移和子程序调用（call）</p><p>短转移2字节</p><p>长转移无条件5字节，条件转移6字节</p><p>call指令5字节</p><h4 id="条件设置指令"><a href="#条件设置指令" class="headerlink" title="条件设置指令"></a>条件设置指令</h4><p>对于语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = (a &lt; b) ? c1 : c2;</span><br></pre></td></tr></table></figure><p>条件分支语句为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp a, b  mov eax, c1  jl  L1  mov eax, c2L1:</span><br></pre></td></tr></table></figure><p>使用条件设置语句可以不包含条件分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor   eax, eaxcmp   a, bsetge al       ; if a &gt;&#x3D; b, al &#x3D; 1, else al &#x3D; 0dec   eaxand   eax, (c1 - c2)add   eax, c2</span><br></pre></td></tr></table></figure><p>或者使用条件传输指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov   eax, c2cmp   a, bcmovl eax, cl</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>通常使用 <code>ecx</code> 寄存器作为计数器，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor ecx, ecx ; 计数器清空:L1inc ecx...cmp ecx, 05  ; 循环退出条件jbe L1</span><br></pre></td></tr></table></figure><p>优化后的循环实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor ecx, ecx    xor eax, eax:L1    add ecx, eax    inc eax    cmp eax, 64h    jle L1    xor eax, eax</span><br></pre></td></tr></table></figure><p>对应的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span>;<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)    sum += i;</span><br></pre></td></tr></table></figure><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><h4 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h4><p><code>add</code> 和 <code>sub</code> 指令，有时候可以使用 <code>lea</code> 进行优化</p><p>lea 允许一个时钟内计算 <code>lea edx, [eax+ecx+78h]</code> 级别的运算</p><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><p>乘法使用 <code>mul</code> 或 <code>imul</code> 指令</p><p>对于2的幂，使用 <code>shl</code> 指令可以加快运算</p><p>由于 <code>lea</code> 指令可以实现乘 2, 4, 8 的运算，因此可以用来加快 3, 5, 6, 7, 9 等数字的乘法运算，如 <code>lea eax, [eax+eax*4]</code></p><h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p><code>div</code> 或 <code>idiv</code> 指令</p><p>对于2的幂，使用 <code>shr</code> 指令加速，有符号时使用 <code>sar</code></p><p>此外可以利用乘法进行加速</p><p>常见的优化公式为</p><script type="math/tex; mode=display">\dfrac{a}{b}=a\times \dfrac{1}{b}</script><p>因此，$\div 11$ 可以优化为 $(\times 2E8BA2E9)&gt;&gt;(32+1)$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov  eax, 2E8BA2E9imul ecxsar  edx, 1          ; edx中存放了乘法的高位双字节mov  ecx, edx</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串存储"><a href="#字符串存储" class="headerlink" title="字符串存储"></a>字符串存储</h4><p>分为两种，一种使用结束符作为标识，一种记录长度</p><ul><li>C语言：<code>String\0</code></li><li>DOS字符串：<code>String$</code></li><li>PASCAL：<code>\x05String</code></li><li>Delphi：<code>\x05\x00String</code></li></ul><p>Go语言使用一个64位整型记录长度</p><h4 id="字符寻址指令"><a href="#字符寻址指令" class="headerlink" title="字符寻址指令"></a>字符寻址指令</h4><p>mov将当前指令所在的内存复制并放到目的寄存器中，可操作常量或指针</p><p>lea是装入有效地址，操作数是地址</p><p>以下两条指令是等价的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea eax, [401000h]mov eax, 401000h</span><br></pre></td></tr></table></figure><p>都是将401000h写入eax寄存器中</p><p>因此，以下两个指令也是等价的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea eax, [eax+8]add eax, 8</span><br></pre></td></tr></table></figure><p>常被编译器用来计算加法</p><h4 id="ASCII大小写转换"><a href="#ASCII大小写转换" class="headerlink" title="ASCII大小写转换"></a>ASCII大小写转换</h4><p>区别在于二进制的第五位，大写字母为0，小写字母为1</p><p>因此有如下方法</p><ul><li>大小写转换：$\pm\ \mathrm{0x}20$，$\oplus\ \mathrm{0x}20$</li><li>转大写：$\&amp;\ \mathrm{0b}11011111$</li><li>转小写：$|\ \mathrm{0b}00100000$</li></ul><h4 id="计算长度"><a href="#计算长度" class="headerlink" title="计算长度"></a>计算长度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ecx, FFFFFFFF  ; 这一句是一个重要特征xor eax, eax       ; 清零，原文为subrepnz              ; 复制串操作，直到ecx为0scasb              ; 串扫描指令，把al中的内容与edi指向的附加段中的数据逐一比较not ecx            ; ecx&#x3D;字符长度+1dec ecx            ; ecx&#x3D;字符长度je xxxxxx          ; 如果ecx为0，说明长度为0</span><br></pre></td></tr></table></figure><h3 id="指令修改技巧"><a href="#指令修改技巧" class="headerlink" title="指令修改技巧"></a>指令修改技巧</h3><p>eax有优化，尽可能使用</p><p>替换字节：</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>nop</td><td>90</td><td>1</td></tr><tr><td>push eax + pop eax</td><td>50 58</td><td>2</td></tr><tr><td>inc eax + dec eax</td><td>40 48</td><td>2</td></tr><tr><td>mov edi, edi</td><td>8B FF</td><td>2</td></tr><tr><td>jmp xx</td><td>EB 00</td><td>2</td></tr></tbody></table></div><p>用nop就行</p><p>寄存器清零：</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>mov eax, 00000000h</td><td>B8 00 00 00 00</td><td>5</td></tr><tr><td>push 0 + pop eax</td><td>6A 00 + 58</td><td>3</td></tr><tr><td>sub eax, eax</td><td>2B C0</td><td>2</td></tr><tr><td>xor eax, eax</td><td>33 C0</td><td>2</td></tr></tbody></table></div><p>测试寄存器是否为0：</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>cmp eax, 00000000h</td><td>83 F8 00</td><td>3</td></tr><tr><td>or eax, eax / test eax, eax</td><td>0B C0 / 85 C0</td><td>2</td></tr></tbody></table></div><p>后接 <code>je label</code> 字节码为 <code>74 xx</code> 或 <code>0F 84 xxxxxxxx</code>，长度为2或6，取决于近跳转还是远跳转</p><p>寄存器置 <code>0FFFFFFFFh</code></p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>mov eax, 0FFFFFFFFh</td><td>B8 FF FF FF FF</td><td>5</td></tr><tr><td>（清零后）dec eax</td><td>48</td><td>1</td></tr><tr><td>std + sbb eax, eax</td><td>F9 + 2B C0</td><td>3</td></tr></tbody></table></div><p>转移指令</p><div class="table-container"><table><thead><tr><th>指令</th><th>机器码</th><th>指令字节长度</th></tr></thead><tbody><tr><td>jmp label</td><td>EB xx / E9 xxxxxxxx</td><td>2 / 6</td></tr><tr><td>push label + ret</td><td>68 xxxxxxxx + C3</td><td>6</td></tr></tbody></table></div><h2 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h2><p>与32位有很多重叠</p><h3 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h3><p>64位通用寄存器 R 开头</p><p>8个128位 XMM 寄存器，通常用来优化（SIMD指令）</p><p>此外， <code>AX</code> 低16位，<code>AL</code> 低8位， <code>AH</code> 第 $8\sim 15$ 位</p><p><code>R8</code> 则有 <code>R8D</code> 低32位，<code>R8W</code> 低16位，<code>R8B</code> 低8位</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h4><p>x64中有如下区别</p><ul><li><p>一个栈空间8字节（64位）</p></li><li><p>汇编指令对栈顶需要对齐16（被16整除）</p></li></ul><h4 id="根据start寻找main"><a href="#根据start寻找main" class="headerlink" title="根据start寻找main"></a>根据start寻找main</h4><p>start函数结束前会有如下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp __tmainCRTStartup</span><br></pre></td></tr></table></figure><p>进入该函数后可以看到 <code>main</code> 函数</p><p>如果符号表被去除，可根据前后特征进行定位</p><blockquote><p>在调用完成main后，通常会调用exit来退出进程，所以exit前的一个call就是main函数（也可能在该函数内部的call中）。</p></blockquote><h4 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h4><p>使用寄存器快速调用约定</p><p>前几个参数使用的寄存器是固定的，后续的参数从右往左栈，非1, 2, 4, 8字节大小的参数必须用引用（地址）传参</p><p>传递顺序为 <code>RCX</code>， <code>RDX</code>， <code>R8</code>， <code>R9</code>，所有浮点参数由XMM传参，顺序依次为 <code>XMM0</code> ~ <code>XMM3</code></p><blockquote><p>为了使得寄存器仍然能够使用，会预留栈空间，将寄存器的值存入栈空间中，该空间由调用者申请并平衡</p></blockquote><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>使用 <code>RAX</code> 返回参数，返回值过大可以使用栈空间作为参数间接访问</p><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="局部变量-1"><a href="#局部变量-1" class="headerlink" title="局部变量"></a>局部变量</h4><p>使用栈区进行存放</p><p>Release版会更多地使用寄存器</p><h4 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a>全局变量</h4><p>地址通常在编译期固定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, cs:140009150h</span><br></pre></td></tr></table></figure><h4 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h4><p>$地址=首地址+类型大小\times 下标$</p><blockquote><p>IDA中使用Y快捷键来修改数据类型，可以反编译成下标模式，更好看一些</p></blockquote><p>汇编通常为 <code>[地址+寄存器*n]</code>（或者循环中每次循环 <code>地址+=n</code>？）</p><h3 id="控制语句-1"><a href="#控制语句-1" class="headerlink" title="控制语句"></a>控制语句</h3><p>通常虚线箭头表示有条件跳转，实线箭头表示无条件跳转</p><p>if 语句：jxx跳转，且目的地址后没有jxx（说明不是循环）</p><p>if else语句：jxx跳转，且目的地之前有一个jmp实跳转，目的地址后无跳转</p><p>if elif else语句：多个jxx跳转，每个Block以jmp结尾，最后一个Block不含跳转</p><p>switch case语句：分支数 $\geqslant 6$ 使用case表，$&lt;6$ 使用else if</p><blockquote><p>无法使用case表的情况下，为减少if的判断次数，可能使用二叉平衡树来减少if判断次数</p></blockquote><h3 id="循环语句-1"><a href="#循环语句-1" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><p>先执行，后判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">do_while_start:&#123;; 代码&#125;cmp a, bjxx do_while_start</span><br></pre></td></tr></table></figure><p>通常有一个向上跳转</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>先判断，后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while_start:cmp a, bjxx while_end&#123;; 代码&#125;jmp while_startwhile_end:; 后续代码</span><br></pre></td></tr></table></figure><p>通常为一个向下的条件跳转，该目的地之前有一个向上的实跳转，跳转到向下跳转前</p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmp for_iffor_step:  步长for_if:  循环条件jxx for_endfor 代码jmp for_stepfor_end:</span><br></pre></td></tr></table></figure><p>很常见的代码，比while循环多一个向下跳转</p><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><h4 id="加减法-1"><a href="#加减法-1" class="headerlink" title="加减法"></a>加减法</h4><p>add和sub指令，可用lea指令进行优化</p><p>此外还有<strong>常量折叠</strong>的优化方法，即编译时提前完成常量间的计算，节省运行消耗的时间</p><h4 id="乘法-1"><a href="#乘法-1" class="headerlink" title="乘法"></a>乘法</h4><p>imul为有符号乘法，mul为无符号乘法</p><p>通常使用lea比例因子寻址优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea edx, ds:0[rcx*4] ; *4imul edx, 7          ; *7lea edx, [rbc+rbc*8] ; *9</span><br></pre></td></tr></table></figure><h4 id="除法-1"><a href="#除法-1" class="headerlink" title="除法"></a>除法</h4><h5 id="有符号"><a href="#有符号" class="headerlink" title="有符号"></a>有符号</h5><p>除数为 $2^n$ 时，使用位移进行优化</p><p>除数为 $-2^n$ 时，使用位移，同时增加求补（x为负数时，计算 $-((x+(2^n-1))\gg n)$ ）</p><h4 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h4><h1 id="软件保护技术"><a href="#软件保护技术" class="headerlink" title="软件保护技术"></a>软件保护技术</h1><h2 id="序列号"><a href="#序列号" class="headerlink" title="序列号"></a>序列号</h2><p>序列号（注册码）的方式是目前最常见的一种保护</p><p>过程通常为：用户提交个人信息，公司计算得到序列号并返回给用户，用户通过序列号进行注册。软件从磁盘文件或注册表中获取注册信息</p><h3 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h3><h4 id="本地计算用户信息并与序列号比较"><a href="#本地计算用户信息并与序列号比较" class="headerlink" title="本地计算用户信息并与序列号比较"></a>本地计算用户信息并与序列号比较</h4><p>即：$序列号=F(用户名)$</p><p>对于这种方式，可以直接使用调试的手段，在内存中直接找到计算后的序列号，同时，将F函数复制出即可生成注册机</p><h4 id="通过注册码求逆并与用户信息比较"><a href="#通过注册码求逆并与用户信息比较" class="headerlink" title="通过注册码求逆并与用户信息比较"></a>通过注册码求逆并与用户信息比较</h4><p>即：用公式 $序列号=F(用户名)$ 生成，用公式 $用户名=F^{-1}(序列号)$ 验证</p><p>破解方法有</p><ul><li>通过 $F^{-1}$ 求出 $F$</li><li>给定用户名，穷举序列号</li><li>给定序列号，用 $F^{-1}$ 计算出用户名（通常包含不可见字符）</li></ul><h4 id="对等函数检查"><a href="#对等函数检查" class="headerlink" title="对等函数检查"></a>对等函数检查</h4><p>即：$F_1(用户名)=F_2(序列号)$</p><p>通常 $F_2$ 可逆，借鉴上两种破解思路即可</p><h4 id="二元函数"><a href="#二元函数" class="headerlink" title="二元函数"></a>二元函数</h4><p>即：$特定值=F(用户名，序列号)$</p><p>缺陷在于可能缺少用户名与序列号的一一对应关系，开发者不易写出注册机</p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><p>法一：通过跟踪输入，找到判断逻辑</p><blockquote><p>软件通常调用api将用户输入复制到缓冲区，常用api有：<code>GetWindowsTextA(W)</code>，<code>GetDiaItemTextA(W)</code>，<code>GetDlgItemInt</code>，<code>hmemcpy</code>，或者查找输出函数（对话框或标准输出等）</p></blockquote><p>法二：跟踪程序启动时对注册码的判断过程</p><blockquote><p>注册表中的序列号会调用 <code>RegQueryValueExA(W)</code>，INI文件中 <code>GetPrivateProfileStringA(W)</code>等等</p></blockquote><h4 id="根据数据约束性"><a href="#根据数据约束性" class="headerlink" title="根据数据约束性"></a>根据数据约束性</h4><p>对于采用明文比较的程序，正确注册码通常在输入注册码的前后 <code>90h</code> 字节的地方</p><h4 id="hmemcpy"><a href="#hmemcpy" class="headerlink" title="hmemcpy"></a>hmemcpy</h4><p>这个函数是 <code>Windows 9x</code> 系统的内部函数，是万能断点</p><p>现在同样可以使用系统的API下断点</p><h4 id="消息断点"><a href="#消息断点" class="headerlink" title="消息断点"></a>消息断点</h4><p>按下和释放鼠标时，会发送 <code>WM_LBUTTONDOWN (0201h)</code> 和 <code>WM_LBUTTONUP (0202h)</code> 消息</p><p>可以利用消息断点断在按钮的事件代码处</p><h4 id="人机交互信息"><a href="#人机交互信息" class="headerlink" title="人机交互信息"></a>人机交互信息</h4><p>软件大多数采用了人机对话的方式进行，因此可以直接通过搜索字符串和交叉引用找到关键函数</p><p>应该是目前最常用的方法了</p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ol><li>寄存器直接比较</li><li>函数比较</li><li>串比较</li></ol><p>串比较有些少见，记录一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lea edi []</span><br><span class="line">lea esi []</span><br><span class="line">repz cmpsd</span><br><span class="line">jz (jnz)</span><br></pre></td></tr></table></figure><h3 id="制作注册机"><a href="#制作注册机" class="headerlink" title="制作注册机"></a>制作注册机</h3><h4 id="明码泄露的攻击"><a href="#明码泄露的攻击" class="headerlink" title="明码泄露的攻击"></a>明码泄露的攻击</h4><p>序列号在内存中曾以明码出现过即可</p><p>可以使用keymake编写内存注册机，或利用 <code>Int 3</code> 等 <code>Debug API</code> 手写内存注册机</p><h4 id="无明码"><a href="#无明码" class="headerlink" title="无明码"></a>无明码</h4><p>进行加密算法的逆向解密</p><p>或者直接将汇编嵌入注册机中</p><h2 id="警告窗口"><a href="#警告窗口" class="headerlink" title="警告窗口"></a>警告窗口</h2><p>软件不时提醒用户购买正式版本</p><p>可以通过设置窗口为不可见来去除，或者在窗口的创建函数处将其跳过</p><p>利用 <code>Resource Hacker</code> 软件可以找到窗口的 id，然后再汇编中搜索即可找到窗口的程序</p><p>程序中，是否注册的 <code>flag</code> 标记可能是全局变量，找到这个变量并 patch 程序使其为 1 即可</p><h2 id="时间限制"><a href="#时间限制" class="headerlink" title="时间限制"></a>时间限制</h2><p>限制单次运行时长，或者限制软件的使用时间</p><h3 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h3><h4 id="setTimer-函数"><a href="#setTimer-函数" class="headerlink" title="setTimer() 函数"></a>setTimer() 函数</h4><p>程序运行时会申请一个计时器，并指定间隔，并获得一个处理计时器超时的回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT <span class="title">SetTimer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HWND hWnd,             <span class="comment">// 窗口句柄，计时器到时后，将向这个窗口发送WM_TIMER消息</span></span></span></span><br><span class="line"><span class="function"><span class="params">    UINT nIDEvent,         <span class="comment">// 计时器标识</span></span></span></span><br><span class="line"><span class="function"><span class="params">    UINT uElapse,          <span class="comment">// 指定计时器时间间隔（单位为毫秒）</span></span></span></span><br><span class="line"><span class="function"><span class="params">    TIMERPROC lpTimerFunc  <span class="comment">// 回调函数，超时后将调用</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="高精度计时器"><a href="#高精度计时器" class="headerlink" title="高精度计时器"></a>高精度计时器</h4><p>通过调用 <code>timeSecEvent()</code> 函数启动</p><h4 id="GetTickCount-函数及-timeGetTime-函数"><a href="#GetTickCount-函数及-timeGetTime-函数" class="headerlink" title="GetTickCount() 函数及 timeGetTime() 函数"></a>GetTickCount() 函数及 timeGetTime() 函数</h4><p>该函数返回系统自成功启动以来所经过的时间，将两次返回值相减，即可得到当前运行时间</p><p>这种方法也可以使用 <code>time()</code> 等函数</p><h3 id="时间限制-1"><a href="#时间限制-1" class="headerlink" title="时间限制"></a>时间限制</h3><p>软件通常将第一次运行时的系统时间，存放在注册表或文件或某扇区中，每次运行时获取该时间，并与当前时间进行比较</p><p>为了避免用户修改系统时间，软件会在保存安装时间（并存放于多个地方）之外，再保存最近一次运行的时间，每次运行时用当前时间替换</p><h3 id="拆解时间限制"><a href="#拆解时间限制" class="headerlink" title="拆解时间限制"></a>拆解时间限制</h3><ol><li>直接跳过 <code>SetTimer()</code> 函数</li><li>利用 <code>WM_TIMER</code> 消息，查找到时间比较的位置，对二进制文件进行patch（去掉退出跳转等等）</li></ol><blockquote><p>动态分析时，可以配合变速齿轮使用，这样就可以很快到达软件的限制时间，进行调试</p></blockquote><h2 id="菜单功能限制"><a href="#菜单功能限制" class="headerlink" title="菜单功能限制"></a>菜单功能限制</h2><p>当注册版和正式版文件相同，只是部分功能被限制无法使用时，可以恢复正式版的功能</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><h4 id="EnableMenuItem"><a href="#EnableMenuItem" class="headerlink" title="EnableMenuItem()"></a>EnableMenuItem()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">EnableMenuItem</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HMENU hMenu,        <span class="comment">// 菜单句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">    UINT uIDEnableItem, <span class="comment">// 欲允许或禁止的一个菜单条目的标识符</span></span></span></span><br><span class="line"><span class="function"><span class="params">    UINT uEnable,       <span class="comment">// 控制标志，包括允许、灰化、禁止等</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><h4 id="EnableWindow"><a href="#EnableWindow" class="headerlink" title="EnableWindow()"></a>EnableWindow()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">EnableWindow</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HWND hWnd,    <span class="comment">// 窗口句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">    BOOL bEnable  <span class="comment">// True为允许，False为禁止</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><h3 id="拆解菜单限制保护"><a href="#拆解菜单限制保护" class="headerlink" title="拆解菜单限制保护"></a>拆解菜单限制保护</h3><p>找到关键函数，把函数的参数patch一下即可</p><h2 id="KeyFile保护"><a href="#KeyFile保护" class="headerlink" title="KeyFile保护"></a>KeyFile保护</h2><p>KeyFile通常是一个小文件，可能是可见字符，也可能是二进制文件，由软件开发者定义</p><p>软件启动后，会从KeyFile文件中读取数据，根据处理结果判断是否正确注册</p><h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h3><p>与文件操作有关的API都可以下断点</p><div class="table-container"><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>FindFirstFileA</td><td>确定注册文件是否存在</td></tr><tr><td>CreateFileA, _lopen</td><td>确定文件是否存在，打开文件以获得句柄</td></tr><tr><td>GetFileSize, GetFileSizeEx</td><td>获得文件的大小</td></tr><tr><td>GetFileAttributesA, GetFileAttributesExA</td><td>获得文件的属性</td></tr><tr><td>SetFilePointer, SetFilePointerEx</td><td>移动文件指针</td></tr><tr><td>ReadFile</td><td>读取文件内容</td></tr></tbody></table></div><h3 id="拆解保护"><a href="#拆解保护" class="headerlink" title="拆解保护"></a>拆解保护</h3><ol><li>利用文件监视软件找到KeyFile文件名</li><li>利用十六进制编辑器伪造KeyFile</li><li>动态调试，跟踪文件内容</li></ol><p>具体的破解方法与输入序列号类似</p><h2 id="网络验证"><a href="#网络验证" class="headerlink" title="网络验证"></a>网络验证</h2><p>软件必须从服务器中取得一些关键数据才能正确运行</p><p>破解的思路是拦截服务器的数据包，并分析程序对该数据包的处理</p><h3 id="相关API-1"><a href="#相关API-1" class="headerlink" title="相关API"></a>相关API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    SOCKET s,                 <span class="comment">// 套接字描述符</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> FAR *buf,      <span class="comment">// 缓冲区</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> len,                  <span class="comment">// 发送数据的字节数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> flags                 <span class="comment">// 附加标志，一般为0</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    SOCKET s,             <span class="comment">// 套接字描述符</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span> FAR *buf,        <span class="comment">// 缓冲区</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> len,              <span class="comment">// 缓冲区buf的长度</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> flags             <span class="comment">// 附加标志，一般为0</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>此外，还有微软扩展函数 <code>WSASend</code> 和 <code>WSARecv</code></p><h3 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h3><p>当服务器发送的数据包固定时，可以搭建本地服务器，发送该数据包</p><p>数据包不固定时，需要分析算法</p><h1 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h1><p>略</p><h1 id="Windows内核基础"><a href="#Windows内核基础" class="headerlink" title="Windows内核基础"></a>Windows内核基础</h1><h2 id="内核理论基础"><a href="#内核理论基础" class="headerlink" title="内核理论基础"></a>内核理论基础</h2><h3 id="权限级别"><a href="#权限级别" class="headerlink" title="权限级别"></a>权限级别</h3><p>CPU将权限分为 <code>R0~R3</code> 其中 <code>R0</code> 权限最高，运行内核，<code>R1</code> 和 <code>R2</code> 运行驱动程序，<code>R3</code> 权限最低，运行应用程序</p><p>操作系统（Windows, Linux）为方便，将内核和驱动程序（内核态）运行在了 <code>R0</code> 层，将应用程序（用户态）运行在 <code>R3</code> 层，而没有使用 <code>R1</code> 和 <code>R2</code> ，因此 <code>AMD64</code> 取消了 <code>R1</code> 和 <code>R2</code> 层</p><h3 id="内存空间布局"><a href="#内存空间布局" class="headerlink" title="内存空间布局"></a>内存空间布局</h3><p>32位系统虚拟内存：</p><p>2GB内核空间，64KB的NULL空间和非法空间，其余为进程空间</p><p>64位系统虚拟内存：</p><p>Windows实际为44位（16TB），Linux实际为48位（256TB）</p><p>存在大量空洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 0x000000</span><br><span class="line">|                       |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 0x400000</span><br><span class="line">|          text         |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|          data         |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|          BSS          |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|          heap         |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 向下增长</span><br><span class="line">|                       |</span><br><span class="line">|          hole         |</span><br><span class="line">|                       |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 0x00002AAAAAAAA000</span><br><span class="line">|      内存映射区域      |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 向下增长</span><br><span class="line">|                       |</span><br><span class="line">|          hole         |</span><br><span class="line">|                       |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 向上增长</span><br><span class="line">|         stack         |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 0x00007FFFFFFFF000&#x3D;TASK_SIZE</span><br><span class="line">|       未定义区域       |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+ 0xFFFF800000000000</span><br><span class="line">|        内核空间        |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><h3 id="Windows内核启动过程"><a href="#Windows内核启动过程" class="headerlink" title="Windows内核启动过程"></a>Windows内核启动过程</h3><p>BIOS+MBR+Windows</p><h4 id="启动自检"><a href="#启动自检" class="headerlink" title="启动自检"></a>启动自检</h4><p>从BIOS中载入必要指令，进行硬件初始化检查，并显示信息</p><h4 id="初始化启动"><a href="#初始化启动" class="headerlink" title="初始化启动"></a>初始化启动</h4><p>根据CMOS设置，BIOS加载启动盘，将引导代码载入内存，由MBR执行启动过程。启动代码搜索MBR的分区表，找到活动分区，将第一个扇区的引导代码载入内存，检测系统并查找启动管理器。过去为 <code>ntldr</code> ，Windows7开始使用 <code>Bootmgr</code>作为启动管理。</p><h4 id="Boot加载"><a href="#Boot加载" class="headerlink" title="Boot加载"></a>Boot加载</h4><p>对启动管理器进行设置</p><ul><li>设置内存模式：32位系统+32位CPU，设置为32位内存模式；64位系统+64位CPU，设置为64位内存模式</li><li>启动一个简单的文件系统：定位 <code>boot.ini</code>，<code>ntoskrnl</code>，<code>Hal</code> 等启动文件</li><li>读取 <code>boot.ini</code> 文件</li></ul><h4 id="检测和配置硬件"><a href="#检测和配置硬件" class="headerlink" title="检测和配置硬件"></a>检测和配置硬件</h4><p>检查和配置硬件设备，如系统固件、总线、适配器、键盘磁盘等等</p><h4 id="内核加载"><a href="#内核加载" class="headerlink" title="内核加载"></a>内核加载</h4><p>启动管理器先加载内核 <code>Ntoskrnl.exe</code> 和硬件抽象层 <code>HAL</code>。<code>HAL</code> 会对硬件底层进行隔离，为操作系统提供统一的API。</p><p>随后根据注册表 <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet</code> 来加载驱动程序</p><p>注册表中的 <code>Start</code> 键表示了启动顺序</p><ol><li><code>SERVICE_BOOT_START</code>， 内核初始化时，与系统核心相关的重要驱动程序</li><li><code>SERVICE_SYSTEM_START</code></li><li><code>SERVICE_AUTO_START</code>，登陆界面开始</li><li><code>SERVICE_DEMAND_START</code>，需要时手动加载</li><li><code>SERVICE_DISABLED</code>，禁止加载</li></ol><h4 id="Windows会话管理启动"><a href="#Windows会话管理启动" class="headerlink" title="Windows会话管理启动"></a>Windows会话管理启动</h4><p><code>smss.exe</code> 是Windows中第一个创建的用户模式进程，主要用于</p><ul><li>创建系统环境变量</li><li>加载 <code>win32k.sys</code>，Windows子系统的内核模式部分</li><li>启动 <code>csrss.exe</code>，Windows子系统的用户模式部分</li><li>启动 <code>winlogon.exe</code></li><li>创建虚拟内存页面文件</li><li>执行重启前未完成的重命名工作</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;suibiankankan&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ部分RE（四）&amp;&amp; pycdc bug简单记录</title>
    <link href="https://s0uthwood.github.io/2021/09/21/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E5%9B%9B%EF%BC%89-pycdc-bug%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://s0uthwood.github.io/2021/09/21/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E5%9B%9B%EF%BC%89-pycdc-bug%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</id>
    <published>2021-09-20T16:39:52.000Z</published>
    <updated>2021-09-20T17:32:04.841Z</updated>
    
    <content type="html"><![CDATA[<p>FlareOn卡住了，一怒之下回来做了几道以前的题，本来懒得写wp的，但又发现一个pycdc的bug，就简单记录一下吧</p><ul><li>[FlareOn1]5get_it</li><li>[FlareOn2]starter</li><li>[FlareOn2]elfie</li><li>[FlareOn2]Android</li><li>[RCTF2019]babyre1</li><li>[INSHack2017]proprietary-cctv-software</li></ul><a id="more"></a><h1 id="FlareOn1-5get-it"><a href="#FlareOn1-5get-it" class="headerlink" title="[FlareOn1]5get_it"></a>[FlareOn1]5get_it</h1><p>给的是一个DLL文件（没记错的话），应该是用来钩取键盘输入的，根据不同的输入执行不同的内容，观察到有个函数为 <code>sub_10001240</code>，执行成功就说明通过了</p><p>查找引用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">sub_10009AF0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( dword_100194FC &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    _cfltcvt_init();</span><br><span class="line">    sub_10001240();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;m&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求让内存中一个数不为0，根据这个数再向上找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">sub_10009B60</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( dword_1001947C &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_10019490 &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( dword_100194E0 &lt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dword_100194EC &lt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( dword_100194F8 &lt;= <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            _cfltcvt_init();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            dword_100194F8 = <span class="number">0</span>;</span><br><span class="line">            dword_100194FC = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          dword_100194EC = <span class="number">0</span>;</span><br><span class="line">          dword_100194F0 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        dword_100194E0 = <span class="number">0</span>;</span><br><span class="line">        dword_100194E4 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      dword_10019490 = <span class="number">0</span>;</span><br><span class="line">      dword_10019494 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_1001947C = <span class="number">0</span>;</span><br><span class="line">    dword_10019480 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到最里面就是赋值为1，所以最后两位输入就是 <code>om</code></p><p>根据这个方法一点一点向上找引用，就能恢复出flag</p><p><del>不过不知道大小写是怎么判断的，网上也没查到</del></p><h1 id="FlareOn-starter"><a href="#FlareOn-starter" class="headerlink" title="[FlareOn]starter"></a>[FlareOn]starter</h1><p>baby</p><p>先执行给的程序，会自动解压出一个小程序，反编译一下，观察到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReadFile(v2, byte_402158, <span class="number">0x32</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">v0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( ((<span class="keyword">unsigned</span> __int8)byte_402158[v0] ^ <span class="number">0x7D</span>) == byte_402140[v0] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( ++v0 &gt;= <span class="number">24</span> )</span><br><span class="line">    <span class="keyword">return</span> WriteFile(hFile, aYouAreSuccess, <span class="number">0x12</span>u, &amp;NumberOfBytesWritten, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接dump数据进行异或就行</p><h1 id="FlareOn2-elfie"><a href="#FlareOn2-elfie" class="headerlink" title="[FlareOn2]elfie"></a>[FlareOn2]elfie</h1><p>这题是个python的可执行文件，能解出一个混淆过的python文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">O0OO0OO00000OOOO0OOOOO0O00O0O0O0 = <span class="string">&#x27;IRGppV0FJM3BRRlNwWGhNNG&#x27;</span></span><br><span class="line">OO0O0O00OO00OOOOOO0O0O0OOO0OOO0O = <span class="string">&#x27;UczRkNZZ0JVRHJjbnRJUWlJV3FRTkpo&#x27;</span></span><br><span class="line">OOO0000O0OO0OOOOO000O00O0OO0O00O = <span class="string">&#x27;xTStNRDJqZG9nRCtSU1V&#x27;</span></span><br><span class="line">OOO0000O0OO0OOOOO000O00O0OO0O00O += <span class="string">&#x27;Rbk51WXI4dmRaOXlwV3NvME0ySGp&#x27;</span></span><br><span class="line"><span class="comment"># many lines</span></span><br><span class="line">exec(base64.b64decode(OOO))</span><br></pre></td></tr></table></figure><p>把最后的exec改成print，查看一下代码，发现里面的字符串都被 <code>[::-1]</code> 了，解一下发现其中一个就是flag</p><h1 id="FlareOn2-Android"><a href="#FlareOn2-Android" class="headerlink" title="[FlareOn2]Android"></a>[FlareOn2]Android</h1><p>so层逆向，程序是将前后两个输入合并，然后做一个质因数分解，手动dump了一下数据，然后写脚本（如果会idapython就好了，留下了不学无术的泪水.jpg）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> extract:</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)):</span><br><span class="line">flag *= <span class="built_in">pow</span>(prime[i], f[i])</span><br><span class="line"><span class="built_in">print</span> (n2s(flag).decode(), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><h1 id="RCTF2019-babyre1"><a href="#RCTF2019-babyre1" class="headerlink" title="[RCTF2019]babyre1"></a>[RCTF2019]babyre1</h1><p>这题其实出的挺好，就是flag的校验差一字节没写好，可惜了</p><p>先要输入flag，并长度不能超过 <code>0x10</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__printf_chk(<span class="number">1L</span>L, <span class="string">&quot;Input right flag you can got &#x27;Bingo!&#x27; :&quot;</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%31s&quot;</span>, v11);</span><br><span class="line">v3 = &amp;v11[<span class="built_in">strlen</span>(v11)];</span><br><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)(v3 - v11) &gt; <span class="number">0x10</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input is too long!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在else里进行的第一个函数中，将16位输入（按照十六进制）压缩成了8个字节，这里还没有要求大小写</p><p>中间经过的加解密函数先略过，后面的验证是需要输出一个 Bingo!，要求CRC16的校验结果为0x69E2，然后就会对运算结果再异或 <code>0x17</code> 并输出，程序如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v4</span><br><span class="line">  &amp;&amp; (v5 = sub_180(ptr, v4, &amp;key_202010, <span class="number">16</span>, &amp;a5), (v6 = v5) != <span class="number">0L</span>L)</span><br><span class="line">  &amp;&amp; a5 &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; CRC16_3D0(v5, a5) == <span class="number">0x69E2</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; a5 &gt; (<span class="keyword">int</span>)i; ++i )</span><br><span class="line">    v6[i] ^= <span class="number">0x17</span>u;</span><br><span class="line">  <span class="built_in">puts</span>(v6);</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="built_in">free</span>(v6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在知道运算结果后，看一下中间的运算，核心逻辑为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xxtea_CE0((<span class="keyword">int</span> *)v8, -(v10 &gt;&gt; <span class="number">2</span>), a3);</span><br><span class="line">v11 = v8[a2 - <span class="number">1</span>];</span><br><span class="line">v8[a2] = <span class="number">0</span>;</span><br><span class="line">*a5 = a2;</span><br><span class="line"><span class="keyword">if</span> ( a2 &gt; v11 &amp;&amp; v11 &lt;= <span class="number">4</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v13 = a2 - v11;</span><br><span class="line">  *a5 = v13;</span><br><span class="line">  v8[v13] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">char</span> *)v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是一个xxtea的程序（其中包括了加密和解密，特征很明显，就不展示了），然后是根据最后一个字节进行字符串的截断</p><p>爆破了一下CRC，发现前六个字节正好满足，于是不知道咋办了，查了一下发现后来出题人提供了一个md5，那就写个解密程序然后爆破就行了</p><h1 id="INSHack2017-proprietary-cctv-software"><a href="#INSHack2017-proprietary-cctv-software" class="headerlink" title="[INSHack2017]proprietary-cctv-software"></a>[INSHack2017]proprietary-cctv-software</h1><p>这题用uncompyle6能还原出来源码，是一个PyQt的代码，输入验证部分为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">btn_ok_clicked</span>(<span class="params">self</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> le <span class="keyword">in</span> self.le_parts:</span><br><span class="line">        s += le.text()</span><br><span class="line">        s += <span class="string">&#x27;-&#x27;</span></span><br><span class="line"></span><br><span class="line">    s = s[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> self.activator.activate(s.upper()):</span><br><span class="line">        self.c.ok.emit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.c.ko.emit()</span><br><span class="line">    self.close()</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    CHARSET = <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Activator, self).__init__()</span><br><span class="line">        self.z = <span class="number">36</span></span><br><span class="line">        self.checksum = [<span class="number">30</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">block</span>(<span class="params">self, b, mod</span>):</span></span><br><span class="line">        print_dbg(<span class="string">&#x27;call: block(self, b=&lt;%s&gt;, mod=%d)&#x27;</span> % (b, mod))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(b) != <span class="number">6</span>:</span><br><span class="line">            print_dbg(<span class="string">&#x27;err: incorrect block length (%d)&#x27;</span> % <span class="built_in">len</span>(b))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b)):</span><br><span class="line">            l = b[k]</span><br><span class="line">            <span class="keyword">if</span> l <span class="keyword">not</span> <span class="keyword">in</span> Activator.CHARSET:</span><br><span class="line">                print_dbg(<span class="string">&#x27;err: input not found in charset (%s)&#x27;</span> % l)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            v = <span class="built_in">abs</span>(Activator.CHARSET.index(l) - (k + <span class="number">1</span>))</span><br><span class="line">            s += v</span><br><span class="line">            print_dbg(<span class="string">&#x27;current l is: %s&#x27;</span> % l)</span><br><span class="line">            print_dbg(<span class="string">&#x27;current k is: %d&#x27;</span> % k)</span><br><span class="line">            print_dbg(<span class="string">&#x27;current value is: %d&#x27;</span> % v)</span><br><span class="line">            print_dbg(<span class="string">&#x27;current sum is: %d&#x27;</span> % s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s % mod</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">activate</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        print_dbg(<span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span> % s)</span><br><span class="line">        blocks = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        blocks_sz = <span class="built_in">len</span>(blocks)</span><br><span class="line">        <span class="keyword">if</span> blocks_sz != <span class="number">6</span>:</span><br><span class="line">            print_dbg(<span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span> % blocks_sz)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, blocks_sz):</span><br><span class="line">            self.z = self.block(blocks[k], self.z)</span><br><span class="line">            print_dbg(<span class="string">&#x27;dbg: new z is: %d&#x27;</span> % self.z)</span><br><span class="line">            <span class="keyword">if</span> self.z <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print_dbg(<span class="string">&#x27;err: block function returned error&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> self.z != self.checksum[k]:</span><br><span class="line">                print_dbg(<span class="string">&#x27;err: incorrect checksum (z=%d tested against checksum[%d]=%d)&#x27;</span> % (self.z, k, self.checksum[k]))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个方法是逆向这一部分，然后运行程序，应该就能拿到flag</p><p>但懒得配环境了，所以又找了一下flag生成函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActivatedWidget</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    __doc__ = <span class="string">&#x27;docstring for ActivatedWidget&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ActivatedWidget, self).__init__()</span><br><span class="line">        self.lab_result = <span class="literal">None</span></span><br><span class="line">        self.yek = [</span><br><span class="line">         <span class="number">5</span>, <span class="number">202</span>, <span class="number">234</span>, <span class="number">95</span>,</span><br><span class="line">         <span class="number">76</span>, <span class="number">173</span>, <span class="number">96</span>, <span class="number">10</span>,</span><br><span class="line">         <span class="number">232</span>, <span class="number">7</span>, <span class="number">146</span>, <span class="number">79</span>,</span><br><span class="line">         <span class="number">111</span>, <span class="number">147</span>, <span class="number">145</span>, <span class="number">13</span>]</span><br><span class="line">        self.vei = [</span><br><span class="line">         <span class="number">175</span>, <span class="number">161</span>, <span class="number">61</span>, <span class="number">70</span>,</span><br><span class="line">         <span class="number">144</span>, <span class="number">218</span>, <span class="number">0</span>, <span class="number">50</span>,</span><br><span class="line">         <span class="number">73</span>, <span class="number">173</span>, <span class="number">240</span>, <span class="number">202</span>,</span><br><span class="line">         <span class="number">184</span>, <span class="number">17</span>, <span class="number">148</span>, <span class="number">2</span>]</span><br><span class="line">        self.cne = [</span><br><span class="line">         <span class="number">253</span>, <span class="number">14</span>, <span class="number">187</span>, <span class="number">117</span>,</span><br><span class="line">         <span class="number">252</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">86</span>,</span><br><span class="line">         <span class="number">196</span>, <span class="number">138</span>, <span class="number">67</span>, <span class="number">165</span>,</span><br><span class="line">         <span class="number">142</span>, <span class="number">237</span>, <span class="number">112</span>, <span class="number">47</span>,</span><br><span class="line">         <span class="number">154</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">75</span>,</span><br><span class="line">         <span class="number">195</span>, <span class="number">205</span>, <span class="number">10</span>, <span class="number">56</span>,</span><br><span class="line">         <span class="number">3</span>, <span class="number">230</span>, <span class="number">180</span>, <span class="number">147</span>,</span><br><span class="line">         <span class="number">134</span>, <span class="number">27</span>, <span class="number">143</span>, <span class="number">15</span>,</span><br><span class="line">         <span class="number">250</span>, <span class="number">19</span>, <span class="number">235</span>, <span class="number">96</span>,</span><br><span class="line">         <span class="number">231</span>, <span class="number">5</span>, <span class="number">74</span>, <span class="number">83</span>,</span><br><span class="line">         <span class="number">136</span>, <span class="number">149</span>, <span class="number">79</span>, <span class="number">170</span>,</span><br><span class="line">         <span class="number">136</span>, <span class="number">252</span>, <span class="number">113</span>, <span class="number">112</span>,</span><br><span class="line">         <span class="number">223</span>, <span class="number">248</span>, <span class="number">33</span>, <span class="number">119</span>,</span><br><span class="line">         <span class="number">206</span>, <span class="number">218</span>, <span class="number">79</span>, <span class="number">121</span>,</span><br><span class="line">         <span class="number">9</span>, <span class="number">225</span>, <span class="number">253</span>, <span class="number">156</span>,</span><br><span class="line">         <span class="number">136</span>, <span class="number">26</span>, <span class="number">146</span>, <span class="number">93</span>,</span><br><span class="line">         <span class="number">188</span>, <span class="number">94</span>, <span class="number">170</span>, <span class="number">79</span>,</span><br><span class="line">         <span class="number">184</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">61</span>,</span><br><span class="line">         <span class="number">178</span>, <span class="number">167</span>, <span class="number">20</span>, <span class="number">231</span>,</span><br><span class="line">         <span class="number">132</span>, <span class="number">253</span>, <span class="number">106</span>, <span class="number">38</span>,</span><br><span class="line">         <span class="number">141</span>, <span class="number">224</span>, <span class="number">112</span>, <span class="number">98</span>,</span><br><span class="line">         <span class="number">171</span>, <span class="number">153</span>, <span class="number">50</span>, <span class="number">89</span>,</span><br><span class="line">         <span class="number">5</span>, <span class="number">194</span>, <span class="number">181</span>, <span class="number">247</span>,</span><br><span class="line">         <span class="number">137</span>, <span class="number">23</span>, <span class="number">139</span>, <span class="number">31</span>,</span><br><span class="line">         <span class="number">251</span>, <span class="number">89</span>, <span class="number">169</span>, <span class="number">89</span>,</span><br><span class="line">         <span class="number">198</span>, <span class="number">127</span>, <span class="number">97</span>, <span class="number">10</span>,</span><br><span class="line">         <span class="number">170</span>, <span class="number">246</span>, <span class="number">105</span>, <span class="number">197</span>,</span><br><span class="line">         <span class="number">226</span>, <span class="number">128</span>, <span class="number">30</span>, <span class="number">22</span>]</span><br><span class="line">        self.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finalize</span>(<span class="params">self</span>):</span></span><br><span class="line">        clear = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        buf = self.cne</span><br><span class="line">        key = self.yek</span><br><span class="line">        iv = self.vei</span><br><span class="line">        buf_sz = <span class="built_in">len</span>(buf)</span><br><span class="line">        bsize = <span class="number">16</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">int</span>(buf_sz / bsize)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, bsize):</span><br><span class="line">                c = buf[(i * bsize + j)] ^ key[j] ^ iv[j]</span><br><span class="line">                iv[j] = buf[(i * bsize + j)]</span><br><span class="line">                buf[i * bsize + j] = c</span><br><span class="line"></span><br><span class="line">        i = buf[(buf_sz - <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):</span><br><span class="line">            buf[buf_sz - <span class="number">1</span> - j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, buf_sz):</span><br><span class="line">            <span class="keyword">if</span> buf[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            clear += <span class="built_in">chr</span>(buf[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clear</span><br></pre></td></tr></table></figure><p>手动将这一段提取出来，然后修改一下，将 <code>return</code> 改成 <code>print</code> ，也能拿到flag</p><h1 id="简要记录pycdc的bug"><a href="#简要记录pycdc的bug" class="headerlink" title="简要记录pycdc的bug"></a>简要记录pycdc的bug</h1><h2 id="ROT-TWO指令未成功还原"><a href="#ROT-TWO指令未成功还原" class="headerlink" title="ROT_TWO指令未成功还原"></a>ROT_TWO指令未成功还原</h2><p>好像是蓝帽杯决赛的时候遇到的问题吧？当时用pycdas手动解的，后来修改了一下pyc文件前几个字节的混淆，用pycdc跑完后发现的问题（可能是混淆没去干净，只还原出了前三个函数，不过正好发现了这个bug）</p><p>手动还原的为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">n_bits</span>):</span></span><br><span class="line">    res = gen_num(n_bits)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> g.is_prime(res):</span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">            res, b = res ^ b, (res &amp; b) &lt;&lt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>然后用pycdc还原的为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">n_bits</span>):</span></span><br><span class="line">    res = gen_num(n_bits)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> g.is_prime(res):</span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">            res = res ^ b</span><br><span class="line">            b = (res &amp; b) &lt;&lt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>附上pycdas结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[Code]</span><br><span class="line">    File Name: /somewhere/encrypt.py</span><br><span class="line">    Object Name: gen_prime</span><br><span class="line">    Arg Count: <span class="number">1</span></span><br><span class="line">    KW Only Arg Count: <span class="number">0</span></span><br><span class="line">    Locals: <span class="number">3</span></span><br><span class="line">    Stack Size: <span class="number">3</span></span><br><span class="line">    Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">    [Names]</span><br><span class="line">        <span class="string">&#x27;gen_num&#x27;</span></span><br><span class="line">        <span class="string">&#x27;g&#x27;</span></span><br><span class="line">        <span class="string">&#x27;is_prime&#x27;</span></span><br><span class="line">    [Var Names]</span><br><span class="line">        <span class="string">&#x27;n_bits&#x27;</span></span><br><span class="line">        <span class="string">&#x27;res&#x27;</span></span><br><span class="line">        <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    [Free Vars]</span><br><span class="line">    [Cell Vars]</span><br><span class="line">    [Constants]</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    [Disassembly]</span><br><span class="line">        <span class="number">0</span>       LOAD_GLOBAL             <span class="number">0</span>: gen_num</span><br><span class="line">        <span class="number">2</span>       LOAD_FAST               <span class="number">0</span>: n_bits</span><br><span class="line">        <span class="number">4</span>       CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">6</span>       STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">        <span class="number">8</span>       SETUP_LOOP              <span class="number">54</span> (to <span class="number">64</span>)</span><br><span class="line">        <span class="number">10</span>      LOAD_GLOBAL             <span class="number">1</span>: g</span><br><span class="line">        <span class="number">12</span>      LOAD_METHOD             <span class="number">2</span>: is_prime</span><br><span class="line">        <span class="number">14</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">        <span class="number">16</span>      CALL_METHOD             <span class="number">1</span></span><br><span class="line">        <span class="number">18</span>      POP_JUMP_IF_TRUE        <span class="number">62</span></span><br><span class="line">        <span class="number">20</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">        <span class="number">22</span>      STORE_FAST              <span class="number">2</span>: b</span><br><span class="line">        <span class="number">24</span>      SETUP_LOOP              <span class="number">34</span> (to <span class="number">60</span>)</span><br><span class="line">        <span class="number">26</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">        <span class="number">28</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">30</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">        <span class="number">32</span>      POP_JUMP_IF_FALSE       <span class="number">58</span></span><br><span class="line">        <span class="number">34</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">        <span class="number">36</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">        <span class="number">38</span>      BINARY_XOR              </span><br><span class="line">        <span class="number">40</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">        <span class="number">42</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">        <span class="number">44</span>      BINARY_AND              </span><br><span class="line">        <span class="number">46</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">        <span class="number">48</span>      BINARY_LSHIFT           </span><br><span class="line">        <span class="number">50</span>      ROT_TWO                 </span><br><span class="line">        <span class="number">52</span>      STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">        <span class="number">54</span>      STORE_FAST              <span class="number">2</span>: b</span><br><span class="line">        <span class="number">56</span>      JUMP_ABSOLUTE           <span class="number">26</span></span><br><span class="line">        <span class="number">58</span>      POP_BLOCK               </span><br><span class="line">        <span class="number">60</span>      JUMP_ABSOLUTE           <span class="number">10</span></span><br><span class="line">        <span class="number">62</span>      POP_BLOCK               </span><br><span class="line">        <span class="number">64</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">        <span class="number">66</span>      RETURN_VALUE            </span><br><span class="line"><span class="string">&#x27;gen_prime&#x27;</span></span><br></pre></td></tr></table></figure><p>明显有个 <code>ROT_TWO</code></p><p>后来队友手写了一个demo测试了一下</p><p>手写的为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b</span><br><span class="line">b = a | b</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = a ^ b, a | b</span><br></pre></td></tr></table></figure><p>然后pycdc结果都是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b</span><br><span class="line">b = a | b</span><br></pre></td></tr></table></figure><p>pycdas结果则是一个有 <code>ROT_TWO</code>，一个没有，是正确的</p><h2 id="if判断后接for循环时出现无限嵌套"><a href="#if判断后接for循环时出现无限嵌套" class="headerlink" title="if判断后接for循环时出现无限嵌套"></a>if判断后接for循环时出现无限嵌套</h2><p>在做INSHACK2017那道题的时候，一开始电脑里没装uncompyle6，于是打算拿pycdc解，但运行了一下，发现直接生成了一个2G的文件，要不是SegmentFault了估计还能生成，用pycdas解了一下，感觉没什么问题</p><p>pycdc卡住的部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activate</span>(<span class="params">self, s</span>):</span></span><br><span class="line">    print_dbg(<span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span> % s)</span><br><span class="line">    blocks = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    blocks_sz = <span class="built_in">len</span>(blocks)</span><br><span class="line">    <span class="keyword">if</span> blocks_sz != <span class="number">6</span>:</span><br><span class="line">        print_dbg(<span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span> % blocks_sz)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    :</span><br><span class="line">        print_dbg(<span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span> % s)</span><br><span class="line">        blocks = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        blocks_sz = <span class="built_in">len</span>(blocks)</span><br><span class="line">        <span class="keyword">if</span> blocks_sz != <span class="number">6</span>:</span><br><span class="line">            print_dbg(<span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span> % blocks_sz)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        :</span><br><span class="line">            print_dbg(<span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span> % s)</span><br><span class="line">            blocks = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            blocks_sz = <span class="built_in">len</span>(blocks)</span><br><span class="line">            <span class="keyword">if</span> blocks_sz != <span class="number">6</span>:</span><br><span class="line">                print_dbg(<span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span> % blocks_sz)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            :</span><br><span class="line">                print_dbg(<span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span> % s)</span><br><span class="line">                blocks = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                blocks_sz = <span class="built_in">len</span>(blocks)</span><br><span class="line">                <span class="keyword">if</span> blocks_sz != <span class="number">6</span>:</span><br><span class="line">                    print_dbg(<span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span> % blocks_sz)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                :</span><br><span class="line">                <span class="comment"># 后面就是无限嵌套了</span></span><br></pre></td></tr></table></figure><p>uncompyle6结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activate</span>(<span class="params">self, s</span>):</span></span><br><span class="line">    print_dbg(<span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span> % s)</span><br><span class="line">    blocks = s.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    blocks_sz = <span class="built_in">len</span>(blocks)</span><br><span class="line">    <span class="keyword">if</span> blocks_sz != <span class="number">6</span>:</span><br><span class="line">        print_dbg(<span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span> % blocks_sz)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, blocks_sz):</span><br><span class="line">        self.z = self.block(blocks[k], self.z)</span><br><span class="line">        print_dbg(<span class="string">&#x27;dbg: new z is: %d&#x27;</span> % self.z)</span><br><span class="line">        <span class="keyword">if</span> self.z <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            print_dbg(<span class="string">&#x27;err: block function returned error&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.z != self.checksum[k]:</span><br><span class="line">            print_dbg(<span class="string">&#x27;err: incorrect checksum (z=%d tested against checksum[%d]=%d)&#x27;</span> % (self.z, k, self.checksum[k]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>pycdas结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">[Code]</span><br><span class="line">    File Name: src/standalone/cctv_manager_standalone.py</span><br><span class="line">    Object Name: activate</span><br><span class="line">    Arg Count: <span class="number">2</span></span><br><span class="line">    KW Only Arg Count: <span class="number">0</span></span><br><span class="line">    Locals: <span class="number">5</span></span><br><span class="line">    Stack Size: <span class="number">7</span></span><br><span class="line">    Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">    [Names]</span><br><span class="line">        <span class="string">&#x27;print_dbg&#x27;</span></span><br><span class="line">        <span class="string">&#x27;split&#x27;</span></span><br><span class="line">        <span class="string">&#x27;len&#x27;</span></span><br><span class="line">        <span class="string">&#x27;range&#x27;</span></span><br><span class="line">        <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        <span class="string">&#x27;z&#x27;</span></span><br><span class="line">        <span class="string">&#x27;checksum&#x27;</span></span><br><span class="line">    [Var Names]</span><br><span class="line">        <span class="string">&#x27;self&#x27;</span></span><br><span class="line">        <span class="string">&#x27;s&#x27;</span></span><br><span class="line">        <span class="string">&#x27;blocks&#x27;</span></span><br><span class="line">        <span class="string">&#x27;blocks_sz&#x27;</span></span><br><span class="line">        <span class="string">&#x27;k&#x27;</span></span><br><span class="line">    [Free Vars]</span><br><span class="line">    [Cell Vars]</span><br><span class="line">    [Constants]</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">        <span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span></span><br><span class="line">        <span class="string">&#x27;-&#x27;</span></span><br><span class="line">        <span class="number">6</span></span><br><span class="line">        <span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span></span><br><span class="line">        <span class="literal">False</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        <span class="string">&#x27;dbg: new z is: %d&#x27;</span></span><br><span class="line">        <span class="string">&#x27;err: block function returned error&#x27;</span></span><br><span class="line">        <span class="string">&#x27;err: incorrect checksum (z=%d tested against checksum[%d]=%d)&#x27;</span></span><br><span class="line">        <span class="literal">True</span></span><br><span class="line">    [Disassembly]</span><br><span class="line">        <span class="number">0</span>       LOAD_GLOBAL             <span class="number">0</span>: print_dbg</span><br><span class="line">        <span class="number">3</span>       LOAD_CONST              <span class="number">1</span>: <span class="string">&#x27;call: activate(self, s=&lt;%s&gt;)&#x27;</span></span><br><span class="line">        <span class="number">6</span>       LOAD_FAST               <span class="number">1</span>: s</span><br><span class="line">        <span class="number">9</span>       BINARY_MODULO           </span><br><span class="line">        <span class="number">10</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">13</span>      POP_TOP                 </span><br><span class="line">        <span class="number">14</span>      LOAD_FAST               <span class="number">1</span>: s</span><br><span class="line">        <span class="number">17</span>      LOAD_ATTR               <span class="number">1</span>: split</span><br><span class="line">        <span class="number">20</span>      LOAD_CONST              <span class="number">2</span>: <span class="string">&#x27;-&#x27;</span></span><br><span class="line">        <span class="number">23</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">26</span>      STORE_FAST              <span class="number">2</span>: blocks</span><br><span class="line">        <span class="number">29</span>      LOAD_GLOBAL             <span class="number">2</span>: <span class="built_in">len</span></span><br><span class="line">        <span class="number">32</span>      LOAD_FAST               <span class="number">2</span>: blocks</span><br><span class="line">        <span class="number">35</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">38</span>      STORE_FAST              <span class="number">3</span>: blocks_sz</span><br><span class="line">        <span class="number">41</span>      LOAD_FAST               <span class="number">3</span>: blocks_sz</span><br><span class="line">        <span class="number">44</span>      LOAD_CONST              <span class="number">3</span>: <span class="number">6</span></span><br><span class="line">        <span class="number">47</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">        <span class="number">50</span>      POP_JUMP_IF_FALSE       <span class="number">71</span></span><br><span class="line">        <span class="number">53</span>      LOAD_GLOBAL             <span class="number">0</span>: print_dbg</span><br><span class="line">        <span class="number">56</span>      LOAD_CONST              <span class="number">4</span>: <span class="string">&#x27;err: incorrect number of blocks (%d)&#x27;</span></span><br><span class="line">        <span class="number">59</span>      LOAD_FAST               <span class="number">3</span>: blocks_sz</span><br><span class="line">        <span class="number">62</span>      BINARY_MODULO           </span><br><span class="line">        <span class="number">63</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">66</span>      POP_TOP                 </span><br><span class="line">        <span class="number">67</span>      LOAD_CONST              <span class="number">5</span>: <span class="literal">False</span></span><br><span class="line">        <span class="number">70</span>      RETURN_VALUE            </span><br><span class="line">        <span class="number">71</span>      SETUP_LOOP              <span class="number">156</span> (to <span class="number">230</span>)</span><br><span class="line">        <span class="number">74</span>      LOAD_GLOBAL             <span class="number">3</span>: <span class="built_in">range</span></span><br><span class="line">        <span class="number">77</span>      LOAD_CONST              <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">80</span>      LOAD_FAST               <span class="number">3</span>: blocks_sz</span><br><span class="line">        <span class="number">83</span>      CALL_FUNCTION           <span class="number">2</span></span><br><span class="line">        <span class="number">86</span>      GET_ITER                </span><br><span class="line">        <span class="number">87</span>      FOR_ITER                <span class="number">139</span> (to <span class="number">229</span>)</span><br><span class="line">        <span class="number">90</span>      STORE_FAST              <span class="number">4</span>: k</span><br><span class="line">        <span class="number">93</span>      LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">96</span>      LOAD_ATTR               <span class="number">4</span>: block</span><br><span class="line">        <span class="number">99</span>      LOAD_FAST               <span class="number">2</span>: blocks</span><br><span class="line">        <span class="number">102</span>     LOAD_FAST               <span class="number">4</span>: k</span><br><span class="line">        <span class="number">105</span>     BINARY_SUBSCR           </span><br><span class="line">        <span class="number">106</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">109</span>     LOAD_ATTR               <span class="number">5</span>: z</span><br><span class="line">        <span class="number">112</span>     CALL_FUNCTION           <span class="number">2</span></span><br><span class="line">        <span class="number">115</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">118</span>     STORE_ATTR              <span class="number">5</span>: z</span><br><span class="line">        <span class="number">121</span>     LOAD_GLOBAL             <span class="number">0</span>: print_dbg</span><br><span class="line">        <span class="number">124</span>     LOAD_CONST              <span class="number">7</span>: <span class="string">&#x27;dbg: new z is: %d&#x27;</span></span><br><span class="line">        <span class="number">127</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">130</span>     LOAD_ATTR               <span class="number">5</span>: z</span><br><span class="line">        <span class="number">133</span>     BINARY_MODULO           </span><br><span class="line">        <span class="number">134</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">137</span>     POP_TOP                 </span><br><span class="line">        <span class="number">138</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">141</span>     LOAD_ATTR               <span class="number">5</span>: z</span><br><span class="line">        <span class="number">144</span>     LOAD_CONST              <span class="number">0</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">147</span>     COMPARE_OP              <span class="number">8</span> (<span class="keyword">is</span>)</span><br><span class="line">        <span class="number">150</span>     POP_JUMP_IF_FALSE       <span class="number">167</span></span><br><span class="line">        <span class="number">153</span>     LOAD_GLOBAL             <span class="number">0</span>: print_dbg</span><br><span class="line">        <span class="number">156</span>     LOAD_CONST              <span class="number">8</span>: <span class="string">&#x27;err: block function returned error&#x27;</span></span><br><span class="line">        <span class="number">159</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">162</span>     POP_TOP                 </span><br><span class="line">        <span class="number">163</span>     LOAD_CONST              <span class="number">5</span>: <span class="literal">False</span></span><br><span class="line">        <span class="number">166</span>     RETURN_VALUE            </span><br><span class="line">        <span class="number">167</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">170</span>     LOAD_ATTR               <span class="number">5</span>: z</span><br><span class="line">        <span class="number">173</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">176</span>     LOAD_ATTR               <span class="number">6</span>: checksum</span><br><span class="line">        <span class="number">179</span>     LOAD_FAST               <span class="number">4</span>: k</span><br><span class="line">        <span class="number">182</span>     BINARY_SUBSCR           </span><br><span class="line">        <span class="number">183</span>     COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">        <span class="number">186</span>     POP_JUMP_IF_FALSE       <span class="number">87</span></span><br><span class="line">        <span class="number">189</span>     LOAD_GLOBAL             <span class="number">0</span>: print_dbg</span><br><span class="line">        <span class="number">192</span>     LOAD_CONST              <span class="number">9</span>: <span class="string">&#x27;err: incorrect checksum (z=%d tested against checksum[%d]=%d)&#x27;</span></span><br><span class="line">        <span class="number">195</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">198</span>     LOAD_ATTR               <span class="number">5</span>: z</span><br><span class="line">        <span class="number">201</span>     LOAD_FAST               <span class="number">4</span>: k</span><br><span class="line">        <span class="number">204</span>     LOAD_FAST               <span class="number">0</span>: self</span><br><span class="line">        <span class="number">207</span>     LOAD_ATTR               <span class="number">6</span>: checksum</span><br><span class="line">        <span class="number">210</span>     LOAD_FAST               <span class="number">4</span>: k</span><br><span class="line">        <span class="number">213</span>     BINARY_SUBSCR           </span><br><span class="line">        <span class="number">214</span>     BUILD_TUPLE             <span class="number">3</span></span><br><span class="line">        <span class="number">217</span>     BINARY_MODULO           </span><br><span class="line">        <span class="number">218</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">221</span>     POP_TOP                 </span><br><span class="line">        <span class="number">222</span>     LOAD_CONST              <span class="number">5</span>: <span class="literal">False</span></span><br><span class="line">        <span class="number">225</span>     RETURN_VALUE            </span><br><span class="line">        <span class="number">226</span>     JUMP_ABSOLUTE           <span class="number">87</span></span><br><span class="line">        <span class="number">229</span>     POP_BLOCK               </span><br><span class="line">        <span class="number">230</span>     LOAD_CONST              <span class="number">10</span>: <span class="literal">True</span></span><br><span class="line">        <span class="number">233</span>     RETURN_VALUE            </span><br><span class="line"><span class="string">&#x27;Activator.activate&#x27;</span></span><br></pre></td></tr></table></figure><p>也没看出来什么问题</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FlareOn卡住了，一怒之下回来做了几道以前的题，本来懒得写wp的，但又发现一个pycdc的bug，就简单记录一下吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[FlareOn1]5get_it&lt;/li&gt;
&lt;li&gt;[FlareOn2]starter&lt;/li&gt;
&lt;li&gt;[FlareOn2]elfie&lt;/li&gt;
&lt;li&gt;[FlareOn2]Android&lt;/li&gt;
&lt;li&gt;[RCTF2019]babyre1&lt;/li&gt;
&lt;li&gt;[INSHack2017]proprietary-cctv-software&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
    <category term="FlareOn" scheme="https://s0uthwood.github.io/tags/FlareOn/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ部分RE（三）</title>
    <link href="https://s0uthwood.github.io/2021/08/19/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://s0uthwood.github.io/2021/08/19/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2021-08-19T11:11:32.000Z</published>
    <updated>2021-08-19T11:21:55.007Z</updated>
    
    <content type="html"><![CDATA[<p>suibianwanwan</p><ul><li>[FBCTF]go_get_the_flag</li><li>[Zer0pts2020]QR Puzzle</li><li>[XMAN2018排位赛]easyvm</li></ul><a id="more"></a><h1 id="FBCTF-go-get-the-flag"><a href="#FBCTF-go-get-the-flag" class="headerlink" title="[FBCTF]go_get_the_flag"></a>[FBCTF]go_get_the_flag</h1><p>没想到能在第五页见到memequal的题，真正的baby</p><h1 id="Zer0pts2020-QR-Puzzle"><a href="#Zer0pts2020-QR-Puzzle" class="headerlink" title="[Zer0pts2020]QR Puzzle"></a>[Zer0pts2020]QR Puzzle</h1><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>QR文件是25*25的字符串，每一位都是字符0或1</p><p>key文件每一行格式为 <code>a#(b,c)</code>，最后存储到链表中，末尾在前，具体结构为 <code>int b, int c, int a, 0, *next</code></p><h2 id="加密算法分析"><a href="#加密算法分析" class="headerlink" title="加密算法分析"></a>加密算法分析</h2><p>从加密函数来看，应该是一个vm</p><p>简单整理一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sub_400BD0</span><span class="params">(__int64 a1, <span class="keyword">int</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// er8</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  _QWORD *v4; <span class="comment">// r9</span></span><br><span class="line">  _QWORD *v5; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// er9</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rcx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( a2 ) &#123;</span><br><span class="line">    x = a2[<span class="number">2</span>];</span><br><span class="line">    y = a2[<span class="number">0</span>];</span><br><span class="line">    z = a2[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">1</span> ) &#123;</span><br><span class="line">      v2 = z;</span><br><span class="line">      v3 = y + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">0</span> ) &#123;</span><br><span class="line">      v2 = z;</span><br><span class="line">      v3 = y - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">3</span> ) &#123;</span><br><span class="line">      v2 = z + <span class="number">1</span>;</span><br><span class="line">      v3 = y;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">2</span> ) &#123;</span><br><span class="line">      v2 = z - <span class="number">1</span>;</span><br><span class="line">      v3 = y;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_4:</span><br><span class="line">    v4 = &amp;a1[z];</span><br><span class="line">    v5 = &amp;a1[v2];</span><br><span class="line">    *(_BYTE *)(v7 + *v4) += *(_BYTE *)(*v5 + v3);</span><br><span class="line">    *(_BYTE *)(v3 + *v5) = *(_BYTE *)(*v4 + v7) - *(_BYTE *)(v3 + *v5);</span><br><span class="line">    *(_BYTE *)(*v4 + v7) -= *(_BYTE *)(*v5 + v3); <span class="comment">// 经典swap</span></span><br><span class="line">    a2 = (<span class="keyword">int</span> *)*((_QWORD *)a2 + <span class="number">2</span>);              <span class="comment">// a2 = a2-&gt;next</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然加密就是和周围某个位置交换一下</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>显然，解密和加密是对称的，直接把key文件反转过来，就是解密了</p><p>接下来需要把01串变成图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">black_block</span>(<span class="params">image, x, y</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                    image.putpixel((x + i, y + j), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">125</span>, <span class="number">125</span>), <span class="string">&quot;#FFFFFF&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line">    <span class="string">&#x27;1111111001000101001111111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001011001001001000001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101001110011101011101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101001100010101011101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101011000111001011101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001001110111101000001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1111111010101010101111111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0000000000101101100000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1010101000001110000010010&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0011100010000110101001001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1001001100011110111010011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1110110110001111000101000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0101001011011100011101011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0101100101111010101001011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1001011011011000000100111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0101010010001110011110011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1001101001110010111111000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0000000011110000100011001&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1111111001100101101010111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001001010001100010000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101011101000111111011&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101000111101000010000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1011101010111011010110101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1000001001001111111010010&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1111111011110011100011011&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">if</span> flag[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    black_block(im, i * <span class="number">5</span>, j * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">im.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扫描二维码拿flag</p><h1 id="XMAN2018排位赛-easyvm"><a href="#XMAN2018排位赛-easyvm" class="headerlink" title="[XMAN2018排位赛]easyvm"></a>[XMAN2018排位赛]easyvm</h1><h2 id="读取字节"><a href="#读取字节" class="headerlink" title="读取字节"></a>读取字节</h2><p>vm题，上来先把字节翻译成汇编格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">vm_code = [</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, </span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x28</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x11</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, </span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x20</span>, </span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xE0</span>, </span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x18</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, </span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x28</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xE0</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x0A</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x1F</span>, <span class="number">0x28</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, </span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x28</span>, <span class="number">0x07</span>, </span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xE0</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, </span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, </span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x0A</span>, <span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0A</span>, <span class="number">0x22</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, </span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x13</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x13</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x28</span>, <span class="number">0x05</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x11</span>, <span class="number">0x09</span>, <span class="number">0x03</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, </span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x1B</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, </span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0xDF</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, </span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x17</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, </span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">length = <span class="built_in">len</span>(vm_code)</span><br><span class="line">inloop = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; length:</span><br><span class="line">    v22 = vm_code[index]</span><br><span class="line">    v6 = vm_code[index + <span class="number">1</span>]</span><br><span class="line">    v5 = vm_code[index + <span class="number">2</span>]</span><br><span class="line">    v21 = vm_code[index] &amp; <span class="number">0xFE</span></span><br><span class="line">    v20 = vm_code[index] &amp; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> v21 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov32 v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mov32 v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: lea_ch v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">            index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: lea_int v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ldr_int v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0xA</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ldr_ch v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0xC</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0xE</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pint v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pint v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x10</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pch v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: add_pch v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x12</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_xor v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_xor v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x14</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: mod v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x16</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_or v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_or v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x18</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_and v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: my_and v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x1A</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: push v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: push v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x1C</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: pop v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x1E</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shr v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shr v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x20</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shl v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: shl v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x22</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ror v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: ror v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x24</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpl v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpl v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x26</span>:</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpeq v23[<span class="subst">&#123;v6&#125;</span>], v23[<span class="subst">&#123;v5&#125;</span>]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> v20 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: cmpeq v23[<span class="subst">&#123;v6&#125;</span>], <span class="subst">&#123;v5&#125;</span>&#x27;</span>)</span><br><span class="line">        index += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x28</span>:</span><br><span class="line">        <span class="keyword">if</span> inloop == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;\n_<span class="subst">&#123;index&#125;</span>: start_loop&#x27;</span>)</span><br><span class="line">            inloop = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> inloop == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: end_loop\n&#x27;</span>)</span><br><span class="line">            inloop = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> v21 == <span class="number">0x2A</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;_<span class="subst">&#123;index&#125;</span>: judge&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>转换结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">_0: lea_ch v23[1], v23[11]</span><br><span class="line">_3: my_xor v23[3], v23[3]</span><br><span class="line">_6: my_xor v23[0], v23[0]</span><br><span class="line">_9: my_xor v23[4], v23[4]</span><br><span class="line"></span><br><span class="line">_12: start_loop</span><br><span class="line">_13: add v23[0], 51</span><br><span class="line">_16: mod v23[0], 32</span><br><span class="line">_19: lea_ch v23[9], v23[1]</span><br><span class="line">_22: add_pch v23[9], v23[0]</span><br><span class="line">_25: ldr_ch v23[10], v23[9]</span><br><span class="line">_28: mov v23[4], v23[10]</span><br><span class="line">_31: push v23[5], v23[4]</span><br><span class="line">_34: add v23[3], 1</span><br><span class="line">_37: cmpl v23[3], 32</span><br><span class="line">_40: end_loop</span><br><span class="line"></span><br><span class="line">_41: my_xor v23[0], v23[0]</span><br><span class="line">_44: lea_int v23[8], v23[5]</span><br><span class="line">_47: add_pint v23[8], 224</span><br><span class="line">_50: lea_int v23[2], v23[8]</span><br><span class="line">_53: ldr_int v23[10], v23[2]</span><br><span class="line">_56: mov v23[0], v23[10]</span><br><span class="line">_59: my_and v23[0], 224</span><br><span class="line">_62: shr v23[0], 5</span><br><span class="line">_65: mov v23[4], v23[0]</span><br><span class="line">_68: my_xor v23[3], v23[3]</span><br><span class="line"></span><br><span class="line">_71: start_loop</span><br><span class="line">_72: ldr_int v23[10], v23[2]</span><br><span class="line">_75: mov v23[0], v23[10]</span><br><span class="line">_78: my_and v23[0], 31</span><br><span class="line">_81: shl v23[0], 3</span><br><span class="line">_84: push v23[5], v23[0]</span><br><span class="line">_87: lea_int v23[8], v23[5]</span><br><span class="line">_90: add_pint v23[8], 224</span><br><span class="line">_93: lea_int v23[2], v23[8]</span><br><span class="line">_96: ldr_int v23[10], v23[2]</span><br><span class="line">_99: mov v23[0], v23[10]</span><br><span class="line">_102: my_and v23[0], 224</span><br><span class="line">_105: shr v23[0], 5</span><br><span class="line">_108: pop v23[5], v23[10]</span><br><span class="line">_111: add v23[10], v23[0]</span><br><span class="line">_114: push v23[5], v23[10]</span><br><span class="line">_117: add v23[3], 1</span><br><span class="line">_120: cmpl v23[3], 31</span><br><span class="line">_123: end_loop</span><br><span class="line"></span><br><span class="line">_124: ldr_int v23[10], v23[2]</span><br><span class="line">_127: mov v23[0], v23[10]</span><br><span class="line">_130: my_and v23[0], 31</span><br><span class="line">_133: shl v23[0], 3</span><br><span class="line">_136: add v23[0], v23[4]</span><br><span class="line">_139: push v23[5], v23[0]</span><br><span class="line">_142: my_xor v23[3], v23[3]</span><br><span class="line">_145: mov32 v23[4], v23[13]</span><br><span class="line"></span><br><span class="line">_148: start_loop</span><br><span class="line">_149: lea_int v23[8], v23[5]</span><br><span class="line">_152: add_pint v23[8], 224</span><br><span class="line">_155: lea_int v23[2], v23[8]</span><br><span class="line">_158: ldr_int v23[10], v23[2]</span><br><span class="line">_161: mov v23[0], v23[10]</span><br><span class="line">_164: push v23[5], v23[0]</span><br><span class="line">_167: mov v23[0], v23[4]</span><br><span class="line">_170: add v23[0], v23[3]</span><br><span class="line">_173: pop v23[5], v23[10]</span><br><span class="line">_176: my_xor v23[10], v23[0]</span><br><span class="line">_179: push v23[5], v23[10]</span><br><span class="line">_182: ror v23[4], 8</span><br><span class="line">_185: add v23[3], 1</span><br><span class="line">_188: cmpl v23[3], 32</span><br><span class="line">_191: end_loop</span><br><span class="line"></span><br><span class="line">_192: my_xor v23[3], v23[3]</span><br><span class="line">_195: my_xor v23[4], v23[4]</span><br><span class="line">_198: lea_ch v23[1], v23[12]</span><br><span class="line"></span><br><span class="line">_201: start_loop</span><br><span class="line">_202: lea_ch v23[9], v23[1]</span><br><span class="line">_205: add_pch v23[9], v23[3]</span><br><span class="line">_208: ldr_ch v23[10], v23[9]</span><br><span class="line">_211: mov v23[0], v23[10]</span><br><span class="line">_214: push v23[5], v23[0]</span><br><span class="line">_217: lea_int v23[8], v23[5]</span><br><span class="line">_220: add_pint v23[8], 223</span><br><span class="line">_223: ldr_int v23[10], v23[8]</span><br><span class="line">_226: pop v23[5], v23[0]</span><br><span class="line">_229: push v23[5], v23[0]</span><br><span class="line">_232: cmpeq v23[0], v23[10]</span><br><span class="line">_235: my_or v23[4], v23[7]</span><br><span class="line">_238: add v23[3], 1</span><br><span class="line">_241: cmpl v23[3], 32</span><br><span class="line">_244: end_loop</span><br><span class="line"></span><br><span class="line">_245: judge</span><br></pre></td></tr></table></figure><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>因为是Mach-O文件，不会动调，只能看静态了（成功被指针恶心到了，算法全靠猜）</p><p>第一个循环就是进行了一个顺序上的转换（类似栅栏吧）</p><p>第二个循环看到有先右移5bit，再左移3bit，一开始猜测可能是字节内部转换，后来发现在循环的前也有个右移，循环后也有个左移，代码几乎都一样，猜测是所有字节一起进行位移</p><p>第三个循环注意到有个 <code>ror</code> 的循环右移，然后还有异或，就是每次异或一个字节</p><h2 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h2><p>最后写一个解密，从文件里dump出密文和key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cipher = [</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x85</span>, <span class="number">0xD1</span>, <span class="number">0x39</span>, <span class="number">0x0B</span>, <span class="number">0x29</span>, <span class="number">0xCD</span>, <span class="number">0x77</span>, <span class="number">0x6D</span>, <span class="number">0x9F</span>, </span><br><span class="line">    <span class="number">0x73</span>, <span class="number">0x23</span>, <span class="number">0x61</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0x45</span>, <span class="number">0x9D</span>, <span class="number">0x8F</span>, <span class="number">0x5B</span>, <span class="number">0x11</span>, </span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0xC9</span>, <span class="number">0xE5</span>, <span class="number">0xCF</span>, <span class="number">0x45</span>, <span class="number">0xE5</span>, <span class="number">0xB1</span>, <span class="number">0xB3</span>, <span class="number">0x41</span>, <span class="number">0xD9</span>, </span><br><span class="line">    <span class="number">0xCF</span>, <span class="number">0xCF</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0xDE</span>, <span class="number">0xAD</span>, <span class="number">0xBE</span>, <span class="number">0xEF</span>]</span><br><span class="line"></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    cipher[i] ^= key[i % <span class="number">4</span>] + i</span><br><span class="line">    cipher[i] &amp;= <span class="number">0xFF</span></span><br><span class="line">    s &lt;&lt;= <span class="number">8</span></span><br><span class="line">    s += cipher[i]</span><br><span class="line"></span><br><span class="line">s &lt;&lt;= <span class="number">5</span></span><br><span class="line">s += (s &gt;&gt; (<span class="built_in">len</span>(<span class="built_in">bin</span>(s)[<span class="number">2</span>:]) - <span class="number">5</span>))</span><br><span class="line">s &amp;= ((<span class="number">1</span> &lt;&lt; (<span class="number">32</span> * <span class="number">8</span>)) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">i = <span class="number">35</span></span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    i += <span class="number">-5</span></span><br><span class="line">    i %= <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>(n2s(s)[i]), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><p>VM题真是体力活</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;suibianwanwan&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[FBCTF]go_get_the_flag&lt;/li&gt;
&lt;li&gt;[Zer0pts2020]QR Puzzle&lt;/li&gt;
&lt;li&gt;[XMAN2018排位赛]easyvm&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>巅峰极客2021 RE</title>
    <link href="https://s0uthwood.github.io/2021/08/04/2021dfjk-re/"/>
    <id>https://s0uthwood.github.io/2021/08/04/2021dfjk-re/</id>
    <published>2021-08-04T05:48:58.000Z</published>
    <updated>2021-08-04T05:56:22.762Z</updated>
    
    <content type="html"><![CDATA[<ul><li>RE1：迷宫</li><li>RE2：so层</li></ul><p>最后一个好像是php？告辞</p><a id="more"></a><h1 id="RE1"><a href="#RE1" class="headerlink" title="RE1"></a>RE1</h1><p>程序逻辑很简单，就是一个迷宫，迷宫的每一个位置写成了一个函数，一开始想手动推一下试试，结果发现有的格子可能有多条路径，然后想反着推，然后发现有相同的问题…</p><p>考虑写自动化脚本，一开始想试试angr，同样有很多问题，想用idaapi又只能现查各种api</p><p>后来在手动执行的时候，发现错误输入和正确输入之间的区别是反馈不同，而且走错路径的话不需要退出，直接原路返回就行，于是考虑直接用pwntools模拟手动执行</p><p>直接简单回溯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">success = [</span><br><span class="line">    <span class="string">b&#x27;Just do it\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;GOGOGO\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Wuhu~!\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Wuhu\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;You are so good\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Nice.\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Yeah~~\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Yeah~~~\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Let\&#x27;s go.\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;Never stop\n&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;So smart\n&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./maze&#x27;</span>)</span><br><span class="line"><span class="comment"># solvepath = &quot;SSSSSSSSSDDDDDDWWWWAAWWAASSSSD&quot;</span></span><br><span class="line"><span class="comment"># context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># solveend = &quot;AASSDDSSSSDDS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># solvepath = &#x27;S&#x27; * 8</span></span><br><span class="line">solvepath = <span class="string">&#x27;S&#x27;</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">direct = [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;S&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;You can only go south.\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> solvepath:</span><br><span class="line">    p.send(i)</span><br><span class="line">    <span class="built_in">print</span> (p.recvline(), i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>():</span></span><br><span class="line">    <span class="keyword">global</span> solvepath</span><br><span class="line">    <span class="keyword">for</span> cur <span class="keyword">in</span> direct:</span><br><span class="line">        <span class="keyword">if</span> direct.index(solvepath[<span class="number">-1</span>]) + direct.index(cur) != <span class="number">3</span>:</span><br><span class="line">            p.send(cur)</span><br><span class="line">            rev = p.recvline()</span><br><span class="line">            <span class="comment"># print (rev, cur)</span></span><br><span class="line">            <span class="keyword">if</span> rev <span class="keyword">in</span> success:</span><br><span class="line">                solvepath += cur</span><br><span class="line">                <span class="comment"># print (solvepath)</span></span><br><span class="line">                dfs()</span><br><span class="line">                <span class="comment"># print (direct[3 - direct.index(solvepath[-1])])</span></span><br><span class="line">                p.send(direct[<span class="number">3</span> - direct.index(solvepath[<span class="number">-1</span>])])</span><br><span class="line">                solvepath = solvepath[:<span class="number">-1</span>]</span><br><span class="line">                p.recvline()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                <span class="built_in">print</span> (solvepath + cur)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dfs()</span><br></pre></td></tr></table></figure><p>运行结果拿去算个md5就行</p><h1 id="RE2"><a href="#RE2" class="headerlink" title="RE2"></a>RE2</h1><p>这题才是传统的逆向啊，为什么做的人反而比第一题少…</p><p>看一下jeb，发现加密在so层，直接ida看so层</p><p>发现先进行了一个RC4，然后是一个XXTEA</p><p>直接解密</p><p>解密代码来自 <a href="https://newbiereer.github.io/">NewBieReer</a> 师傅</p><p>先上XXTEA模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9e3779b9  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">btea</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123; </span><br><span class="line">        <span class="keyword">uint32_t</span> y, z, sum;  </span><br><span class="line">    <span class="keyword">unsigned</span> p, rounds, e;  </span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;  <span class="comment">//12        52/6 = 8    n</span></span><br><span class="line">        sum = rounds*DELTA;  </span><br><span class="line">        y = v[<span class="number">0</span>];  </span><br><span class="line">        <span class="keyword">do</span> &#123;  </span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;  </span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--) &#123;  </span><br><span class="line">                z = v[p<span class="number">-1</span>];  </span><br><span class="line">                y = v[p] -= MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            z = v[n<span class="number">-1</span>];  </span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;  </span><br><span class="line">            sum -= DELTA;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (--rounds);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">9</span>] = &#123;<span class="number">0x68E5973E</span>, <span class="number">0x0C20C7367</span>,</span><br><span class="line">    <span class="number">0x98AFD41B</span>, <span class="number">0xFE4B9DE2</span>,</span><br><span class="line">    <span class="number">0x1A5B60B</span>, <span class="number">0x3D36D646</span>,</span><br><span class="line">    <span class="number">0xDBCC7BAF</span>, <span class="number">0xA0414F00</span>,</span><br><span class="line">    <span class="number">0x762CE71A</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="keyword">const</span> k[<span class="number">4</span>] = &#123;<span class="number">0x1</span>,<span class="number">0x10</span>,<span class="number">0x100</span>,<span class="number">0x1000</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">    btea(v,n,k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x %08x\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>],v[<span class="number">2</span>],v[<span class="number">3</span>],v[<span class="number">4</span>],v[<span class="number">5</span>],v[<span class="number">6</span>],v[<span class="number">7</span>],v[<span class="number">8</span>]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再接一个RC4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__rc4_init</span>(<span class="params">key</span>):</span></span><br><span class="line">    keylength = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">int</span>(key[i % keylength])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_crypt</span>(<span class="params">key, data</span>):</span></span><br><span class="line">    S = __rc4_init(key)</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = (a ^ S[(S[i] + S[j]) % <span class="number">256</span>]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">hex</span>(S[(S[i] + S[j]) % <span class="number">256</span>]))</span><br><span class="line">        result += k</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line">    key = <span class="string">b&#x27;\x01\x00\x00\x00\x10\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00&#x27;</span></span><br><span class="line">    data = n2s(<span class="number">0x5604b0d49c634d3096cec00593be3b82524b16b28a33b74d6d7b9950c2b10c12e1840a93</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">k</span>):</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:    </span><br><span class="line">            ret.append(k &amp; <span class="number">0xff</span>)</span><br><span class="line">            k &gt;&gt;= <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> ret[::<span class="number">-1</span>]</span><br><span class="line">    result_rc4 = rc4_crypt(key,data)</span><br><span class="line">    print(result_rc4)</span><br></pre></td></tr></table></figure><p>注意一下大小端就行</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;RE1：迷宫&lt;/li&gt;
&lt;li&gt;RE2：so层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一个好像是php？告辞&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>CISCN-N 2021 RE Writeup</title>
    <link href="https://s0uthwood.github.io/2021/06/22/CISCN-N-2021-RE-Writeup/"/>
    <id>https://s0uthwood.github.io/2021/06/22/CISCN-N-2021-RE-Writeup/</id>
    <published>2021-06-22T15:25:43.000Z</published>
    <updated>2021-07-22T06:24:53.472Z</updated>
    
    <content type="html"><![CDATA[<p>题目质量很高，终于补完了</p><ul><li>imnotavirus</li><li>内卷</li><li>vs</li></ul><a id="more"></a><h1 id="imnotavirus"><a href="#imnotavirus" class="headerlink" title="imnotavirus"></a>imnotavirus</h1><p>解exe，解密pyc</p><p>利用解密后的pyc，找到注入的shellcode，用ida解smc，最后解密</p><p>比赛的时候还被迫阅读了一下pyinstaller的源码，收获很大</p><h2 id="解exe"><a href="#解exe" class="headerlink" title="解exe"></a>解exe</h2><p>看到附件给了个pyinstaller，猜测是python逆向</p><p>先ida看一眼，有upx壳，自动脱壳，再用exeinfo确认了一下是python逆向，pyinstxtractor.py解包（之前V&amp;N2021就吃了这个亏）</p><h2 id="解pyc"><a href="#解pyc" class="headerlink" title="解pyc"></a>解pyc</h2><p>解包时提示被加密了</p><p>取struct头作为标准头，用pycdc还原出main.py，发现调用了sign</p><p>去PYZ00文件夹看一下，发现被加密了，看一下目录，发现pyimod和比一般情况多了一些东西，把这些都解开看一下，有一个key文件</p><p>同时发现archive中有一个Cipher类，但是pycdc缺少指令，无法全部还原，考虑看一下pycdas解出来的字节码</p><p>字节码中有个对pyinstaller源码的引用，直接去文件夹里面看，发现能解密出来的部分完全一致</p><p>照着源码中的方法解密sign</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (key)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./PYZ-00.pyz_extracted/sign.pyc.encrypted&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = f.read()</span><br><span class="line"></span><br><span class="line">cipher = tinyaes.AES(key.encode(), data[:<span class="number">16</span>])</span><br><span class="line">output = cipher.CTR_xcrypt_buffer(data[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">output = zlib.decompress(output)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./sign.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(output)</span><br></pre></td></tr></table></figure><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>解出sign后看到有三个base64，其中两个是执行的语句，此外大部分语句涉及到了内存</p><p>另外一个base解出来是乱码，用字节码辅助恢复函数（其实特征已经很明显了），发现进行了rc4加密，直接打印出解密结果，将结果写入文件，用ida查看</p><p>发现smc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        mov     eax, 41178Bh</span><br><span class="line">        mov     ecx, 411802h</span><br><span class="line">        sub     ecx, eax</span><br><span class="line">loc_2A:</span><br><span class="line">        mov     ebx, [rax]</span><br><span class="line">        xor     ebx, 77h</span><br><span class="line">        mov     [rax], ebx</span><br><span class="line">        loop    loc_2A</span><br></pre></td></tr></table></figure><p>解出来后尝试恢复了一下函数，结果很丑…只能和汇编比较着进行分析了（好像只要把00 patch一下就可以反编译了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seg000:000000000000007E loc_7E:                                 ; CODE XREF: sub_0+73↑j</span><br><span class="line">seg000:000000000000007E                 mov     eax, [rbp+var_20]</span><br><span class="line">seg000:0000000000000081                 cmp     eax, [rbp+var_8]</span><br><span class="line">seg000:0000000000000084                 jge     short loc_B2</span><br><span class="line">seg000:0000000000000086                 mov     eax, [rbp+8]</span><br><span class="line">seg000:0000000000000089                 add     eax, [rbp+var_20]</span><br><span class="line">seg000:000000000000008C                 movsx   ecx, byte ptr [rax]</span><br><span class="line">seg000:000000000000008F                 xor     ecx, 13h</span><br><span class="line">seg000:0000000000000092                 mov     edx, [rbp+8]</span><br><span class="line">seg000:0000000000000095                 add     edx, [rbp+var_20]</span><br><span class="line">seg000:0000000000000098                 mov     [rdx], cl</span><br><span class="line">seg000:000000000000009A                 mov     eax, [rbp+8]</span><br><span class="line">seg000:000000000000009D                 add     eax, [rbp+var_20]</span><br><span class="line">seg000:00000000000000A0                 movsx   ecx, byte ptr [rax+1]</span><br><span class="line">seg000:00000000000000A4                 xor     ecx, 37h</span><br><span class="line">seg000:00000000000000A7                 mov     edx, [rbp+8]</span><br><span class="line">seg000:00000000000000AA                 add     edx, [rbp+var_20]</span><br><span class="line">seg000:00000000000000AD                 mov     [rdx+1], cl</span><br><span class="line">seg000:00000000000000B0                 jmp     short loc_75</span><br></pre></td></tr></table></figure><p>发现是两两一组进行加密，分别异或0x13和0x37</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i] ^ <span class="number">0x13</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i] ^ <span class="number">0x37</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">@rey0ug0nn2$1gnth1s0r1tw1llb3y0ursurv1</span></span><br></pre></td></tr></table></figure><h1 id="内卷"><a href="#内卷" class="headerlink" title="内卷"></a>内卷</h1><p>这题是赛后边补边写的，所以废话略多</p><h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><p>搜索静态字符串能找到很多有用的字符串，但发现找不到引用</p><p>从start开始往里面翻一翻，发现有个一大片数据没有被解析出来，说明是个花指令，之前没见过这个花，简单记录一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:00000001400016AB                 call    loc_1400016B3</span><br><span class="line">.text:00000001400016AB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000001400016B0                 db 0E8h, 0EBh, 12h</span><br><span class="line">.text:00000001400016B3 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000001400016B3</span><br><span class="line">.text:00000001400016B3 loc_1400016B3:                          ; CODE XREF: sub_1400015E2+C9↑j</span><br><span class="line">.text:00000001400016B3                 pop     rax             ; 取出栈顶数据</span><br><span class="line">.text:00000001400016B4                 add     rax, 1          ; 对其进行+1</span><br><span class="line">.text:00000001400016B8                 push    rax             ; 然后再压栈</span><br><span class="line">.text:00000001400016B9                 mov     rax, rsp</span><br><span class="line">.text:00000001400016BC                 xchg    rax, [rax]</span><br><span class="line">.text:00000001400016BF                 pop     rsp</span><br><span class="line">.text:00000001400016C0                 mov     [rsp+0], rax</span><br><span class="line">.text:00000001400016C4                 retn</span><br></pre></td></tr></table></figure><p>这个花长这样，所以 <code>Call loc_1400016B3</code> 的操作就是跳过 <code>E8</code>，把第一个<code>E8</code> patch成nop，发现<code>EB 12</code>就是跳到这个函数的后面，所以这条 <code>Call</code> 指令也可以Patch掉</p><p>还有一些长跳转，这个就直接按c转成指令就行</p><p>还有这个花</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000140006D12 loc_140006D12:                          ; CODE XREF: sub_1400015E2:loc_140006D12↑j</span><br><span class="line">.text:0000000140006D12                 jmp     short near ptr loc_140006D12+1</span><br></pre></td></tr></table></figure><p>把 <code>jmp</code> 指令的第一个字节patch了就行</p><p>花指令全部去掉之后发现结尾还有一部分没有反编译，这个比赛的时候没想出来怎么搞，不知道怎么回时，所以这题后面也就没有怎么做了</p><h2 id="运算简化"><a href="#运算简化" class="headerlink" title="运算简化"></a>运算简化</h2><p>比赛的时候想直接动调跳过这些运算的，结果看到和input还有关系，这就不好办了，尝试手动看一下这是什么运算，但也没啥想法</p><p>结果，晚上再看这道题的时候发现竟然看懂这个离谱运算了，啊啊啊啊啊好气啊</p><p>虽然有一堆函数，观察发现，通常每一个for循环中，包裹了两个while循环，但比赛的时候一直以for循环为单位在想代码的含义，晚上再看的时候才发现，每一个while循环才是一个单位函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">v1155 = ll;</span><br><span class="line">v1154 = <span class="number">1</span>i64;</span><br><span class="line">v1153 = ll &amp; <span class="number">1</span>;</span><br><span class="line">v1152 = ll ^ <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ( v1153 ) &#123;</span><br><span class="line">    v1151 = v1152;</span><br><span class="line">    v1150 = <span class="number">2</span> * v1153;</span><br><span class="line">    v1153 = (<span class="number">2</span> * v1153) &amp; v1152;</span><br><span class="line">    v1152 ^= v1150;</span><br><span class="line">&#125;</span><br><span class="line">ll = v1152;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1041 = v1043;</span><br><span class="line">v1040 = v1045;</span><br><span class="line">v1039 = v1045 &amp; v1043;</span><br><span class="line">v1038 = v1045 ^ v1043; <span class="comment">// 运算简化方法：^ 换成 +，然后只保留这一行和最后一行</span></span><br><span class="line"><span class="keyword">while</span> ( v1039 ) &#123;</span><br><span class="line">    v1037 = v1038;</span><br><span class="line">    v1036 = <span class="number">2</span> * v1039;</span><br><span class="line">    v1039 = (<span class="number">2</span> * v1039) &amp; v1038;</span><br><span class="line">    v1038 ^= v1036;</span><br><span class="line">&#125;</span><br><span class="line">v1043 = v1038;</span><br></pre></td></tr></table></figure><p>简单地说，上面这段代码，最终的执行效果就是，<code>ll = ll + 1</code>，推广到下半部分，就是 <code>v1043 = v1038 = v1043 + v1045</code></p><p>好了，到此，就可以完成简化了，之后就变成了一个for循环里面一条自增的语句，所以就转换成了乘法</p><p>手动将这些代码整理好看一点，就长下面这样了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    v1043 = ii * <span class="number">8</span>;</span><br><span class="line">    v1169 = &amp;list_a_v19[<span class="number">4</span> * ii];</span><br><span class="line">    input_1 = input + v1043;</span><br><span class="line">    input_2 = input + v1043 + <span class="number">4</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    delta = <span class="number">3</span> * <span class="number">884811923</span>;</span><br><span class="line">    key0 = v1169[<span class="number">0</span>];</span><br><span class="line">    key1 = v1169[<span class="number">1</span>];</span><br><span class="line">    key2 = v1169[<span class="number">2</span>];</span><br><span class="line">    key3 = v1169[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> ( mm = <span class="number">0</span>; mm &lt;= <span class="number">0x1F</span>; mm++ ) &#123;</span><br><span class="line">        sum = delta + sum;</span><br><span class="line">        v1135 = <span class="number">16</span> * input_2;</span><br><span class="line">        v1118 = key0 + v1135;</span><br><span class="line">        v1112 = sum + input_2;</span><br><span class="line">        v1109 = input_2 &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        v1106 = key1 + v1109;</span><br><span class="line">        input_1 += v1102;</span><br><span class="line">        v1095 = <span class="number">16</span> * v1100;</span><br><span class="line">        v1078 = key2 + v1095;</span><br><span class="line">        v1072 = sum + input_1;</span><br><span class="line">        v1069 = input_1 &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        v1066 = key3 + v1069;</span><br><span class="line">        input_2 += v1062;</span><br><span class="line">    &#125;</span><br><span class="line">    v1170[<span class="number">0</span>] = input_1;</span><br><span class="line">    v1170[<span class="number">1</span>] = input_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过了一些手动处理，得到了上面的伪代码，显然就是TEA呗，第一关就这么过了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">v510 = <span class="string">&quot;Th1nkMyfr1end&quot;</span>;</span><br><span class="line">v507 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> v18[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">v504 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i5 = <span class="number">0</span>; i5 &lt; <span class="number">256</span>; i5++ )</span><br><span class="line">&#123;</span><br><span class="line">  v17[i5] = i5;</span><br><span class="line">  v18[i5] = v510[i5 % <span class="number">13</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i5 = <span class="number">0</span>; i5 &lt; <span class="number">256</span>; i5++ )</span><br><span class="line">&#123;</span><br><span class="line">  v1 = v18[i5];</span><br><span class="line">  v2 = v17[i5];</span><br><span class="line">  v380 = v2 + v507;</span><br><span class="line">  v371 = v1 + v380;</span><br><span class="line">  v507 = v371 % <span class="number">256</span>;</span><br><span class="line">  v504 = v17[i5];</span><br><span class="line">  v17[i5] = v17[v507];</span><br><span class="line">  v17[v507] = v504;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v511 = <span class="number">32</span>;</span><br><span class="line">v507 = <span class="number">0</span>;</span><br><span class="line">i5 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i17 = <span class="number">0</span>; v511 &gt; i17; i17++ )</span><br><span class="line">&#123;</span><br><span class="line">  i5 = (i5 + <span class="number">1</span>) % <span class="number">256</span>;           <span class="comment">// i = i + 1</span></span><br><span class="line">  v3 = v17[i5];                  <span class="comment">// S[i]</span></span><br><span class="line">  v507 = (v3 + v507) % <span class="number">256</span>;      <span class="comment">// j = (j + S[i]) % 256</span></span><br><span class="line">  v155 = v17[i5];</span><br><span class="line">  v17[i5] = v17[v507];</span><br><span class="line">  v17[v507] = v155;              <span class="comment">// S[i], S[j] = S[j], S[i]</span></span><br><span class="line">  v103 = v17[v507] + v17[i5];    <span class="comment">// S[i] + S[j]</span></span><br><span class="line">  input[i17] ^= v17[v103 % <span class="number">256</span>]; <span class="comment">// data ^= S[(S[i] + S[j]) % 256]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>256的SBOX，且仅进行一次异或，果断RC4</p><p>中间见到了这样的东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v100 = v103</span><br><span class="line">v98 = v103 / v120;</span><br><span class="line">v97 = v120;</span><br><span class="line">v96 = v97 * v98; <span class="comment">// 去除for循环后</span></span><br><span class="line">v506 = v100 - v96;</span><br></pre></td></tr></table></figure><p>$v103 - (v120 * (v103 / v120)) = v103 - (v103 - (v103 \% v120))$，显然就是取模运算了</p><p>随后是这个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">v1013 = (__int64)input;</span><br><span class="line">v1012 = (__int64)v20;</span><br><span class="line">v1011 = <span class="built_in">strlen</span>(input);</span><br><span class="line"><span class="keyword">for</span> ( i31 = <span class="number">0</span>; i31 &lt; <span class="number">65</span>; ++i31 )</span><br><span class="line">&#123;</span><br><span class="line">  v978 = <span class="number">3</span> * <span class="number">823</span> * <span class="number">5</span>; <span class="comment">// 12345</span></span><br><span class="line">  v948 = i31 * <span class="number">0x114514</span>;</span><br><span class="line">  v18[i31] = v948 % v978;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v1011 &gt; <span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v6 = *(_BYTE *)v1013 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[v6 &amp; <span class="number">0x3f</span>];</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[(<span class="number">16</span> * (v1013[<span class="number">0</span>] &amp; <span class="number">3</span>)) | (v1013[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>];</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  v818 = <span class="number">4</span> * (v1013[<span class="number">1</span>] &amp; <span class="number">0x0f</span>);</span><br><span class="line">  v10 = *(_BYTE *)(v1013 + <span class="number">2</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">  v804 = <span class="number">2</span>;</span><br><span class="line">  v803 = <span class="number">1</span>;</span><br><span class="line">  v802 = <span class="number">0</span>;</span><br><span class="line">  v801 = <span class="number">3</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[v818 | v10 &amp; <span class="number">3</span>];</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  v11 = v1013[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  v5 = (<span class="keyword">unsigned</span> __int8)v18[v11 &amp; <span class="number">0x63</span>];</span><br><span class="line">  *(_BYTE *)v1012 = v5;</span><br><span class="line">  v1012 += <span class="number">1</span>;</span><br><span class="line">  v1011 = ~(~v1011 + <span class="number">3</span>); <span class="comment">// v1011 -= 3</span></span><br><span class="line">  v1013 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v1011 )</span><br><span class="line">&#123;</span><br><span class="line">  v12 = *(_BYTE *)v1013 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  *(_BYTE *)v1012 = v18[v12 &amp; <span class="number">0x3f</span>];</span><br><span class="line">  v1012++;</span><br><span class="line">  <span class="keyword">if</span> ( v1011 &lt;= <span class="number">1</span> ) &#123;</span><br><span class="line">    v16 = *(_BYTE *)v1013;</span><br><span class="line">    v640 = (v16 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v640];</span><br><span class="line">    v1012++;</span><br><span class="line">    v586 = <span class="number">64</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v586];</span><br><span class="line">    v1012++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    v13 = *(_BYTE *)v1013;</span><br><span class="line">    v720 = (v13 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    v14 = *(_BYTE *)(v1013 + <span class="number">1</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v720 | v14 &amp; <span class="number">0xf</span>];</span><br><span class="line">    v1012++;</span><br><span class="line">    v15 = *(<span class="keyword">unsigned</span> __int8 *)(v1013 + <span class="number">1</span>);</span><br><span class="line">    v666 = (v15 &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)v1012 = v18[v666];</span><br><span class="line">    v1012++;</span><br><span class="line">  &#125;</span><br><span class="line">  v564 = <span class="number">8</span>;</span><br><span class="line">  v548 = <span class="number">8</span>;</span><br><span class="line">  v534 = v548;</span><br><span class="line">  v533 = v564;</span><br><span class="line">  v532 = <span class="number">64</span>;</span><br><span class="line">  *(_BYTE *)v1012 = (<span class="keyword">unsigned</span> __int8)v18[v532];</span><br><span class="line">  v1012++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个for循环是v18的生成，后面是个base64换表换成v18的</p><p>根据字符串提示，后面就是check了，但这部分好像反编译不出来</p><p>看了下汇编（patch前的忘记存了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">07FF7D3CE9906                 lea     rcx, aWowThatIsAmazi ; &quot;Wow.....That is amazing.......You actua&quot;...</span><br><span class="line">.text:00007FF7D3CE990D                 call    print</span><br><span class="line">.text:00007FF7D3CE9912                 mov     [rbp+2A80h+var_14], 0</span><br><span class="line">.text:00007FF7D3CE991C                 jmp     loc_7FF7D3CE9A16</span><br><span class="line"></span><br><span class="line">.text:00007FF7D3CE9A16 loc_7FF7D3CE9A16:                       ; CODE XREF: sub_7FF7D3CE15E2+833A↑j</span><br><span class="line">.text:00007FF7D3CE9A16                 nop</span><br><span class="line">.text:00007FF7D3CE9A17                 nop</span><br><span class="line">.text:00007FF7D3CE9A18                 nop</span><br><span class="line">.text:00007FF7D3CE9A19                 nop</span><br><span class="line">.text:00007FF7D3CE9A1A                 nop</span><br><span class="line">.text:00007FF7D3CE9A1B                 nop</span><br><span class="line">.text:00007FF7D3CE9A1C                 nop</span><br><span class="line">.text:00007FF7D3CE9A1D                 nop</span><br><span class="line">.text:00007FF7D3CE9A1E                 nop</span><br><span class="line">.text:00007FF7D3CE9A1F                 nop</span><br><span class="line">.text:00007FF7D3CE9A20                 nop</span><br><span class="line">.text:00007FF7D3CE9A21                 nop</span><br><span class="line">.text:00007FF7D3CE9A22                 nop</span><br><span class="line">.text:00007FF7D3CE9A23                 nop</span><br><span class="line">.text:00007FF7D3CE9A24                 nop</span><br><span class="line">.text:00007FF7D3CE9A25                 nop</span><br><span class="line">.text:00007FF7D3CE9A26                 lea     rcx, aOkYouWinTheRes ; &quot;Ok you win. The result will be shown la&quot;...</span><br><span class="line">.text:00007FF7D3CE9A2D                 call    print</span><br><span class="line">.text:00007FF7D3CE9A32                 mov     [rbp+2A80h+var_18], 0</span><br><span class="line">.text:00007FF7D3CE9A3C                 jmp     loc_7FF7D3CE9B1A</span><br></pre></td></tr></table></figure><p>本来有一个判断和一个跳转，直接patch掉，中间应该是一些浪费时间的东西，再重新反编译一下，就能看到check部分了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">v1272 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v37 = <span class="number">49</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v1272 &gt;= v37 )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *((_BYTE *)v21 + v1272) != *((_BYTE *)off_7FF7D3D02010 + v1272) )</span><br><span class="line">  &#123;</span><br><span class="line">    print((__int64)<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 从内存中取出的数据</span></span><br><span class="line"><span class="comment">  unsigned char off_7FF7D3D02010[] =</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">      0x06, 0xAB, 0x05, 0x6A, 0xA0, 0x72, 0x71, 0x0D, 0x0A, 0x6F, </span></span><br><span class="line"><span class="comment">      0xAC, 0x15, 0x05, 0xA5, 0x76, 0x41, 0x0A, 0x77, 0x13, 0xD8, </span></span><br><span class="line"><span class="comment">      0x69, 0x03, 0x14, 0x78, 0xD5, 0xA8, 0x44, 0x0F, 0xA7, 0x76, </span></span><br><span class="line"><span class="comment">      0x05, 0xAA, 0xA4, 0x09, 0x69, 0xA7, 0x0B, 0x11, 0x15, 0x42, </span></span><br><span class="line"><span class="comment">      0x11, 0x72, 0x14, 0xAD, 0x00, 0x00, 0x00, 0x00</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  v1272 += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此全部分析完毕，依次进行了TEA，RC4和Base64，中间进行了密钥生成，最后做个反向进行解密即可。</p><h2 id="补充：静态分析while语句实现的加法运算"><a href="#补充：静态分析while语句实现的加法运算" class="headerlink" title="补充：静态分析while语句实现的加法运算"></a>补充：静态分析while语句实现的加法运算</h2><p>之前的分析其实是用python实现一遍，然后找规律得到的（毕竟为了速度），但还是应该稍微静态分析一下具体发生了什么事情</p><p>看的时候就感觉很像是数电中的加法器，还是用简单的例子分析一下（删去了没有用到的语句）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v1153 = ll &amp; <span class="number">1</span>;                  <span class="comment">// 判断结尾是否为1</span></span><br><span class="line">v1152 = ll ^ <span class="number">1</span>;                  <span class="comment">// 如果结尾是1，将其变为0</span></span><br><span class="line">                                 <span class="comment">// 如果结尾是0，将其变为1</span></span><br><span class="line"><span class="keyword">while</span> ( v1153 ) &#123;                <span class="comment">// 如果此前结尾为1，将会涉及到进位的问题，因此进入循环</span></span><br><span class="line">                                 <span class="comment">// 如果此前结尾为0，就没有进位的问题了，无需进入循环</span></span><br><span class="line">    v1150 = <span class="number">2</span> * v1153;           <span class="comment">// 将结尾左移1</span></span><br><span class="line">    v1153 = (<span class="number">2</span> * v1153) &amp; v1152; <span class="comment">// 与加法之后的结果再进行一次按位与，这个的目的是看接下来是否还需要进位</span></span><br><span class="line">    v1152 ^= v1150;              <span class="comment">// 进行无进位加法</span></span><br><span class="line">&#125;                                <span class="comment">// 什么时候不会产生进位的问题了，什么时候就可以退出循环了</span></span><br><span class="line">ll = v1152;</span><br></pre></td></tr></table></figure><p>简单的说，就是用异或运算作为无进位的加法，然后通过一个while循环来完成进位</p><h1 id="vs"><a href="#vs" class="headerlink" title="vs"></a>vs</h1><p>这道题就比赛的时候简单看了一下，逆向难度很低，从一个文件读取指令，另一个文件当作内存，vm指令其实不难，但文件中的指令很多，需要手写一个vm的分析代码。</p><p>写完之后发现行数略多，先手动分析找了找规律，然后写了个自动化脚本提取，生成python代码，直接拿flag。</p><h2 id="vm的解析脚本"><a href="#vm的解析脚本" class="headerlink" title="vm的解析脚本"></a>vm的解析脚本</h2><p><code>vmreader.py:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">memory = [</span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0xF4</span>, <span class="number">0x5F</span>, <span class="number">0xE9</span>, <span class="number">0xF2</span>, <span class="number">0xE6</span>, <span class="number">0x87</span>, <span class="number">0x4C</span>, <span class="number">0x5E</span>, <span class="number">0x61</span>, <span class="number">0x11</span>, <span class="number">0x7B</span>, <span class="number">0xF0</span>, <span class="number">0x11</span>, <span class="number">0x7F</span>, <span class="number">0xB4</span>, <span class="number">0xB2</span>, <span class="number">0xEB</span>, <span class="number">0x65</span>, <span class="number">0xE2</span>, <span class="number">0x15</span>, <span class="number">0xC6</span>, <span class="number">0x8B</span>, <span class="number">0x02</span>, <span class="number">0x8C</span>, <span class="number">0xC1</span>, <span class="number">0x50</span>, <span class="number">0xD0</span>, <span class="number">0x0D</span>, <span class="number">0xA1</span>, <span class="number">0xCD</span>, <span class="number">0x3A</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPCode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, code_len, code, arglen, pes_code</span>):</span></span><br><span class="line">        self.code_len = code_len</span><br><span class="line">        self.code = code</span><br><span class="line">        self.arglen = arglen</span><br><span class="line">        self.pes_code = pes_code</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file</span>):</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.buf = <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">        self.length = <span class="built_in">len</span>(self.buf)</span><br><span class="line">        self.asm = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_asm</span>(<span class="params">self, asm: OPCode</span>):</span></span><br><span class="line">        self.asm.append(asm)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> cnt</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(self.buf) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> self.asm:</span><br><span class="line">                <span class="keyword">if</span> a.code(self.buf[:a.code_len]):</span><br><span class="line">                    <span class="comment"># self.output += a.pes_code</span></span><br><span class="line">                    op_code = self.buf[:a.code_len]</span><br><span class="line">                    self.buf = self.buf[a.code_len:]</span><br><span class="line">                    <span class="keyword">if</span> op_code == <span class="string">b&#x27;\xff\xff&#x27;</span> <span class="keyword">and</span> self.buf[<span class="number">1</span>] &gt; <span class="number">2</span>:</span><br><span class="line">                        <span class="built_in">print</span> (cnt, op_code)</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    args = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> self.buf[:a.arglen]]</span><br><span class="line">                    a.pes_code(op_code, args)</span><br><span class="line">                    self.buf = self.buf[a.arglen:]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (cnt, self.buf[<span class="number">0</span>])</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                self.buf = self.buf[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_io_code</span>(<span class="params">op_code</span>):</span></span><br><span class="line">    <span class="keyword">if</span> op_code == <span class="string">b&#x27;\xFF\xFF&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_io_op</span>(<span class="params">op_code, args</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> args[<span class="number">1</span>] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> args[<span class="number">0</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> args[<span class="number">0</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;%d print %c&#x27;</span> % (cnt, args[<span class="number">0</span>]))</span><br><span class="line">            cnt += <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;%d print \\x%02x&#x27;</span> % (cnt, args[<span class="number">0</span>]))</span><br><span class="line">            cnt += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> args[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d mem[%d] = &lt;input&gt;&#x27;</span> % (cnt, args[<span class="number">0</span>]))</span><br><span class="line">        cnt += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> args[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d exit(0)&#x27;</span> % cnt)</span><br><span class="line">        cnt += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (op_code, args)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp_code</span>(<span class="params">op_code</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) &amp; <span class="number">0x8000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp_op</span>(<span class="params">op_code, args</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    pc = <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) </span><br><span class="line">    addr = pc &amp; <span class="number">0x1FF</span></span><br><span class="line">    <span class="keyword">if</span> (addr &gt;&gt; <span class="number">3</span>) &gt; <span class="number">31</span>:</span><br><span class="line">        <span class="keyword">if</span> (memory[(addr &gt;&gt; <span class="number">3</span>) - <span class="number">32</span>] &gt;&gt; (addr &amp; <span class="number">7</span>)) &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> goto <span class="subst">&#123;cnt + ((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> nop&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d if ((mem[ %d ] &gt;&gt; %d ) &amp; 1) == 0&#x27;</span> % (cnt, addr &gt;&gt; <span class="number">3</span>, addr &amp; <span class="number">7</span>), <span class="string">f&#x27;goto <span class="subst">&#123;cnt+((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp2_code</span>(<span class="params">op_code</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) &amp; <span class="number">0x8000</span> != <span class="number">0</span> <span class="keyword">and</span> op_code != <span class="string">b&#x27;\xff\xff&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jmp2_op</span>(<span class="params">op_code, args</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    pc = <span class="built_in">int</span>.from_bytes(op_code, <span class="string">&#x27;little&#x27;</span>) </span><br><span class="line">    addr = pc &amp; <span class="number">0x1FF</span></span><br><span class="line">    <span class="keyword">if</span> (addr &gt;&gt; <span class="number">3</span>) &gt; <span class="number">31</span>:</span><br><span class="line">        <span class="keyword">if</span> (memory[(addr &gt;&gt; <span class="number">3</span>) - <span class="number">32</span>] &gt;&gt; (addr &amp; <span class="number">7</span>)) &amp; <span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> goto <span class="subst">&#123;cnt + ((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;cnt&#125;</span> nop&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;%d if ((mem[ %d ] &gt;&gt; %d ) &amp; 1) != 0&#x27;</span> % (cnt, addr &gt;&gt; <span class="number">3</span>, addr &amp; <span class="number">7</span>), <span class="string">f&#x27;goto <span class="subst">&#123;cnt+((pc &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x3f</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">basic_io = OPCode(<span class="number">2</span>, basic_io_code, <span class="number">2</span>, basic_io_op)</span><br><span class="line">r = Reader(<span class="string">&#x27;program&#x27;</span>)</span><br><span class="line">jmp = OPCode(<span class="number">2</span>, jmp_code, <span class="number">0</span>, jmp_op)</span><br><span class="line">jmp2 = OPCode(<span class="number">2</span>, jmp2_code, <span class="number">0</span>, jmp2_op)</span><br><span class="line">r.add_asm(basic_io)</span><br><span class="line">r.add_asm(jmp)</span><br><span class="line">r.add_asm(jmp2)</span><br><span class="line">r.read()</span><br></pre></td></tr></table></figure><h2 id="分析指令"><a href="#分析指令" class="headerlink" title="分析指令"></a>分析指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">0 print P</span><br><span class="line">2 print l</span><br><span class="line">4 print e</span><br><span class="line">6 print a</span><br><span class="line">8 print s</span><br><span class="line">10 print e</span><br><span class="line">12 print \x20</span><br><span class="line">14 print i</span><br><span class="line">16 print n</span><br><span class="line">18 print p</span><br><span class="line">20 print u</span><br><span class="line">22 print t</span><br><span class="line">24 print \x20</span><br><span class="line">26 print y</span><br><span class="line">28 print o</span><br><span class="line">30 print u</span><br><span class="line">32 print r</span><br><span class="line">34 print \x20</span><br><span class="line">36 print f</span><br><span class="line">38 print l</span><br><span class="line">40 print a</span><br><span class="line">42 print g</span><br><span class="line">44 print :</span><br><span class="line">46 print \x20</span><br><span class="line">48 mem[0] &#x3D; &lt;input&gt;</span><br><span class="line">50 mem[1] &#x3D; &lt;input&gt;</span><br><span class="line">52 mem[2] &#x3D; &lt;input&gt;</span><br><span class="line">54 mem[3] &#x3D; &lt;input&gt;</span><br><span class="line">56 mem[4] &#x3D; &lt;input&gt;</span><br><span class="line">58 mem[5] &#x3D; &lt;input&gt;</span><br><span class="line">60 mem[6] &#x3D; &lt;input&gt;</span><br><span class="line">62 mem[7] &#x3D; &lt;input&gt;</span><br><span class="line">64 mem[8] &#x3D; &lt;input&gt;</span><br><span class="line">66 mem[9] &#x3D; &lt;input&gt;</span><br><span class="line">68 mem[10] &#x3D; &lt;input&gt;</span><br><span class="line">70 mem[11] &#x3D; &lt;input&gt;</span><br><span class="line">72 mem[12] &#x3D; &lt;input&gt;</span><br><span class="line">74 mem[13] &#x3D; &lt;input&gt;</span><br><span class="line">76 mem[14] &#x3D; &lt;input&gt;</span><br><span class="line">78 mem[15] &#x3D; &lt;input&gt;</span><br><span class="line">80 mem[16] &#x3D; &lt;input&gt;</span><br><span class="line">82 mem[17] &#x3D; &lt;input&gt;</span><br><span class="line">84 mem[18] &#x3D; &lt;input&gt;</span><br><span class="line">86 mem[19] &#x3D; &lt;input&gt;</span><br><span class="line">88 mem[20] &#x3D; &lt;input&gt;</span><br><span class="line">90 mem[21] &#x3D; &lt;input&gt;</span><br><span class="line">92 mem[22] &#x3D; &lt;input&gt;</span><br><span class="line">94 mem[23] &#x3D; &lt;input&gt;</span><br><span class="line">96 mem[24] &#x3D; &lt;input&gt;</span><br><span class="line">98 mem[25] &#x3D; &lt;input&gt;</span><br><span class="line">100 mem[26] &#x3D; &lt;input&gt;</span><br><span class="line">102 mem[27] &#x3D; &lt;input&gt;</span><br><span class="line">104 mem[28] &#x3D; &lt;input&gt;</span><br><span class="line">106 mem[29] &#x3D; &lt;input&gt;</span><br><span class="line">108 mem[30] &#x3D; &lt;input&gt;</span><br><span class="line">110 mem[31] &#x3D; &lt;input&gt;</span><br></pre></td></tr></table></figure><p>这部分是简单的输出和输入，直接看二进制文件的字节也能看出来</p><p>然后是输入的判断部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">112 if ((mem[ 12 ] &gt;&gt; 5 ) &amp; 1) !&#x3D; 0 goto 125</span><br><span class="line">113 nop</span><br><span class="line">114 if ((mem[ 19 ] &gt;&gt; 2 ) &amp; 1) &#x3D;&#x3D; 0 goto 125</span><br><span class="line">115 print N</span><br><span class="line">117 print o</span><br><span class="line">119 print !</span><br><span class="line">121 print \x0a</span><br><span class="line">123 exit(0)</span><br><span class="line">125 goto 127</span><br><span class="line">126 if ((mem[ 22 ] &gt;&gt; 6 ) &amp; 1) !&#x3D; 0 goto 146</span><br><span class="line">127 goto 131</span><br><span class="line">128 if ((mem[ 1 ] &gt;&gt; 1 ) &amp; 1) !&#x3D; 0 goto 140</span><br><span class="line">129 if ((mem[ 0 ] &gt;&gt; 3 ) &amp; 1) !&#x3D; 0 goto 140</span><br><span class="line">130 b&#39;\xff\xff&#39;</span><br><span class="line">131 goto 133</span><br><span class="line">132 b&#39;\xff\xff&#39;</span><br><span class="line">133 if ((mem[ 30 ] &gt;&gt; 5 ) &amp; 1) &#x3D;&#x3D; 0 goto 146</span><br><span class="line">134 nop</span><br><span class="line">135 nop</span><br><span class="line">136 print N</span><br><span class="line">138 print o</span><br><span class="line">140 print !</span><br><span class="line">142 print \x0a</span><br><span class="line">144 exit(0)</span><br><span class="line">146 nop</span><br><span class="line">147 if ((mem[ 6 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 169</span><br><span class="line">148 goto 150</span><br><span class="line">149 b&#39;\xff\xff&#39;</span><br><span class="line">150 goto 154</span><br><span class="line">151 if ((mem[ 0 ] &gt;&gt; 4 ) &amp; 1) &#x3D;&#x3D; 0 goto 163</span><br><span class="line">152 if ((mem[ 3 ] &gt;&gt; 0 ) &amp; 1) !&#x3D; 0 goto 163</span><br><span class="line">153 b&#39;\xff\xff&#39;</span><br><span class="line">154 if ((mem[ 8 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 169</span><br><span class="line">155 goto 159</span><br><span class="line">156 if ((mem[ 1 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 168</span><br><span class="line">157 if ((mem[ 1 ] &gt;&gt; 7 ) &amp; 1) !&#x3D; 0 goto 168</span><br><span class="line">158 b&#39;\xff\xff&#39;</span><br><span class="line">159 print N</span><br><span class="line">161 print o</span><br><span class="line">163 print !</span><br><span class="line">165 print \x0a</span><br><span class="line">167 exit(0)</span><br><span class="line">169 if ((mem[ 4 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 190</span><br><span class="line">170 goto 172</span><br><span class="line">171 b&#39;\xff\xff&#39;</span><br><span class="line">172 if ((mem[ 20 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 190</span><br><span class="line">173 nop</span><br><span class="line">174 b&#39;\xff\xff&#39;</span><br><span class="line">175 if ((mem[ 2 ] &gt;&gt; 1 ) &amp; 1) !&#x3D; 0 goto 179 ; 由于ffff后会直接跳过下一个，所以这一句也没有用</span><br><span class="line">176 goto 180</span><br><span class="line">177 if ((mem[ 1 ] &gt;&gt; 3 ) &amp; 1) !&#x3D; 0 goto 189</span><br><span class="line">178 if ((mem[ 3 ] &gt;&gt; 3 ) &amp; 1) &#x3D;&#x3D; 0 goto 189</span><br><span class="line">179 b&#39;\xff\xff&#39;</span><br><span class="line">180 print N</span><br><span class="line">182 print o</span><br><span class="line">184 print !</span><br><span class="line">186 print \x0a</span><br><span class="line">188 exit(0)</span><br></pre></td></tr></table></figure><p>二进制文件中出现了很多奇奇怪怪的 <code>\xFF\xFF</code>，感觉起到了一部分的花指令作用，所以对于不满足的情况全部拆开处理了，但这又导致读取后的逻辑不是很清晰，需要进行简单的手动分析</p><blockquote><p>程序中 <code>if ((mem[ 1 ] &gt;&gt; 3 ) &amp; 1) != 0</code> 之间空格实际上是为了后续进一步读取准备的</p></blockquote><p>分析时可以看出，flag的判断逻辑显然是对输入的每一比特加了限定，目的就是跳过所有的退出</p><p>对这一部分手动分析，删掉没有用的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">112 if ((mem[ 12 ] &gt;&gt; 5 ) &amp; 1) !&#x3D; 0 goto 125</span><br><span class="line">114 if ((mem[ 19 ] &gt;&gt; 2 ) &amp; 1) &#x3D;&#x3D; 0 goto 125</span><br><span class="line">115 print No!</span><br><span class="line">123 exit(0)</span><br><span class="line">125 goto 127</span><br><span class="line">126 if ((mem[ 22 ] &gt;&gt; 6 ) &amp; 1) !&#x3D; 0 goto 146 ; 这句话也没有用，但自动提取时不容易处理，仍然保留</span><br><span class="line">127 goto 131</span><br><span class="line">131 goto 133</span><br><span class="line">133 if ((mem[ 30 ] &gt;&gt; 5 ) &amp; 1) &#x3D;&#x3D; 0 goto 146</span><br><span class="line">136 print No!</span><br><span class="line">144 exit(0)</span><br><span class="line">146 nop</span><br><span class="line">147 if ((mem[ 6 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 169</span><br><span class="line">148 goto 150</span><br><span class="line">150 goto 154</span><br><span class="line">154 if ((mem[ 8 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 169</span><br><span class="line">155 goto 159</span><br><span class="line">159 print No!</span><br><span class="line">167 exit(0)</span><br><span class="line">169 if ((mem[ 4 ] &gt;&gt; 4 ) &amp; 1) !&#x3D; 0 goto 190</span><br><span class="line">170 goto 172</span><br><span class="line">172 if ((mem[ 20 ] &gt;&gt; 0 ) &amp; 1) &#x3D;&#x3D; 0 goto 190</span><br><span class="line">173 nop</span><br><span class="line">176 goto 180</span><br><span class="line">180 print No!</span><br><span class="line">188 exit(0)</span><br></pre></td></tr></table></figure><p>可以看到，可用的跳转一定是跳转到exit后面的，这样就可以实现一个自动化脚本了</p><p><code>extract.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code = infile.read()</span><br><span class="line">code = code.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">target = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;exit&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">        target.append(<span class="built_in">str</span>(<span class="built_in">int</span>(line.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]) + <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># print (target)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> code:</span><br><span class="line">    tmp = line.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> tmp[<span class="number">-1</span>] <span class="keyword">in</span> target:</span><br><span class="line">        <span class="built_in">print</span> (line)</span><br></pre></td></tr></table></figure><p>最后再自动生成一个z3脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span>(<span class="params">in_list</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> in_list[<span class="number">2</span>] == <span class="string">&#x27;==&#x27;</span>:</span><br><span class="line">        ret += <span class="string">&#x27;eq(&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> in_list[<span class="number">2</span>] == <span class="string">&#x27;!=&#x27;</span>:</span><br><span class="line">        ret += <span class="string">&#x27;neq(&#x27;</span></span><br><span class="line">    ret += in_list[<span class="number">0</span>] + <span class="string">&#x27;, &#x27;</span> + in_list[<span class="number">1</span>]</span><br><span class="line">    ret += <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;2.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#x27;&#x27;from z3 import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s = Solver()</span></span><br><span class="line"><span class="string">flag = [BitVec(&#x27;flag%d&#x27; % i, 8) for i in range(32)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for f in flag:</span></span><br><span class="line"><span class="string">    s.add(f &gt; 0x20)</span></span><br><span class="line"><span class="string">    s.add(f &lt; 0x7f)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def eq(pos_f, pos_b):</span></span><br><span class="line"><span class="string">    return flag[pos_f] &amp; (1 &lt;&lt; pos_b) == 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def neq(pos_f, pos_b):</span></span><br><span class="line"><span class="string">    return flag[pos_f] &amp; (1 &lt;&lt; pos_b) != 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lines = infile.read()</span><br><span class="line">lines = lines.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lines) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    a, b = lines[i], lines[i + <span class="number">1</span>]</span><br><span class="line">    a = a.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    b = b.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    a = [a[<span class="number">3</span>], a[<span class="number">6</span>], a[<span class="number">-4</span>]]</span><br><span class="line">    b = [b[<span class="number">3</span>], b[<span class="number">6</span>], b[<span class="number">-4</span>]]</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;s.add(Or(&#x27;</span> + fmt(a) + <span class="string">&#x27;, &#x27;</span> + fmt(b) + <span class="string">&#x27;))&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if s.check() == sat:</span></span><br><span class="line"><span class="string">    model = s.model()</span></span><br><span class="line"><span class="string">    for f in flag:</span></span><br><span class="line"><span class="string">        print (chr(model[f].as_long().real), end = &#x27;&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print (&#x27;\\nfinish&#x27;)&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行之后就可以得到flag了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python3 vmreader.py &gt; 1.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 extract.py &gt; 2.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 to_py.py &gt; 3.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3 3.py</span></span><br><span class="line">flag&#123;_2_SAT_15_a_P_pr0b13M_4F6v&#125;</span><br><span class="line">finish</span><br><span class="line"><span class="meta">#</span><span class="bash"> ./vs</span></span><br><span class="line">Please input your flag: flag&#123;_2_SAT_15_a_P_pr0b13M_4F6v&#125;</span><br><span class="line">Congratulation!</span><br></pre></td></tr></table></figure><p>通过程序验证</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是第一次在一个逆向题目中写这么多代码，最近又看到一些需要写代码的题目，还是需要提高开发能力啊</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目质量很高，终于补完了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;imnotavirus&lt;/li&gt;
&lt;li&gt;内卷&lt;/li&gt;
&lt;li&gt;vs&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="CISCN" scheme="https://s0uthwood.github.io/tags/CISCN/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ RE (2)</title>
    <link href="https://s0uthwood.github.io/2021/06/10/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://s0uthwood.github.io/2021/06/10/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-06-09T19:20:33.000Z</published>
    <updated>2021-09-20T16:40:29.972Z</updated>
    
    <content type="html"><![CDATA[<ul><li>firmware：工控逆向</li><li>[FlareOn4]greek_to_me：SMC校验</li><li>[FlareOn6]Memecat Battlestation：baby .NET （不写wp了）</li><li>[FlareOn5]FLEGGO</li><li>[MR2020]Shit：花指令</li><li>[SUCTF2018]HelloPython</li></ul><a id="more"></a><h1 id="firmware"><a href="#firmware" class="headerlink" title="firmware"></a>firmware</h1><p>一道水题，主要学习一下工控逆向</p><p>不难看出，给的附件是squashfs文件，直接进行binwalk</p><blockquote><p>在安装sasquatch时遇到了一些坑，好像必须clone到~/Downloads等文件夹内才行</p></blockquote><p>binwalk之后逛一下目录，能够找到一个叫做 <code>backdoor</code> 的二进制文件</p><p>目标是找到连接的ip和端口，进去找一找就能看到</p><h1 id="FlareOn4-greek-to-me"><a href="#FlareOn4-greek-to-me" class="headerlink" title="[FlareOn4]greek_to_me"></a>[FlareOn4]greek_to_me</h1><p>尝试运行一下，发现不能输入</p><p>逆向，发现127.0.0.1的字样，以及socket等明显的网络通信函数</p><p>直接运行的时候看一下主机端口，发现是 <code>127.0.0.1:2222</code>，用Windows下的nc连上去就可以进行调试了</p><p>SMC还是很明显的</p><p>发现解SMC时仅用了第一个字节，但由于不知道里面有什么，猜测可能是对后面的字节进行验证，所以决定将程序本地复现一下，爆破解SMC的密钥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0xE1</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x11</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x16</span>, <span class="number">0xF0</span>, <span class="number">0x32</span>, </span><br><span class="line">  <span class="number">0x9F</span>, <span class="number">0xC4</span>, <span class="number">0x91</span>, <span class="number">0x17</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x14</span>, <span class="number">0xF0</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, </span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0xF1</span>, <span class="number">0xC4</span>, <span class="number">0x91</span>, <span class="number">0x1A</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x1B</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x18</span>, <span class="number">0xF2</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x19</span>, <span class="number">0xF1</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x1E</span>, </span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x1F</span>, <span class="number">0xC4</span>, <span class="number">0x91</span>, <span class="number">0x1C</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x1D</span>, </span><br><span class="line">  <span class="number">0xE6</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x62</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x63</span>, <span class="number">0xF2</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x60</span>, <span class="number">0xE3</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x61</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x66</span>, <span class="number">0xBC</span>, </span><br><span class="line">  <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x67</span>, <span class="number">0xE6</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x64</span>, <span class="number">0xE8</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, </span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6A</span>, <span class="number">0xF2</span>, <span class="number">0xC4</span>, <span class="number">0x99</span>, <span class="number">0x6B</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x68</span>, <span class="number">0xA9</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x69</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6F</span>, <span class="number">0xAE</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x6C</span>, <span class="number">0xE3</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x6D</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x72</span>, <span class="number">0xE9</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0x7C</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIBYTE(x) ((x &amp; 0xFF00) &gt;&gt; 8)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">short</span> buf = <span class="number">0</span>; buf &lt;= <span class="number">0xff</span>; buf++)&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> new_char[<span class="number">130</span>]; </span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *a1 = new_char;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            *a1 = (buf ^ ida_chars[i++]) + <span class="number">34</span>;</span><br><span class="line">            ++a1;</span><br><span class="line">        &#125; <span class="keyword">while</span> ( i &lt; <span class="number">121</span> );</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> v2 = <span class="number">0x79</span>;                                      <span class="comment">// 0x79</span></span><br><span class="line">        a1 = new_char;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span> v3 = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">255</span>; v2; v3 = HIBYTE(v3) + (<span class="keyword">unsigned</span> <span class="keyword">char</span>)v3 ) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">short</span> v5 = i;</span><br><span class="line">            <span class="keyword">int</span> v6 = v2;</span><br><span class="line">            <span class="keyword">if</span> ( v2 &gt; <span class="number">0x14</span> )</span><br><span class="line">                v6 = <span class="number">0x14</span>;</span><br><span class="line">            v2 -= v6;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                v5 += *a1;</span><br><span class="line">                v3 += v5;</span><br><span class="line">                ++a1;</span><br><span class="line">                --v6;</span><br><span class="line">            &#125; <span class="keyword">while</span> ( v6 );</span><br><span class="line">            i = HIBYTE(v5) + (<span class="keyword">unsigned</span> <span class="keyword">char</span>)v5;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = (HIBYTE(i) + (<span class="keyword">unsigned</span> <span class="keyword">char</span>)i) | ((v3 &lt;&lt; <span class="number">8</span>) + (v3 &amp; <span class="number">0xFF00</span>));</span><br><span class="line">        <span class="comment">// if (buf == &#x27;f&#x27;) </span></span><br><span class="line">        <span class="comment">//     printf(&quot;%x\n&quot;, ret); // 0xf51c</span></span><br><span class="line">        <span class="comment">// if (buf == &#x27;@&#x27;)</span></span><br><span class="line">        <span class="comment">//     printf(&quot;%x\n&quot;, ret); // 0x60ee</span></span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0xFB5E</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;%c %x\n&quot;, buf, ret);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始给的范围小了（以为会是可见字符），一直爆破不出来，反复验证了好多次，后来才发现范围是 <code>0-0xff</code> </p><p>最后爆破出来是 <code>0xA2</code>，思考了一下怎么nc传递不可见字符，然后决定直接动调改内存</p><p>下断点，然后修改buf，之后看一眼SMC解密结果，发现直接给flag了，去栈里dump一下</p><h1 id="FlareOn5-FLEGGO"><a href="#FlareOn5-FLEGGO" class="headerlink" title="[FlareOn5]FLEGGO"></a>[FlareOn5]FLEGGO</h1><p>看名字还以为是个go呢，结果发现是个披着re外套的misc（流汗</p><p>解压后发现有一堆程序，先随便挑一个日</p><p>动调发现需要输入一串字符串，刚开始还想看看是不是和base64有关，后来发现这串字符串就在exe文件中，那就直接上python整批量操作了</p><p>发现password存的地址是固定的，那就用subprocess对每个exe运行一下</p><p>放个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># from pwn import *</span></span><br><span class="line"></span><br><span class="line">files = [</span><br><span class="line">    <span class="string">&quot;./1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./1JpPaUMynR9GflWbxfYvZviqiCB59RcI.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./2AljFfLleprkThTHuVvg63I7OgjG2LQT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./3Jh0ELkck1MuRvzr8PLIpBNUGlspmGnu.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./4ihY3RWK4WYqI4XOXLtAH6XV5lkoIdgv.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./7mCysSKfiHJ4WqH2T8ERLE33Wrbp6Mqe.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./AEVYfSTJwubrlJKgxV8RAl0AdZJ5vhhy.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./BG3IDbHOUt9yHumPceLTVbObBHFneYEu.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./Bl0Iv5lT6wkpVCuy7jtcva7qka8WtLYY.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./Bp7836noYu71VAWc27sUdfaGwieALfc2.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./E36RGTbCE4LDtyLi97l9lSFoR7xVMKGN.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./Ew93SSPDbgiQYo4E4035A16MJUxXegDW.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./HDHugJBqTJqKKVtqi3sfR4BTq6P5XLZY.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./IXITujCLucnD4P3YrXOud5gC7Bwcw6mr.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./JIdE7SESzC1aS58Wwe5j3i6XbpkCa3S6.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./JXADoHafRHDyHmcTUjEBOvqq95spU7sj.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./K7HjR3Hf10SGG7rgke9WrRfxqhaGixS0.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./MrA1JmEDfPhnTi5MNMhqVS8aaTKdxbMe.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./NaobGsJ2w6qqblcIsj4QYNIBQhg3gmTR.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./P2PxxSJpnquBQ3xCvLoYj4pD3iyQcaKj.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./PvlqINbYjAY1E4WFfc2N6rZ2nKVhNZTP.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./SDIADRKhATsagJ3K8WwaNcQ52708TyRo.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./SeDdxvPJFHCr7uoQMjwmdRBAYEelHBZB.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./aSfSVMn7B8eRtxgJgwPP5Y5HiDEidvKg.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./azcyERV8HUbXmqPTEq5JFt7Ax1W5K4wl.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./bmYBZTBJlaFNbbwpiOiiQVdzimx8QVTI.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./cWvFLbliUfJl7KFDUYF1ABBFYFb6FJMz.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./d4NlRo5umkvWhZ2FmEG32rXBNeSSLt2Q.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./dT4Xze8paLOG7srCdGLsbLE1s6m3EsfX.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./dnAciAGVdlovQFSJmNiPOdHjkM3Ji18o.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./eEJhUoNbuc40kLHRo8GB7bwFPkuhgaVN.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./eovBHrlDb809jf08yaAcSzcX4T37F1NI.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./gFZw7lPUlbOXBvHRc31HJI5PKwy745Wv.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./hajfdokqjogmoWfpyp4w0feoeyhs1QLo.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./iJO15JsCa1bV5anXnZ9dTC9iWbEDmdtf.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./jJHgJjbyeWTTyQqISuJMpEGgE1aFs5ZB.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./kGQY35HJ7gvXzDJLWe8mabs3oKpwCo6L.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./lk0SOpnVIzTcC1Dcou9R7prKAC3laX0k.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./u3PL12jk5jCZKiVm0omvh46yK7NDfZLT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./u8mbI3GZ8WtwruEiFkIl0UKxJS917407.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./v6RkHsLya4wTAh71C65hMXBsTc1ZhGZT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./w3Y5YeglxqIWstp1PLbFoHvrQ9rN3F3x.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./wmkeAU8MdYrC9tEUMHH2tRMgaGdiFnga.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./x4neMBrqkYIQxDuXpwJNQZOlfyfA0eXs.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./xatgydl5cadiWFY4EXMRuoQr22ZIRC1Y.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./xyjJcvGAgswB7Yno5e9qLF4i13L1iGoT.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./y77GmQGdwVL7Fc9mMdiLJMgFQ8rgeSrl.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./zRx3bsMfOwG8IaayOeS8rHSSpiRfc9IB.exe&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">    cur_file = <span class="built_in">open</span>(f, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    cur_file.seek(<span class="number">0x2AB0</span>)</span><br><span class="line">    read_file = cur_file.read(<span class="number">32</span>)</span><br><span class="line">    password = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> read_file:</span><br><span class="line">        <span class="keyword">if</span> p != <span class="number">0</span>:</span><br><span class="line">            password += p.to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="comment"># print (password)</span></span><br><span class="line">    p = subprocess.Popen(f, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">    out, err = p.communicate(password + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># print (out)</span></span><br><span class="line">    pic_name = out[<span class="number">47</span>:<span class="number">59</span>]</span><br><span class="line">    char_of_pic = out[<span class="number">-3</span>].to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    os.rename(pic_name, char_of_pic + pic_name)</span><br></pre></td></tr></table></figure><p>输出会说每个图片对应的字符，点开图片后发现左上角有数字，应该是下标</p><p>这tm就是misc啊！</p><p>剩下的就是手动找位置了，屑</p><h1 id="MR2020-Shit"><a href="#MR2020-Shit" class="headerlink" title="[MR2020]Shit"></a>[MR2020]Shit</h1><p>这题最后的解法很屑（</p><p>首先是去花，但花指令和CISCN2021-N的RE2一样，就不细说了</p><p>一直尝试反调试，但一直没成功，就用爆破来解了…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> __cdecl <span class="title">sub_DA12F0</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+20h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+20h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); i += <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = __ROR4__(a1[i + <span class="number">3</span>] | (a1[i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (a1[i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (a1[i] &lt;&lt; <span class="number">24</span>), dword_DA5034[i / <span class="number">4</span>]);</span><br><span class="line">    v5 = ((v4 &lt;&lt; <span class="number">16</span>) | (<span class="keyword">unsigned</span> __int16)~HIWORD(v4)) ^ (<span class="number">1</span> &lt;&lt; dword_DA5034[i / <span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">0</span> )</span><br><span class="line">      v5 ^= v2;</span><br><span class="line">    v2 = v5;</span><br><span class="line">    <span class="keyword">if</span> ( v5 != dword_DA5018[i / <span class="number">4</span>] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然每四位进行一系列位运算，且密钥只有六位，那就爆破吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x8C2C133A</span>, <span class="number">0x0F74CB3F6</span>, <span class="number">0x0FEDFA6F2</span>, <span class="number">0x0AB293E3B</span>, <span class="number">0x26CF8A2A</span>, <span class="number">0x88A1F279</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        tmp = a[t]</span><br><span class="line">        <span class="keyword">if</span> t != <span class="number">0</span>:</span><br><span class="line">            tmp = tmp ^ a[t - <span class="number">1</span>]</span><br><span class="line">        tmp = tmp ^ (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">        tmp = ((~tmp &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>) | (tmp &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        res = n2s(((tmp &gt;&gt; (<span class="number">0x20</span> - i)) | (tmp &lt;&lt; i)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        <span class="keyword">if</span> res[<span class="number">0</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">0</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">            <span class="keyword">if</span> res[<span class="number">1</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">1</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">                <span class="keyword">if</span> res[<span class="number">2</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">2</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">                    <span class="keyword">if</span> res[<span class="number">3</span>] &gt; <span class="number">0x20</span> <span class="keyword">and</span> res[<span class="number">3</span>] &lt; <span class="number">0x7f</span>:</span><br><span class="line">                        <span class="built_in">print</span> (res)</span><br><span class="line">    <span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><p>最后甚至直接上四个 <code>if</code> 了…</p><p>爆破结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;flag&#x27;</span> <span class="comment"># 必选</span></span><br><span class="line"><span class="string">b&#x27;,ag&amp;&#x27;</span></span><br><span class="line"><span class="string">b&quot;a&#x27;f,&quot;</span></span><br><span class="line"><span class="string">b&#x27;gf,!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;_2&#123;`&#x27;</span></span><br><span class="line"><span class="string">b&#x27;3&#123;`^&#x27;</span></span><br><span class="line"><span class="string">b&#x27;&#123;a_3&#x27;</span> <span class="comment"># 必选</span></span><br><span class="line"><span class="string">b&#x27;`_3z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;[a2&#125;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;a2y_&#x27;</span> <span class="comment"># 剩下三个有大括号，排除</span></span><br><span class="line"><span class="string">b&#x27;6&#125;_a&#x27;</span></span><br><span class="line"><span class="string">b&#x27;&#125;_e2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;re_f&#x27;</span></span><br><span class="line"><span class="string">b&#x27;e_gs&#x27;</span></span><br><span class="line"><span class="string">b&#x27;^fse&#x27;</span></span><br><span class="line"><span class="string">b&#x27;fsd_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;_4o2&#x27;</span></span><br><span class="line"><span class="string">b&#x27;or_t&#x27;</span></span><br><span class="line"><span class="string">b&#x27;2_t/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;=%st&#x27;</span></span><br><span class="line"><span class="string">b&#x27;est&#125;&#x27;</span> <span class="comment"># 必选</span></span><br><span class="line"><span class="string">b&#x27;s4=e&#x27;</span></span><br><span class="line"><span class="string">b&#x27;t=e3&#x27;</span></span><br></pre></td></tr></table></figure><p>中间根据前后单词拼接一下就行了</p><h1 id="SUCTF2018-HelloPython"><a href="#SUCTF2018-HelloPython" class="headerlink" title="[SUCTF2018]HelloPython"></a>[SUCTF2018]HelloPython</h1><h2 id="解pyc"><a href="#解pyc" class="headerlink" title="解pyc"></a>解pyc</h2><p>uncompyle6</p><h2 id="算法识别"><a href="#算法识别" class="headerlink" title="算法识别"></a>算法识别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> __target: [ (<span class="keyword">lambda</span> __target: [ [ __this() <span class="keyword">for</span> __g[<span class="string">&#x27;n&#x27;</span>] <span class="keyword">in</span> [__operator.isub(__g[<span class="string">&#x27;n&#x27;</span>], <span class="number">1</span>)] ][<span class="number">0</span>] <span class="keyword">for</span> __target.value <span class="keyword">in</span> [__operator.iadd(__target.value, (y.value &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>] ^ y.value + x.value ^ (y.value &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>])] ][<span class="number">0</span>])(z) <span class="keyword">for</span> __target.value <span class="keyword">in</span> [__operator.iadd(__target.value, (z.value &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>] ^ z.value + x.value ^ (z.value &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>])] ][<span class="number">0</span>])(y)</span><br></pre></td></tr></table></figure><p>很明显是tea</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比一下，z是v[1]，x是sum，y是v[0]，或者看下面这段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> __g[<span class="string">&#x27;x&#x27;</span>] <span class="keyword">in</span> [c_uint32(<span class="number">0</span>)] ][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;z&#x27;</span>] <span class="keyword">in</span> [c_uint32(v[<span class="number">1</span>])] ][<span class="number">0</span>] <span class="keyword">for</span> __g[<span class="string">&#x27;y&#x27;</span>] <span class="keyword">in</span> [c_uint32(v[<span class="number">0</span>])]</span><br></pre></td></tr></table></figure><h2 id="寻找常数"><a href="#寻找常数" class="headerlink" title="寻找常数"></a>寻找常数</h2><p>delta常数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> __g[<span class="string">&#x27;u&#x27;</span>] <span class="keyword">in</span> [<span class="number">2654435769</span>]</span><br></pre></td></tr></table></figure><p>密钥常数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> __g[<span class="string">&#x27;k&#x27;</span>] <span class="keyword">in</span> [[<span class="number">3735928559</span>, <span class="number">590558003</span>, <span class="number">19088743</span>, <span class="number">4275878552</span>]]</span><br></pre></td></tr></table></figure><p>到题目描述里找到密文 <code>f1f5d29b6e4414ec</code>（这还得自己去github找，离谱）</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//加密函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//解密函数  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span>  </span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        sum -= delta;  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">0xf1f5d29b</span>, <span class="number">0x6e4414ec</span>&#125;,k[<span class="number">4</span>]=&#123;<span class="number">3735928559</span>, <span class="number">590558003</span>, <span class="number">19088743</span>, <span class="number">4275878552</span>&#125;;  </span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数  </span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span></span><br><span class="line">    <span class="comment">// printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);  </span></span><br><span class="line">    <span class="comment">// encrypt(v, k);  </span></span><br><span class="line">    <span class="comment">// printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);  </span></span><br><span class="line">    decrypt(v, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%x %x\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>最近遇到了好几道网络编程和squashfs</li><li>还是得好好学一下angr</li><li>Shit这道题还是要看一下别人的WP，学习一下正确的思路</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;firmware：工控逆向&lt;/li&gt;
&lt;li&gt;[FlareOn4]greek_to_me：SMC校验&lt;/li&gt;
&lt;li&gt;[FlareOn6]Memecat Battlestation：baby .NET （不写wp了）&lt;/li&gt;
&lt;li&gt;[FlareOn5]FLEGGO&lt;/li&gt;
&lt;li&gt;[MR2020]Shit：花指令&lt;/li&gt;
&lt;li&gt;[SUCTF2018]HelloPython&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
    <category term="FlareOn" scheme="https://s0uthwood.github.io/tags/FlareOn/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ部分RE（一）</title>
    <link href="https://s0uthwood.github.io/2021/05/26/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://s0uthwood.github.io/2021/05/26/BUUOJ%E9%83%A8%E5%88%86RE%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-05-26T15:54:09.000Z</published>
    <updated>2021-05-27T19:36:08.234Z</updated>
    
    <content type="html"><![CDATA[<p>看前一天200分就第三了，正好好久没刷BUU，打算冲一下分，随便选几道题</p><ul><li>[NPUCTF2020]BasicASM —— 简单汇编</li><li>[watevrCTF 2019]Repyc —— python语言vm</li><li>[FlareOn1]Javascrap —— php语言病毒</li><li>[watevrCTF 2019]esreveR —— 简单动调</li></ul><a id="more"></a><h1 id="NPUCTF2020-BasicASM"><a href="#NPUCTF2020-BasicASM" class="headerlink" title="[NPUCTF2020]BasicASM"></a>[NPUCTF2020]BasicASM</h1><p>纯考察汇编的题目，有考虑想办法改成正确的汇编形式然后编译用ida看，但感觉就失去意义了，于是硬啃汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">00007FF7A8AC5A50  push        rbp  </span><br><span class="line">00007FF7A8AC5A52  push        rdi  </span><br><span class="line">00007FF7A8AC5A53  sub         rsp,238h  </span><br><span class="line">00007FF7A8AC5A5A  lea         rbp,[rsp+20h]  </span><br><span class="line">00007FF7A8AC5A5F  mov         rdi,rsp  </span><br><span class="line">00007FF7A8AC5A62  mov         ecx,8Eh  </span><br><span class="line">00007FF7A8AC5A67  mov         eax,0CCCCCCCCh  </span><br><span class="line">00007FF7A8AC5A6C  rep stos    dword ptr [rdi]  </span><br><span class="line">00007FF7A8AC5A6E  mov         rax,qword ptr [__security_cookie (07FF7A8AD3018h)]  </span><br><span class="line">00007FF7A8AC5A75  xor         rax,rbp  </span><br><span class="line">00007FF7A8AC5A78  mov         qword ptr [rbp+208h],rax  </span><br><span class="line">00007FF7A8AC5A7F  lea         rcx,[__06A15900_ConsoleApplication@cpp (07FF7A8AD902Ah)]  </span><br><span class="line">00007FF7A8AC5A86  call        __CheckForDebuggerJustMyCode (07FF7A8AC1122h)  </span><br><span class="line">00007FF7A8AC5A8B  lea         rdx,[string &quot;flag&#123;this_is_a_fake_flag&#125;&quot; (07FF7A8ACF450h)]  </span><br><span class="line">00007FF7A8AC5A92  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5A96  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; (07FF7A8AC15E1h)  </span><br><span class="line">00007FF7A8AC5A9B  nop  </span><br><span class="line">00007FF7A8AC5A9C  mov         dword ptr [p],0  </span><br><span class="line">00007FF7A8AC5AA3  mov         i,0  </span><br><span class="line">00007FF7A8AC5AAA  jmp         main+64h (07FF7A8AC5AB4h)  </span><br><span class="line">00007FF7A8AC5AAC  mov         eax,i  </span><br><span class="line">00007FF7A8AC5AAF  inc         eax  </span><br><span class="line">00007FF7A8AC5AB1  mov         i,eax  </span><br><span class="line">00007FF7A8AC5AB4  movsxd      rax,i  </span><br><span class="line">00007FF7A8AC5AB8  mov         qword ptr [rbp+1F8h],rax  </span><br><span class="line">00007FF7A8AC5ABF  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5AC3  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::length (07FF7A8AC122Bh)  </span><br><span class="line">00007FF7A8AC5AC8  mov         rcx,qword ptr [rbp+1F8h]  </span><br><span class="line">00007FF7A8AC5ACF  cmp         rcx,rax  </span><br><span class="line">00007FF7A8AC5AD2  jae         main+1B2h (07FF7A8AC5C02h)  ; 无符号数比较，大于或等于时跳转</span><br><span class="line">00007FF7A8AC5AD8  mov         eax,i  </span><br><span class="line">00007FF7A8AC5ADB  and         eax,1  ; 取最后1位</span><br><span class="line">00007FF7A8AC5ADE  cmp         eax,1  ; 判断奇偶</span><br><span class="line">00007FF7A8AC5AE1  jne         main+126h (07FF7A8AC5B76h)  ; 偶数跳转（不相等跳转）</span><br><span class="line">00007FF7A8AC5AE7  movsxd      rax,i  </span><br><span class="line">00007FF7A8AC5AEB  mov         rdx,rax  </span><br><span class="line">00007FF7A8AC5AEE  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5AF2  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::operator[] (07FF7A8AC1442h)  </span><br><span class="line">00007FF7A8AC5AF7  movsx       eax,byte ptr [rax]  ; 取flag第i位</span><br><span class="line">00007FF7A8AC5AFA  xor         eax,42h  ; 与0x42异或</span><br><span class="line">00007FF7A8AC5AFD  mov         dword ptr [p],eax  ; 异或结果移到内存中</span><br><span class="line">00007FF7A8AC5B00  mov         dl,30h  </span><br><span class="line">00007FF7A8AC5B02  lea         rcx,[rbp+144h]  </span><br><span class="line">00007FF7A8AC5B09  call        std::setfill&lt;char&gt; (07FF7A8AC1046h)  ; 用字符&#39;0&#39;进行填充</span><br><span class="line">00007FF7A8AC5B0E  mov         qword ptr [rbp+1F8h],rax  </span><br><span class="line">00007FF7A8AC5B15  mov         edx,2  </span><br><span class="line">00007FF7A8AC5B1A  lea         rcx,[rbp+168h]  </span><br><span class="line">00007FF7A8AC5B21  call        std::setw (07FF7A8AC10D2h)  ; 填充至2位</span><br><span class="line">00007FF7A8AC5B26  mov         qword ptr [rbp+200h],rax  </span><br><span class="line">00007FF7A8AC5B2D  lea         rdx,[std::hex (07FF7A8AC1488h)]  ; 以十六进制形式输出</span><br><span class="line">00007FF7A8AC5B34  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  </span><br><span class="line">00007FF7A8AC5B3B  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7160h)]  </span><br><span class="line">00007FF7A8AC5B41  mov         rcx,qword ptr [rbp+200h]  </span><br><span class="line">00007FF7A8AC5B48  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5B4B  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5B4E  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,__int64&gt; (07FF7A8AC12F8h)  </span><br><span class="line">00007FF7A8AC5B53  mov         rcx,qword ptr [rbp+1F8h]  </span><br><span class="line">00007FF7A8AC5B5A  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5B5D  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5B60  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,char&gt; (07FF7A8AC11A4h)  </span><br><span class="line">00007FF7A8AC5B65  mov         edx,dword ptr [p]  </span><br><span class="line">00007FF7A8AC5B68  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5B6B  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7158h)]  </span><br><span class="line">00007FF7A8AC5B71  jmp         main+1ADh (07FF7A8AC5BFDh)  </span><br><span class="line">00007FF7A8AC5B76  movsxd      rax,i  ; 偶数时跳转到这里，与奇数唯一的区别为没有异或运算</span><br><span class="line">00007FF7A8AC5B7A  mov         rdx,rax  </span><br><span class="line">00007FF7A8AC5B7D  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5B81  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::operator[] (07FF7A8AC1442h)  </span><br><span class="line">00007FF7A8AC5B86  movsx       eax,byte ptr [rax]  </span><br><span class="line">00007FF7A8AC5B89  mov         dword ptr [p],eax  </span><br><span class="line">00007FF7A8AC5B8C  mov         dl,30h  </span><br><span class="line">00007FF7A8AC5B8E  lea         rcx,[rbp+194h]  </span><br><span class="line">00007FF7A8AC5B95  call        std::setfill&lt;char&gt; (07FF7A8AC1046h)  </span><br><span class="line">00007FF7A8AC5B9A  mov         qword ptr [rbp+1F8h],rax  </span><br><span class="line">00007FF7A8AC5BA1  mov         edx,2  </span><br><span class="line">00007FF7A8AC5BA6  lea         rcx,[rbp+1B8h]  </span><br><span class="line">00007FF7A8AC5BAD  call        std::setw (07FF7A8AC10D2h)  </span><br><span class="line">00007FF7A8AC5BB2  mov         qword ptr [rbp+200h],rax  </span><br><span class="line">00007FF7A8AC5BB9  lea         rdx,[std::hex (07FF7A8AC1488h)]  </span><br><span class="line">00007FF7A8AC5BC0  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  </span><br><span class="line">00007FF7A8AC5BC7  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7160h)]  </span><br><span class="line">00007FF7A8AC5BCD  mov         rcx,qword ptr [rbp+200h]  </span><br><span class="line">00007FF7A8AC5BD4  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5BD7  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5BDA  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,__int64&gt; (07FF7A8AC12F8h)  </span><br><span class="line">00007FF7A8AC5BDF  mov         rcx,qword ptr [rbp+1F8h]  </span><br><span class="line">00007FF7A8AC5BE6  mov         rdx,rcx  </span><br><span class="line">00007FF7A8AC5BE9  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5BEC  call        std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,char&gt; (07FF7A8AC11A4h)  </span><br><span class="line">00007FF7A8AC5BF1  mov         edx,dword ptr [p]  </span><br><span class="line">00007FF7A8AC5BF4  mov         rcx,rax  </span><br><span class="line">00007FF7A8AC5BF7  call        qword ptr [__imp_std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (07FF7A8AD7158h)]  </span><br><span class="line">00007FF7A8AC5BFD  jmp         main+5Ch (07FF7A8AC5AACh)  </span><br><span class="line">00007FF7A8AC5C02  mov         dword ptr [rbp+1E4h],0  </span><br><span class="line">00007FF7A8AC5C0C  lea         rcx,[flag]  </span><br><span class="line">00007FF7A8AC5C10  call        std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; (07FF7A8AC1302h)  </span><br><span class="line">00007FF7A8AC5C15  mov         eax,dword ptr [rbp+1E4h]  </span><br><span class="line">00007FF7A8AC5C1B  mov         edi,eax  </span><br><span class="line">00007FF7A8AC5C1D  lea         rcx,[rbp-20h]  </span><br><span class="line">00007FF7A8AC5C21  lea         rdx,[__xt_z+540h (07FF7A8ACEFE0h)]  </span><br><span class="line">00007FF7A8AC5C28  call        _RTC_CheckStackVars (07FF7A8AC1596h)  </span><br><span class="line">00007FF7A8AC5C2D  mov         eax,edi  </span><br><span class="line">00007FF7A8AC5C2F  mov         rcx,qword ptr [rbp+208h]  </span><br><span class="line">00007FF7A8AC5C36  xor         rcx,rbp  </span><br><span class="line">00007FF7A8AC5C39  call        __security_check_cookie (07FF7A8AC1190h)  </span><br><span class="line">00007FF7A8AC5C3E  lea         rsp,[rbp+218h]  </span><br><span class="line">00007FF7A8AC5C45  pop         rdi  </span><br><span class="line">00007FF7A8AC5C46  pop         rbp  </span><br><span class="line">00007FF7A8AC5C47  ret  </span><br></pre></td></tr></table></figure><p>简单的说，过程就是一个循环，根据 <code>i</code> 的奇偶进行判断，是否与 <code>0x42</code> 进行异或，然后将结果以 2 位十六进制输出，所以只需要进行反向求解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line">cipher = n2s(<span class="number">0x662e61257b26301d7972751d6b2c6f355f3a38742d74341d61776d7d7d</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i] ^ <span class="number">0x42</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(cipher[i]), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;d0_y0u_know_x86-64_a5m?&#125;</span></span><br></pre></td></tr></table></figure><h1 id="watevrCTF-2019-Repyc"><a href="#watevrCTF-2019-Repyc" class="headerlink" title="[watevrCTF 2019]Repyc"></a>[watevrCTF 2019]Repyc</h1><p>010看一眼，发现文件头好像没什么问题，直接用 <code>uncompyle6</code> 转成python文件</p><p>和VN的题一样，变量都成了乱码，阅读一下然后改一改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">zero = <span class="number">0</span></span><br><span class="line">one = <span class="number">1</span></span><br><span class="line">two = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">op</span>):</span></span><br><span class="line">    i = zero</span><br><span class="line">    list_a = [zero] * two ** (two * two) <span class="comment"># [0] * 16</span></span><br><span class="line">    list_b = [zero] * <span class="number">100</span></span><br><span class="line">    list_c = []</span><br><span class="line">    <span class="keyword">while</span> op[i][zero] != <span class="string">&#x27;nop&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> (i, op[i])</span><br><span class="line">        cur = op[i][zero].lower()</span><br><span class="line">        args = op[i][one:]</span><br><span class="line">        <span class="keyword">if</span> cur == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] + list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;xor&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] ^ list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] - list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] * list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;div&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] / list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;and&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] &amp; list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;or&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[one]] | list_a[args[two]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;nothing&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_a[args[zero]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;mov&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = args[one]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;set_a&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = list_b[args[one]]</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;clear&#x27;</span>:</span><br><span class="line">            list_a[args[zero]] = zero</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;input_b&#x27;</span>:</span><br><span class="line">            list_b[args[zero]] = <span class="built_in">input</span>(list_a[args[one]])</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;print_a&#x27;</span>:</span><br><span class="line">            print(list_a[args[zero]])</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;c_pop&#x27;</span>:</span><br><span class="line">            i = list_c.pop()</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;append_c&#x27;</span>:</span><br><span class="line">            list_a[<span class="number">7</span>] = zero</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a[args[zero]])):</span><br><span class="line">                <span class="keyword">if</span> list_a[args[zero]] != list_a[args[one]]:</span><br><span class="line">                    list_a[<span class="number">7</span>] = one</span><br><span class="line">                    i = list_a[args[two]]</span><br><span class="line">                    list_c.append(i)</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;xor_a&#x27;</span>:</span><br><span class="line">            str_next = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a[args[zero]])):</span><br><span class="line">                str_next += <span class="built_in">chr</span>(<span class="built_in">ord</span>(list_a[args[zero]][j]) ^ list_a[args[one]])</span><br><span class="line">            list_a[args[zero]] = str_next</span><br><span class="line">        <span class="keyword">elif</span> cur == <span class="string">&#x27;sub_a&#x27;</span>:</span><br><span class="line">            str_next = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_a[args[zero]])):</span><br><span class="line">                str_next += <span class="built_in">chr</span>(<span class="built_in">ord</span>(list_a[args[zero]][j]) - list_a[args[one]])</span><br><span class="line">            list_a[args[zero]] = str_next</span><br><span class="line">        <span class="built_in">print</span> (list_a)</span><br><span class="line">        <span class="built_in">print</span> (list_b)</span><br><span class="line">        <span class="built_in">print</span> (list_c)</span><br><span class="line">        <span class="built_in">print</span> ()</span><br><span class="line">        i += one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function(</span><br><span class="line">    [</span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, zero, <span class="string">&#x27;Authentication token: &#x27;</span>],</span><br><span class="line">        <span class="comment"># 将这个字符串放到list a的0号位置</span></span><br><span class="line">        [ <span class="string">&#x27;input_b&#x27;</span>, zero, zero],</span><br><span class="line">        <span class="comment"># 将输入放到list b的0号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\x97ÉïÙãäãÖÓ\x9aÕÙÛ\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë&#x27;</span>],</span><br><span class="line">        <span class="comment"># 将这个字符串放到list a的6号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, two, two ** (<span class="number">3</span> * two + one) - two ** (two + one)],</span><br><span class="line">        <span class="comment"># 将120放到list a的2号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">4</span>, <span class="number">15</span>],</span><br><span class="line">        <span class="comment"># 将15放到list a的4号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">3</span>, one],</span><br><span class="line">        <span class="comment"># 将1放到list a的3号位置</span></span><br><span class="line">        [ <span class="string">&#x27;mul&#x27;</span>, two, two, <span class="number">3</span>],</span><br><span class="line">        <span class="comment"># list a的2号位置等于2号位置*3号位置，即不变</span></span><br><span class="line">        [ <span class="string">&#x27;add&#x27;</span>, two, two, <span class="number">4</span>],</span><br><span class="line">        <span class="comment"># list a的2号位置等于2号位置+4号位置，即120变为135</span></span><br><span class="line">        [ <span class="string">&#x27;nothing&#x27;</span>, zero, two],</span><br><span class="line">        [ <span class="string">&#x27;clear&#x27;</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="comment"># list a的3号位置清零</span></span><br><span class="line">        [ <span class="string">&#x27;xor_a&#x27;</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="comment"># 6号位置中每一个字符与3异或</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, zero, <span class="string">&#x27;Thanks.&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, one, <span class="string">&#x27;Authorizing access...&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;print_a&#x27;</span>, zero],</span><br><span class="line">        [ <span class="string">&#x27;set_a&#x27;</span>, zero, zero],</span><br><span class="line">        [ <span class="string">&#x27;xor_a&#x27;</span>, zero, two], <span class="comment"># 输入异或135</span></span><br><span class="line">        [ <span class="string">&#x27;sub_a&#x27;</span>, zero, <span class="number">4</span>], <span class="comment"># 输入减15</span></span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, <span class="number">5</span>, <span class="number">19</span>],</span><br><span class="line">        [ <span class="string">&#x27;append_c&#x27;</span>, zero, <span class="number">6</span>, <span class="number">5</span>],</span><br><span class="line">        [ <span class="string">&#x27;print_a&#x27;</span>, one],</span><br><span class="line">        [ <span class="string">&#x27;nop&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;mov&#x27;</span>, one, <span class="string">&#x27;Access denied!&#x27;</span>],</span><br><span class="line">        [ <span class="string">&#x27;print_a&#x27;</span>, one],</span><br><span class="line">        [ <span class="string">&#x27;nop&#x27;</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将过程变量输出当作动调，就比较容易看懂每条指令在干什么了</p><p>最后发现有用的就是异或135和减15，猜flag头是 <code>watevr</code>，果然和密文前6个字符对上了</p><p>所以直接一个解密就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&#x27;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\x97ÉïÙãäãÖÓ\x9aÕÙÛ\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>((<span class="built_in">ord</span>(c) + <span class="number">15</span>) ^ <span class="number">135</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># watevr&#123;this_must_be_the_best_encryption_method_evr_henceforth_this_is_the_new_Advanced_Encryption_Standard_anyways_i_dont_really_have_a_good_vid_but_i_really_enjoy_this_song_i_hope_you_will_enjoy_it_aswell!_youtube.com/watch?v=E5yFcdPAGv0&#125;</span></span><br></pre></td></tr></table></figure><h1 id="FlareOn1-Javascrap"><a href="#FlareOn1-Javascrap" class="headerlink" title="[FlareOn1]Javascrap"></a>[FlareOn1]Javascrap</h1><p>一开始盯着网页看了半天，找不到题目在哪儿，就看了眼别人的wp，发现文件就在图片里</p><p>用010editor打开，找到php文件，导出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$terms=<span class="keyword">array</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;|&quot;</span>);</span><br><span class="line">$order=<span class="keyword">array</span>(<span class="number">59</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">13</span>, <span class="number">35</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">81</span>, <span class="number">76</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">11</span>, <span class="number">76</span>, <span class="number">68</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">23</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">49</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">80</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">40</span>, <span class="number">81</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">76</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">7</span>, <span class="number">88</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">90</span>, <span class="number">52</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">11</span>, <span class="number">79</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">42</span>, <span class="number">23</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">35</span>, <span class="number">68</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">30</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">1</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">40</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">4</span>, <span class="number">51</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">21</span>, <span class="number">47</span>, <span class="number">93</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">58</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">47</span>);</span><br><span class="line">$do_me=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($order);$i++)&#123;</span><br><span class="line">$do_me=$do_me.$terms[$order[$i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>($do_me); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用国赛学来的方法，直接把 <code>eval</code> 改成 <code>print</code> 然后放在线环境运行一下，得到第二份脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_= \<span class="string">&#x27;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9\&#x27;;</span></span><br><span class="line"><span class="string">$__=\&#x27;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\&#x27;;</span></span><br><span class="line"><span class="string">$___=&quot;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&quot;;</span></span><br><span class="line"><span class="string">eval($___($__));</span></span><br></pre></td></tr></table></figure><p>这次好像在线环境运行不了，看一下字符串都是什么，复制到python里，发现 <code>$___</code> 是 <code>base64_decode</code></p><p>于是把 <code>$__</code> 解码一下，得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$code=base64_decode($_);<span class="keyword">eval</span>($code);</span><br></pre></td></tr></table></figure><p>所以只要解码 <code>$_</code> 就可以了，得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&quot;\\97\\49\\49\\68\\x4F\\84\\116\\x68\\97\\x74\\x44\\x4F\\x54\\x6A\\97\\x76\\x61\\x35\\x63\\x72\\97\\x70\\x41\\84\\x66\\x6C\\97\\x72\\x65\\x44\\65\\x53\\72\\111\\110\\68\\79\\84\\99\\x6F\\x6D&quot;</span>])) &#123; <span class="keyword">eval</span>(base64_decode($_POST[<span class="string">&quot;\\97\\49\\x31\\68\\x4F\\x54\\116\\104\\x61\\116\\x44\\79\\x54\\106\\97\\118\\97\\53\\x63\\114\\x61\\x70\\65\\84\\102\\x6C\\x61\\114\\101\\x44\\65\\x53\\72\\111\\x6E\\x44\\x4F\\84\\99\\x6F\\x6D&quot;</span>])); &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>POST请求是什么不太清楚，但看到这些字符好像都在可见字符范围内，所以直接转成string，得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;a11DOTthatDOTjava5crapATflareDASHonDOTcom&#x27;</span></span><br></pre></td></tr></table></figure><p>把 <code>DOT</code>，<code>AT</code>，<code>DASH</code> 都转成对应的符号，就拿到flag了</p><h1 id="watevrCTF-2019-esreveR"><a href="#watevrCTF-2019-esreveR" class="headerlink" title="[watevrCTF 2019]esreveR"></a>[watevrCTF 2019]esreveR</h1><p>用ida打开后，发现大量与输入无关的计算，于是决定先静态跟踪一下输入，然后再动调看过程数据</p><p>和输入有关的大概是这些（动调后写的wp，所以基地址改变了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fgets(s, n[<span class="number">0</span>], <span class="built_in">stdin</span>);</span><br><span class="line">v8 = sub_5578E4A20943(n[<span class="number">0</span>]);</span><br><span class="line">*(_QWORD *)n = sub_5578E4A20996(v14);</span><br><span class="line"><span class="keyword">if</span> ( *(_QWORD *)n != v8 )</span><br><span class="line">&#123;</span><br><span class="line">  v11 = sub_5578E4A209E9(<span class="number">4521</span>);</span><br><span class="line">  <span class="keyword">if</span> ( s != (<span class="keyword">char</span> *)v11 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = sub_5578E4A212D8((__int64)s, v15, v10, v9, v11, v13);</span><br><span class="line">    <span class="keyword">if</span> ( v4 != v15 * ((v12 ^ v13) - *(_QWORD *)n) )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! You reversed the reversed reverse!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现输入只要输入的地址不等于一个数，然后通过某个判断就行，于是再进到判断前的函数</p><p>会看到一个输入参数很多的函数，进去看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  v58 = a1 == *a57;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != a57[<span class="number">1</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a3 != a57[<span class="number">2</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a4 != a57[<span class="number">3</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a5 != a57[<span class="number">4</span>] )</span><br><span class="line">    v58 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 以下省略</span></span><br></pre></td></tr></table></figure><p>输入了57个参数，而且就是判断是否相同的，相同就返回1，否则返回0</p><p>于是猜测这里就是最终的验证函数</p><p>中间经过了一系列动调，确定其它的过程没什么影响，于是在进入函数前下个断点，然后直接去rsp的地址里找比较的数据</p><p>最后的内存数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[stack]:00007FFF9B4402F0 dq &#39;&#123;&#39;, &#39;e&#39;, &#39;s&#39;, &#39;r&#39;, &#39;e&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39;, &#39;_&#39;, &#39;r&#39;, &#39;e&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;e&#39;</span><br><span class="line">[stack]:00007FFF9B4402F0 dq &#39;d&#39;, &#39;_&#39;, &#39;y&#39;, &#39;o&#39;, &#39;u&#39;, &#39;t&#39;, &#39;u&#39;, &#39;b&#39;, &#39;e&#39;, &#39;.&#39;, &#39;c&#39;, &#39;o&#39;, &#39;m&#39;, &#39;&#x2F;&#39;, &#39;w&#39;, &#39;a&#39;</span><br><span class="line">[stack]:00007FFF9B4402F0 dq &#39;t&#39;, &#39;c&#39;, &#39;h&#39;, &#39;?&#39;, &#39;v&#39;, &#39;&#x3D;&#39;, &#39;I&#39;, &#39;8&#39;, &#39;i&#39;, &#39;j&#39;, &#39;b&#39;, &#39;4&#39;, &#39;Z&#39;, &#39;e&#39;, &#39;e&#39;, &#39;5&#39;</span><br><span class="line">[stack]:00007FFF9B4402F0 dq &#39;E&#39;, &#39;&#125;&#39;</span><br></pre></td></tr></table></figure><p>连接起来就是flag了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;esrever_reversed_youtube.com&#x2F;watch?v&#x3D;I8ijb4Zee5E&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看前一天200分就第三了，正好好久没刷BUU，打算冲一下分，随便选几道题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[NPUCTF2020]BasicASM —— 简单汇编&lt;/li&gt;
&lt;li&gt;[watevrCTF 2019]Repyc —— python语言vm&lt;/li&gt;
&lt;li&gt;[FlareOn1]Javascrap —— php语言病毒&lt;/li&gt;
&lt;li&gt;[watevrCTF 2019]esreveR —— 简单动调&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>cryptohack</title>
    <link href="https://s0uthwood.github.io/2021/05/20/cryptohack/"/>
    <id>https://s0uthwood.github.io/2021/05/20/cryptohack/</id>
    <published>2021-05-19T17:51:42.000Z</published>
    <updated>2021-05-19T17:54:25.016Z</updated>
    
    <content type="html"><![CDATA[<p>不错的密码学平台，慢慢学</p><a id="more"></a><h1 id="Encoding-Challenge"><a href="#Encoding-Challenge" class="headerlink" title="Encoding Challenge"></a>Encoding Challenge</h1><p>Pwntools的简单使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;socket.cryptohack.org&#x27;</span>, <span class="number">13377</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_recv</span>():</span></span><br><span class="line">    line = r.recvline()</span><br><span class="line">    <span class="keyword">return</span> json.loads(line.decode())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_send</span>(<span class="params">hsh</span>):</span></span><br><span class="line">    request = json.dumps(hsh).encode()</span><br><span class="line">    r.sendline(request)</span><br><span class="line"></span><br><span class="line">ENCODINGS = [</span><br><span class="line">    <span class="string">&quot;base64&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rot13&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bigint&quot;</span>,</span><br><span class="line">    <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">received = json_recv()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Received type: &quot;</span>)</span><br><span class="line">print(received[<span class="string">&quot;type&quot;</span>])</span><br><span class="line">print(<span class="string">&quot;Received encoded value: &quot;</span>)</span><br><span class="line">print(received[<span class="string">&quot;encoded&quot;</span>])</span><br><span class="line">i = ENCODINGS.index(received[<span class="string">&#x27;type&#x27;</span>])</span><br><span class="line">decoded = received[<span class="string">&#x27;encoded&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">decoded = b64decode(decoded)</span><br><span class="line">decoded = <span class="built_in">str</span>(decoded)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">decoded = n2s(<span class="built_in">int</span>(decoded, <span class="number">16</span>))</span><br><span class="line">decoded = <span class="built_in">str</span>(decoded)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">decoded = codecs.decode(decoded, <span class="string">&#x27;rot_13&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">3</span>:</span><br><span class="line">decoded = n2s(<span class="built_in">int</span>(decoded, <span class="number">16</span>))</span><br><span class="line">decoded = <span class="built_in">str</span>(decoded)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">4</span>:</span><br><span class="line">decoded = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> received[<span class="string">&#x27;encoded&#x27;</span>]:</span><br><span class="line">decoded += <span class="built_in">chr</span>(c)</span><br><span class="line"><span class="built_in">print</span> (decoded)</span><br><span class="line">to_send = &#123;</span><br><span class="line">    <span class="string">&quot;decoded&quot;</span>: decoded</span><br><span class="line">&#125;</span><br><span class="line">json_send(to_send)</span><br><span class="line"></span><br><span class="line">print(json_recv())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;不错的密码学平台，慢慢学&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/categories/CTF/Crypto/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2021 RE writeup</title>
    <link href="https://s0uthwood.github.io/2021/05/20/CISCN2021-RE-writeup/"/>
    <id>https://s0uthwood.github.io/2021/05/20/CISCN2021-RE-writeup/</id>
    <published>2021-05-19T17:21:59.000Z</published>
    <updated>2021-07-02T11:56:49.849Z</updated>
    
    <content type="html"><![CDATA[<ul><li>glass</li><li>baby_rc</li><li>little_evil</li><li>HMI</li><li>gift</li></ul><p>TODO: 研究gift</p><a id="more"></a><h1 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h1><p>安卓逆向，使用jeb打开，发现在java层仅进行了简单的输入，然后进入so层判断</p><p>用ida打开so层，直接搜索java，进入判断函数</p><p>下面的字符串应该是密钥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmemcpy(v6, <span class="string">&quot;12345678&quot;</span>, <span class="keyword">sizeof</span>(v6));</span><br></pre></td></tr></table></figure><p>然后调用了三个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_FFC(v7, v6, v4);</span><br><span class="line">sub_1088(v7, flag, <span class="number">39</span>);</span><br><span class="line">sub_10D4(flag, <span class="number">39</span>, v6, v4);</span><br></pre></td></tr></table></figure><p>进入查看，第一个是RC4密钥初始化，第二个是RC4加密，第三个是对密文进行简单的运算</p><p>从字符串里拿密文，写脚本进行求解，先对简单运算进行反向运算，然后找个RC4密码的脚本，跑一下就可以找到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0xA3</span>, <span class="number">0x1A</span>, <span class="number">0xE3</span>, <span class="number">0x69</span>, <span class="number">0x2F</span>, <span class="number">0xBB</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x65</span>, <span class="number">0xC2</span>, <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x9E</span>, <span class="number">0x96</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0x1F</span>, <span class="number">0x8E</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, <span class="number">0xE1</span>, <span class="number">0xEB</span>, <span class="number">0xAF</span>, <span class="number">0xF0</span>, <span class="number">0xEA</span>, <span class="number">0xC4</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, <span class="number">0x6E</span>, <span class="number">0x3F</span>, <span class="number">0xB0</span>, <span class="number">0xD3</span>, <span class="number">0xCC</span>, <span class="number">0x78</span>, <span class="number">0xF9</span>, <span class="number">0x98</span>, <span class="number">0x3F</span>, <span class="number">0</span>]</span><br><span class="line">key = [<span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__rc4_init</span>(<span class="params">key</span>):</span></span><br><span class="line">    keylength = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % keylength]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_crypt</span>(<span class="params">key, data</span>):</span></span><br><span class="line">    S = __rc4_init(key)</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = (a ^ S[(S[i] + S[j]) % <span class="number">256</span>]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        result += k</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">k</span>):</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        ret.append(k &amp; <span class="number">0xff</span>)</span><br><span class="line">        k &gt;&gt;= <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> ret[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    cipher[j] ^= key[j % <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">39</span>, <span class="number">3</span>):</span><br><span class="line">    cipher[j], cipher[j + <span class="number">1</span>], cipher[j + <span class="number">2</span>] = cipher[j + <span class="number">1</span>] ^ cipher[j + <span class="number">2</span>], cipher[j + <span class="number">1</span>] ^ cipher[j], cipher[j] ^ cipher[j + <span class="number">1</span>] ^ cipher[j + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (rc4_crypt(key, cipher))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;CISCN&#123;6654d84617f627c88846c172e0f4d46c&#125;\xec&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h1><p>不知道bc文件是什么，用 <code>file</code> 命令查看，发现是 <code>LLVM ir bitcode</code> 文件，上网搜索，使用 <code>clang -o baby_bc baby.bc</code> 搞成 <code>elf</code> 文件</p><p>拖入ida进行查看</p><p>首先对输入进行判断，分析输入的应该是长度是25的字符串，每个字符都在 <code>0-5</code> 之间</p><p>要拿到flag需要通过两个验证函数</p><p>第一个函数是将输入填入到map中，map中非零位输入应该为0，零位的输入不能为0</p><p>第二个函数是对map进行验证，分析后发现总共进行了如下验证：</p><ul><li>每行的数字不能相同</li><li>每列的数字不能相同</li><li>每行相邻两个数字的大小关系需要符合row矩阵的要求</li><li>每列相邻两个数字的大小关系需要符合col矩阵的要求</li></ul><p>知道要求后直接上z3约束求解器拿flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">flag = [Int(<span class="string">&quot;flag_%i&quot;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    s.add(flag[i] &gt; <span class="number">0</span>)</span><br><span class="line">    s.add(flag[i] &lt; <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">12</span>] == <span class="number">4</span>)</span><br><span class="line">s.add(flag[<span class="number">18</span>] == <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add_row = <span class="number">0</span></span><br><span class="line">    add_col = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        add_row += flag[i * <span class="number">5</span> + j]</span><br><span class="line">        add_col += flag[j * <span class="number">5</span> + i]</span><br><span class="line">    s.add(add_row == <span class="number">15</span>)</span><br><span class="line">    s.add(add_col == <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">5</span>] &gt; flag[<span class="number">6</span>])</span><br><span class="line">s.add(flag[<span class="number">20</span>] &gt; flag[<span class="number">21</span>])</span><br><span class="line">s.add(flag[<span class="number">3</span>] &gt; flag[<span class="number">4</span>])</span><br><span class="line">s.add(flag[<span class="number">13</span>] &gt; flag[<span class="number">14</span>])</span><br><span class="line">s.add(flag[<span class="number">22</span>] &gt; flag[<span class="number">23</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">10</span>] &lt; flag[<span class="number">11</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">2</span>] &gt; flag[<span class="number">7</span>])</span><br><span class="line">s.add(flag[<span class="number">4</span>] &gt; flag[<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">13</span>] &lt; flag[<span class="number">18</span>])</span><br><span class="line">s.add(flag[<span class="number">16</span>] &lt; flag[<span class="number">21</span>])</span><br><span class="line">s.add(flag[<span class="number">19</span>] &lt; flag[<span class="number">24</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> j == k:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s.add(flag[<span class="number">5</span> * i + j] != flag[<span class="number">5</span> * i + k])</span><br><span class="line">            s.add(flag[<span class="number">5</span> * j + i] != flag[<span class="number">5</span> * k + i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        <span class="built_in">print</span> (model[flag[i]].as_long().real, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nfinish&#x27;</span>)</span><br><span class="line"><span class="comment"># 1425353142354212153442315</span></span><br></pre></td></tr></table></figure><p>最后把两个地方改成 0 就行了</p><h1 id="little-evil"><a href="#little-evil" class="headerlink" title="little_evil"></a>little_evil</h1><h2 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h2><p>直接用ida直接打开会看到一个叫做”squashfs”，而且和ruby有关，但比赛的时候没有多想，然后就走远了</p><p><img data-src="珍贵截图.png" alt=""></p><p>放一张珍贵截图</p><p>后来得知正确方法需要先用binwalk分解一下，这里有个坑，需要自己手动装一个”squashfs”的插件</p><p>顺便补充一下什么是”squashfs”：基于Linux内核使用的压缩只读文件系统。难怪要用binwalk，沉思</p><h2 id="利用输出去混淆"><a href="#利用输出去混淆" class="headerlink" title="利用输出去混淆"></a>利用输出去混淆</h2><p>分解后翻一下目录，可以找到一个 <code>out.rb</code> 的文件</p><p>打开后发现是一个被严重混淆的脚本，大概长下面这样</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$l1Il=<span class="string">&quot;&quot;</span>;</span><br><span class="line">$l1lI=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">llIl</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|7; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1lll() $lI1lll=10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def llI1l() $lI1lll=$lI1lll|</span><span class="number">4</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lIlI</span><span class="params">()</span></span> $lI1lll=$lI1lll+<span class="number">3</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l111</span><span class="params">()</span></span> $lI1lll=$lI1lll%<span class="number">3</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lI1IlI</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|3; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def ll1l1() $lI1lll=$lI1lll*8; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1lI() $lI1lll=$lI1lll-3; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lI1lII() $lI1lll=$lI1lll%1; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIlIl() $lI1lll=$lI1lll&amp;10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIll() $lI1lll=$lI1lll-4; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lII1() $lI1lll=$lI1lll%2; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1III() $lI1lll=$lI1lll|</span><span class="number">1</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1l111</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|5; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1IIII() $lI1lll=$lI1lll%10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l11I() $l1Il=$l1Il+$lI1lll.chr; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIlll() $lI1lll=$lI1lll*9; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l11IlI() $lI1lll=$lI1lll-8; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lI1I1() $lI1lll=$lI1lll+5; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def ll11lI() $lI1lll=$lI1lll&amp;9; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lII1l1()</span></span><br><span class="line"><span class="params">    #send($l1Il[0,4], $l1Il[4,$l1Il.length]);</span></span><br><span class="line"><span class="params">    aFile=File.new(&quot;out2.rb&quot;, &quot;w&quot;);</span></span><br><span class="line"><span class="params">    aFile.syswrite($l1Il);</span></span><br><span class="line"><span class="params">    aFile.close;</span></span><br><span class="line"><span class="params"><span class="keyword">end</span>;</span></span><br></pre></td></tr></table></figure><p>最后一个函数里本来只有一个 <code>send</code> 方法，这个方法是执行第一个参数的函数，后面的参数都是这个函数的变量</p><p>这里跟着学长学习了一个针对解释性语言混淆的办法，就是直接输出这个send中的变量</p><p>输出之后还是一个相似的脚本，简单换一下行，长这样：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eval</span></span><br><span class="line">$llll=<span class="string">&quot;&quot;</span>;</span><br><span class="line">$llII=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1llI</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll1III()$l1lI1l=$l1lI1l%7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lllI()$l1lI1l=$l1lI1l/4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lIl1l()$l1lI1l=$l1lI1l-3; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1lll()$l1lI1l=$l1lI1l|</span><span class="number">10</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l11I1I</span><span class="params">()</span></span>$l1lI1l=<span class="number">10</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1l1</span><span class="params">()</span></span>$l1lI1l=$l1lI1l&amp;<span class="number">7</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1II</span><span class="params">()</span></span>$l1lI1l=$l1lI1l%<span class="number">8</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ll1I</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|8; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll11()$l1lI1l=$l1lI1l^6; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll1l1I()$l1lI1l=$l1lI1l|</span><span class="number">1</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lI1Il</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|3; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def llI1I()$l1lI1l=$l1lI1l+6; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def llIl1()$l1lI1l=$l1lI1l*4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lI1ll()$l1lI1l=$l1lI1l*5; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1111()$l1lI1l=$l1lI1l^7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1lII()$l1lI1l=$l1lI1l^4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lIIl()$l1lI1l=$l1lI1l%5; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lII11()$l1lI1l=$l1lI1l+9; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lI11I()$llll=$llll+$l1lI1l.chr; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1IlI()send($llll[0,4], $llll[4,$llll.length]); <span class="keyword">end</span>; </span></span><br></pre></td></tr></table></figure><p>一开始的 <code>eval</code> 就是 <code>send</code> 中调用的函数，可以分析出来后面的东西就是要用来执行的，因为这是解释性语言，直接输出就拿到源代码了</p><p>和刚才进行同样的操作，拿到第三份脚本</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> $_=$$/$$;@_=$_+$_;$-<span class="number">_</span>=$_-@_</span><br><span class="line">$__=-&gt;<span class="number">_</span>&#123;<span class="number">_</span>==[]<span class="params">||</span><span class="number">_</span>==<span class="string">&#x27;&#x27;</span>?$.<span class="symbol">:</span>$_+$__[<span class="number">_</span>[$_..$-<span class="number">_</span>]]&#125;</span><br><span class="line">@__=-&gt;<span class="number">_</span>,&amp;_<span class="number">_</span>&#123;<span class="number">_</span>==[]?[]<span class="symbol">:</span>[_<span class="number">_</span>[<span class="number">_</span>[$.]]]+@__[<span class="number">_</span>[$_..$-<span class="number">_</span>],&amp;_<span class="number">_</span>]&#125;</span><br><span class="line">$_____=-&gt;<span class="number">_</span>&#123;@__[[*<span class="number">_</span>],&amp;-&gt;_<span class="number">_</span>&#123;_<span class="number">_</span>[$.]&#125;]&#125;</span><br><span class="line">@_____=-&gt;<span class="number">_</span>&#123;@__[[*<span class="number">_</span>],&amp;-&gt;_<span class="number">_</span>&#123;_<span class="number">_</span>[$-<span class="number">_</span>]&#125;]&#125;</span><br><span class="line">$______=-&gt;<span class="number">_</span>&#123;__<span class="number">_</span>,_____<span class="number">_</span>=$_____[<span class="number">_</span>],@_____[<span class="number">_</span>];____<span class="number">_</span>=$__[__<span class="number">_</span>];___<span class="number">_</span>=&#123;&#125;;_<span class="number">_</span>=$.;(<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  ___<span class="number">_</span>[_____<span class="number">_</span>[_<span class="number">_</span>]]=__<span class="number">_</span>[_<span class="number">_</span>];(_<span class="number">_</span>+=$_)==____<span class="number">_</span> ?<span class="symbol">____:</span><span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">@______=-&gt;<span class="number">_</span>,_<span class="number">_</span>&#123;<span class="number">_</span>=[*<span class="number">_</span>]+[*_<span class="number">_</span>];___<span class="number">_</span>=$__[<span class="number">_</span>];__<span class="number">_</span>=&#123;&#125;;_<span class="number">_</span>=$.;(____<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  __<span class="number">_</span>[<span class="number">_</span>[_<span class="number">_</span>][$.]]=<span class="number">_</span>[_<span class="number">_</span>][$_];(_<span class="number">_</span>+=$_)==___<span class="number">_</span> ?<span class="symbol">___:</span>____<span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">$_______=-&gt;<span class="number">_</span>&#123;$___=[];@___=$__[<span class="number">_</span>];_<span class="number">_</span>=__<span class="number">_</span>=___<span class="number">_</span>=$.;$____,@____=&#123;&#125;,[]</span><br><span class="line">(____<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  <span class="number">_</span>[___<span class="number">_</span>]==<span class="string">&#x27;5&#x27;</span>?(@____&lt;&lt;___<span class="number">_</span>)<span class="symbol">:</span>$.</span><br><span class="line">  <span class="number">_</span>[___<span class="number">_</span>]==<span class="string">&#x27;6&#x27;</span>?($____[@____[$-<span class="number">_</span>]]=___<span class="number">_</span>;@____=@____[$...$.-@_])<span class="symbol">:</span>$.</span><br><span class="line">  (___<span class="number">_</span>+=$_)==@___?$.<span class="symbol">:_____[]</span>&#125;)[]</span><br><span class="line">$____=$____==&#123;&#125;?&#123;&#125;<span class="symbol">:</span>@______[$____,$______[$____]]</span><br><span class="line">(_____<span class="number">_</span>=-&gt;&#123;<span class="number">_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]+=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;1&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]-=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;2&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]=STDIN.getc.ord)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;3&#x27;</span><span class="string">?(</span>__<span class="number">_</span>+=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;4&#x27;</span><span class="string">?(</span>__<span class="number">_</span>-=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;5&#x27;</span><span class="string">?(</span>_<span class="number">_</span>=($___[__<span class="number">_</span>]<span class="params">||</span>$.)==$.<span class="string">?$</span>___<span class="number">_</span>[_<span class="number">_</span>]<span class="symbol">:__</span>)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;6&#x27;</span><span class="string">?(</span>_<span class="number">_</span>=($___[__<span class="number">_</span>]<span class="params">||</span>$.)!=$.<span class="string">?$</span>___<span class="number">_</span>[_<span class="number">_</span>]<span class="symbol">:__</span>)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;7&#x27;</span>?($&gt;&lt;&lt;(<span class="string">&#x27;&#x27;</span>&lt;&lt;$___[__<span class="number">_</span>]))<span class="symbol">:</span>$.</span><br><span class="line">(_<span class="number">_</span>+=$_)==@___?<span class="symbol">_:</span>_____<span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">$_______[<span class="string">&#x27;33516351...44516644&#x27;</span>];<span class="keyword">rescue</span> Exception;<span class="keyword">end</span> <span class="comment">#中间部分省略了</span></span><br></pre></td></tr></table></figure><p>这份脚本就很丑了，最后一长串的数字，让我自己来猜的话肯定会猜是一个虚拟机</p><p>然后一大堆 <code>?</code> 一看就是 <code>switch</code> 语句，后来细看才发现全是三元运算符，但也是 <code>switch</code> 的作用</p><p>于是将指令部分翻译成 python（只是熟悉一点而已）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] += global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] -= global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] = STDIN.getc.<span class="built_in">ord</span></span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">    tmp_3 += global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">    tmp_3 -= global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (global_3[tmp_3] <span class="keyword">or</span> $.) == $.:</span><br><span class="line">        tmp_2 = global_4[tmp_2]</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (global_3[tmp_3] <span class="keyword">or</span> $.) != $.:</span><br><span class="line">        tmp_2 = global_4[tmp_2]</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">    global_0&lt;&lt;(<span class="string">&#x27;&#x27;</span>.append(global_3[tmp_3]))</span><br></pre></td></tr></table></figure><p>因为是补题，所以提前知道是 brainfuck 语言，但还是尝试自己逆了一下</p><ul><li>tmp_3 是指针，操作3和4对应了指针+1 -1(&gt;和&lt;)</li><li>global_3 是指针指向的字节，操作0和1对应了字节的+1 -1(+和-)</li><li>操作2中含有获取输入，对应了获取输入操作(,)</li><li>操作7中含有&lt;&lt;，怀疑是输出，对应了输出操作(.)</li><li>5和6对应了跳转，猜测5是[，6是]</li></ul><p>之后就可以找个脚本翻译 brainfuck 了</p><p>我先用 python 将其转为了正常的 brainfuck 语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">finalop = <span class="string">&#x27;&#x27;</span></span><br><span class="line">base = <span class="string">&#x27;+-,&gt;&lt;[].&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> op: <span class="comment"># 那一串数字</span></span><br><span class="line">    finalop += (base[<span class="built_in">int</span>(c)])</span><br><span class="line"><span class="built_in">print</span> (finalop)</span><br></pre></td></tr></table></figure><p>然后找了个脚本，这是核心部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((c = getc(in)) != EOF) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>: </span><br><span class="line">            <span class="comment">// fprintf(out, &quot;\t\t++c;\n&quot;); </span></span><br><span class="line">            cur++; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>: </span><br><span class="line">            <span class="comment">// fprintf(out, &quot;\t\t--c;\n&quot;); </span></span><br><span class="line">            cur--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\t++a[%d];\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\t--a[%d];\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\tputchar(a[%d]);\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\ta[%d] = getchar();\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\twhile (a[%d]) &#123;\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t&#125;\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始随便找了个脚本就运行，然后尝试去看，但后来发现很多指针位置的变化，看着很累，于是让指针的变化在内部运行，对具体数做变化的时候直接打印指针的值就可以了</p><h2 id="Brainfuck-代码阅读"><a href="#Brainfuck-代码阅读" class="headerlink" title="Brainfuck 代码阅读"></a>Brainfuck 代码阅读</h2><p>接下来就是痛苦的 Brainfuck 代码阅读环节了，虽然代码已经有了最简单的美化，但看起来还是像混淆过的汇编。</p><p>自己做的时候是一点一点美化代码，然后阅读的。但最后找到验证函数才搞明白。</p><p>所以先去最下面找到验证函数，看到最下面有两个<code>putchar</code>，猜测就是通过验证了，于是找进入的条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();</span><br><span class="line">       <span class="comment">// several code</span></span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// several code</span></span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">1</span>]) &#123;</span><br><span class="line">++a[<span class="number">2</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">--a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// several code</span></span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line"><span class="built_in">putchar</span>(a[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line"><span class="built_in">putchar</span>(a[<span class="number">4</span>]);</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入的条件是要 <code>a[2] &gt; 0</code>，网上看就知道需要让 <code>a[1] &gt; 0</code>，所以在编辑器里选中一下，就能找到所有 <code>a[1]</code> 出现的地方（这就体现出这种输出方法的优势了）</p><p>然后发现 <code>a[1]</code> 会在一开始赋值为 <code>1</code>，但一旦进入 <code>while(a[2])</code> 这种大循环，就会出现 <code>a[1]=0</code> 的赋值，所以我们的目标就是在进入循环前让 <code>a[2]==0</code></p><p>查看一下从 <code>getchar</code> 到 <code>while</code> 之间的代码，把重复出现的 <code>++</code> 都合并一下</p><p>这里以第一次 <code>getchar</code> 的代码为例，（剩下几次形式几乎完全一致，就是参数有点小变化而已）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">3</span>]) &#123;</span><br><span class="line">--a[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">3</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">--a[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">5</span>]) &#123;</span><br><span class="line">--a[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">1</span>]) &#123;</span><br><span class="line">--a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">++a[<span class="number">5</span>];</span><br><span class="line">++a[<span class="number">1</span>];</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">5</span>]) &#123;</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">--a[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>美化一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();a[<span class="number">3</span>] = <span class="number">0</span>;a[<span class="number">4</span>] = <span class="number">7</span>;<span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;a[<span class="number">3</span>] += <span class="number">11</span>--a[<span class="number">4</span>];&#125; <span class="comment">// a[3] = a[4] * 11 = 77        a[2] -= a[3]while (a[2]) &#123;        a[4] = 0;        a[5] = 0;        a[1] = 0;        a[2] = 0;&#125;a[2] = 0;</span></span><br></pre></td></tr></table></figure><p>简单地说就是会生成一个数字，然后用 <code>a[2]</code> 去减，如果结果为 <code>0</code>，就通过验证了，对所有的输入都搞一次，就能拿到五个输入字符 <code>M5Ya7</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做这道题的时候，最大的问题就是没有搜索足够的资料，如果第一步想出来的话的，以比赛的时间，应该还是有机会做出来这道题的，毕竟后续的工作都是体力活，一点一点做下去应该就差不多能出来了</p><p>不过不管怎么说，补题的过程还是学到了很多东西的，比如“病毒式”混淆可以直接用输出来解，brainfuck的小型解释器怎么看，以及最后直接输出索引地址，做题经验++</p><h1 id="HMI"><a href="#HMI" class="headerlink" title="HMI"></a>HMI</h1><p>先说结论：屑题</p><p>参考了这篇博客：<a href="https://myts2.cn/2021/05/16/ciscn2021/">https://myts2.cn/2021/05/16/ciscn2021/</a></p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>用 file 命令看一眼，发现全是 .NET，直接上 dnSpy</p><p>先搜索 <code>CISCN</code> 字符串，找到最后的验证和输出</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">checked</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">string</span>.IsNullOrEmpty(AnalogValueDisplay.combined[num4]))</span><br><span class="line">&#123;</span><br><span class="line">num4++;</span><br><span class="line"><span class="keyword">if</span> (num4 &gt; <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">IL_1B9:</span><br><span class="line"><span class="keyword">if</span> (num3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> hash = AnalogValueDisplay.GetHash(<span class="built_in">string</span>.Join(<span class="string">&quot;,&quot;</span>, AnalogValueDisplay.combined));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Booooooooooooooooom!&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (Operators.CompareString(hash.Substring(<span class="number">0</span>, <span class="number">10</span>), <span class="string">&quot;F0B278CCB9&quot;</span>, <span class="literal">false</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;CISCN&#123;&quot;</span> + hash + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num3 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">goto</span> IL_1B9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最后需要通过一个md5验证，然后往回找 <code>combined</code> 是什么，发现是从 <code>text</code> 赋值的</p><p>而具体赋值到哪里，则是由 <code>num2</code> 决定的， <code>num2</code> 是一串 <code>41047</code> - <code>41054</code> 的字符串</p><p>比赛的时候只知道这个是一个端口，但具体是什么没搞出来，疯狂往回找引用发现找不到东西，怀疑还是需要远程往里面打数据，因此尝试搭建GRFICS的平台（队内大佬找到的），最后熬不动放弃了</p><p>参考别人的wp之后发现需要使用 Modbus Slave 往里面打数据，开始补题</p><h2 id="Modbus-Slave调试"><a href="#Modbus-Slave调试" class="headerlink" title="Modbus Slave调试"></a>Modbus Slave调试</h2><p>之前找到的 <code>401**</code> 原来就是 Modbus 的端口，所以只需要用 Modbus Slave 往相应端口添加数据就行</p><p>先直接运行找到粗略的范围（调试修改数据太慢了），目标就是让数字都变成白色</p><p>在粗查的时候就能发现小数点后有一些位置在 exe 界面是看不到的</p><p>明确范围后进 dnSpy 调试，总结出一个表格</p><div class="table-container"><table><thead><tr><th></th><th>min</th><th></th><th>max</th><th></th><th>dif</th><th>combined</th><th>i</th></tr></thead><tbody><tr><td>$41046$</td><td>$52.8016$</td><td>$17312$</td><td>$52.8992$</td><td>$17344$</td><td>$0.00305$</td><td>$0.00305$</td><td>$2$</td></tr><tr><td>$41047$</td><td>$25.0002$</td><td>$1634$</td><td>$25.092$</td><td>$1640$</td><td>$0.0153$</td><td>$0.0153$</td><td>$1$</td></tr><tr><td>$41048$</td><td>$62.10105$</td><td>$20361$</td><td>$62.19865$</td><td>$20393$</td><td>$0.00305$</td><td>$0.00305$</td><td>$0$</td></tr><tr><td>$41049$</td><td>$406.6128$</td><td>$26576$</td><td>$406.6893$</td><td>$26581$</td><td>$0.0153$</td><td>$0.0153$</td><td>$3$</td></tr><tr><td>$41050$</td><td>$54.00025$</td><td>$17705$</td><td>$54.09785$</td><td>$17737$</td><td>$0.00305$</td><td>$0.00305$</td><td>$7$</td></tr><tr><td>$41051$</td><td>$158.0031$</td><td>$10327$</td><td>$158.0949$</td><td>$10333$</td><td>$0.0153$</td><td>$0.0153$</td><td>$6$</td></tr><tr><td>$41052$</td><td>$22.0027$</td><td>$7214$</td><td>$22.09725$</td><td>$7245$</td><td>$0.00305$</td><td>$0.00305$</td><td>$4$</td></tr><tr><td>$41053$</td><td>$13.1121$</td><td>$857$</td><td>$13.1886$</td><td>$862$</td><td>$0.0153$</td><td>$0.0153$</td><td>$5$</td></tr></tbody></table></div><p>接下来在这一范围内进行爆破就好了</p><p>对范围做了个计算，我搞出来的是 2028571776，不知道为什么参考比我这个小一点</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>因为最后要算 md5，所以精度不能有问题，又因为爆破范围大概在 20 亿左右，所以速度也不能慢</p><p>于是决定先用python的Decimal来算小数，再用cpp求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span> = [<span class="number">52.8016</span>, <span class="number">25.0002</span>, <span class="number">62.10105</span>, <span class="number">406.6128</span>, <span class="number">54.00025</span>, <span class="number">158.0031</span>, <span class="number">22.0027</span>, <span class="number">13.1121</span>]</span><br><span class="line"><span class="built_in">max</span> = [<span class="number">52.8992</span>, <span class="number">25.092</span>, <span class="number">62.19865</span>, <span class="number">406.6893</span>, <span class="number">54.09785</span>, <span class="number">158.0949</span>, <span class="number">22.09725</span>, <span class="number">13.1886</span>]</span><br><span class="line">dif = [<span class="number">0.00305</span>, <span class="number">0.0153</span>, <span class="number">0.00305</span>, <span class="number">0.0153</span>, <span class="number">0.00305</span>, <span class="number">0.0153</span>, <span class="number">0.00305</span>, <span class="number">0.0153</span>]</span><br><span class="line"><span class="built_in">round</span> = [<span class="number">33</span>, <span class="number">7</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">7</span>, <span class="number">32</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="built_in">min</span>[i] = <span class="built_in">str</span>(<span class="built_in">min</span>[i])</span><br><span class="line">    <span class="built_in">max</span>[i] = <span class="built_in">str</span>(<span class="built_in">max</span>[i])</span><br><span class="line">    dif[i] = <span class="built_in">str</span>(dif[i])</span><br><span class="line">    res = <span class="built_in">min</span>[i]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>[i]):</span><br><span class="line">        <span class="built_in">print</span> (res, end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        res = Decimal(res) + Decimal(dif[i])</span><br><span class="line">    <span class="built_in">print</span> ()</span><br></pre></td></tr></table></figure><p>最后算出来的结尾会有0，手动去除一下就行</p><p>然后用cpp进行爆破，这里写的比较懒</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/md5.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> combine[<span class="number">8</span>][<span class="number">40</span>] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;62.10105&quot;</span>, <span class="string">&quot;62.1041&quot;</span>, <span class="string">&quot;62.10715&quot;</span>, <span class="string">&quot;62.1102&quot;</span>, <span class="string">&quot;62.11325&quot;</span>, <span class="string">&quot;62.1163&quot;</span>, <span class="string">&quot;62.11935&quot;</span>, <span class="string">&quot;62.1224&quot;</span>, <span class="string">&quot;62.12545&quot;</span>, <span class="string">&quot;62.1285&quot;</span>, <span class="string">&quot;62.13155&quot;</span>, <span class="string">&quot;62.1346&quot;</span>, <span class="string">&quot;62.13765&quot;</span>, <span class="string">&quot;62.1407&quot;</span>, <span class="string">&quot;62.14375&quot;</span>, <span class="string">&quot;62.1468&quot;</span>, <span class="string">&quot;62.14985&quot;</span>, <span class="string">&quot;62.1529&quot;</span>, <span class="string">&quot;62.15595&quot;</span>, <span class="string">&quot;62.1590&quot;</span>, <span class="string">&quot;62.16205&quot;</span>, <span class="string">&quot;62.1651&quot;</span>, <span class="string">&quot;62.16815&quot;</span>, <span class="string">&quot;62.1712&quot;</span>, <span class="string">&quot;62.17425&quot;</span>, <span class="string">&quot;62.1773&quot;</span>, <span class="string">&quot;62.18035&quot;</span>, <span class="string">&quot;62.1834&quot;</span>, <span class="string">&quot;62.18645&quot;</span>, <span class="string">&quot;62.1895&quot;</span>, <span class="string">&quot;62.19255&quot;</span>, <span class="string">&quot;62.1956&quot;</span>, <span class="string">&quot;62.19865&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;25.0002&quot;</span>, <span class="string">&quot;25.0155&quot;</span>, <span class="string">&quot;25.0308&quot;</span>, <span class="string">&quot;25.0461&quot;</span>, <span class="string">&quot;25.0614&quot;</span>, <span class="string">&quot;25.0767&quot;</span>, <span class="string">&quot;25.092&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;52.8016&quot;</span>, <span class="string">&quot;52.80465&quot;</span>, <span class="string">&quot;52.8077&quot;</span>, <span class="string">&quot;52.81075&quot;</span>, <span class="string">&quot;52.8138&quot;</span>, <span class="string">&quot;52.81685&quot;</span>, <span class="string">&quot;52.8199&quot;</span>, <span class="string">&quot;52.82295&quot;</span>, <span class="string">&quot;52.8260&quot;</span>, <span class="string">&quot;52.82905&quot;</span>, <span class="string">&quot;52.8321&quot;</span>, <span class="string">&quot;52.83515&quot;</span>, <span class="string">&quot;52.8382&quot;</span>, <span class="string">&quot;52.84125&quot;</span>, <span class="string">&quot;52.8443&quot;</span>, <span class="string">&quot;52.84735&quot;</span>, <span class="string">&quot;52.8504&quot;</span>, <span class="string">&quot;52.85345&quot;</span>, <span class="string">&quot;52.8565&quot;</span>, <span class="string">&quot;52.85955&quot;</span>, <span class="string">&quot;52.8626&quot;</span>, <span class="string">&quot;52.86565&quot;</span>, <span class="string">&quot;52.8687&quot;</span>, <span class="string">&quot;52.87175&quot;</span>, <span class="string">&quot;52.8748&quot;</span>, <span class="string">&quot;52.87785&quot;</span>, <span class="string">&quot;52.8809&quot;</span>, <span class="string">&quot;52.88395&quot;</span>, <span class="string">&quot;52.8870&quot;</span>, <span class="string">&quot;52.89005&quot;</span>, <span class="string">&quot;52.8931&quot;</span>, <span class="string">&quot;52.89615&quot;</span>, <span class="string">&quot;52.8992&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;406.6128&quot;</span>, <span class="string">&quot;406.6281&quot;</span>, <span class="string">&quot;406.6434&quot;</span>, <span class="string">&quot;406.6587&quot;</span>, <span class="string">&quot;406.674&quot;</span>, <span class="string">&quot;406.6893&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;22.0027&quot;</span>, <span class="string">&quot;22.00575&quot;</span>, <span class="string">&quot;22.0088&quot;</span>, <span class="string">&quot;22.01185&quot;</span>, <span class="string">&quot;22.0149&quot;</span>, <span class="string">&quot;22.01795&quot;</span>, <span class="string">&quot;22.0210&quot;</span>, <span class="string">&quot;22.02405&quot;</span>, <span class="string">&quot;22.0271&quot;</span>, <span class="string">&quot;22.03015&quot;</span>, <span class="string">&quot;22.0332&quot;</span>, <span class="string">&quot;22.03625&quot;</span>, <span class="string">&quot;22.0393&quot;</span>, <span class="string">&quot;22.04235&quot;</span>, <span class="string">&quot;22.0454&quot;</span>, <span class="string">&quot;22.04845&quot;</span>, <span class="string">&quot;22.0515&quot;</span>, <span class="string">&quot;22.05455&quot;</span>, <span class="string">&quot;22.0576&quot;</span>, <span class="string">&quot;22.06065&quot;</span>, <span class="string">&quot;22.0637&quot;</span>, <span class="string">&quot;22.06675&quot;</span>, <span class="string">&quot;22.0698&quot;</span>, <span class="string">&quot;22.07285&quot;</span>, <span class="string">&quot;22.0759&quot;</span>, <span class="string">&quot;22.07895&quot;</span>, <span class="string">&quot;22.0820&quot;</span>, <span class="string">&quot;22.08505&quot;</span>, <span class="string">&quot;22.0881&quot;</span>, <span class="string">&quot;22.09115&quot;</span>, <span class="string">&quot;22.0942&quot;</span>, <span class="string">&quot;22.09725&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;13.1121&quot;</span>, <span class="string">&quot;13.1274&quot;</span>, <span class="string">&quot;13.1427&quot;</span>, <span class="string">&quot;13.158&quot;</span>, <span class="string">&quot;13.1733&quot;</span>, <span class="string">&quot;13.1886&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;158.0031&quot;</span>, <span class="string">&quot;158.0184&quot;</span>, <span class="string">&quot;158.0337&quot;</span>, <span class="string">&quot;158.049&quot;</span>, <span class="string">&quot;158.0643&quot;</span>, <span class="string">&quot;158.0796&quot;</span>, <span class="string">&quot;158.0949&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;54.00025&quot;</span>, <span class="string">&quot;54.0033&quot;</span>, <span class="string">&quot;54.00635&quot;</span>, <span class="string">&quot;54.0094&quot;</span>, <span class="string">&quot;54.01245&quot;</span>, <span class="string">&quot;54.0155&quot;</span>, <span class="string">&quot;54.01855&quot;</span>, <span class="string">&quot;54.0216&quot;</span>, <span class="string">&quot;54.02465&quot;</span>, <span class="string">&quot;54.0277&quot;</span>, <span class="string">&quot;54.03075&quot;</span>, <span class="string">&quot;54.0338&quot;</span>, <span class="string">&quot;54.03685&quot;</span>, <span class="string">&quot;54.0399&quot;</span>, <span class="string">&quot;54.04295&quot;</span>, <span class="string">&quot;54.0460&quot;</span>, <span class="string">&quot;54.04905&quot;</span>, <span class="string">&quot;54.0521&quot;</span>, <span class="string">&quot;54.05515&quot;</span>, <span class="string">&quot;54.0582&quot;</span>, <span class="string">&quot;54.06125&quot;</span>, <span class="string">&quot;54.0643&quot;</span>, <span class="string">&quot;54.06735&quot;</span>, <span class="string">&quot;54.0704&quot;</span>, <span class="string">&quot;54.07345&quot;</span>, <span class="string">&quot;54.0765&quot;</span>, <span class="string">&quot;54.07955&quot;</span>, <span class="string">&quot;54.0826&quot;</span>, <span class="string">&quot;54.08565&quot;</span>, <span class="string">&quot;54.0887&quot;</span>, <span class="string">&quot;54.09175&quot;</span>, <span class="string">&quot;54.0948&quot;</span>, <span class="string">&quot;54.09785&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size[<span class="number">8</span>] = &#123;<span class="number">33</span>, <span class="number">7</span>, <span class="number">33</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">MD5</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; src )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MD5_CTX ctx;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> md5_string;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> md[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    MD5_Init( &amp;ctx );</span><br><span class="line">    MD5_Update( &amp;ctx, src.c_str(), src.size() );</span><br><span class="line">    MD5_Final( md, &amp;ctx );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i )</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">memset</span>( tmp, <span class="number">0x00</span>, <span class="keyword">sizeof</span>( tmp ) );</span><br><span class="line">        <span class="built_in">sprintf</span>( tmp, <span class="string">&quot;%02X&quot;</span>, md[i] );</span><br><span class="line">        md5_string += tmp;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> md5_string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MD5(<span class="string">&quot;62.10105,25.0002,52.8016,406.6128,22.0027,13.1121,158.0031,54.00025,&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> cur[<span class="number">8</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">time_t</span> start = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2028571776</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">string</span> in = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur[j] &gt;= size[j])&#123;</span><br><span class="line">                cur[j] = <span class="number">0</span>;</span><br><span class="line">                ++cur[j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            in += combine[j][cur[j]];</span><br><span class="line">            in += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> out = MD5(in);</span><br><span class="line">        cur[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; in &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (out[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp; out[<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; out[<span class="number">2</span>] == <span class="string">&#x27;B&#x27;</span> &amp;&amp; out[<span class="number">3</span>] == <span class="string">&#x27;2&#x27;</span> &amp;&amp; out[<span class="number">4</span>] == <span class="string">&#x27;7&#x27;</span> &amp;&amp; out[<span class="number">5</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; out[<span class="number">6</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">7</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">8</span>] == <span class="string">&#x27;B&#x27;</span> &amp;&amp; out[<span class="number">9</span>] == <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;in:&quot;</span> &lt;&lt; in &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;out:&quot;</span> &lt;&lt; out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5000000</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">100.0</span> * i / <span class="number">2028571776</span> &lt;&lt; <span class="string">&quot;%&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">time_t</span> end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;time=%fs\n&quot;</span>, (<span class="keyword">double</span>)(end - start)/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md5是直接上网抄的，来源：<a href="https://blog.csdn.net/u012063703/article/details/49178349">https://blog.csdn.net/u012063703/article/details/49178349</a></p><p>最后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">60.8803%</span><br><span class="line">in:62.1834,25.0002,52.84735,406.6893,22.01795,13.1886,158.0031,54.06125,</span><br><span class="line">out:F0B278CCB982F6132DD6A834C4827D0D</span><br><span class="line">61.1268%</span><br><span class="line">...</span><br><span class="line">time&#x3D;2639.569345s</span><br></pre></td></tr></table></figure><p>爆破出答案大概花了 $60\% \times 2640=26.4\min$</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这题难度不在于逆向，前期的基本分析以及后面需要打数据动调这些和逆向有关的操作，比赛的时候其实都想到了，但问题在于不知道还有 Modbus Slave 这种东西</p><p>所以全程都很迷茫，完全不知道该怎么做，官方的提示早上才放出来，那会都收工准备补觉了（一个小时的时间，找数据范围+写脚本+爆破，根本来不及好吧）</p><p>以及过程中的调数据就是无限二分，累的一批，这题说是 Misc 我都信</p><p>最后的爆破数据量也太大了，参考的博客用go跑了两小时，我这边用c++跑了半个小时，不过队友用c的多线程只跑了半分钟，看截图只爆破了 $2\%$ 就出结果了，应该是划分的位置正好在答案边上，有时间学习一下多线程</p><p>综上：屑题</p><h1 id="gift"><a href="#gift" class="headerlink" title="gift"></a>gift</h1><p>新版本的GO对magic number以及一些结构上都做了修改，所以老版本的符号表修复脚本就不能用了，好在免费的ida7.6正好支持GO的符号表恢复，可以直接做了。</p><p>主函数主要部分如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">main_CISCN6666666();</span><br><span class="line">main_CISCN66666666();</span><br><span class="line">main_CISCN6666666666();</span><br><span class="line">max_len_v2 = qword_928238; <span class="comment">// 0x20</span></span><br><span class="line">index_v3 = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">while</span> ( (__int64)index_v3 &lt; max_len_v2 )</span><br><span class="line">&#123;</span><br><span class="line">  qword_9720E8 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( qword_928238 &lt;= index_v3 )</span><br><span class="line">    runtime_panicIndex();</span><br><span class="line">  v14 = off_928230[index_v3];</span><br><span class="line">  runtime_makeslice((__int64)<span class="string">&quot;\b&quot;</span>, v14, v14, v10);</span><br><span class="line">  v5 = (__int64 *)v11;</span><br><span class="line">  v19 = (__int64 *)v11;</span><br><span class="line">  v4 = <span class="number">1L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = v4;</span><br><span class="line">    main_wtf(<span class="number">0L</span>L, v4, v5, v14, v14);</span><br><span class="line">    v4 = v12 + <span class="number">1</span>;</span><br><span class="line">    v5 = v19;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)qword_9720E8 &gt;= <span class="number">0x11</span> )</span><br><span class="line">    runtime_panicIndex();</span><br><span class="line">  v6 = *((_BYTE *)&amp;v16 + qword_9720E8);</span><br><span class="line">  v22[<span class="number">0</span>] = &amp;unk_8765E0;                       <span class="comment">// output_length</span></span><br><span class="line">  v22[<span class="number">1</span>] = &amp;qword_9239C0[v6 ^ <span class="number">0x66</span>u];         <span class="comment">// output</span></span><br><span class="line">  v8 = qword_92EAB0;</span><br><span class="line">  v10 = <span class="number">2L</span>L;</span><br><span class="line">  v1 = v22;</span><br><span class="line">  fmt_Fprintf(v0, (__int64)v22, (<span class="keyword">const</span> <span class="keyword">char</span> *)qword_9239C0);</span><br><span class="line">  index_v3 += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开头的三个CISCN函数是简单的输出，中间生成空的slice然后扔到了wtf函数中，输出是根据索引，从<code>qword_9239C0</code>中选择一个字符。</p><p>尝试运行的时候发现运行时间很长，但在程序中没有看到延时的操作，那么这道题应该是一个耗时的算法。</p><p>观察发现 <code>wtf</code> 函数是一个递归函数，而 <code>off_928230</code> 中存的就是递归的深度。</p><p>尝试找规律，直接将深度patch成 <code>1</code> 到 <code>0x20</code>，运行一下。</p><p>得到如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome to CISCN 2021!</span><br><span class="line">Here is our free flag for you as a gift:</span><br><span class="line">CISCN&#123;45b3247c45b3247c4</span><br></pre></td></tr></table></figure><p>猜测最后的输出是有规律的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cur_time = [ </span><br><span class="line">    <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x14</span>, <span class="number">0x19</span>, <span class="number">0x1E</span>,</span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0x42</span>, <span class="number">0x66</span>, <span class="number">0x0A0</span>, <span class="number">0x936</span>, <span class="number">0x3D21</span>, <span class="number">0x149A7</span>, <span class="number">0x243AC</span>, <span class="number">0x0CB5BE</span>, <span class="number">0x47DC61</span>, <span class="number">0x16C0F46</span>, </span><br><span class="line">    <span class="number">0x262C432</span>, <span class="number">0x4ACE299</span>, <span class="number">0x10FBC92A</span>, <span class="number">0x329ECDFD</span>, <span class="number">0x370D7470</span></span><br><span class="line">]</span><br><span class="line">res = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;CISCN&#123;&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cur_time:</span><br><span class="line">    <span class="built_in">print</span> (res[c % <span class="built_in">len</span>(res)], end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;CISCN&#123;4b445b3247c45344c54c44734445452c&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>和最后的正确结果做个对比，发现一样。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;glass&lt;/li&gt;
&lt;li&gt;baby_rc&lt;/li&gt;
&lt;li&gt;little_evil&lt;/li&gt;
&lt;li&gt;HMI&lt;/li&gt;
&lt;li&gt;gift&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO: 研究gift&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="CISCN" scheme="https://s0uthwood.github.io/tags/CISCN/"/>
    
  </entry>
  
  <entry>
    <title>津门杯 GoodRE writeup</title>
    <link href="https://s0uthwood.github.io/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AF-GoodRE-writeup/"/>
    <id>https://s0uthwood.github.io/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AF-GoodRE-writeup/</id>
    <published>2021-05-09T18:32:59.000Z</published>
    <updated>2021-05-19T17:49:06.792Z</updated>
    
    <content type="html"><![CDATA[<p>和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先拖到 ida 里进行静态分析</p><p>查看main函数，把变量定义和初始化删了，并将 <code>cin</code> 的东西命名为了 <code>input</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;&gt;&gt; &quot;</span>, a3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, input);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) == <span class="number">64</span> ) &#123;</span><br><span class="line">    v3 = input;</span><br><span class="line">    v4 = &amp;unk_55A06D2D0020;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      v6 = hexstr2int(v3, <span class="number">8</span>);</span><br><span class="line">      v7 = v14;</span><br><span class="line">      sub_55A06D2CC408(&amp;v14[v5], v6);</span><br><span class="line">      sub_55A06D2CC408(&amp;v18[v5], <span class="number">17</span>);</span><br><span class="line">      v8 = v19;</span><br><span class="line">      sub_55A06D2CC408(&amp;v19[v5], *v4);</span><br><span class="line">      ++v3;</span><br><span class="line">      ++v4;</span><br><span class="line">      v5 += <span class="number">36L</span>L;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( v3 != v21 );</span><br><span class="line">    sub_55A06D2CCB30(v14, v18, v9);</span><br><span class="line">    sub_55A06D2CCB30(v15, v18, v10);</span><br><span class="line">    sub_55A06D2CCB30(v16, v18, v11);</span><br><span class="line">    sub_55A06D2CCB30(v17, v18, v12);</span><br><span class="line">    <span class="keyword">while</span> ( !sub_55A06D2CCADC(v7, v8) ) &#123;</span><br><span class="line">      v7 += <span class="number">36</span>;</span><br><span class="line">      v8 += <span class="number">36</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 == v18 ) &#123;</span><br><span class="line">        __printf_chk(<span class="number">1L</span>L, <span class="string">&quot;flag&#123;%s&#125;\n&quot;</span>, input);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单查看一下，发现输入长度为64，然后 <code>do while</code> 看起来是进行初始化，后面的四个连续函数应该是加密</p><p>同时确定这个应该是算法题，不涉及混淆之类的东西</p><p>于是查看一下 <code>v6=</code> 的那个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">hexstr2int</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span> </span>&#123;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(a0123456789abcd) + <span class="number">1</span>;             <span class="comment">// 17</span></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  v3 = v2 - <span class="number">1</span>;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  LODWORD(result) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0L</span>L; a0123456789abcd[i] != *v4; ++i ) &#123;<span class="comment">// input是0-f</span></span><br><span class="line">      <span class="keyword">if</span> ( i == v2 - <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    result = (i + (v2 - <span class="number">1</span>) * result);           <span class="comment">// input转成int</span></span><br><span class="line">    <span class="keyword">if</span> ( ++v4 == &amp;a1[a2 - <span class="number">1</span> + <span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现应该是将输入转换成了 <code>int</code>，而且输入的字符必须得在 <code>0123456789ABCDEF</code> 中</p><p>然后看一眼重复出现三次的 <code>sub_55A06D2CCB30</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_55A06D2CC408</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span> </span>&#123;</span><br><span class="line">  *(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  *(a1 + <span class="number">4</span>) = a2;</span><br><span class="line">  v2 = <span class="number">4L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    v3 = v2 - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(a1 + v2 + <span class="number">3</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !--v2 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = v2;</span><br><span class="line">LABEL_4:</span><br><span class="line">  *a1 = v3;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来就是简单的赋值，<code>a1</code> 的第一部分填写长度，第二部分存 <code>a2</code></p><p>初始化部分应该可以先不管了，去看加密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_55A06D2CCB30</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span> </span>&#123;</span><br><span class="line">  sub_55A06D2CCA13(v5, a1);</span><br><span class="line">  sub_55A06D2CCA13(v6, (a1 + <span class="number">36</span>));</span><br><span class="line">  sub_55A06D2CC408(v7, <span class="number">0</span>);</span><br><span class="line">  sub_55A06D2CC408(v8, <span class="number">0x830A5376</span>);</span><br><span class="line">  sub_55A06D2CC408(v9, <span class="number">0x1D3D2ACF</span>);</span><br><span class="line">  sub_55A06D2CC667(v10, v9, v8);                <span class="comment">// v10=delta=0x9e3779b9</span></span><br><span class="line">  sub_55A06D2CCA13(v11, a2);</span><br><span class="line">  sub_55A06D2CCA13(v12, (a2 + <span class="number">36</span>));</span><br><span class="line">  sub_55A06D2CCA13(v13, (a2 + <span class="number">72</span>));</span><br><span class="line">  sub_55A06D2CCA13(v14, (a2 + <span class="number">108</span>));</span><br><span class="line">  v3 = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    sub_55A06D2CC2E9(v7, v7, v10);              <span class="comment">// sum+=delta</span></span><br><span class="line">    left_rot(v15, v6, <span class="number">4</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v15, v15, v11);            <span class="comment">// v15+v11</span></span><br><span class="line">    sub_55A06D2CC2E9(v16, v6, v7);              <span class="comment">// sum+plain</span></span><br><span class="line">    right_rot(v17, v6, <span class="number">5</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v17, v17, v12);            <span class="comment">// key+plain</span></span><br><span class="line">    sub_55A06D2CC667(v15, v15, v16);</span><br><span class="line">    sub_55A06D2CC667(v15, v15, v17);</span><br><span class="line">    sub_55A06D2CC2E9(v5, v5, v15);</span><br><span class="line">    left_rot(v18, v5, <span class="number">4</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v18, v18, v13);</span><br><span class="line">    sub_55A06D2CC2E9(v19, v5, v7);</span><br><span class="line">    right_rot(v20, v5, <span class="number">5</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v20, v20, v14);</span><br><span class="line">    sub_55A06D2CC667(v18, v18, v19);</span><br><span class="line">    sub_55A06D2CC667(v18, v18, v20);</span><br><span class="line">    sub_55A06D2CC2E9(v6, v6, v18);</span><br><span class="line">    --v3;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( v3 );</span><br><span class="line">  sub_55A06D2CCA13(a1, v5);</span><br><span class="line">  sub_55A06D2CCA13((a1 + <span class="number">36</span>), v6);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v21;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始看到一大串 <code>sub_</code> 还以为是 AES 之类的（毕竟之前做过一道类似的），然后看了一下重要的参数</p><p>64bit明文，128bit密钥，32轮加密</p><p>看起来很像tea家族的算法，但不是很确定。因为懒得详细看每个函数了，所以动态调试一下，做个黑盒测试</p><p>调试之后发现 <code>0x830A5376</code> 和 <code>0x1D3D2ACF</code> 其实是用来算 <code>delta</code> 的，算出来 <code>v10=0x9e3779b9</code>，这就肯定是tea家族了</p><p>另外，动调的时候发现这里应该都是用的结构体，所以每个小的加法都是单独的函数给出的，但好像用上的只有结构体的前八个字节，后面的字节有什么用还不太清楚</p><p>然后具体往下看，看到循环中的前几个分别是 <code>sum+=delta</code>，<code>v6&lt;&lt;4</code>，<code>(v6&lt;&lt;4)+k0</code>，<code>sum+p0</code>，<code>v6&gt;&gt;5</code>，<code>k1+p0</code>。和网上的三种 TEA 加密比对了一下，发现竟然就是最简单的 TEA 加密，一开始看这么多函数还以为是 XTEA 呢</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>密钥就是主函数中初始化的几个 <code>0x11</code>，密文就是最后用来 <code>cmp</code> 的字符串（找结构体对应的那个字符数组就行），于是找了个脚本，直接解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0xC6EF3720</span>, i;</span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x79AE1A3B</span>, <span class="number">0X596080D3</span>&#125;, k[<span class="number">4</span>] = &#123;<span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>&#125;;</span><br><span class="line">    decrypt(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X%X&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把所有密文全扔进去算结果，就能拿到 flag 了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一眼看到这个题就感觉能做出来，果然如此</p><p>深刻体会到了动调进行黑盒测试的重要性，可以大幅度加快做题速度，能猜出来就不要花时间看</p><p>其实这题有点可惜，本来能抢到三血的，结果忘了大小写的问题，脚本算出来后本地测试一直是 <code>error</code>，最后还是大佬队友发现的，然后就过了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>hmg2021 RSA Attack writeup</title>
    <link href="https://s0uthwood.github.io/2021/04/13/hmg2021-RSA-Attack-writeup/"/>
    <id>https://s0uthwood.github.io/2021/04/13/hmg2021-RSA-Attack-writeup/</id>
    <published>2021-04-13T13:39:43.000Z</published>
    <updated>2021-05-19T17:42:52.167Z</updated>
    
    <content type="html"><![CDATA[<p>Re全程白给了，最后转战crypto，压哨提交上了</p><a id="more"></a><p>已知一个$1024$ 位的 $p1$，$p2$ 比 $p1$ 稍小，根据代码知道 $p3\equiv p2!\pmod{p1}$</p><p>根据Wilson定理，$n$ 为质数时有 $(n-1)!\equiv -1\pmod{n}$，所以 $p2! \prod\limits_{i=p2+1}^{p1-2}i\equiv 1\pmod{p1}$，所以可以计算出 $p2+1$ 乘到 $p1-1$ 的结果，然后取模拟并调用 <code>sympy</code> 库即可得到 $p3$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod</span><br><span class="line">p1=<span class="number">172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649936031</span></span><br><span class="line">p2=<span class="number">172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649902034</span></span><br><span class="line"></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p2 + <span class="number">1</span>, p1 - <span class="number">1</span>):</span><br><span class="line">    res = res * i % p1</span><br><span class="line">res = invmod(res, p1)</span><br><span class="line">p3 = sympy.nextprime(res)</span><br><span class="line">p = p3 &gt;&gt; <span class="number">50</span> &lt;&lt; <span class="number">50</span></span><br></pre></td></tr></table></figure><p>得到的 $p$ 是最终 RSA 加密用的 $P$ 的高位，因此可以使用 Factoring with High Bits Known 攻击，用 sage 构造如下攻击脚本（网上找的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722c000000000000</span></span><br><span class="line">N = <span class="number">0xe27e847b1cece6ad3d8a35c27022d94cc14016f9550d41b87b85f946edf0a1c01d8c79a663244143550cfce88038bf29d65070d021991455e4570ea57ea1effc1cf380d572473dc6ea0dc150c431761181e66c578eaeebf156c445d3b6141dda961aa467f4d2c811859534027e5b9e67eb4db051c82602208cfe92674013aafa5b437ae404876ececc2f453bb16734adccc5fb87b16e980e52484f6b9f4bdeb99f2e7dc606bb65628e3f62c7df11abd553ffc6b95d3dda592fa81df5e584687864de702d10669e3aac75ad9c6284b98b44140f347307243b2485f59fa5c3f0eaeaf0addade803f2f09cd4c77f27d672756b9cc62a6325247d8608390e761dc91</span></span><br><span class="line">pbits = p.nbits()</span><br><span class="line">kbits = <span class="number">50</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = x + p</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">print( <span class="string">&quot;x: %s&quot;</span> %<span class="built_in">hex</span>(<span class="built_in">int</span>(x0)))</span><br><span class="line">p = p+x0</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;p: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(p)))</span><br><span class="line"><span class="keyword">assert</span> N % p == <span class="number">0</span></span><br><span class="line">q = N/<span class="built_in">int</span>(p)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;q: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(q)))</span><br></pre></td></tr></table></figure><p>得到 RSA 的 $P$ 和 $Q$，最终构建解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, n2s</span><br><span class="line">p = <span class="number">0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722fbcdcffc1a2ef</span></span><br><span class="line">q = <span class="number">0xfced19c7532be88658aaa5e9566f5274b9aefa4c5d21582a24cc48c70b5e3c05c17eb6f85b4732d57bdc0288d1f548b92f4f13a6f7b07d07a01173cefb06fb8f2e3591e5d518d1584a8e27331a4e769eae98537fe1fb380ee804574d98188a4c327c8a1d180ee44b9148d63a07216b40e711970c9f1ea097bfbecfc3b52e787f</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> (n2s(c, invmod(e, phi_n), N))</span><br></pre></td></tr></table></figure><p>即可得到flag: <code>flag&#123;w0_x1hu1n_y0u_b5st&#125;</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Re全程白给了，最后转战crypto，压哨提交上了&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/categories/CTF/Crypto/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>FlareOn reverse writeups</title>
    <link href="https://s0uthwood.github.io/2021/04/09/FlareOn-reverse-writeups/"/>
    <id>https://s0uthwood.github.io/2021/04/09/FlareOn-reverse-writeups/</id>
    <published>2021-04-08T17:04:16.000Z</published>
    <updated>2021-05-19T17:45:34.779Z</updated>
    
    <content type="html"><![CDATA[<p>题目都是从BUUOJ上找的</p><a id="more"></a><h1 id="Chanllenge1"><a href="#Chanllenge1" class="headerlink" title="Chanllenge1"></a>Chanllenge1</h1><p>一个修改了 table 的 Base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">fake_base = <span class="string">&#x27;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&#x27;</span></span><br><span class="line">true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&#x27;</span></span><br><span class="line">good_cipher = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    good_cipher += true_base[fake_base.index(c)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (good_cipher)</span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(good_cipher))</span><br></pre></td></tr></table></figure><h1 id="Bob-Doge"><a href="#Bob-Doge" class="headerlink" title="Bob Doge"></a>Bob Doge</h1><p>先运行测试一下，发现点击 <code>Decode</code> 之后是乱码</p><p>用 <code>dnSpy</code> 打开，找到 <code>Main</code> 函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Application.EnableVisualStyles();</span><br><span class="line">Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">Application.Run(<span class="keyword">new</span> Form1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现只新建了一个 <code>Form1</code></p><p>进入 <code>Form1</code>，找到带有 <code>Click</code> 的函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnDecode_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pbRoge.Image = Resources.bob_roge;</span><br><span class="line"><span class="built_in">byte</span>[] dat_secret = Resources.dat_secret;</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">byte</span> b <span class="keyword">in</span> dat_secret)</span><br><span class="line">&#123;</span><br><span class="line">text += (<span class="built_in">char</span>)((b &gt;&gt; <span class="number">4</span> | ((<span class="built_in">int</span>)b &lt;&lt; <span class="number">4</span> &amp; <span class="number">240</span>)) ^ <span class="number">41</span>);</span><br><span class="line">&#125;</span><br><span class="line">text += <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> text2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; text.Length; j += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">text2 += text[j + <span class="number">1</span>];</span><br><span class="line">text2 += text[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> text3 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; text2.Length; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">char</span> c = text2[k];</span><br><span class="line">text3 += (<span class="built_in">char</span>)((<span class="built_in">byte</span>)text2[k] ^ <span class="number">102</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.lbl_title.Text = text3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是从一个 <code>Resources</code> 的地方调用来了一个 <code>dat_secret</code>。但找不到这个地方。</p><p>于是考虑进行动态调试。</p><p>打上断点后调试，点击 <code>Decode</code> 按钮，进入如下页面</p><p><img data-src="flag.png" alt="flag"></p><p>一开始以为最后的 <code>text3</code> 是 <code>flag</code>，结果看到 <code>text</code> 变量长得就很好看，符合 FlareOn 的 flag 的特征，于是直接提交试试，发现通过。</p><h1 id="UltimateMinesweeper"><a href="#UltimateMinesweeper" class="headerlink" title="UltimateMinesweeper"></a>UltimateMinesweeper</h1><p>运行软件测试一下，发现是一个 $30\times 30$ 的扫雷，只有三个格子不是雷。</p><p>exeinfo发现是 <code>.NET</code> 文件，因此拖到 <code>dnSpy</code> 中</p><p>由于是面向对象代码，不太好分析，所以进行动态调试，在生成完扫雷界面后停下，查看内存数据，发现在 <code>mineField.MinesPresent</code> 中存有雷的位置。</p><p><img data-src="mineinmemory.png" alt="mineinmemory"></p><p>先尝试直接手动把雷扔到前三个，然后运行试一下，发现：</p><ul><li>二元数组是先竖后横</li><li>最后出现的结果是乱码</li></ul><p>因此简单看一下最后的生成函数</p><p>寻找 <code>SuccessPopup</code> 的调用</p><p>发现 <code>new SuccessPopup(this.GetKey(this.RevealedCells)).ShowDialog();</code></p><p>因此找到这个方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetKey</span>(<span class="params">List&lt;uint&gt; revealedCells</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">revealedCells.Sort();</span><br><span class="line">Random random = <span class="keyword">new</span> Random(Convert.ToInt32(revealedCells[<span class="number">0</span>] &lt;&lt; <span class="number">20</span> | revealedCells[<span class="number">1</span>] &lt;&lt; <span class="number">10</span> | revealedCells[<span class="number">2</span>]));</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">byte</span>[] array2 = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">245</span>,</span><br><span class="line"><span class="number">75</span>,</span><br><span class="line"><span class="number">65</span>,</span><br><span class="line"><span class="number">142</span>,</span><br><span class="line"><span class="number">68</span>,</span><br><span class="line"><span class="number">71</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">185</span>,</span><br><span class="line"><span class="number">74</span>,</span><br><span class="line"><span class="number">127</span>,</span><br><span class="line"><span class="number">62</span>,</span><br><span class="line"><span class="number">130</span>,</span><br><span class="line"><span class="number">231</span>,</span><br><span class="line"><span class="number">129</span>,</span><br><span class="line"><span class="number">254</span>,</span><br><span class="line"><span class="number">243</span>,</span><br><span class="line"><span class="number">28</span>,</span><br><span class="line"><span class="number">58</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">179</span>,</span><br><span class="line"><span class="number">60</span>,</span><br><span class="line"><span class="number">91</span>,</span><br><span class="line"><span class="number">195</span>,</span><br><span class="line"><span class="number">215</span>,</span><br><span class="line"><span class="number">102</span>,</span><br><span class="line"><span class="number">145</span>,</span><br><span class="line"><span class="number">154</span>,</span><br><span class="line"><span class="number">27</span>,</span><br><span class="line"><span class="number">57</span>,</span><br><span class="line"><span class="number">231</span>,</span><br><span class="line"><span class="number">241</span>,</span><br><span class="line"><span class="number">86</span></span><br><span class="line">&#125;;</span><br><span class="line">random.NextBytes(array);</span><br><span class="line">uint num = <span class="number">0U</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="built_in">ulong</span>)num &lt; (<span class="built_in">ulong</span>)((<span class="built_in">long</span>)array2.Length))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] array3 = array2;</span><br><span class="line">uint num2 = num;</span><br><span class="line">array3[(<span class="built_in">int</span>)num2] = (array3[(<span class="built_in">int</span>)num2] ^ array[(<span class="built_in">int</span>)num]);</span><br><span class="line">num += <span class="number">1U</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Encoding.ASCII.GetString(array2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>似乎最后的结果和扫雷时点击的位置也有关系，所以不能手动修改雷的位置</p><p>那就找到三个 <code>False</code> 并记录下来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7 20</span><br><span class="line">28 7</span><br><span class="line">24 28</span><br></pre></td></tr></table></figure><p>运行并点击这三个位置</p><p><img data-src="whereismine.png" alt="whereismine"></p><p>最后弹出 flag</p><p><img data-src="thisisflag.png" alt="thisisflag"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目都是从BUUOJ上找的&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>GWCTF2019 re3 writeup</title>
    <link href="https://s0uthwood.github.io/2021/04/08/GWCTF2019-re3-writeup/"/>
    <id>https://s0uthwood.github.io/2021/04/08/GWCTF2019-re3-writeup/</id>
    <published>2021-04-08T14:36:12.000Z</published>
    <updated>2021-05-19T17:44:03.351Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><p>下午在上课的时候写了个 AES 加密，晚上正好遇到，立马认出来了，于是赶紧把解密部分写完，用自己的代码跑出来了，爽到。</p><a id="more"></a><h1 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h1><p>首先通过关键字符串 <code>Wrong</code> 进入 <code>main</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%39s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(s) != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  mprotect(&amp;dword_400000, <span class="number">0xF000</span>uLL, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">223</span>; ++i )</span><br><span class="line">    *((_BYTE *)sub_402219 + i) ^= <span class="number">0x99</span>u;</span><br><span class="line">  sub_40207B((__int64)&amp;unk_603170);</span><br><span class="line">  sub_402219();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码，发现先是输入一个长度为32的字符串</p><p>随后对一个奇怪的地址执行了一个函数，但这个地址和输入应该没有关系，可以暂时不管</p><p>注意到有个 <code>for</code> 循环对某一个地址的值做了个异或，最后又调用了这个地址，这是简单且经典的 SMC</p><p>用 idapython patch 一下，用运行脚本功能，由于长度较短，直接在ida中手写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x402219</span></span><br><span class="line">end = start + <span class="number">223</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">    patch_byte(i, get_wide_byte(i) ^ <span class="number">0x99</span>)</span><br></pre></td></tr></table></figure><p>运行完后进入这个地址，好像不能在 <code>402219</code> 处新建函数，只能在 <code>40221A</code> 处按 p 键新建函数，F5 查看这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_40221A</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-D8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">200</span>]; <span class="comment">// [rsp+20h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+E8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_400A71((__int64)v4, (__int64)&amp;unk_603170);<span class="comment">// 经典密钥生成</span></span><br><span class="line">  sub_40196E((__int64)v4, a1);                  <span class="comment">// 这tm是AES</span></span><br><span class="line">  sub_40196E((__int64)v4, a1 + <span class="number">16</span>);</span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(i + a1) != byte_6030A0[i] )</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的 <code>byte_6030A0</code> 显然是加密结果的校验了</p><p>上面有两个函数 <code>sub_400A71</code> 和 <code>sub_40196E</code>，<code>400A71</code> 调用了之前出现的 <code>603170</code> 猜测是一个密钥，<code>40196E</code> 使用了两次，且分别是对输入的前一半与后一半的操作，猜测是加密函数。密钥生成和输入无关，完全可以通过动态调试得到结果，所以查看加密函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_401828</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 i; <span class="comment">// [rsp+1Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  sub_400B0A(<span class="number">0L</span>L, a1, a2);                      <span class="comment">// 这是aes哦</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">9u</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_400BAC(a1);</span><br><span class="line">    sub_400C1F(a1);</span><br><span class="line">    sub_400D27(a1);</span><br><span class="line">    sub_400B0A(i, a1, a2);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_400BAC(a1);</span><br><span class="line">  sub_400C1F(a1);</span><br><span class="line">  <span class="keyword">return</span> sub_400B0A(<span class="number">10L</span>L, a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始被各个函数吓一跳，但点到某个函数里发现好像是 $4\times 4$ 的一个方阵，又发现某些函数重复出现的规则和 AES 很像，于是推测这个是 AES 加密算法，稍微看了下具体的函数实现，应该没有大问题，于是着手解密了。</p><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>首先动态调试拿到密钥</p><p>直接步过这句代码： <code>sub_40207B((__int64)&amp;unk_603170);</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> b *0x4021e4</span></span><br><span class="line">Breakpoint 2 at 0x4021e4</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> c</span></span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> n</span></span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> x/50x 0x603170</span></span><br><span class="line">0x603170:       0xcb    0x8d    0x49    0x35    0x21    0xb4    0x7a    0x4c</span><br><span class="line">0x603178:       0xc1    0xae    0x7e    0x62    0x22    0x92    0x66    0xce</span><br><span class="line">0x603180:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure><p>拿到密钥</p><p>随后直接到 ida 相应地址中取出密文</p><p>用之前写过的 AES 脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_aes</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"></span><br><span class="line">key     = <span class="number">0xcb8d493521b47a4cc1ae7e62229266ce</span></span><br><span class="line">cipher1 = <span class="number">0xBC0AADC0147C5ECCE0B140BC9C51D52B</span></span><br><span class="line">cipher2 = <span class="number">0x46B2B9434DE5324BAD7FB4B39CDB4B5B</span></span><br><span class="line"></span><br><span class="line">print(n2s(my_aes.aes_encrypt(cipher1, key)), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(n2s(my_aes.aes_encrypt(cipher2, key)))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;flag&#123;924a9ab2163&#x27;</span><span class="string">b&#x27;d390410d0a1f670&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>得到 flag</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;下午在上课的时候写了个 AES 加密，晚上正好遇到，立马认出来了，于是赶紧把解密部分写完，用自己的代码跑出来了，爽到。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
    <category term="BUUOJ" scheme="https://s0uthwood.github.io/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>高校战役 re writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/31/%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9-re-%E5%89%8D%E5%9B%9B%E9%A2%98-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/31/%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9-re-%E5%89%8D%E5%9B%9B%E9%A2%98-writeups/</id>
    <published>2021-03-31T12:33:02.000Z</published>
    <updated>2021-05-29T19:43:14.664Z</updated>
    
    <content type="html"><![CDATA[<p>完成：cycle graph, 天津垓, fxck, easyparser</p><p>被学长安利的比赛</p><a id="more"></a><h1 id="cycle-graph"><a href="#cycle-graph" class="headerlink" title="cycle graph"></a>cycle graph</h1><h2 id="逆向代码"><a href="#逆向代码" class="headerlink" title="逆向代码"></a>逆向代码</h2><p>根据提示，这是一道纯算法题，拖到 ida 中，根据关键字符串定位到关键函数。查看核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dword_403370 = <span class="number">0</span>;</span><br><span class="line">v1 = &amp;unk_403384;</span><br><span class="line">byte_403374 = <span class="number">48</span>;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">dword_403378 = (<span class="keyword">int</span>)&amp;unk_403380;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v3 = dword_402178[v2];</span><br><span class="line">  ++v2;</span><br><span class="line">  *(v1 - <span class="number">1</span>) = v3;</span><br><span class="line">  *v1 = (<span class="keyword">char</span> *)&amp;unk_403380 + <span class="number">12</span> * dword_402274[v2];</span><br><span class="line">  v1[<span class="number">1</span>] = (<span class="keyword">char</span> *)&amp;unk_403380 + <span class="number">12</span> * dword_4021F4[v2];</span><br><span class="line">  v1 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v1 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)&amp;unk_403504 );</span><br></pre></td></tr></table></figure><p>上面的代码是主函数开头的初始化部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">sub_401020(<span class="string">&quot;You need a flag to get out of this:\n&quot;</span>, a1);</span><br><span class="line">scan(<span class="string">&quot;%s&quot;</span>, &amp;input);</span><br><span class="line">v4 = dword_403370;                            <span class="comment">// 0</span></span><br><span class="line">v5 = byte_403374;                             <span class="comment">// 48</span></span><br><span class="line">v6 = <span class="number">5</span>;</span><br><span class="line">v7 = dword_403378;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v11 = *(&amp;input + v6);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)v7 + v5 == v11 )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 - *(_DWORD *)v7 != v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401020(<span class="string">&quot;This is not flag~\n&quot;</span>, v10);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = *(&amp;input + v6);</span><br><span class="line">  ++v4;</span><br><span class="line">  ++v6;</span><br><span class="line">  byte_403374 = v5;</span><br><span class="line">  dword_403378 = v7;</span><br><span class="line">  dword_403370 = v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v6 &lt; <span class="number">21</span> );</span><br></pre></td></tr></table></figure><p>上面的代码是根据输入进行的一系列操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( input != <span class="string">&#x27;f&#x27;</span> || v13 != <span class="string">&#x27;l&#x27;</span> || v14 != <span class="string">&#x27;a&#x27;</span> || v15 != <span class="string">&#x27;g&#x27;</span> || v16 != <span class="string">&#x27;&#123;&#x27;</span> || v17 != <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;illegal input~\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">16</span> || (_UNKNOWN *)v7 != &amp;unk_4034F4 )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;This is not flag~\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;Congratulations!!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub_401020(v8, v11);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>上面的代码就是最后的验证环节</p><p>一开始尝试直接看代码，发现自己被绕进去了，完全不知道各个地址是什么东西，所以考虑通过动态调试来得到初始化后的结果</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>直接拖到 x32dbg 中，在第一个输出的字符串前面打上断点，然后运行到断点的位置</p><p>分析了一下初始化部分，认为关键的内存部分应该是从 <code>403370</code> 开始一直到 <code>403540</code> 这部分</p><p>于是找到 <code>3370</code> ，右键选择内存窗口找到地址</p><p>鉴于数据量不大，直接手dump下来就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">00C43370  00 00 00 00 30 00 00 00 80 33 C4 00 00 00 00 00  ....0....3Ä.....  </span><br><span class="line">00C43380  34 00 00 00 98 33 C4 00 8C 33 C4 00 02 00 00 00  4....3Ä..3Ä.....  </span><br><span class="line">00C43390  98 33 C4 00 E0 33 C4 00 2C 00 00 00 8C 33 C4 00  .3Ä.à3Ä.,....3Ä.  </span><br><span class="line">00C433A0  D4 33 C4 00 2A 00 00 00 58 34 C4 00 94 34 C4 00  Ô3Ä.*...X4Ä..4Ä.  </span><br><span class="line">00C433B0  06 00 00 00 D4 33 C4 00 EC 33 C4 00 2A 00 00 00  ....Ô3Ä.ì3Ä.*...  </span><br><span class="line">00C433C0  98 33 C4 00 64 34 C4 00 2F 00 00 00 B8 34 C4 00  .3Ä.d4Ä.&#x2F;...¸4Ä.  </span><br><span class="line">00C433D0  F4 34 C4 00 2A 00 00 00 1C 34 C4 00 94 34 C4 00  ô4Ä.*....4Ä..4Ä.  </span><br><span class="line">00C433E0  33 00 00 00 B0 33 C4 00 EC 33 C4 00 03 00 00 00  3...°3Ä.ì3Ä.....  </span><br><span class="line">00C433F0  F8 33 C4 00 1C 34 C4 00 02 00 00 00 B0 33 C4 00  ø3Ä..4Ä.....°3Ä.  </span><br><span class="line">00C43400  10 34 C4 00 32 00 00 00 7C 34 C4 00 DC 34 C4 00  .4Ä.2...|4Ä.Ü4Ä.  </span><br><span class="line">00C43410  32 00 00 00 28 34 C4 00 F8 33 C4 00 32 00 00 00  2...(4Ä.ø3Ä.2...  </span><br><span class="line">00C43420  8C 33 C4 00 A0 34 C4 00 30 00 00 00 80 33 C4 00  .3Ä. 4Ä.0....3Ä.  </span><br><span class="line">00C43430  EC 33 C4 00 03 00 00 00 28 34 C4 00 A0 34 C4 00  ì3Ä.....(4Ä. 4Ä.  </span><br><span class="line">00C43440  01 00 00 00 BC 33 C4 00 AC 34 C4 00 32 00 00 00  ....¼3Ä.¬4Ä.2...  </span><br><span class="line">00C43450  D4 33 C4 00 EC 33 C4 00 2B 00 00 00 D0 34 C4 00  Ô3Ä.ì3Ä.+...Ð4Ä.  </span><br><span class="line">00C43460  B8 34 C4 00 02 00 00 00 10 34 C4 00 A4 33 C4 00  ¸4Ä......4Ä.¤3Ä.  </span><br><span class="line">00C43470  2E 00 00 00 D0 34 C4 00 88 34 C4 00 01 00 00 00  ....Ð4Ä..4Ä.....  </span><br><span class="line">00C43480  34 34 C4 00 C8 33 C4 00 02 00 00 00 34 34 C4 00  44Ä.È3Ä.....44Ä.  </span><br><span class="line">00C43490  4C 34 C4 00 2D 00 00 00 98 33 C4 00 1C 34 C4 00  L4Ä.-....3Ä..4Ä.  </span><br><span class="line">00C434A0  32 00 00 00 40 34 C4 00 D4 33 C4 00 04 00 00 00  2...@4Ä.Ô3Ä.....  </span><br><span class="line">00C434B0  94 34 C4 00 34 34 C4 00 2D 00 00 00 E8 34 C4 00  .4Ä.44Ä.-...è4Ä.  </span><br><span class="line">00C434C0  70 34 C4 00 30 00 00 00 94 34 C4 00 8C 33 C4 00  p4Ä.0....4Ä..3Ä.  </span><br><span class="line">00C434D0  31 00 00 00 64 34 C4 00 40 34 C4 00 2F 00 00 00  1...d4Ä.@4Ä.&#x2F;...  </span><br><span class="line">00C434E0  EC 33 C4 00 B0 33 C4 00 33 00 00 00 88 34 C4 00  ì3Ä.°3Ä.3....4Ä.  </span><br><span class="line">00C434F0  04 34 C4 00 05 00 00 00 F4 34 C4 00 F4 34 C4 00  .4Ä.....ô4Ä.ô4Ä.  </span><br><span class="line">00C43500  02 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  ................  </span><br></pre></td></tr></table></figure><p>然后对照着第二部分的代码一点一点看，发现其实就是如果 <code>*(_DWORD *)v7 + v5 == v11</code> 就让 <code>v7</code> 跳到下一个内存地址所指向的地址（这题指针有点绕），比如一开始如果满足输入为 <code>0x34+0x30</code> 接下来就先走到 <code>C43384</code> ，然后从这里跳到 <code>C43398</code> 这个地址，继续下一步运算，如果 <code>v5 - *(_DWORD *)v7 != v11</code> 就走到下两个内存地址所指向的地址。</p><h2 id="脚本求解"><a href="#脚本求解" class="headerlink" title="脚本求解"></a>脚本求解</h2><p>原理就是根据地址跳一次，那么接下来就是求解了，由于每一步都有两种可能（实际上并不是，要在可见字符有范围的）</p><p>一开始觉得可能只有一种路径，直接用循环求解了，结果不行，就写了个dfs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">addr = [</span><br><span class="line">    <span class="number">0x000034</span>,        <span class="number">6</span>,        <span class="number">3</span>, <span class="number">0x000002</span>,</span><br><span class="line">           <span class="number">6</span>, <span class="number">0xC433E0</span>, <span class="number">0x00002C</span>,        <span class="number">3</span>,</span><br><span class="line">    <span class="number">0xC433D4</span>, <span class="number">0x00002A</span>, <span class="number">0xC43458</span>, <span class="number">0xC43494</span>,</span><br><span class="line">    <span class="number">0x000006</span>, <span class="number">0xC433D4</span>, <span class="number">0xC433EC</span>, <span class="number">0x00002A</span>,</span><br><span class="line">           <span class="number">6</span>, <span class="number">0xC43464</span>, <span class="number">0x00002F</span>, <span class="number">0xC434B8</span>,</span><br><span class="line">    <span class="number">0xC434F4</span>, <span class="number">0x00002A</span>, <span class="number">0xC4341C</span>, <span class="number">0xC43494</span>,</span><br><span class="line">    <span class="number">0x000033</span>,       <span class="number">12</span>, <span class="number">0xC433EC</span>, <span class="number">0x000003</span>,</span><br><span class="line">    <span class="number">0xC433F8</span>, <span class="number">0xC4341C</span>, <span class="number">0x000002</span>,       <span class="number">12</span>,</span><br><span class="line">    <span class="number">0xC43410</span>, <span class="number">0x000032</span>, <span class="number">0xC4347C</span>, <span class="number">0xC434DC</span>,</span><br><span class="line">    <span class="number">0x000032</span>, <span class="number">0xC43428</span>, <span class="number">0xC433F8</span>, <span class="number">0x000032</span>,</span><br><span class="line">           <span class="number">3</span>, <span class="number">0xC434A0</span>, <span class="number">0x000030</span>,        <span class="number">0</span>,</span><br><span class="line">    <span class="number">0xC433EC</span>, <span class="number">0x000003</span>, <span class="number">0xC43428</span>, <span class="number">0xC434A0</span>,</span><br><span class="line">    <span class="number">0x000001</span>,       <span class="number">15</span>, <span class="number">0xC434AC</span>, <span class="number">0x000032</span>,</span><br><span class="line">    <span class="number">0xC433D4</span>, <span class="number">0xC433EC</span>, <span class="number">0x00002B</span>, <span class="number">0xC434D0</span>,</span><br><span class="line">    <span class="number">0xC434B8</span>, <span class="number">0x000002</span>, <span class="number">0xC43410</span>,        <span class="number">9</span>,</span><br><span class="line">    <span class="number">0x00002E</span>, <span class="number">0xC434D0</span>, <span class="number">0xC43488</span>, <span class="number">0x000001</span>,</span><br><span class="line">    <span class="number">0xC43434</span>, <span class="number">0xC433C8</span>, <span class="number">0x000002</span>, <span class="number">0xC43434</span>,</span><br><span class="line">    <span class="number">0xC4344C</span>, <span class="number">0x00002D</span>,        <span class="number">6</span>, <span class="number">0xC4341C</span>,</span><br><span class="line">    <span class="number">0x000032</span>, <span class="number">0xC43440</span>, <span class="number">0xC433D4</span>, <span class="number">0x000004</span>,</span><br><span class="line">    <span class="number">0xC43494</span>, <span class="number">0xC43434</span>, <span class="number">0x00002D</span>, <span class="number">0xC434E8</span>,</span><br><span class="line">    <span class="number">0xC43470</span>, <span class="number">0x000030</span>, <span class="number">0xC43494</span>,        <span class="number">3</span>,</span><br><span class="line">    <span class="number">0x000031</span>, <span class="number">0xC43464</span>, <span class="number">0xC43440</span>, <span class="number">0x00002F</span>,</span><br><span class="line">    <span class="number">0xC433EC</span>,       <span class="number">12</span>, <span class="number">0x000033</span>, <span class="number">0xC43488</span>,</span><br><span class="line">    <span class="number">0xC43404</span>, <span class="number">0x000005</span>, <span class="number">0xC434F4</span>, <span class="number">0xC434F4</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(addr)):</span><br><span class="line">    <span class="keyword">if</span> addr[i] &gt;= <span class="number">0xc43380</span>:</span><br><span class="line">        addr[i] -= <span class="number">0xc43380</span></span><br><span class="line">        addr[i] //= <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">start, add, count</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (add &gt; <span class="number">0x7e</span>) <span class="keyword">or</span> add &lt; <span class="number">0x21</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">21</span>) <span class="keyword">and</span> (start == <span class="number">93</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> (count &gt;= <span class="number">21</span>) <span class="keyword">and</span> start != <span class="number">93</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> dfs(addr[start + <span class="number">1</span>], add + addr[start], count + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> dfs(addr[start + <span class="number">2</span>], add - addr[start], count + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0x30</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 72ab0c6a79cb0b8d0</span></span><br></pre></td></tr></table></figure><p>这个是倒序输出，且有个 <code>0</code> 是最初的 <code>0x30</code></p><p>最后反转过来就行了</p><p>（因为 adworld 不会提交，也不知道对不对，反正运行结果是 <code>Congratulations!!</code> 了）</p><h1 id="天津垓"><a href="#天津垓" class="headerlink" title="天津垓"></a>天津垓</h1><h2 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h2><h2 id="破解-Authorize"><a href="#破解-Authorize" class="headerlink" title="破解 Authorize"></a>破解 Authorize</h2><p>运行 exe 文件，看到 <code>Authorize:</code> 字符串，到 ida 中通过 <code>Shift+F12</code> 找到字符串的位置，通过交叉引用找到关键函数。</p><p>查看函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1004011F6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v39 = &#x27;H_gnisiR&#x27;;</span><br><span class="line">  v40 = &#x27;eppo&#x27;;</span><br><span class="line">  v41 = &#x27;!r&#x27;;</span><br><span class="line">  v42 = <span class="number">0</span>;</span><br><span class="line">  v31 = &#x27;eht nehW&#x27;;</span><br><span class="line">  v32 = &#x27;oh evif &#x27;;</span><br><span class="line">  v33 = &#x27;sorc snr&#x27;;</span><br><span class="line">  v34 = &#x27;g eht ,s&#x27;;</span><br><span class="line">  v35 = &#x27;os nedlo&#x27;;</span><br><span class="line">  v36 = &#x27;HT reidl&#x27;;</span><br><span class="line">  v37 = &#x27;si RESUO&#x27;;</span><br><span class="line">  v38 = &#x27;\n.nrob &#x27;;</span><br><span class="line">  v25 = &#x27;t pmuj A&#x27;;</span><br><span class="line">  v26 = &#x27;ks eht o&#x27;;</span><br><span class="line">  v27 = &#x27; snrut y&#x27;;</span><br><span class="line">  v28 = &#x27;dir a ot&#x27;;</span><br><span class="line">  v29 = &#x27;.kcik re&#x27;;</span><br><span class="line">  v30 = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  v21 = &#x27;etneserP&#x27;;</span><br><span class="line">  v22 = &#x27;IAZ yb d&#x27;;</span><br><span class="line">  v23 = &#x27;\nA&#x27;;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v20, <span class="string">&quot;%s&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(Format, <span class="string">&quot;%20s&quot;</span>);</span><br><span class="line">  v1 = <span class="number">17</span>;</span><br><span class="line">  v2 = <span class="number">8</span>;</span><br><span class="line">  v3 = <span class="number">6</span>;</span><br><span class="line">  v4 = <span class="number">10</span>;</span><br><span class="line">  v5 = <span class="number">15</span>;</span><br><span class="line">  v6 = <span class="number">20</span>;</span><br><span class="line">  v7 = <span class="number">42</span>;</span><br><span class="line">  v8 = <span class="number">59</span>;</span><br><span class="line">  v9 = <span class="number">47</span>;</span><br><span class="line">  v10 = <span class="number">3</span>;</span><br><span class="line">  v11 = <span class="number">47</span>;</span><br><span class="line">  v12 = <span class="number">4</span>;</span><br><span class="line">  v13 = <span class="number">16</span>;</span><br><span class="line">  v14 = <span class="number">72</span>;</span><br><span class="line">  v15 = <span class="number">62</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">7</span>;</span><br><span class="line">  v18 = <span class="number">16</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(Format, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">18</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(v20, &amp;v25);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">17</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v43 = ~(Str[i] &amp; *((_BYTE *)&amp;v39 + i % <span class="number">14</span>)) &amp; (Str[i] | *((_BYTE *)&amp;v39 + i % <span class="number">14</span>));</span><br><span class="line">    <span class="keyword">if</span> ( v43 != *(&amp;v1 + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(v20, &amp;v25);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(v20, &amp;v31);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(v20, &amp;v21);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到最后的判断条件 <code>v43 != *(&amp;v1 + i)</code>，而 v43 是通过一个异或来生成的，因此只需要通过 v1 数组和 v39 数组反向求解得到输入的 Str 即可。</p><p>下面是求解代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">17</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">42</span>, <span class="number">59</span>, <span class="number">47</span>,  <span class="number">3</span>,  <span class="number">47</span>,  <span class="number">4</span>,  <span class="number">16</span>,  <span class="number">72</span>,  <span class="number">62</span>,  <span class="number">0</span>,  <span class="number">7</span>,  <span class="number">16</span>]</span><br><span class="line">xor = <span class="string">&#x27;H_gnisiR&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;eppo&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;!r&#x27;</span>[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>(flag[i] ^ <span class="built_in">ord</span>(xor[i % <span class="number">14</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"><span class="comment"># Caucasus@s_ability</span></span><br></pre></td></tr></table></figure><h2 id="patch-SMC"><a href="#patch-SMC" class="headerlink" title="patch SMC"></a>patch SMC</h2><p>将得到的字符串输入程序，发现需要通过第二个认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">When the five horns cross, the golden soldier THOUSER is born.</span><br><span class="line">Presented by ZAIA</span><br><span class="line"></span><br><span class="line">      $$$$$$$$$$$$$$  $$$$$$$$$     $$$$$$$    $$$$$$$$$$</span><br><span class="line">      $$$$$$$$$$$$$$ $$$$$$$$$$$    $$$$$$$    $$$$$$$$$$$</span><br><span class="line">     $$$$$$$$$$$$$$ $$$$$$$$$$$$$   $$$$$$$   $$$$$$$$$$$$$</span><br><span class="line">            $$$$$$  $$$$$$ $$$$$$   $$$$$$$  $$$$$$0 $$$$$$</span><br><span class="line">          $$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$0</span><br><span class="line">       $$$$$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">     $$$$$$$$$$$$$$$$$$$             $$$$$                   $$$</span><br><span class="line">   $$$$$$$$$$$$$$$$$$$$       $$$$$$  $$$  $$$$$$       $$$$$$$$$</span><br><span class="line"> $$$$$$$$$$$$$$$$$$$$$         $$$$$$ $$0 $$$$$$         $$$$$$$$</span><br><span class="line"></span><br><span class="line">Input the flag to hijack the ability of Hiden Intelligence:</span><br></pre></td></tr></table></figure><p>在 <code>Strings window</code> 中并没有找到 <code>Input the flag</code> 的字符串，怀疑程序使用了 SMC。</p><h3 id="法一（patch-方法同-HGAME-FAKE）"><a href="#法一（patch-方法同-HGAME-FAKE）" class="headerlink" title="法一（patch  方法同 HGAME FAKE）"></a>法一（patch  方法同 HGAME FAKE）</h3><p>SMC 可以手动 patch 或者使用动态调试 dump，这里先选择手动 patch</p><p>在 ida 的汇编页面中浏览 <code>Data</code> 部分，发现在 <code>0x10040164D</code> 位置有一长串未被 ida 解析的二进制数据，推测这部分是被加密过的代码，按 <code>x</code> 交叉引用找到加密的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_100401A6C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_100401506(byte_10040164D, <span class="number">1045</span>i64, Str);</span><br><span class="line">  sub_10040162B();</span><br><span class="line">  <span class="keyword">return</span> (*(__int64 (**)(<span class="keyword">void</span>))byte_10040164D)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现先用一个函数调用了这段二进制数据，随后调用以这个地址为开头的函数。</p><p>进入 <code>sub_100401506</code> 函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL __fastcall <span class="title">sub_100401506</span><span class="params">(<span class="keyword">void</span> *a1, <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BOOL result; <span class="comment">// eax</span></span><br><span class="line">  DWORD flOldProtect; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">void</span> *lpAddress; <span class="comment">// [rsp+40h] [rbp+10h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+48h] [rbp+18h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+50h] [rbp+20h]</span></span><br><span class="line"></span><br><span class="line">  lpAddress = a1; <span class="comment">// bytes</span></span><br><span class="line">  v7 = a2;        <span class="comment">// 1045</span></span><br><span class="line">  v8 = a3;        <span class="comment">// Str</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">18</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !VirtualProtect(lpAddress, v7, <span class="number">0x40</span>u, &amp;flOldProtect) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">    *((_BYTE *)lpAddress + i) ^= *(_BYTE *)(i % <span class="number">18</span> + v8); <span class="comment">// 关键代码</span></span><br><span class="line">  result = VirtualProtect(lpAddress, v7, flOldProtect, &amp;flOldProtect);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把关键代码美化一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">    lpAddress[i] ^= v8[i % <span class="number">18</span>]; <span class="comment">// 关键代码</span></span><br></pre></td></tr></table></figure><p>发现是通过一个异或做的加密，密钥就是第一步中输入的字符串。</p><p>因此写一个python脚本来解密并生成patch文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">smc = [<span class="number">0x16</span>,  <span class="number">0x29</span>, <span class="number">0x0F4</span>,  <span class="number">0x8F</span>,   <span class="number">0x91</span>,  <span class="number">0x72</span>,  <span class="number">0x75</span>,  <span class="number">0x73</span>,    <span class="number">8</span> , <span class="number">0x0FE</span>, <span class="number">0x0F3</span>,  <span class="number">0x45</span>, <span class="number">0x0E2</span>,  <span class="number">0x69</span>,  <span class="number">0x6C</span>,  <span class="number">0x69</span>, <span class="number">0x0B3</span>, <span class="number">0x0FC</span>, <span class="number">0x0D3</span>,  <span class="number">0x61</span>,</span><br><span class="line"> <span class="number">0x75</span>,  <span class="number">0x63</span>,  <span class="number">0x13</span>,<span class="number">0x0D1</span>,  <span class="number">0x6B</span>,   <span class="number">0x73</span>,  <span class="number">0x87</span>, <span class="number">0x0F6</span>, <span class="number">0x0CB</span>,  <span class="number">0x61</span>,  <span class="number">0x62</span>,  <span class="number">0x69</span>, <span class="number">0x0A8</span>,    <span class="number">6</span> ,  <span class="number">0x54</span>,  <span class="number">0x79</span>,  <span class="number">0x84</span>, <span class="number">0x0E4</span>, <span class="number">0x0ED</span>,  <span class="number">0x63</span>,  <span class="number">0x61</span>,</span><br><span class="line"><span class="comment"># 中间部分省略</span></span><br><span class="line"><span class="number">0x0FC</span>, <span class="number">0x0A2</span>,  <span class="number">0x89</span>,  <span class="number">0x2B</span>,  <span class="number">0x74</span>,  <span class="number">0x73</span>,  <span class="number">0x40</span>,  <span class="number">0x9B</span>,  <span class="number">0x1C</span>,  <span class="number">0x60</span>,  <span class="number">0x62</span>,  <span class="number">0x69</span>,  <span class="number">0x84</span>,  <span class="number">0x57</span>,  <span class="number">0x75</span>,  <span class="number">0x79</span>,  <span class="number">0x43</span>,  <span class="number">0x90</span>,  <span class="number">0x48</span>,  <span class="number">0x81</span>, <span class="number">0x0C4</span>,</span><br><span class="line"><span class="number">0x0F0</span>,    <span class="number">1</span> ,    <span class="number">0</span> ,    <span class="number">0</span> ,  <span class="number">0x5D</span>, <span class="number">0x0C3</span>]</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;patch.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Caucasus@s_ability&#x27;</span></span><br><span class="line">title = <span class="string">&#x27;&#x27;&#x27;file_path = &quot;天津垓.exe&quot;</span></span><br><span class="line"><span class="string">fr = open(file_path, &quot;rb&quot;)</span></span><br><span class="line"><span class="string">fw = open(&#x27;modify_&#x27;+file_path, &quot;wb&quot;)</span></span><br><span class="line"><span class="string">data = fr.read()</span></span><br><span class="line"><span class="string">fw.write(data)</span></span><br><span class="line"><span class="string">fw.seek(0xc4d)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">file.write(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1045</span>):</span><br><span class="line">    smc[i] ^= (<span class="built_in">ord</span>(<span class="built_in">str</span>[i % <span class="number">18</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1045</span>, <span class="number">50</span>):</span><br><span class="line">    file.write(<span class="string">&#x27;fw.write(&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">bytes</span>(smc[i:i + <span class="number">50</span>])&#125;</span>&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">&#x27;)\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>在命令行中依次运行 <code>python solve.py</code> 和 <code>python patch.py</code></p><p>会得到一个新的 exe 文件 <code>modify_天津垓.exe</code></p><p>在 ida 中打开，进入之前解密的地址，发现此时已经可以被解析了</p><h3 id="法二（-idapython-自动-patch）"><a href="#法二（-idapython-自动-patch）" class="headerlink" title="法二（ idapython 自动 patch）"></a>法二（ idapython 自动 patch）</h3><p>自己手动 patch 的好处在于可以避免直接对文件进行操作，如果出现错误不容易复原（毕竟 ida 7.0 没有撤销）。而利用 <code>idapython</code> 的接口进行 patch 则写起来更加方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;Caucasus@s_ability&#x27;</span></span><br><span class="line">    addr = start</span><br><span class="line">    <span class="keyword">while</span>(addr &lt; end + <span class="number">1</span>):</span><br><span class="line">        PatchByte(addr, Byte(addr) ^ <span class="built_in">ord</span>(<span class="built_in">str</span>[(addr - start) % <span class="number">18</span>]))</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (addr - start)</span><br></pre></td></tr></table></figure><p>如果将 <code>str</code> 取出作为变量的一部分，这段代码就可以通用到一些其他题目了。</p><p>随后在 ida 的 <code>File &gt; script file</code> 中选择写好的脚本，在 <code>File &gt; script command</code> 中直接输入 <code>patch( &lt;start_addr&gt;, &lt;end_addr&gt;)</code> 即可（具体的 <code>&lt;addr&gt;</code> 可以直接从 ida 的汇编页面中读取）</p><p>点击 <code>run</code> 后即可 patch 成功。</p><h2 id="hijack"><a href="#hijack" class="headerlink" title="hijack"></a>hijack</h2><p>查看上一步中成功解密的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_10040164D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v9 = <span class="number">2007666</span>;</span><br><span class="line">  v10 = <span class="number">2125764</span>;</span><br><span class="line">  v11 = <span class="number">1909251</span>;</span><br><span class="line">  v12 = <span class="number">2027349</span>;</span><br><span class="line">  v13 = <span class="number">2421009</span>;</span><br><span class="line">  v14 = <span class="number">1653372</span>;</span><br><span class="line">  v15 = <span class="number">2047032</span>;</span><br><span class="line">  v16 = <span class="number">2184813</span>;</span><br><span class="line">  v17 = <span class="number">2302911</span>;</span><br><span class="line">  v18 = <span class="number">2263545</span>;</span><br><span class="line">  v19 = <span class="number">1909251</span>;</span><br><span class="line">  v20 = <span class="number">2165130</span>;</span><br><span class="line">  v21 = <span class="number">1968300</span>;</span><br><span class="line">  v22 = <span class="number">2243862</span>;</span><br><span class="line">  v23 = <span class="number">2066715</span>;</span><br><span class="line">  v24 = <span class="number">2322594</span>;</span><br><span class="line">  v25 = <span class="number">1987983</span>;</span><br><span class="line">  v26 = <span class="number">2243862</span>;</span><br><span class="line">  v27 = <span class="number">1869885</span>;</span><br><span class="line">  v28 = <span class="number">2066715</span>;</span><br><span class="line">  v29 = <span class="number">2263545</span>;</span><br><span class="line">  v30 = <span class="number">1869885</span>;</span><br><span class="line">  v31 = <span class="number">964467</span>;</span><br><span class="line">  v32 = <span class="number">944784</span>;</span><br><span class="line">  v33 = <span class="number">944784</span>;</span><br><span class="line">  v34 = <span class="number">944784</span>;</span><br><span class="line">  v35 = <span class="number">728271</span>;</span><br><span class="line">  v36 = <span class="number">1869885</span>;</span><br><span class="line">  v37 = <span class="number">2263545</span>;</span><br><span class="line">  v38 = <span class="number">2283228</span>;</span><br><span class="line">  v39 = <span class="number">2243862</span>;</span><br><span class="line">  v40 = <span class="number">2184813</span>;</span><br><span class="line">  v41 = <span class="number">2165130</span>;</span><br><span class="line">  v42 = <span class="number">2027349</span>;</span><br><span class="line">  v43 = <span class="number">1987983</span>;</span><br><span class="line">  v44 = <span class="number">2243862</span>;</span><br><span class="line">  v45 = <span class="number">1869885</span>;</span><br><span class="line">  v46 = <span class="number">2283228</span>;</span><br><span class="line">  v47 = <span class="number">2047032</span>;</span><br><span class="line">  v48 = <span class="number">1909251</span>;</span><br><span class="line">  v49 = <span class="number">2165130</span>;</span><br><span class="line">  v50 = <span class="number">1869885</span>;</span><br><span class="line">  v51 = <span class="number">2401326</span>;</span><br><span class="line">  v52 = <span class="number">1987983</span>;</span><br><span class="line">  v53 = <span class="number">2243862</span>;</span><br><span class="line">  v54 = <span class="number">2184813</span>;</span><br><span class="line">  v55 = <span class="number">885735</span>;</span><br><span class="line">  v56 = <span class="number">2184813</span>;</span><br><span class="line">  v57 = <span class="number">2165130</span>;</span><br><span class="line">  v58 = <span class="number">1987983</span>;</span><br><span class="line">  v59 = <span class="number">2460375</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(Format, <span class="string">&quot;Input the flag to hijack the ability of Hiden Intelligence:&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v7, <span class="string">&quot;Progrise Key confirmed. Ready to break.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;Jacking Break! Zaia Enterprise.&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;%59s&quot;</span>);</span><br><span class="line">  v3 = <span class="number">29477</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v2, <span class="string">&quot;Not verified!&quot;</span>);</span><br><span class="line">  v62 = <span class="number">2147483659</span>;</span><br><span class="line">  <span class="built_in">printf</span>(Format);</span><br><span class="line">  <span class="built_in">scanf</span>(v5, Str);</span><br><span class="line">  <span class="built_in">printf</span>(v7);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">51</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(v2);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v61 = <span class="number">19683</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v60 = v61 * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)Str[i] % v62; <span class="comment">// 关键代码</span></span><br><span class="line">    <span class="keyword">if</span> ( v60 != *(&amp;v9 + i) ) <span class="comment">// 验证</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(v2);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(v6);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将关键代码美化一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(&amp;v9 + i) != v61 * Str[i] % v62 )</span><br></pre></td></tr></table></figure><p>只要确保式子两端一直相等就行</p><p>程序的输入部分还是存到了 Str 中，因此只需要通过已经定义好的数求出 Str 就可以</p><p>这里直接对 Str 的每一位进行枚举（也可以用 z3 solver 或者求模逆等方法求解）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">51</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v[ <span class="number">0</span>] = <span class="number">2007666</span>;</span><br><span class="line">    v[ <span class="number">1</span>] = <span class="number">2125764</span>;</span><br><span class="line"><span class="comment">// 中间省略</span></span><br><span class="line">    v[<span class="number">49</span>] = <span class="number">1987983</span>;</span><br><span class="line">    v[<span class="number">50</span>] = <span class="number">2460375</span>;</span><br><span class="line">    <span class="keyword">int</span> v61 = <span class="number">19683</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x32</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(res = <span class="number">0</span>; res &lt;= <span class="number">0x80</span>; res++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] == v61 * res % <span class="number">2147483659</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, res);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</span></span><br></pre></td></tr></table></figure><p>在程序中输入这个字符串后，就能看到如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input the flag to hijack the ability of Hiden Intelligence:flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</span><br><span class="line">Progrise Key confirmed. Ready to break.</span><br><span class="line">Jacking Break! Zaia Enterprise.</span><br></pre></td></tr></table></figure><p>说明我们破解成功了！</p><h1 id="fxck"><a href="#fxck" class="headerlink" title="fxck!"></a>fxck!</h1><p>在输出前经过了两个函数，猜测第一个是加密，第二个是验证</p><p>看一下第一个函数，里面大概有两段代码是有用的</p><p>第一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v10; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v14 = input_v11[i];</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v12; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 += (<span class="keyword">unsigned</span> __int8)v20[j] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    v20[j] = v14 % <span class="number">58</span>;</span><br><span class="line">    v14 /= <span class="number">58u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v14 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = v12++;</span><br><span class="line">    v20[v4] = v14 % <span class="number">58</span>;</span><br><span class="line">    v14 /= <span class="number">58u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">57</span>; ++k )</span><br><span class="line">  byte_602500[k] ^= byte_602490[k % <span class="number">7</span>] ^ (<span class="keyword">unsigned</span> __int8)k;</span><br><span class="line"><span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt; v12; ++l )</span><br><span class="line">  des_v9[v16 + l] = byte_602500[(<span class="keyword">unsigned</span> __int8)v20[v12 - <span class="number">1</span> - l]];<span class="comment">// 转成base58</span></span><br><span class="line">des_v9[v12 + v16] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>一看到一堆58的取模和除法，猜测是base58编码</p><p>然后动调拿一下table</p><p>接下来看第二个函数，发现输入竟然最后比较的时候才出现，整个函数都是用来生成正确密文的，于是直接动调拿密文</p><p>写个脚本求解就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">0x14</span>, <span class="number">0x98</span>, <span class="number">0xE6</span>, <span class="number">0x55</span>, <span class="number">0xC8</span>, <span class="number">0xBF</span>, <span class="number">0xAA</span>]</span><br><span class="line"></span><br><span class="line">init = [</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xDB</span>, <span class="number">0xA7</span>, <span class="number">0x12</span>, <span class="number">0x89</span>, <span class="number">0xFC</span>, <span class="number">0xEB</span>, <span class="number">0x5B</span>, <span class="number">0xDA</span>, <span class="number">0xA4</span>, </span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x8E</span>, <span class="number">0xFD</span>, <span class="number">0xF7</span>, <span class="number">0x4B</span>, <span class="number">0xC5</span>, <span class="number">0xA5</span>, <span class="number">0x10</span>, <span class="number">0x8F</span>, <span class="number">0xFA</span>, </span><br><span class="line">    <span class="number">0xE9</span>, <span class="number">0x59</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x96</span>, <span class="number">0x85</span>, <span class="number">0x3D</span>, <span class="number">0xB3</span>, </span><br><span class="line">    <span class="number">0xCF</span>, <span class="number">0x72</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xEA</span>, <span class="number">0x54</span>, <span class="number">0xD8</span>, <span class="number">0xA6</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, </span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xEA</span>, <span class="number">0x54</span>, <span class="number">0xD8</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, <span class="number">0x89</span>, <span class="number">0xE0</span>, <span class="number">0xEB</span>, <span class="number">0x57</span>, </span><br><span class="line">    <span class="number">0xD9</span>, <span class="number">0xA1</span>, <span class="number">0x14</span>, <span class="number">0x8B</span>, <span class="number">0xFE</span>, <span class="number">0xE5</span>, <span class="number">0x55</span>, <span class="number">0xDB</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">true_table = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(init)):</span><br><span class="line">    init[i] ^= key[i % <span class="number">7</span>] ^ i</span><br><span class="line">    true_table += <span class="string">&#x27;%c&#x27;</span> % init[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base58 <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&#x27;4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe&#x27;</span></span><br><span class="line">fake_table = <span class="string">&#x27;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&#x27;</span></span><br><span class="line">true_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    true_flag += fake_table[true_table.index(flag[i])]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (b58decode(true_flag))</span><br><span class="line"><span class="comment"># b&#x27;\x06flag&#123;63510cf7-2b80-45e1-a186-21234897e5cd&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>得到flag</p><blockquote><p>拿到flag之后用程序验证，结果发现没有通过，以为自己只在第一层，base58分析错了，于是从头认真读代码<br>最后上网看了wp，才发现flag就是过不了验证</p></blockquote><h1 id="easyparser"><a href="#easyparser" class="headerlink" title="easyparser"></a>easyparser</h1><p>见过的最大的VM了，边动调边读指令</p><p>先是一堆初始化，直接动调过去，找输入</p><p>发现用了个循环，先将输入放到一个地址里</p><p>判断最后一个是否为 <code>&#125;</code></p><p>然后，将输入的一部分取出，存到了某个地址+0xE1到+0x100，正好32位</p><p>然后判断一下头是不是 <code>flag&#123;</code></p><p>接下来又进入一个循环，发现将某个地址的数字取出，存到了7号寄存器中，然后将对应位的输入取出，存到6号寄存器中</p><p>对6号寄存器分别进行了 <code>^0x63</code> 和 <code>&lt;&lt;2</code> 两个指令</p><p>然后和7号寄存器进行比较</p><p>猜测对所有明文都进行了同样的加密，所以直接从地址中取出密文，解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">144</span>,<span class="number">332</span>,<span class="number">28</span>,<span class="number">240</span>,<span class="number">132</span>,<span class="number">60</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">64</span>,<span class="number">240</span>,<span class="number">208</span>,<span class="number">88</span>,<span class="number">44</span>,<span class="number">8</span>,<span class="number">52</span>,<span class="number">240</span>,<span class="number">276</span>,<span class="number">240</span>,<span class="number">128</span>,<span class="number">44</span>,<span class="number">40</span>,<span class="number">52</span>,<span class="number">8</span>,<span class="number">240</span>,<span class="number">144</span>,<span class="number">68</span>,<span class="number">48</span>,<span class="number">80</span>,<span class="number">92</span>,<span class="number">44</span>,<span class="number">264</span>,<span class="number">240</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>((c &gt;&gt; <span class="number">2</span>) ^ <span class="number">0x63</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"><span class="comment"># G0d_Bless_Wuhan_&amp;_China_Growth!_</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;完成：cycle graph, 天津垓, fxck, easyparser&lt;/p&gt;
&lt;p&gt;被学长安利的比赛&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/categories/CTF/Reverse/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
</feed>
