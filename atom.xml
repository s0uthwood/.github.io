<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>s0uthwood&#39;s Blog</title>
  
  
  <link href="https://s0uthwood.github.io/atom.xml" rel="self"/>
  
  <link href="https://s0uthwood.github.io/"/>
  <updated>2021-05-19T17:29:52.819Z</updated>
  <id>https://s0uthwood.github.io/</id>
  
  <author>
    <name>s0uthwood</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CISCN2021 RE writeup</title>
    <link href="https://s0uthwood.github.io/2021/05/20/CISCN2021-RE-writeup/"/>
    <id>https://s0uthwood.github.io/2021/05/20/CISCN2021-RE-writeup/</id>
    <published>2021-05-19T17:21:59.000Z</published>
    <updated>2021-05-19T17:29:52.819Z</updated>
    
    <content type="html"><![CDATA[<p>完成：glass, baby_rc, little_evil</p><p>未完成：gift, HMI</p><a id="more"></a><h1 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h1><p>安卓逆向，使用jeb打开，发现在java层仅进行了简单的输入，然后进入so层判断</p><p>用ida打开so层，直接搜索java，进入判断函数</p><p>下面的字符串应该是密钥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmemcpy(v6, <span class="string">&quot;12345678&quot;</span>, <span class="keyword">sizeof</span>(v6));</span><br></pre></td></tr></table></figure><p>然后调用了三个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_FFC(v7, v6, v4);</span><br><span class="line">sub_1088(v7, flag, <span class="number">39</span>);</span><br><span class="line">sub_10D4(flag, <span class="number">39</span>, v6, v4);</span><br></pre></td></tr></table></figure><p>进入查看，第一个是RC4密钥初始化，第二个是RC4加密，第三个是对密文进行简单的运算</p><p>从字符串里拿密文，写脚本进行求解，先对简单运算进行反向运算，然后找个RC4密码的脚本，跑一下就可以找到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0xA3</span>, <span class="number">0x1A</span>, <span class="number">0xE3</span>, <span class="number">0x69</span>, <span class="number">0x2F</span>, <span class="number">0xBB</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x65</span>, <span class="number">0xC2</span>, <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x9E</span>, <span class="number">0x96</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0x1F</span>, <span class="number">0x8E</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, <span class="number">0xE1</span>, <span class="number">0xEB</span>, <span class="number">0xAF</span>, <span class="number">0xF0</span>, <span class="number">0xEA</span>, <span class="number">0xC4</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, <span class="number">0x6E</span>, <span class="number">0x3F</span>, <span class="number">0xB0</span>, <span class="number">0xD3</span>, <span class="number">0xCC</span>, <span class="number">0x78</span>, <span class="number">0xF9</span>, <span class="number">0x98</span>, <span class="number">0x3F</span>, <span class="number">0</span>]</span><br><span class="line">key = [<span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__rc4_init</span>(<span class="params">key</span>):</span></span><br><span class="line">    keylength = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % keylength]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_crypt</span>(<span class="params">key, data</span>):</span></span><br><span class="line">    S = __rc4_init(key)</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = (a ^ S[(S[i] + S[j]) % <span class="number">256</span>]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        result += k</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">k</span>):</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        ret.append(k &amp; <span class="number">0xff</span>)</span><br><span class="line">        k &gt;&gt;= <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> ret[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    cipher[j] ^= key[j % <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">39</span>, <span class="number">3</span>):</span><br><span class="line">    cipher[j], cipher[j + <span class="number">1</span>], cipher[j + <span class="number">2</span>] = cipher[j + <span class="number">1</span>] ^ cipher[j + <span class="number">2</span>], cipher[j + <span class="number">1</span>] ^ cipher[j], cipher[j] ^ cipher[j + <span class="number">1</span>] ^ cipher[j + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (rc4_crypt(key, cipher))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;CISCN&#123;6654d84617f627c88846c172e0f4d46c&#125;\xec&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h1><p>不知道bc文件是什么，用 <code>file</code> 命令查看，发现是 <code>LLVM ir bitcode</code> 文件，上网搜索，使用 <code>clang -o baby_bc baby.bc</code> 搞成 <code>elf</code> 文件</p><p>拖入ida进行查看</p><p>首先对输入进行判断，分析输入的应该是长度是25的字符串，每个字符都在 <code>0-5</code> 之间</p><p>要拿到flag需要通过两个验证函数</p><p>第一个函数是将输入填入到map中，map中非零位输入应该为0，零位的输入不能为0</p><p>第二个函数是对map进行验证，分析后发现总共进行了如下验证：</p><ul><li>每行的数字不能相同</li><li>每列的数字不能相同</li><li>每行相邻两个数字的大小关系需要符合row矩阵的要求</li><li>每列相邻两个数字的大小关系需要符合col矩阵的要求</li></ul><p>知道要求后直接上z3约束求解器拿flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">flag = [Int(<span class="string">&quot;flag_%i&quot;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    s.add(flag[i] &gt; <span class="number">0</span>)</span><br><span class="line">    s.add(flag[i] &lt; <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">12</span>] == <span class="number">4</span>)</span><br><span class="line">s.add(flag[<span class="number">18</span>] == <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add_row = <span class="number">0</span></span><br><span class="line">    add_col = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        add_row += flag[i * <span class="number">5</span> + j]</span><br><span class="line">        add_col += flag[j * <span class="number">5</span> + i]</span><br><span class="line">    s.add(add_row == <span class="number">15</span>)</span><br><span class="line">    s.add(add_col == <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">5</span>] &gt; flag[<span class="number">6</span>])</span><br><span class="line">s.add(flag[<span class="number">20</span>] &gt; flag[<span class="number">21</span>])</span><br><span class="line">s.add(flag[<span class="number">3</span>] &gt; flag[<span class="number">4</span>])</span><br><span class="line">s.add(flag[<span class="number">13</span>] &gt; flag[<span class="number">14</span>])</span><br><span class="line">s.add(flag[<span class="number">22</span>] &gt; flag[<span class="number">23</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">10</span>] &lt; flag[<span class="number">11</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">2</span>] &gt; flag[<span class="number">7</span>])</span><br><span class="line">s.add(flag[<span class="number">4</span>] &gt; flag[<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">13</span>] &lt; flag[<span class="number">18</span>])</span><br><span class="line">s.add(flag[<span class="number">16</span>] &lt; flag[<span class="number">21</span>])</span><br><span class="line">s.add(flag[<span class="number">19</span>] &lt; flag[<span class="number">24</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> j == k:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s.add(flag[<span class="number">5</span> * i + j] != flag[<span class="number">5</span> * i + k])</span><br><span class="line">            s.add(flag[<span class="number">5</span> * j + i] != flag[<span class="number">5</span> * k + i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        <span class="built_in">print</span> (model[flag[i]].as_long().real, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nfinish&#x27;</span>)</span><br><span class="line"><span class="comment"># 1425353142354212153442315</span></span><br></pre></td></tr></table></figure><p>最后把两个地方改成 0 就行了</p><h1 id="little-evil"><a href="#little-evil" class="headerlink" title="little_evil"></a>little_evil</h1><h2 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h2><p>直接用ida直接打开会看到一个叫做”squashfs”，而且和ruby有关，但比赛的时候没有多想，然后就走远了</p><p><img data-src="J:\ctf-crack\ciscn2021\little_evil_re\珍贵截图.png" alt="珍贵截图"></p><p>放一张珍贵截图</p><p>后来得知正确方法需要先用binwalk分解一下，这里有个坑，需要自己手动装一个”squashfs”的插件</p><p>顺便补充一下什么是”squashfs”：基于Linux内核使用的压缩只读文件系统。难怪要用binwalk，沉思</p><h2 id="利用输出去混淆"><a href="#利用输出去混淆" class="headerlink" title="利用输出去混淆"></a>利用输出去混淆</h2><p>分解后翻一下目录，可以找到一个 <code>out.rb</code> 的文件</p><p>打开后发现是一个被严重混淆的脚本，大概长下面这样</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$l1Il=<span class="string">&quot;&quot;</span>;</span><br><span class="line">$l1lI=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">llIl</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|7; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1lll() $lI1lll=10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def llI1l() $lI1lll=$lI1lll|</span><span class="number">4</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lIlI</span><span class="params">()</span></span> $lI1lll=$lI1lll+<span class="number">3</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l111</span><span class="params">()</span></span> $lI1lll=$lI1lll%<span class="number">3</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lI1IlI</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|3; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def ll1l1() $lI1lll=$lI1lll*8; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1lI() $lI1lll=$lI1lll-3; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lI1lII() $lI1lll=$lI1lll%1; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIlIl() $lI1lll=$lI1lll&amp;10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIll() $lI1lll=$lI1lll-4; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lII1() $lI1lll=$lI1lll%2; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1III() $lI1lll=$lI1lll|</span><span class="number">1</span>; <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1l111</span><span class="params">()</span></span> $lI1lll=$lI1lll<span class="params">|5; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l1IIII() $lI1lll=$lI1lll%10; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l11I() $l1Il=$l1Il+$lI1lll.chr; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lIlll() $lI1lll=$lI1lll*9; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def l11IlI() $lI1lll=$lI1lll-8; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lI1I1() $lI1lll=$lI1lll+5; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def ll11lI() $lI1lll=$lI1lll&amp;9; <span class="keyword">end</span>;</span></span><br><span class="line"><span class="params">def lII1l1()</span></span><br><span class="line"><span class="params">    #send($l1Il[0,4], $l1Il[4,$l1Il.length]);</span></span><br><span class="line"><span class="params">    aFile=File.new(&quot;out2.rb&quot;, &quot;w&quot;);</span></span><br><span class="line"><span class="params">    aFile.syswrite($l1Il);</span></span><br><span class="line"><span class="params">    aFile.close;</span></span><br><span class="line"><span class="params"><span class="keyword">end</span>;</span></span><br></pre></td></tr></table></figure><p>最后一个函数里本来只有一个 <code>send</code> 方法，这个方法是执行第一个参数的函数，后面的参数都是这个函数的变量</p><p>这里跟着学长学习了一个针对解释性语言混淆的办法，就是直接输出这个send中的变量</p><p>输出之后还是一个相似的脚本，简单换一下行，长这样：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eval</span></span><br><span class="line">$llll=<span class="string">&quot;&quot;</span>;</span><br><span class="line">$llII=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1llI</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll1III()$l1lI1l=$l1lI1l%7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lllI()$l1lI1l=$l1lI1l/4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lIl1l()$l1lI1l=$l1lI1l-3; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1lll()$l1lI1l=$l1lI1l|</span><span class="number">10</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l11I1I</span><span class="params">()</span></span>$l1lI1l=<span class="number">10</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1l1</span><span class="params">()</span></span>$l1lI1l=$l1lI1l&amp;<span class="number">7</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1II</span><span class="params">()</span></span>$l1lI1l=$l1lI1l%<span class="number">8</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ll1I</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|8; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll11()$l1lI1l=$l1lI1l^6; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def ll1l1I()$l1lI1l=$l1lI1l|</span><span class="number">1</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lI1Il</span><span class="params">()</span></span>$l1lI1l=$l1lI1l<span class="params">|3; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def llI1I()$l1lI1l=$l1lI1l+6; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def llIl1()$l1lI1l=$l1lI1l*4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lI1ll()$l1lI1l=$l1lI1l*5; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1111()$l1lI1l=$l1lI1l^7; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1lII()$l1lI1l=$l1lI1l^4; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lIIl()$l1lI1l=$l1lI1l%5; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lII11()$l1lI1l=$l1lI1l+9; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def lI11I()$llll=$llll+$l1lI1l.chr; <span class="keyword">end</span>; </span></span><br><span class="line"><span class="params">def l1IlI()send($llll[0,4], $llll[4,$llll.length]); <span class="keyword">end</span>; </span></span><br></pre></td></tr></table></figure><p>一开始的 <code>eval</code> 就是 <code>send</code> 中调用的函数，可以分析出来后面的东西就是要用来执行的，因为这是解释性语言，直接输出就拿到源代码了</p><p>和刚才进行同样的操作，拿到第三份脚本</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> $_=$$/$$;@_=$_+$_;$-<span class="number">_</span>=$_-@_</span><br><span class="line">$__=-&gt;<span class="number">_</span>&#123;<span class="number">_</span>==[]<span class="params">||</span><span class="number">_</span>==<span class="string">&#x27;&#x27;</span>?$.<span class="symbol">:</span>$_+$__[<span class="number">_</span>[$_..$-<span class="number">_</span>]]&#125;</span><br><span class="line">@__=-&gt;<span class="number">_</span>,&amp;_<span class="number">_</span>&#123;<span class="number">_</span>==[]?[]<span class="symbol">:</span>[_<span class="number">_</span>[<span class="number">_</span>[$.]]]+@__[<span class="number">_</span>[$_..$-<span class="number">_</span>],&amp;_<span class="number">_</span>]&#125;</span><br><span class="line">$_____=-&gt;<span class="number">_</span>&#123;@__[[*<span class="number">_</span>],&amp;-&gt;_<span class="number">_</span>&#123;_<span class="number">_</span>[$.]&#125;]&#125;</span><br><span class="line">@_____=-&gt;<span class="number">_</span>&#123;@__[[*<span class="number">_</span>],&amp;-&gt;_<span class="number">_</span>&#123;_<span class="number">_</span>[$-<span class="number">_</span>]&#125;]&#125;</span><br><span class="line">$______=-&gt;<span class="number">_</span>&#123;__<span class="number">_</span>,_____<span class="number">_</span>=$_____[<span class="number">_</span>],@_____[<span class="number">_</span>];____<span class="number">_</span>=$__[__<span class="number">_</span>];___<span class="number">_</span>=&#123;&#125;;_<span class="number">_</span>=$.;(<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  ___<span class="number">_</span>[_____<span class="number">_</span>[_<span class="number">_</span>]]=__<span class="number">_</span>[_<span class="number">_</span>];(_<span class="number">_</span>+=$_)==____<span class="number">_</span> ?<span class="symbol">____:</span><span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">@______=-&gt;<span class="number">_</span>,_<span class="number">_</span>&#123;<span class="number">_</span>=[*<span class="number">_</span>]+[*_<span class="number">_</span>];___<span class="number">_</span>=$__[<span class="number">_</span>];__<span class="number">_</span>=&#123;&#125;;_<span class="number">_</span>=$.;(____<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  __<span class="number">_</span>[<span class="number">_</span>[_<span class="number">_</span>][$.]]=<span class="number">_</span>[_<span class="number">_</span>][$_];(_<span class="number">_</span>+=$_)==___<span class="number">_</span> ?<span class="symbol">___:</span>____<span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">$_______=-&gt;<span class="number">_</span>&#123;$___=[];@___=$__[<span class="number">_</span>];_<span class="number">_</span>=__<span class="number">_</span>=___<span class="number">_</span>=$.;$____,@____=&#123;&#125;,[]</span><br><span class="line">(____<span class="number">_</span>=-&gt;&#123;</span><br><span class="line">  <span class="number">_</span>[___<span class="number">_</span>]==<span class="string">&#x27;5&#x27;</span>?(@____&lt;&lt;___<span class="number">_</span>)<span class="symbol">:</span>$.</span><br><span class="line">  <span class="number">_</span>[___<span class="number">_</span>]==<span class="string">&#x27;6&#x27;</span>?($____[@____[$-<span class="number">_</span>]]=___<span class="number">_</span>;@____=@____[$...$.-@_])<span class="symbol">:</span>$.</span><br><span class="line">  (___<span class="number">_</span>+=$_)==@___?$.<span class="symbol">:_____[]</span>&#125;)[]</span><br><span class="line">$____=$____==&#123;&#125;?&#123;&#125;<span class="symbol">:</span>@______[$____,$______[$____]]</span><br><span class="line">(_____<span class="number">_</span>=-&gt;&#123;<span class="number">_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]+=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;1&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]-=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;2&#x27;</span>?($___[__<span class="number">_</span>]<span class="params">||</span>=$.;$___[__<span class="number">_</span>]=STDIN.getc.ord)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;3&#x27;</span><span class="string">?(</span>__<span class="number">_</span>+=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;4&#x27;</span><span class="string">?(</span>__<span class="number">_</span>-=$_)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;5&#x27;</span><span class="string">?(</span>_<span class="number">_</span>=($___[__<span class="number">_</span>]<span class="params">||</span>$.)==$.<span class="string">?$</span>___<span class="number">_</span>[_<span class="number">_</span>]<span class="symbol">:__</span>)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;6&#x27;</span><span class="string">?(</span>_<span class="number">_</span>=($___[__<span class="number">_</span>]<span class="params">||</span>$.)!=$.<span class="string">?$</span>___<span class="number">_</span>[_<span class="number">_</span>]<span class="symbol">:__</span>)<span class="symbol">:_</span>[_<span class="number">_</span>]==</span><br><span class="line"><span class="string">&#x27;7&#x27;</span>?($&gt;&lt;&lt;(<span class="string">&#x27;&#x27;</span>&lt;&lt;$___[__<span class="number">_</span>]))<span class="symbol">:</span>$.</span><br><span class="line">(_<span class="number">_</span>+=$_)==@___?<span class="symbol">_:</span>_____<span class="number">_</span>[]&#125;)[]&#125;</span><br><span class="line">$_______[<span class="string">&#x27;33516351...44516644&#x27;</span>];<span class="keyword">rescue</span> Exception;<span class="keyword">end</span> <span class="comment">#中间部分省略了</span></span><br></pre></td></tr></table></figure><p>这份脚本就很丑了，最后一长串的数字，让我自己来猜的话肯定会猜是一个虚拟机</p><p>然后一大堆 <code>?</code> 一看就是 <code>switch</code> 语句，后来细看才发现全是三元运算符，但也是 <code>switch</code> 的作用</p><p>于是将指令部分翻译成 python（只是熟悉一点而已）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] += global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] -= global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    global_3[tmp_3] ||= $.</span><br><span class="line">    global_3[tmp_3] = STDIN.getc.<span class="built_in">ord</span></span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">    tmp_3 += global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">    tmp_3 -= global_1</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (global_3[tmp_3] <span class="keyword">or</span> $.) == $.:</span><br><span class="line">        tmp_2 = global_4[tmp_2]</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (global_3[tmp_3] <span class="keyword">or</span> $.) != $.:</span><br><span class="line">        tmp_2 = global_4[tmp_2]</span><br><span class="line"><span class="keyword">if</span> _[tmp_2] == <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">    global_0&lt;&lt;(<span class="string">&#x27;&#x27;</span>.append(global_3[tmp_3]))</span><br></pre></td></tr></table></figure><p>因为是补题，所以提前知道是 brainfuck 语言，但还是尝试自己逆了一下</p><ul><li>tmp_3 是指针，操作3和4对应了指针+1 -1(&gt;和&lt;)</li><li>global_3 是指针指向的字节，操作0和1对应了字节的+1 -1(+和-)</li><li>操作2中含有获取输入，对应了获取输入操作(,)</li><li>操作7中含有&lt;&lt;，怀疑是输出，对应了输出操作(.)</li><li>5和6对应了跳转，猜测5是[，6是]</li></ul><p>之后就可以找个脚本翻译 brainfuck 了</p><p>我先用 python 将其转为了正常的 brainfuck 语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">finalop = <span class="string">&#x27;&#x27;</span></span><br><span class="line">base = <span class="string">&#x27;+-,&gt;&lt;[].&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> op: <span class="comment"># 那一串数字</span></span><br><span class="line">    finalop += (base[<span class="built_in">int</span>(c)])</span><br><span class="line"><span class="built_in">print</span> (finalop)</span><br></pre></td></tr></table></figure><p>然后找了个脚本，这是核心部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((c = getc(in)) != EOF) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>: </span><br><span class="line">            <span class="comment">// fprintf(out, &quot;\t\t++c;\n&quot;); </span></span><br><span class="line">            cur++; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>: </span><br><span class="line">            <span class="comment">// fprintf(out, &quot;\t\t--c;\n&quot;); </span></span><br><span class="line">            cur--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\t++a[%d];\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\t--a[%d];\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\tputchar(a[%d]);\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t\ta[%d] = getchar();\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\twhile (a[%d]) &#123;\n&quot;</span>, cur); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>: <span class="built_in">fprintf</span>(out, <span class="string">&quot;\t&#125;\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始随便找了个脚本就运行，然后尝试去看，但后来发现很多指针位置的变化，看着很累，于是让指针的变化在内部运行，对具体数做变化的时候直接打印指针的值就可以了</p><h2 id="Brainfuck-代码阅读"><a href="#Brainfuck-代码阅读" class="headerlink" title="Brainfuck 代码阅读"></a>Brainfuck 代码阅读</h2><p>接下来就是痛苦的 Brainfuck 代码阅读环节了，虽然代码已经有了最简单的美化，但看起来还是像混淆过的汇编。</p><p>自己做的时候是一点一点美化代码，然后阅读的。但最后找到验证函数才搞明白。</p><p>所以先去最下面找到验证函数，看到最下面有两个<code>putchar</code>，猜测就是通过验证了，于是找进入的条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();</span><br><span class="line">       <span class="comment">// several code</span></span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// several code</span></span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">1</span>]) &#123;</span><br><span class="line">++a[<span class="number">2</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">--a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// several code</span></span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line"><span class="built_in">putchar</span>(a[<span class="number">4</span>]);</span><br><span class="line"><span class="comment">// several code</span></span><br><span class="line"><span class="built_in">putchar</span>(a[<span class="number">4</span>]);</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入的条件是要 <code>a[2] &gt; 0</code>，网上看就知道需要让 <code>a[1] &gt; 0</code>，所以在编辑器里选中一下，就能找到所有 <code>a[1]</code> 出现的地方（这就体现出这种输出方法的优势了）</p><p>然后发现 <code>a[1]</code> 会在一开始赋值为 <code>1</code>，但一旦进入 <code>while(a[2])</code> 这种大循环，就会出现 <code>a[1]=0</code> 的赋值，所以我们的目标就是在进入循环前让 <code>a[2]==0</code></p><p>查看一下从 <code>getchar</code> 到 <code>while</code> 之间的代码，把重复出现的 <code>++</code> 都合并一下</p><p>这里以第一次 <code>getchar</code> 的代码为例，（剩下几次形式几乎完全一致，就是参数有点小变化而已）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">3</span>]) &#123;</span><br><span class="line">--a[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">++a[<span class="number">3</span>];</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">3</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">--a[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">5</span>]) &#123;</span><br><span class="line">--a[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">1</span>]) &#123;</span><br><span class="line">--a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;</span><br><span class="line">++a[<span class="number">5</span>];</span><br><span class="line">++a[<span class="number">1</span>];</span><br><span class="line">--a[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">5</span>]) &#123;</span><br><span class="line">++a[<span class="number">4</span>];</span><br><span class="line">--a[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[<span class="number">2</span>]) &#123;</span><br><span class="line">--a[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>美化一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] = getchar();a[<span class="number">3</span>] = <span class="number">0</span>;a[<span class="number">4</span>] = <span class="number">7</span>;<span class="keyword">while</span> (a[<span class="number">4</span>]) &#123;a[<span class="number">3</span>] += <span class="number">11</span>--a[<span class="number">4</span>];&#125; <span class="comment">// a[3] = a[4] * 11 = 77        a[2] -= a[3]while (a[2]) &#123;        a[4] = 0;        a[5] = 0;        a[1] = 0;        a[2] = 0;&#125;a[2] = 0;</span></span><br></pre></td></tr></table></figure><p>简单地说就是会生成一个数字，然后用 <code>a[2]</code> 去减，如果结果为 <code>0</code>，就通过验证了，对所有的输入都搞一次，就能拿到五个输入字符 <code>M5Ya7</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做这道题的时候，最大的问题就是没有搜索足够的资料，如果第一步想出来的话的，以比赛的时间，应该还是有机会做出来这道题的，毕竟后续的工作都是体力活，一点一点做下去应该就差不多能出来了</p><p>不过不管怎么说，补题的过程还是学到了很多东西的，比如“病毒式”混淆可以直接用输出来解，brainfuck的小型解释器怎么看，以及最后直接输出索引地址，做题经验++</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;完成：glass, baby_rc, little_evil&lt;/p&gt;
&lt;p&gt;未完成：gift, HMI&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>津门杯 GoodRE writeup</title>
    <link href="https://s0uthwood.github.io/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AF-GoodRE-writeup/"/>
    <id>https://s0uthwood.github.io/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AF-GoodRE-writeup/</id>
    <published>2021-05-09T18:32:59.000Z</published>
    <updated>2021-05-09T18:39:32.686Z</updated>
    
    <content type="html"><![CDATA[<p>和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先拖到 ida 里进行静态分析</p><p>查看main函数，把变量定义和初始化删了，并将 <code>cin</code> 的东西命名为了 <code>input</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;&gt;&gt; &quot;</span>, a3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, input);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) == <span class="number">64</span> ) &#123;</span><br><span class="line">    v3 = input;</span><br><span class="line">    v4 = &amp;unk_55A06D2D0020;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      v6 = hexstr2int(v3, <span class="number">8</span>);</span><br><span class="line">      v7 = v14;</span><br><span class="line">      sub_55A06D2CC408(&amp;v14[v5], v6);</span><br><span class="line">      sub_55A06D2CC408(&amp;v18[v5], <span class="number">17</span>);</span><br><span class="line">      v8 = v19;</span><br><span class="line">      sub_55A06D2CC408(&amp;v19[v5], *v4);</span><br><span class="line">      ++v3;</span><br><span class="line">      ++v4;</span><br><span class="line">      v5 += <span class="number">36L</span>L;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( v3 != v21 );</span><br><span class="line">    sub_55A06D2CCB30(v14, v18, v9);</span><br><span class="line">    sub_55A06D2CCB30(v15, v18, v10);</span><br><span class="line">    sub_55A06D2CCB30(v16, v18, v11);</span><br><span class="line">    sub_55A06D2CCB30(v17, v18, v12);</span><br><span class="line">    <span class="keyword">while</span> ( !sub_55A06D2CCADC(v7, v8) ) &#123;</span><br><span class="line">      v7 += <span class="number">36</span>;</span><br><span class="line">      v8 += <span class="number">36</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 == v18 ) &#123;</span><br><span class="line">        __printf_chk(<span class="number">1L</span>L, <span class="string">&quot;flag&#123;%s&#125;\n&quot;</span>, input);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单查看一下，发现输入长度为64，然后 <code>do while</code> 看起来是进行初始化，后面的四个连续函数应该是加密</p><p>同时确定这个应该是算法题，不涉及混淆之类的东西</p><p>于是查看一下 <code>v6=</code> 的那个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">hexstr2int</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span> </span>&#123;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(a0123456789abcd) + <span class="number">1</span>;             <span class="comment">// 17</span></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  v3 = v2 - <span class="number">1</span>;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  LODWORD(result) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0L</span>L; a0123456789abcd[i] != *v4; ++i ) &#123;<span class="comment">// input是0-f</span></span><br><span class="line">      <span class="keyword">if</span> ( i == v2 - <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    result = (i + (v2 - <span class="number">1</span>) * result);           <span class="comment">// input转成int</span></span><br><span class="line">    <span class="keyword">if</span> ( ++v4 == &amp;a1[a2 - <span class="number">1</span> + <span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现应该是将输入转换成了 <code>int</code>，而且输入的字符必须得在 <code>0123456789ABCDEF</code> 中</p><p>然后看一眼重复出现三次的 <code>sub_55A06D2CCB30</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_55A06D2CC408</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span> </span>&#123;</span><br><span class="line">  *(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  *(a1 + <span class="number">4</span>) = a2;</span><br><span class="line">  v2 = <span class="number">4L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line">    v3 = v2 - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(a1 + v2 + <span class="number">3</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !--v2 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = v2;</span><br><span class="line">LABEL_4:</span><br><span class="line">  *a1 = v3;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来就是简单的赋值，<code>a1</code> 的第一部分填写长度，第二部分存 <code>a2</code></p><p>初始化部分应该可以先不管了，去看加密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_55A06D2CCB30</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span> </span>&#123;</span><br><span class="line">  sub_55A06D2CCA13(v5, a1);</span><br><span class="line">  sub_55A06D2CCA13(v6, (a1 + <span class="number">36</span>));</span><br><span class="line">  sub_55A06D2CC408(v7, <span class="number">0</span>);</span><br><span class="line">  sub_55A06D2CC408(v8, <span class="number">0x830A5376</span>);</span><br><span class="line">  sub_55A06D2CC408(v9, <span class="number">0x1D3D2ACF</span>);</span><br><span class="line">  sub_55A06D2CC667(v10, v9, v8);                <span class="comment">// v10=delta=0x9e3779b9</span></span><br><span class="line">  sub_55A06D2CCA13(v11, a2);</span><br><span class="line">  sub_55A06D2CCA13(v12, (a2 + <span class="number">36</span>));</span><br><span class="line">  sub_55A06D2CCA13(v13, (a2 + <span class="number">72</span>));</span><br><span class="line">  sub_55A06D2CCA13(v14, (a2 + <span class="number">108</span>));</span><br><span class="line">  v3 = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    sub_55A06D2CC2E9(v7, v7, v10);              <span class="comment">// sum+=delta</span></span><br><span class="line">    left_rot(v15, v6, <span class="number">4</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v15, v15, v11);            <span class="comment">// v15+v11</span></span><br><span class="line">    sub_55A06D2CC2E9(v16, v6, v7);              <span class="comment">// sum+plain</span></span><br><span class="line">    right_rot(v17, v6, <span class="number">5</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v17, v17, v12);            <span class="comment">// key+plain</span></span><br><span class="line">    sub_55A06D2CC667(v15, v15, v16);</span><br><span class="line">    sub_55A06D2CC667(v15, v15, v17);</span><br><span class="line">    sub_55A06D2CC2E9(v5, v5, v15);</span><br><span class="line">    left_rot(v18, v5, <span class="number">4</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v18, v18, v13);</span><br><span class="line">    sub_55A06D2CC2E9(v19, v5, v7);</span><br><span class="line">    right_rot(v20, v5, <span class="number">5</span>);</span><br><span class="line">    sub_55A06D2CC2E9(v20, v20, v14);</span><br><span class="line">    sub_55A06D2CC667(v18, v18, v19);</span><br><span class="line">    sub_55A06D2CC667(v18, v18, v20);</span><br><span class="line">    sub_55A06D2CC2E9(v6, v6, v18);</span><br><span class="line">    --v3;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( v3 );</span><br><span class="line">  sub_55A06D2CCA13(a1, v5);</span><br><span class="line">  sub_55A06D2CCA13((a1 + <span class="number">36</span>), v6);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v21;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始看到一大串 <code>sub_</code> 还以为是 AES 之类的（毕竟之前做过一道类似的），然后看了一下重要的参数</p><p>64bit明文，128bit密钥，32轮加密</p><p>看起来很像tea家族的算法，但不是很确定。因为懒得详细看每个函数了，所以动态调试一下，做个黑盒测试</p><p>调试之后发现 <code>0x830A5376</code> 和 <code>0x1D3D2ACF</code> 其实是用来算 <code>delta</code> 的，算出来 <code>v10=0x9e3779b9</code>，这就肯定是tea家族了</p><p>另外，动调的时候发现这里应该都是用的结构体，所以每个小的加法都是单独的函数给出的，但好像用上的只有结构体的前八个字节，后面的字节有什么用还不太清楚</p><p>然后具体往下看，看到循环中的前几个分别是 <code>sum+=delta</code>，<code>v6&lt;&lt;4</code>，<code>(v6&lt;&lt;4)+k0</code>，<code>sum+p0</code>，<code>v6&gt;&gt;5</code>，<code>k1+p0</code>。和网上的三种 TEA 加密比对了一下，发现竟然就是最简单的 TEA 加密，一开始看这么多函数还以为是 XTEA 呢</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>密钥就是主函数中初始化的几个 <code>0x11</code>，密文就是最后用来 <code>cmp</code> 的字符串（找结构体对应的那个字符数组就行），于是找了个脚本，直接解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0xC6EF3720</span>, i;</span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x79AE1A3B</span>, <span class="number">0X596080D3</span>&#125;, k[<span class="number">4</span>] = &#123;<span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>&#125;;</span><br><span class="line">    decrypt(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%X%X&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把所有密文全扔进去算结果，就能拿到 flag 了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一眼看到这个题就感觉能做出来，果然如此</p><p>深刻体会到了动调进行黑盒测试的重要性，可以大幅度加快做题速度，能猜出来就不要花时间看</p><p>其实这题有点可惜，本来能抢到三血的，结果忘了大小写的问题，脚本算出来后本地测试一直是 <code>error</code>，最后还是大佬队友发现的，然后就过了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>hmg2021 RSA Attack writeup</title>
    <link href="https://s0uthwood.github.io/2021/04/13/hmg2021-RSA-Attack-writeup/"/>
    <id>https://s0uthwood.github.io/2021/04/13/hmg2021-RSA-Attack-writeup/</id>
    <published>2021-04-13T13:39:43.000Z</published>
    <updated>2021-04-13T13:41:34.844Z</updated>
    
    <content type="html"><![CDATA[<p>Re全程白给了，最后转战crypto，压哨提交上了</p><a id="more"></a><p>已知一个$1024$ 位的 $p1$，$p2$ 比 $p1$ 稍小，根据代码知道 $p3\equiv p2!\pmod{p1}$</p><p>根据Wilson定理，$n$ 为质数时有 $(n-1)!\equiv -1\pmod{n}$，所以 $p2! \prod\limits_{i=p2+1}^{p1-2}i\equiv 1\pmod{p1}$，所以可以计算出 $p2+1$ 乘到 $p1-1$ 的结果，然后取模拟并调用 <code>sympy</code> 库即可得到 $p3$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod</span><br><span class="line">p1=<span class="number">172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649936031</span></span><br><span class="line">p2=<span class="number">172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649902034</span></span><br><span class="line"></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p2 + <span class="number">1</span>, p1 - <span class="number">1</span>):</span><br><span class="line">    res = res * i % p1</span><br><span class="line">res = invmod(res, p1)</span><br><span class="line">p3 = sympy.nextprime(res)</span><br><span class="line">p = p3 &gt;&gt; <span class="number">50</span> &lt;&lt; <span class="number">50</span></span><br></pre></td></tr></table></figure><p>得到的 $p$ 是最终 RSA 加密用的 $P$ 的高位，因此可以使用 Factoring with High Bits Known 攻击，用 sage 构造如下攻击脚本（网上找的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722c000000000000</span></span><br><span class="line">N = <span class="number">0xe27e847b1cece6ad3d8a35c27022d94cc14016f9550d41b87b85f946edf0a1c01d8c79a663244143550cfce88038bf29d65070d021991455e4570ea57ea1effc1cf380d572473dc6ea0dc150c431761181e66c578eaeebf156c445d3b6141dda961aa467f4d2c811859534027e5b9e67eb4db051c82602208cfe92674013aafa5b437ae404876ececc2f453bb16734adccc5fb87b16e980e52484f6b9f4bdeb99f2e7dc606bb65628e3f62c7df11abd553ffc6b95d3dda592fa81df5e584687864de702d10669e3aac75ad9c6284b98b44140f347307243b2485f59fa5c3f0eaeaf0addade803f2f09cd4c77f27d672756b9cc62a6325247d8608390e761dc91</span></span><br><span class="line">pbits = p.nbits()</span><br><span class="line">kbits = <span class="number">50</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = x + p</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line">print( <span class="string">&quot;x: %s&quot;</span> %<span class="built_in">hex</span>(<span class="built_in">int</span>(x0)))</span><br><span class="line">p = p+x0</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;p: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(p)))</span><br><span class="line"><span class="keyword">assert</span> N % p == <span class="number">0</span></span><br><span class="line">q = N/<span class="built_in">int</span>(p)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;q: &quot;</span>, <span class="built_in">hex</span>(<span class="built_in">int</span>(q)))</span><br></pre></td></tr></table></figure><p>得到 RSA 的 $P$ 和 $Q$，最终构建解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, n2s</span><br><span class="line">p = <span class="number">0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722fbcdcffc1a2ef</span></span><br><span class="line">q = <span class="number">0xfced19c7532be88658aaa5e9566f5274b9aefa4c5d21582a24cc48c70b5e3c05c17eb6f85b4732d57bdc0288d1f548b92f4f13a6f7b07d07a01173cefb06fb8f2e3591e5d518d1584a8e27331a4e769eae98537fe1fb380ee804574d98188a4c327c8a1d180ee44b9148d63a07216b40e711970c9f1ea097bfbecfc3b52e787f</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> (n2s(c, invmod(e, phi_n), N))</span><br></pre></td></tr></table></figure><p>即可得到flag: <code>flag&#123;w0_x1hu1n_y0u_b5st&#125;</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Re全程白给了，最后转战crypto，压哨提交上了&lt;/p&gt;</summary>
    
    
    
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>FlareOn reverse writeups</title>
    <link href="https://s0uthwood.github.io/2021/04/09/FlareOn-reverse-writeups/"/>
    <id>https://s0uthwood.github.io/2021/04/09/FlareOn-reverse-writeups/</id>
    <published>2021-04-08T17:04:16.000Z</published>
    <updated>2021-04-08T17:17:56.370Z</updated>
    
    <content type="html"><![CDATA[<p>题目都是从BUUOJ上找的</p><a id="more"></a><h1 id="Chanllenge1"><a href="#Chanllenge1" class="headerlink" title="Chanllenge1"></a>Chanllenge1</h1><p>一个修改了 table 的 Base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">fake_base = <span class="string">&#x27;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&#x27;</span></span><br><span class="line">true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&#x27;</span></span><br><span class="line">good_cipher = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    good_cipher += true_base[fake_base.index(c)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (good_cipher)</span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(good_cipher))</span><br></pre></td></tr></table></figure><h1 id="Bob-Doge"><a href="#Bob-Doge" class="headerlink" title="Bob Doge"></a>Bob Doge</h1><p>先运行测试一下，发现点击 <code>Decode</code> 之后是乱码</p><p>用 <code>dnSpy</code> 打开，找到 <code>Main</code> 函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Application.EnableVisualStyles();</span><br><span class="line">Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">Application.Run(<span class="keyword">new</span> Form1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现只新建了一个 <code>Form1</code></p><p>进入 <code>Form1</code>，找到带有 <code>Click</code> 的函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnDecode_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pbRoge.Image = Resources.bob_roge;</span><br><span class="line"><span class="built_in">byte</span>[] dat_secret = Resources.dat_secret;</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">byte</span> b <span class="keyword">in</span> dat_secret)</span><br><span class="line">&#123;</span><br><span class="line">text += (<span class="built_in">char</span>)((b &gt;&gt; <span class="number">4</span> | ((<span class="built_in">int</span>)b &lt;&lt; <span class="number">4</span> &amp; <span class="number">240</span>)) ^ <span class="number">41</span>);</span><br><span class="line">&#125;</span><br><span class="line">text += <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> text2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; text.Length; j += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">text2 += text[j + <span class="number">1</span>];</span><br><span class="line">text2 += text[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> text3 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; text2.Length; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">char</span> c = text2[k];</span><br><span class="line">text3 += (<span class="built_in">char</span>)((<span class="built_in">byte</span>)text2[k] ^ <span class="number">102</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.lbl_title.Text = text3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是从一个 <code>Resources</code> 的地方调用来了一个 <code>dat_secret</code>。但找不到这个地方。</p><p>于是考虑进行动态调试。</p><p>打上断点后调试，点击 <code>Decode</code> 按钮，进入如下页面</p><p><img data-src="flag.png" alt="flag"></p><p>一开始以为最后的 <code>text3</code> 是 <code>flag</code>，结果看到 <code>text</code> 变量长得就很好看，符合 FlareOn 的 flag 的特征，于是直接提交试试，发现通过。</p><h1 id="UltimateMinesweeper"><a href="#UltimateMinesweeper" class="headerlink" title="UltimateMinesweeper"></a>UltimateMinesweeper</h1><p>运行软件测试一下，发现是一个 $30\times 30$ 的扫雷，只有三个格子不是雷。</p><p>exeinfo发现是 <code>.NET</code> 文件，因此拖到 <code>dnSpy</code> 中</p><p>由于是面向对象代码，不太好分析，所以进行动态调试，在生成完扫雷界面后停下，查看内存数据，发现在 <code>mineField.MinesPresent</code> 中存有雷的位置。</p><p><img data-src="mineinmemory.png" alt="mineinmemory"></p><p>先尝试直接手动把雷扔到前三个，然后运行试一下，发现：</p><ul><li>二元数组是先竖后横</li><li>最后出现的结果是乱码</li></ul><p>因此简单看一下最后的生成函数</p><p>寻找 <code>SuccessPopup</code> 的调用</p><p>发现 <code>new SuccessPopup(this.GetKey(this.RevealedCells)).ShowDialog();</code></p><p>因此找到这个方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetKey</span>(<span class="params">List&lt;uint&gt; revealedCells</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">revealedCells.Sort();</span><br><span class="line">Random random = <span class="keyword">new</span> Random(Convert.ToInt32(revealedCells[<span class="number">0</span>] &lt;&lt; <span class="number">20</span> | revealedCells[<span class="number">1</span>] &lt;&lt; <span class="number">10</span> | revealedCells[<span class="number">2</span>]));</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">byte</span>[] array2 = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">245</span>,</span><br><span class="line"><span class="number">75</span>,</span><br><span class="line"><span class="number">65</span>,</span><br><span class="line"><span class="number">142</span>,</span><br><span class="line"><span class="number">68</span>,</span><br><span class="line"><span class="number">71</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">185</span>,</span><br><span class="line"><span class="number">74</span>,</span><br><span class="line"><span class="number">127</span>,</span><br><span class="line"><span class="number">62</span>,</span><br><span class="line"><span class="number">130</span>,</span><br><span class="line"><span class="number">231</span>,</span><br><span class="line"><span class="number">129</span>,</span><br><span class="line"><span class="number">254</span>,</span><br><span class="line"><span class="number">243</span>,</span><br><span class="line"><span class="number">28</span>,</span><br><span class="line"><span class="number">58</span>,</span><br><span class="line"><span class="number">103</span>,</span><br><span class="line"><span class="number">179</span>,</span><br><span class="line"><span class="number">60</span>,</span><br><span class="line"><span class="number">91</span>,</span><br><span class="line"><span class="number">195</span>,</span><br><span class="line"><span class="number">215</span>,</span><br><span class="line"><span class="number">102</span>,</span><br><span class="line"><span class="number">145</span>,</span><br><span class="line"><span class="number">154</span>,</span><br><span class="line"><span class="number">27</span>,</span><br><span class="line"><span class="number">57</span>,</span><br><span class="line"><span class="number">231</span>,</span><br><span class="line"><span class="number">241</span>,</span><br><span class="line"><span class="number">86</span></span><br><span class="line">&#125;;</span><br><span class="line">random.NextBytes(array);</span><br><span class="line">uint num = <span class="number">0U</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="built_in">ulong</span>)num &lt; (<span class="built_in">ulong</span>)((<span class="built_in">long</span>)array2.Length))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] array3 = array2;</span><br><span class="line">uint num2 = num;</span><br><span class="line">array3[(<span class="built_in">int</span>)num2] = (array3[(<span class="built_in">int</span>)num2] ^ array[(<span class="built_in">int</span>)num]);</span><br><span class="line">num += <span class="number">1U</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Encoding.ASCII.GetString(array2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>似乎最后的结果和扫雷时点击的位置也有关系，所以不能手动修改雷的位置</p><p>那就找到三个 <code>False</code> 并记录下来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7 20</span><br><span class="line">28 7</span><br><span class="line">24 28</span><br></pre></td></tr></table></figure><p>运行并点击这三个位置</p><p><img data-src="whereismine.png" alt="whereismine"></p><p>最后弹出 flag</p><p><img data-src="thisisflag.png" alt="thisisflag"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目都是从BUUOJ上找的&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>GWCTF2019 re3 writeup</title>
    <link href="https://s0uthwood.github.io/2021/04/08/GWCTF2019-re3-writeup/"/>
    <id>https://s0uthwood.github.io/2021/04/08/GWCTF2019-re3-writeup/</id>
    <published>2021-04-08T14:36:12.000Z</published>
    <updated>2021-04-08T17:22:36.312Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><p>下午在上课的时候写了个 AES 加密，晚上正好遇到，立马认出来了，于是赶紧把解密部分写完，用自己的代码跑出来了，爽到。</p><a id="more"></a><h1 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h1><p>首先通过关键字符串 <code>Wrong</code> 进入 <code>main</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%39s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(s) != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  mprotect(&amp;dword_400000, <span class="number">0xF000</span>uLL, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">223</span>; ++i )</span><br><span class="line">    *((_BYTE *)sub_402219 + i) ^= <span class="number">0x99</span>u;</span><br><span class="line">  sub_40207B((__int64)&amp;unk_603170);</span><br><span class="line">  sub_402219();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码，发现先是输入一个长度为32的字符串</p><p>随后对一个奇怪的地址执行了一个函数，但这个地址和输入应该没有关系，可以暂时不管</p><p>注意到有个 <code>for</code> 循环对某一个地址的值做了个异或，最后又调用了这个地址，这是简单且经典的 SMC</p><p>用 idapython patch 一下，用运行脚本功能，由于长度较短，直接在ida中手写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="number">0x402219</span></span><br><span class="line">end = start + <span class="number">223</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">    patch_byte(i, get_wide_byte(i) ^ <span class="number">0x99</span>)</span><br></pre></td></tr></table></figure><p>运行完后进入这个地址，好像不能在 <code>402219</code> 处新建函数，只能在 <code>40221A</code> 处按 p 键新建函数，F5 查看这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_40221A</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-D8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">200</span>]; <span class="comment">// [rsp+20h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+E8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_400A71((__int64)v4, (__int64)&amp;unk_603170);<span class="comment">// 经典密钥生成</span></span><br><span class="line">  sub_40196E((__int64)v4, a1);                  <span class="comment">// 这tm是AES</span></span><br><span class="line">  sub_40196E((__int64)v4, a1 + <span class="number">16</span>);</span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(i + a1) != byte_6030A0[i] )</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的 <code>byte_6030A0</code> 显然是加密结果的校验了</p><p>上面有两个函数 <code>sub_400A71</code> 和 <code>sub_40196E</code>，<code>400A71</code> 调用了之前出现的 <code>603170</code> 猜测是一个密钥，<code>40196E</code> 使用了两次，且分别是对输入的前一半与后一半的操作，猜测是加密函数。密钥生成和输入无关，完全可以通过动态调试得到结果，所以查看加密函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_401828</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 i; <span class="comment">// [rsp+1Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  sub_400B0A(<span class="number">0L</span>L, a1, a2);                      <span class="comment">// 这是aes哦</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">9u</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_400BAC(a1);</span><br><span class="line">    sub_400C1F(a1);</span><br><span class="line">    sub_400D27(a1);</span><br><span class="line">    sub_400B0A(i, a1, a2);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_400BAC(a1);</span><br><span class="line">  sub_400C1F(a1);</span><br><span class="line">  <span class="keyword">return</span> sub_400B0A(<span class="number">10L</span>L, a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始被各个函数吓一跳，但点到某个函数里发现好像是 $4\times 4$ 的一个方阵，又发现某些函数重复出现的规则和 AES 很像，于是推测这个是 AES 加密算法，稍微看了下具体的函数实现，应该没有大问题，于是着手解密了。</p><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>首先动态调试拿到密钥</p><p>直接步过这句代码： <code>sub_40207B((__int64)&amp;unk_603170);</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> b *0x4021e4</span></span><br><span class="line">Breakpoint 2 at 0x4021e4</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> c</span></span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> n</span></span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> x/50x 0x603170</span></span><br><span class="line">0x603170:       0xcb    0x8d    0x49    0x35    0x21    0xb4    0x7a    0x4c</span><br><span class="line">0x603178:       0xc1    0xae    0x7e    0x62    0x22    0x92    0x66    0xce</span><br><span class="line">0x603180:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure><p>拿到密钥</p><p>随后直接到 ida 相应地址中取出密文</p><p>用之前写过的 AES 脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_aes</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"></span><br><span class="line">key     = <span class="number">0xcb8d493521b47a4cc1ae7e62229266ce</span></span><br><span class="line">cipher1 = <span class="number">0xBC0AADC0147C5ECCE0B140BC9C51D52B</span></span><br><span class="line">cipher2 = <span class="number">0x46B2B9434DE5324BAD7FB4B39CDB4B5B</span></span><br><span class="line"></span><br><span class="line">print(n2s(my_aes.aes_encrypt(cipher1, key)), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(n2s(my_aes.aes_encrypt(cipher2, key)))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;flag&#123;924a9ab2163&#x27;</span><span class="string">b&#x27;d390410d0a1f670&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>得到 flag</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;下午在上课的时候写了个 AES 加密，晚上正好遇到，立马认出来了，于是赶紧把解密部分写完，用自己的代码跑出来了，爽到。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>高校战役 re 前两题 writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/31/%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9-re-%E5%89%8D%E4%B8%A4%E9%A2%98-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/31/%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9-re-%E5%89%8D%E4%B8%A4%E9%A2%98-writeups/</id>
    <published>2021-03-31T12:33:02.000Z</published>
    <updated>2021-03-31T12:41:15.625Z</updated>
    
    <content type="html"><![CDATA[<p>被学长安利的比赛</p><a id="more"></a><h1 id="cycle-graph"><a href="#cycle-graph" class="headerlink" title="cycle graph"></a>cycle graph</h1><h2 id="逆向代码"><a href="#逆向代码" class="headerlink" title="逆向代码"></a>逆向代码</h2><p>根据提示，这是一道纯算法题，拖到 ida 中，根据关键字符串定位到关键函数。查看核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dword_403370 = <span class="number">0</span>;</span><br><span class="line">v1 = &amp;unk_403384;</span><br><span class="line">byte_403374 = <span class="number">48</span>;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">dword_403378 = (<span class="keyword">int</span>)&amp;unk_403380;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v3 = dword_402178[v2];</span><br><span class="line">  ++v2;</span><br><span class="line">  *(v1 - <span class="number">1</span>) = v3;</span><br><span class="line">  *v1 = (<span class="keyword">char</span> *)&amp;unk_403380 + <span class="number">12</span> * dword_402274[v2];</span><br><span class="line">  v1[<span class="number">1</span>] = (<span class="keyword">char</span> *)&amp;unk_403380 + <span class="number">12</span> * dword_4021F4[v2];</span><br><span class="line">  v1 += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v1 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)&amp;unk_403504 );</span><br></pre></td></tr></table></figure><p>上面的代码是主函数开头的初始化部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">sub_401020(<span class="string">&quot;You need a flag to get out of this:\n&quot;</span>, a1);</span><br><span class="line">scan(<span class="string">&quot;%s&quot;</span>, &amp;input);</span><br><span class="line">v4 = dword_403370;                            <span class="comment">// 0</span></span><br><span class="line">v5 = byte_403374;                             <span class="comment">// 48</span></span><br><span class="line">v6 = <span class="number">5</span>;</span><br><span class="line">v7 = dword_403378;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v11 = *(&amp;input + v6);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)v7 + v5 == v11 )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 - *(_DWORD *)v7 != v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401020(<span class="string">&quot;This is not flag~\n&quot;</span>, v10);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = *(&amp;input + v6);</span><br><span class="line">  ++v4;</span><br><span class="line">  ++v6;</span><br><span class="line">  byte_403374 = v5;</span><br><span class="line">  dword_403378 = v7;</span><br><span class="line">  dword_403370 = v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v6 &lt; <span class="number">21</span> );</span><br></pre></td></tr></table></figure><p>上面的代码是根据输入进行的一系列操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( input != <span class="string">&#x27;f&#x27;</span> || v13 != <span class="string">&#x27;l&#x27;</span> || v14 != <span class="string">&#x27;a&#x27;</span> || v15 != <span class="string">&#x27;g&#x27;</span> || v16 != <span class="string">&#x27;&#123;&#x27;</span> || v17 != <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;illegal input~\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">16</span> || (_UNKNOWN *)v7 != &amp;unk_4034F4 )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;This is not flag~\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v8 = <span class="string">&quot;Congratulations!!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub_401020(v8, v11);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>上面的代码就是最后的验证环节</p><p>一开始尝试直接看代码，发现自己被绕进去了，完全不知道各个地址是什么东西，所以考虑通过动态调试来得到初始化后的结果</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>直接拖到 x32dbg 中，在第一个输出的字符串前面打上断点，然后运行到断点的位置</p><p>分析了一下初始化部分，认为关键的内存部分应该是从 <code>403370</code> 开始一直到 <code>403540</code> 这部分</p><p>于是找到 <code>3370</code> ，右键选择内存窗口找到地址</p><p>鉴于数据量不大，直接手dump下来就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">00C43370  00 00 00 00 30 00 00 00 80 33 C4 00 00 00 00 00  ....0....3Ä.....  </span><br><span class="line">00C43380  34 00 00 00 98 33 C4 00 8C 33 C4 00 02 00 00 00  4....3Ä..3Ä.....  </span><br><span class="line">00C43390  98 33 C4 00 E0 33 C4 00 2C 00 00 00 8C 33 C4 00  .3Ä.à3Ä.,....3Ä.  </span><br><span class="line">00C433A0  D4 33 C4 00 2A 00 00 00 58 34 C4 00 94 34 C4 00  Ô3Ä.*...X4Ä..4Ä.  </span><br><span class="line">00C433B0  06 00 00 00 D4 33 C4 00 EC 33 C4 00 2A 00 00 00  ....Ô3Ä.ì3Ä.*...  </span><br><span class="line">00C433C0  98 33 C4 00 64 34 C4 00 2F 00 00 00 B8 34 C4 00  .3Ä.d4Ä.&#x2F;...¸4Ä.  </span><br><span class="line">00C433D0  F4 34 C4 00 2A 00 00 00 1C 34 C4 00 94 34 C4 00  ô4Ä.*....4Ä..4Ä.  </span><br><span class="line">00C433E0  33 00 00 00 B0 33 C4 00 EC 33 C4 00 03 00 00 00  3...°3Ä.ì3Ä.....  </span><br><span class="line">00C433F0  F8 33 C4 00 1C 34 C4 00 02 00 00 00 B0 33 C4 00  ø3Ä..4Ä.....°3Ä.  </span><br><span class="line">00C43400  10 34 C4 00 32 00 00 00 7C 34 C4 00 DC 34 C4 00  .4Ä.2...|4Ä.Ü4Ä.  </span><br><span class="line">00C43410  32 00 00 00 28 34 C4 00 F8 33 C4 00 32 00 00 00  2...(4Ä.ø3Ä.2...  </span><br><span class="line">00C43420  8C 33 C4 00 A0 34 C4 00 30 00 00 00 80 33 C4 00  .3Ä. 4Ä.0....3Ä.  </span><br><span class="line">00C43430  EC 33 C4 00 03 00 00 00 28 34 C4 00 A0 34 C4 00  ì3Ä.....(4Ä. 4Ä.  </span><br><span class="line">00C43440  01 00 00 00 BC 33 C4 00 AC 34 C4 00 32 00 00 00  ....¼3Ä.¬4Ä.2...  </span><br><span class="line">00C43450  D4 33 C4 00 EC 33 C4 00 2B 00 00 00 D0 34 C4 00  Ô3Ä.ì3Ä.+...Ð4Ä.  </span><br><span class="line">00C43460  B8 34 C4 00 02 00 00 00 10 34 C4 00 A4 33 C4 00  ¸4Ä......4Ä.¤3Ä.  </span><br><span class="line">00C43470  2E 00 00 00 D0 34 C4 00 88 34 C4 00 01 00 00 00  ....Ð4Ä..4Ä.....  </span><br><span class="line">00C43480  34 34 C4 00 C8 33 C4 00 02 00 00 00 34 34 C4 00  44Ä.È3Ä.....44Ä.  </span><br><span class="line">00C43490  4C 34 C4 00 2D 00 00 00 98 33 C4 00 1C 34 C4 00  L4Ä.-....3Ä..4Ä.  </span><br><span class="line">00C434A0  32 00 00 00 40 34 C4 00 D4 33 C4 00 04 00 00 00  2...@4Ä.Ô3Ä.....  </span><br><span class="line">00C434B0  94 34 C4 00 34 34 C4 00 2D 00 00 00 E8 34 C4 00  .4Ä.44Ä.-...è4Ä.  </span><br><span class="line">00C434C0  70 34 C4 00 30 00 00 00 94 34 C4 00 8C 33 C4 00  p4Ä.0....4Ä..3Ä.  </span><br><span class="line">00C434D0  31 00 00 00 64 34 C4 00 40 34 C4 00 2F 00 00 00  1...d4Ä.@4Ä.&#x2F;...  </span><br><span class="line">00C434E0  EC 33 C4 00 B0 33 C4 00 33 00 00 00 88 34 C4 00  ì3Ä.°3Ä.3....4Ä.  </span><br><span class="line">00C434F0  04 34 C4 00 05 00 00 00 F4 34 C4 00 F4 34 C4 00  .4Ä.....ô4Ä.ô4Ä.  </span><br><span class="line">00C43500  02 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  ................  </span><br></pre></td></tr></table></figure><p>然后对照着第二部分的代码一点一点看，发现其实就是如果 <code>*(_DWORD *)v7 + v5 == v11</code> 就让 <code>v7</code> 跳到下一个内存地址所指向的地址（这题指针有点绕），比如一开始如果满足输入为 <code>0x34+0x30</code> 接下来就先走到 <code>C43384</code> ，然后从这里跳到 <code>C43398</code> 这个地址，继续下一步运算，如果 <code>v5 - *(_DWORD *)v7 != v11</code> 就走到下两个内存地址所指向的地址。</p><h2 id="脚本求解"><a href="#脚本求解" class="headerlink" title="脚本求解"></a>脚本求解</h2><p>原理就是根据地址跳一次，那么接下来就是求解了，由于每一步都有两种可能（实际上并不是，要在可见字符有范围的）</p><p>一开始觉得可能只有一种路径，直接用循环求解了，结果不行，就写了个dfs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">addr = [</span><br><span class="line">    <span class="number">0x000034</span>,        <span class="number">6</span>,        <span class="number">3</span>, <span class="number">0x000002</span>,</span><br><span class="line">           <span class="number">6</span>, <span class="number">0xC433E0</span>, <span class="number">0x00002C</span>,        <span class="number">3</span>,</span><br><span class="line">    <span class="number">0xC433D4</span>, <span class="number">0x00002A</span>, <span class="number">0xC43458</span>, <span class="number">0xC43494</span>,</span><br><span class="line">    <span class="number">0x000006</span>, <span class="number">0xC433D4</span>, <span class="number">0xC433EC</span>, <span class="number">0x00002A</span>,</span><br><span class="line">           <span class="number">6</span>, <span class="number">0xC43464</span>, <span class="number">0x00002F</span>, <span class="number">0xC434B8</span>,</span><br><span class="line">    <span class="number">0xC434F4</span>, <span class="number">0x00002A</span>, <span class="number">0xC4341C</span>, <span class="number">0xC43494</span>,</span><br><span class="line">    <span class="number">0x000033</span>,       <span class="number">12</span>, <span class="number">0xC433EC</span>, <span class="number">0x000003</span>,</span><br><span class="line">    <span class="number">0xC433F8</span>, <span class="number">0xC4341C</span>, <span class="number">0x000002</span>,       <span class="number">12</span>,</span><br><span class="line">    <span class="number">0xC43410</span>, <span class="number">0x000032</span>, <span class="number">0xC4347C</span>, <span class="number">0xC434DC</span>,</span><br><span class="line">    <span class="number">0x000032</span>, <span class="number">0xC43428</span>, <span class="number">0xC433F8</span>, <span class="number">0x000032</span>,</span><br><span class="line">           <span class="number">3</span>, <span class="number">0xC434A0</span>, <span class="number">0x000030</span>,        <span class="number">0</span>,</span><br><span class="line">    <span class="number">0xC433EC</span>, <span class="number">0x000003</span>, <span class="number">0xC43428</span>, <span class="number">0xC434A0</span>,</span><br><span class="line">    <span class="number">0x000001</span>,       <span class="number">15</span>, <span class="number">0xC434AC</span>, <span class="number">0x000032</span>,</span><br><span class="line">    <span class="number">0xC433D4</span>, <span class="number">0xC433EC</span>, <span class="number">0x00002B</span>, <span class="number">0xC434D0</span>,</span><br><span class="line">    <span class="number">0xC434B8</span>, <span class="number">0x000002</span>, <span class="number">0xC43410</span>,        <span class="number">9</span>,</span><br><span class="line">    <span class="number">0x00002E</span>, <span class="number">0xC434D0</span>, <span class="number">0xC43488</span>, <span class="number">0x000001</span>,</span><br><span class="line">    <span class="number">0xC43434</span>, <span class="number">0xC433C8</span>, <span class="number">0x000002</span>, <span class="number">0xC43434</span>,</span><br><span class="line">    <span class="number">0xC4344C</span>, <span class="number">0x00002D</span>,        <span class="number">6</span>, <span class="number">0xC4341C</span>,</span><br><span class="line">    <span class="number">0x000032</span>, <span class="number">0xC43440</span>, <span class="number">0xC433D4</span>, <span class="number">0x000004</span>,</span><br><span class="line">    <span class="number">0xC43494</span>, <span class="number">0xC43434</span>, <span class="number">0x00002D</span>, <span class="number">0xC434E8</span>,</span><br><span class="line">    <span class="number">0xC43470</span>, <span class="number">0x000030</span>, <span class="number">0xC43494</span>,        <span class="number">3</span>,</span><br><span class="line">    <span class="number">0x000031</span>, <span class="number">0xC43464</span>, <span class="number">0xC43440</span>, <span class="number">0x00002F</span>,</span><br><span class="line">    <span class="number">0xC433EC</span>,       <span class="number">12</span>, <span class="number">0x000033</span>, <span class="number">0xC43488</span>,</span><br><span class="line">    <span class="number">0xC43404</span>, <span class="number">0x000005</span>, <span class="number">0xC434F4</span>, <span class="number">0xC434F4</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(addr)):</span><br><span class="line">    <span class="keyword">if</span> addr[i] &gt;= <span class="number">0xc43380</span>:</span><br><span class="line">        addr[i] -= <span class="number">0xc43380</span></span><br><span class="line">        addr[i] //= <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">start, add, count</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (add &gt; <span class="number">0x7e</span>) <span class="keyword">or</span> add &lt; <span class="number">0x21</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">21</span>) <span class="keyword">and</span> (start == <span class="number">93</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> (count &gt;= <span class="number">21</span>) <span class="keyword">and</span> start != <span class="number">93</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> dfs(addr[start + <span class="number">1</span>], add + addr[start], count + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> dfs(addr[start + <span class="number">2</span>], add - addr[start], count + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(add), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0x30</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 72ab0c6a79cb0b8d0</span></span><br></pre></td></tr></table></figure><p>这个是倒序输出，且有个 <code>0</code> 是最初的 <code>0x30</code></p><p>最后反转过来就行了</p><p>（因为 adworld 不会提交，也不知道对不对，反正运行结果是 <code>Congratulations!!</code> 了）</p><h1 id="天津垓"><a href="#天津垓" class="headerlink" title="天津垓"></a>天津垓</h1><h2 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h2><h2 id="破解-Authorize"><a href="#破解-Authorize" class="headerlink" title="破解 Authorize"></a>破解 Authorize</h2><p>运行 exe 文件，看到 <code>Authorize:</code> 字符串，到 ida 中通过 <code>Shift+F12</code> 找到字符串的位置，通过交叉引用找到关键函数。</p><p>查看函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1004011F6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v39 = &#x27;H_gnisiR&#x27;;</span><br><span class="line">  v40 = &#x27;eppo&#x27;;</span><br><span class="line">  v41 = &#x27;!r&#x27;;</span><br><span class="line">  v42 = <span class="number">0</span>;</span><br><span class="line">  v31 = &#x27;eht nehW&#x27;;</span><br><span class="line">  v32 = &#x27;oh evif &#x27;;</span><br><span class="line">  v33 = &#x27;sorc snr&#x27;;</span><br><span class="line">  v34 = &#x27;g eht ,s&#x27;;</span><br><span class="line">  v35 = &#x27;os nedlo&#x27;;</span><br><span class="line">  v36 = &#x27;HT reidl&#x27;;</span><br><span class="line">  v37 = &#x27;si RESUO&#x27;;</span><br><span class="line">  v38 = &#x27;\n.nrob &#x27;;</span><br><span class="line">  v25 = &#x27;t pmuj A&#x27;;</span><br><span class="line">  v26 = &#x27;ks eht o&#x27;;</span><br><span class="line">  v27 = &#x27; snrut y&#x27;;</span><br><span class="line">  v28 = &#x27;dir a ot&#x27;;</span><br><span class="line">  v29 = &#x27;.kcik re&#x27;;</span><br><span class="line">  v30 = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  v21 = &#x27;etneserP&#x27;;</span><br><span class="line">  v22 = &#x27;IAZ yb d&#x27;;</span><br><span class="line">  v23 = &#x27;\nA&#x27;;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v20, <span class="string">&quot;%s&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(Format, <span class="string">&quot;%20s&quot;</span>);</span><br><span class="line">  v1 = <span class="number">17</span>;</span><br><span class="line">  v2 = <span class="number">8</span>;</span><br><span class="line">  v3 = <span class="number">6</span>;</span><br><span class="line">  v4 = <span class="number">10</span>;</span><br><span class="line">  v5 = <span class="number">15</span>;</span><br><span class="line">  v6 = <span class="number">20</span>;</span><br><span class="line">  v7 = <span class="number">42</span>;</span><br><span class="line">  v8 = <span class="number">59</span>;</span><br><span class="line">  v9 = <span class="number">47</span>;</span><br><span class="line">  v10 = <span class="number">3</span>;</span><br><span class="line">  v11 = <span class="number">47</span>;</span><br><span class="line">  v12 = <span class="number">4</span>;</span><br><span class="line">  v13 = <span class="number">16</span>;</span><br><span class="line">  v14 = <span class="number">72</span>;</span><br><span class="line">  v15 = <span class="number">62</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">7</span>;</span><br><span class="line">  v18 = <span class="number">16</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(Format, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">18</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(v20, &amp;v25);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">17</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v43 = ~(Str[i] &amp; *((_BYTE *)&amp;v39 + i % <span class="number">14</span>)) &amp; (Str[i] | *((_BYTE *)&amp;v39 + i % <span class="number">14</span>));</span><br><span class="line">    <span class="keyword">if</span> ( v43 != *(&amp;v1 + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(v20, &amp;v25);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(v20, &amp;v31);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(v20, &amp;v21);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到最后的判断条件 <code>v43 != *(&amp;v1 + i)</code>，而 v43 是通过一个异或来生成的，因此只需要通过 v1 数组和 v39 数组反向求解得到输入的 Str 即可。</p><p>下面是求解代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">17</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">42</span>, <span class="number">59</span>, <span class="number">47</span>,  <span class="number">3</span>,  <span class="number">47</span>,  <span class="number">4</span>,  <span class="number">16</span>,  <span class="number">72</span>,  <span class="number">62</span>,  <span class="number">0</span>,  <span class="number">7</span>,  <span class="number">16</span>]</span><br><span class="line">xor = <span class="string">&#x27;H_gnisiR&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;eppo&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;!r&#x27;</span>[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">chr</span>(flag[i] ^ <span class="built_in">ord</span>(xor[i % <span class="number">14</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"><span class="comment"># Caucasus@s_ability</span></span><br></pre></td></tr></table></figure><h2 id="patch-SMC"><a href="#patch-SMC" class="headerlink" title="patch SMC"></a>patch SMC</h2><p>将得到的字符串输入程序，发现需要通过第二个认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">When the five horns cross, the golden soldier THOUSER is born.</span><br><span class="line">Presented by ZAIA</span><br><span class="line"></span><br><span class="line">      $$$$$$$$$$$$$$  $$$$$$$$$     $$$$$$$    $$$$$$$$$$</span><br><span class="line">      $$$$$$$$$$$$$$ $$$$$$$$$$$    $$$$$$$    $$$$$$$$$$$</span><br><span class="line">     $$$$$$$$$$$$$$ $$$$$$$$$$$$$   $$$$$$$   $$$$$$$$$$$$$</span><br><span class="line">            $$$$$$  $$$$$$ $$$$$$   $$$$$$$  $$$$$$0 $$$$$$</span><br><span class="line">          $$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$0</span><br><span class="line">       $$$$$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">     $$$$$$$$$$$$$$$$$$$             $$$$$                   $$$</span><br><span class="line">   $$$$$$$$$$$$$$$$$$$$       $$$$$$  $$$  $$$$$$       $$$$$$$$$</span><br><span class="line"> $$$$$$$$$$$$$$$$$$$$$         $$$$$$ $$0 $$$$$$         $$$$$$$$</span><br><span class="line"></span><br><span class="line">Input the flag to hijack the ability of Hiden Intelligence:</span><br></pre></td></tr></table></figure><p>在 <code>Strings window</code> 中并没有找到 <code>Input the flag</code> 的字符串，怀疑程序使用了 SMC。</p><h3 id="法一（patch-方法同-HGAME-FAKE）"><a href="#法一（patch-方法同-HGAME-FAKE）" class="headerlink" title="法一（patch  方法同 HGAME FAKE）"></a>法一（patch  方法同 HGAME FAKE）</h3><p>SMC 可以手动 patch 或者使用动态调试 dump，这里先选择手动 patch</p><p>在 ida 的汇编页面中浏览 <code>Data</code> 部分，发现在 <code>0x10040164D</code> 位置有一长串未被 ida 解析的二进制数据，推测这部分是被加密过的代码，按 <code>x</code> 交叉引用找到加密的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_100401A6C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_100401506(byte_10040164D, <span class="number">1045</span>i64, Str);</span><br><span class="line">  sub_10040162B();</span><br><span class="line">  <span class="keyword">return</span> (*(__int64 (**)(<span class="keyword">void</span>))byte_10040164D)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现先用一个函数调用了这段二进制数据，随后调用以这个地址为开头的函数。</p><p>进入 <code>sub_100401506</code> 函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL __fastcall <span class="title">sub_100401506</span><span class="params">(<span class="keyword">void</span> *a1, <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BOOL result; <span class="comment">// eax</span></span><br><span class="line">  DWORD flOldProtect; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">void</span> *lpAddress; <span class="comment">// [rsp+40h] [rbp+10h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+48h] [rbp+18h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+50h] [rbp+20h]</span></span><br><span class="line"></span><br><span class="line">  lpAddress = a1; <span class="comment">// bytes</span></span><br><span class="line">  v7 = a2;        <span class="comment">// 1045</span></span><br><span class="line">  v8 = a3;        <span class="comment">// Str</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">18</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !VirtualProtect(lpAddress, v7, <span class="number">0x40</span>u, &amp;flOldProtect) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">    *((_BYTE *)lpAddress + i) ^= *(_BYTE *)(i % <span class="number">18</span> + v8); <span class="comment">// 关键代码</span></span><br><span class="line">  result = VirtualProtect(lpAddress, v7, flOldProtect, &amp;flOldProtect);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把关键代码美化一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">    lpAddress[i] ^= v8[i % <span class="number">18</span>]; <span class="comment">// 关键代码</span></span><br></pre></td></tr></table></figure><p>发现是通过一个异或做的加密，密钥就是第一步中输入的字符串。</p><p>因此写一个python脚本来解密并生成patch文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">smc = [<span class="number">0x16</span>,  <span class="number">0x29</span>, <span class="number">0x0F4</span>,  <span class="number">0x8F</span>,   <span class="number">0x91</span>,  <span class="number">0x72</span>,  <span class="number">0x75</span>,  <span class="number">0x73</span>,    <span class="number">8</span> , <span class="number">0x0FE</span>, <span class="number">0x0F3</span>,  <span class="number">0x45</span>, <span class="number">0x0E2</span>,  <span class="number">0x69</span>,  <span class="number">0x6C</span>,  <span class="number">0x69</span>, <span class="number">0x0B3</span>, <span class="number">0x0FC</span>, <span class="number">0x0D3</span>,  <span class="number">0x61</span>,</span><br><span class="line"> <span class="number">0x75</span>,  <span class="number">0x63</span>,  <span class="number">0x13</span>,<span class="number">0x0D1</span>,  <span class="number">0x6B</span>,   <span class="number">0x73</span>,  <span class="number">0x87</span>, <span class="number">0x0F6</span>, <span class="number">0x0CB</span>,  <span class="number">0x61</span>,  <span class="number">0x62</span>,  <span class="number">0x69</span>, <span class="number">0x0A8</span>,    <span class="number">6</span> ,  <span class="number">0x54</span>,  <span class="number">0x79</span>,  <span class="number">0x84</span>, <span class="number">0x0E4</span>, <span class="number">0x0ED</span>,  <span class="number">0x63</span>,  <span class="number">0x61</span>,</span><br><span class="line"><span class="comment"># 中间部分省略</span></span><br><span class="line"><span class="number">0x0FC</span>, <span class="number">0x0A2</span>,  <span class="number">0x89</span>,  <span class="number">0x2B</span>,  <span class="number">0x74</span>,  <span class="number">0x73</span>,  <span class="number">0x40</span>,  <span class="number">0x9B</span>,  <span class="number">0x1C</span>,  <span class="number">0x60</span>,  <span class="number">0x62</span>,  <span class="number">0x69</span>,  <span class="number">0x84</span>,  <span class="number">0x57</span>,  <span class="number">0x75</span>,  <span class="number">0x79</span>,  <span class="number">0x43</span>,  <span class="number">0x90</span>,  <span class="number">0x48</span>,  <span class="number">0x81</span>, <span class="number">0x0C4</span>,</span><br><span class="line"><span class="number">0x0F0</span>,    <span class="number">1</span> ,    <span class="number">0</span> ,    <span class="number">0</span> ,  <span class="number">0x5D</span>, <span class="number">0x0C3</span>]</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;patch.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Caucasus@s_ability&#x27;</span></span><br><span class="line">title = <span class="string">&#x27;&#x27;&#x27;file_path = &quot;天津垓.exe&quot;</span></span><br><span class="line"><span class="string">fr = open(file_path, &quot;rb&quot;)</span></span><br><span class="line"><span class="string">fw = open(&#x27;modify_&#x27;+file_path, &quot;wb&quot;)</span></span><br><span class="line"><span class="string">data = fr.read()</span></span><br><span class="line"><span class="string">fw.write(data)</span></span><br><span class="line"><span class="string">fw.seek(0xc4d)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">file.write(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1045</span>):</span><br><span class="line">    smc[i] ^= (<span class="built_in">ord</span>(<span class="built_in">str</span>[i % <span class="number">18</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1045</span>, <span class="number">50</span>):</span><br><span class="line">    file.write(<span class="string">&#x27;fw.write(&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">bytes</span>(smc[i:i + <span class="number">50</span>])&#125;</span>&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">&#x27;)\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>在命令行中依次运行 <code>python solve.py</code> 和 <code>python patch.py</code></p><p>会得到一个新的 exe 文件 <code>modify_天津垓.exe</code></p><p>在 ida 中打开，进入之前解密的地址，发现此时已经可以被解析了</p><h3 id="法二（-idapython-自动-patch）"><a href="#法二（-idapython-自动-patch）" class="headerlink" title="法二（ idapython 自动 patch）"></a>法二（ idapython 自动 patch）</h3><p>自己手动 patch 的好处在于可以避免直接对文件进行操作，如果出现错误不容易复原（毕竟 ida 7.0 没有撤销）。而利用 <code>idapython</code> 的接口进行 patch 则写起来更加方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;Caucasus@s_ability&#x27;</span></span><br><span class="line">    addr = start</span><br><span class="line">    <span class="keyword">while</span>(addr &lt; end + <span class="number">1</span>):</span><br><span class="line">        PatchByte(addr, Byte(addr) ^ <span class="built_in">ord</span>(<span class="built_in">str</span>[(addr - start) % <span class="number">18</span>]))</span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> (addr - start)</span><br></pre></td></tr></table></figure><p>如果将 <code>str</code> 取出作为变量的一部分，这段代码就可以通用到一些其他题目了。</p><p>随后在 ida 的 <code>File &gt; script file</code> 中选择写好的脚本，在 <code>File &gt; script command</code> 中直接输入 <code>patch( &lt;start_addr&gt;, &lt;end_addr&gt;)</code> 即可（具体的 <code>&lt;addr&gt;</code> 可以直接从 ida 的汇编页面中读取）</p><p>点击 <code>run</code> 后即可 patch 成功。</p><h2 id="hijack"><a href="#hijack" class="headerlink" title="hijack"></a>hijack</h2><p>查看上一步中成功解密的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_10040164D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v9 = <span class="number">2007666</span>;</span><br><span class="line">  v10 = <span class="number">2125764</span>;</span><br><span class="line">  v11 = <span class="number">1909251</span>;</span><br><span class="line">  v12 = <span class="number">2027349</span>;</span><br><span class="line">  v13 = <span class="number">2421009</span>;</span><br><span class="line">  v14 = <span class="number">1653372</span>;</span><br><span class="line">  v15 = <span class="number">2047032</span>;</span><br><span class="line">  v16 = <span class="number">2184813</span>;</span><br><span class="line">  v17 = <span class="number">2302911</span>;</span><br><span class="line">  v18 = <span class="number">2263545</span>;</span><br><span class="line">  v19 = <span class="number">1909251</span>;</span><br><span class="line">  v20 = <span class="number">2165130</span>;</span><br><span class="line">  v21 = <span class="number">1968300</span>;</span><br><span class="line">  v22 = <span class="number">2243862</span>;</span><br><span class="line">  v23 = <span class="number">2066715</span>;</span><br><span class="line">  v24 = <span class="number">2322594</span>;</span><br><span class="line">  v25 = <span class="number">1987983</span>;</span><br><span class="line">  v26 = <span class="number">2243862</span>;</span><br><span class="line">  v27 = <span class="number">1869885</span>;</span><br><span class="line">  v28 = <span class="number">2066715</span>;</span><br><span class="line">  v29 = <span class="number">2263545</span>;</span><br><span class="line">  v30 = <span class="number">1869885</span>;</span><br><span class="line">  v31 = <span class="number">964467</span>;</span><br><span class="line">  v32 = <span class="number">944784</span>;</span><br><span class="line">  v33 = <span class="number">944784</span>;</span><br><span class="line">  v34 = <span class="number">944784</span>;</span><br><span class="line">  v35 = <span class="number">728271</span>;</span><br><span class="line">  v36 = <span class="number">1869885</span>;</span><br><span class="line">  v37 = <span class="number">2263545</span>;</span><br><span class="line">  v38 = <span class="number">2283228</span>;</span><br><span class="line">  v39 = <span class="number">2243862</span>;</span><br><span class="line">  v40 = <span class="number">2184813</span>;</span><br><span class="line">  v41 = <span class="number">2165130</span>;</span><br><span class="line">  v42 = <span class="number">2027349</span>;</span><br><span class="line">  v43 = <span class="number">1987983</span>;</span><br><span class="line">  v44 = <span class="number">2243862</span>;</span><br><span class="line">  v45 = <span class="number">1869885</span>;</span><br><span class="line">  v46 = <span class="number">2283228</span>;</span><br><span class="line">  v47 = <span class="number">2047032</span>;</span><br><span class="line">  v48 = <span class="number">1909251</span>;</span><br><span class="line">  v49 = <span class="number">2165130</span>;</span><br><span class="line">  v50 = <span class="number">1869885</span>;</span><br><span class="line">  v51 = <span class="number">2401326</span>;</span><br><span class="line">  v52 = <span class="number">1987983</span>;</span><br><span class="line">  v53 = <span class="number">2243862</span>;</span><br><span class="line">  v54 = <span class="number">2184813</span>;</span><br><span class="line">  v55 = <span class="number">885735</span>;</span><br><span class="line">  v56 = <span class="number">2184813</span>;</span><br><span class="line">  v57 = <span class="number">2165130</span>;</span><br><span class="line">  v58 = <span class="number">1987983</span>;</span><br><span class="line">  v59 = <span class="number">2460375</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(Format, <span class="string">&quot;Input the flag to hijack the ability of Hiden Intelligence:&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v7, <span class="string">&quot;Progrise Key confirmed. Ready to break.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;Jacking Break! Zaia Enterprise.&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;%59s&quot;</span>);</span><br><span class="line">  v3 = <span class="number">29477</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v2, <span class="string">&quot;Not verified!&quot;</span>);</span><br><span class="line">  v62 = <span class="number">2147483659</span>;</span><br><span class="line">  <span class="built_in">printf</span>(Format);</span><br><span class="line">  <span class="built_in">scanf</span>(v5, Str);</span><br><span class="line">  <span class="built_in">printf</span>(v7);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">51</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(v2);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v61 = <span class="number">19683</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v60 = v61 * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)Str[i] % v62; <span class="comment">// 关键代码</span></span><br><span class="line">    <span class="keyword">if</span> ( v60 != *(&amp;v9 + i) ) <span class="comment">// 验证</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(v2);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(v6);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将关键代码美化一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(&amp;v9 + i) != v61 * Str[i] % v62 )</span><br></pre></td></tr></table></figure><p>只要确保式子两端一直相等就行</p><p>程序的输入部分还是存到了 Str 中，因此只需要通过已经定义好的数求出 Str 就可以</p><p>这里直接对 Str 的每一位进行枚举（也可以用 z3 solver 或者求模逆等方法求解）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">51</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v[ <span class="number">0</span>] = <span class="number">2007666</span>;</span><br><span class="line">    v[ <span class="number">1</span>] = <span class="number">2125764</span>;</span><br><span class="line"><span class="comment">// 中间省略</span></span><br><span class="line">    v[<span class="number">49</span>] = <span class="number">1987983</span>;</span><br><span class="line">    v[<span class="number">50</span>] = <span class="number">2460375</span>;</span><br><span class="line">    <span class="keyword">int</span> v61 = <span class="number">19683</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x32</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(res = <span class="number">0</span>; res &lt;= <span class="number">0x80</span>; res++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] == v61 * res % <span class="number">2147483659</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, res);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</span></span><br></pre></td></tr></table></figure><p>在程序中输入这个字符串后，就能看到如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input the flag to hijack the ability of Hiden Intelligence:flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</span><br><span class="line">Progrise Key confirmed. Ready to break.</span><br><span class="line">Jacking Break! Zaia Enterprise.</span><br></pre></td></tr></table></figure><p>说明我们破解成功了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;被学长安利的比赛&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>VNCTF2021 re FilpGame</title>
    <link href="https://s0uthwood.github.io/2021/03/25/VNCTF2021-re-FilpGame/"/>
    <id>https://s0uthwood.github.io/2021/03/25/VNCTF2021-re-FilpGame/</id>
    <published>2021-03-24T19:06:10.000Z</published>
    <updated>2021-03-24T19:12:02.929Z</updated>
    
    <content type="html"><![CDATA[<p>V&amp;NCTF2021 补题第二篇</p><p>官方WP写的好玄学，其实用z3也可以解的</p><a id="more"></a><h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><p>拖入ida，通过字符串定位到关键代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">  sub_401020(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">  sub_401050(<span class="string">&quot;%s&quot;</span>, inputstring, <span class="number">512</span>);</span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( inputstring[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = dword_403398;</span><br><span class="line">    v2 = dword_40339C;</span><br><span class="line">    v14 = dword_403398;</span><br><span class="line">    <span class="keyword">while</span> ( v0 &lt; <span class="number">214</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v0;</span><br><span class="line">      v4 = &amp;inputstring[v0];</span><br><span class="line">      v5 = v3 &amp; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )                                 <span class="comment">// 第奇数位</span></span><br><span class="line">      &#123;</span><br><span class="line">        v6 = *v4;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(*v4 - <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v6 - <span class="string">&#x27;A&#x27;</span>) &gt; <span class="number">0x19</span>u )<span class="comment">// 大于大写字母时</span></span><br><span class="line">          &#123;</span><br><span class="line">            v2 = <span class="number">-1</span>;</span><br><span class="line">            dword_40339C = <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>                                  <span class="comment">// 大写字母时</span></span><br><span class="line">          &#123;</span><br><span class="line">            v2 = v6 - <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">            dword_40339C = v6 - <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                                    <span class="comment">// 为数字时</span></span><br><span class="line">        &#123;</span><br><span class="line">          v2 = v6 - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          dword_40339C = v6 - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                      <span class="comment">// 偶数位</span></span><br><span class="line">      &#123;</span><br><span class="line">        v7 = *v4;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(*v4 - <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v7 - <span class="string">&#x27;A&#x27;</span>) &gt; <span class="number">0x19</span>u )</span><br><span class="line">          &#123;</span><br><span class="line">            dword_403398 = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          v1 = v7 - <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v1 = v7 - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dword_403398 = v1;</span><br><span class="line">        v14 = v1;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || v2 &gt; <span class="number">0xF</span> )               <span class="comment">// 不能大于F</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )                                 <span class="comment">// 奇数时，两位两位进行计算</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dword_403018 &gt;= (<span class="keyword">signed</span> <span class="keyword">int</span>)(v1 + <span class="number">16</span> * v2) )<span class="comment">// 0FFFFFFFF</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        dword_403018 = v1 + <span class="number">16</span> * v2;            <span class="comment">// v1为列，v2为行</span></span><br><span class="line">        v8 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v9 = v1 + dword_40212C[v8];           <span class="comment">// -1  0  0  0  1 先输入的数</span></span><br><span class="line">          v10 = v2 + dword_402140[v8];          <span class="comment">//  0  0 -1  1  0 后输入的数</span></span><br><span class="line">          <span class="keyword">if</span> ( v9 &lt;= <span class="number">0xF</span> &amp;&amp; v10 &lt;= <span class="number">0xF</span> )</span><br><span class="line">            final_check[v10] ^= <span class="number">1</span> &lt;&lt; (<span class="number">15</span> - v9); <span class="comment">// 将所选位置及周围一圈的数字都进行取反，位置用大写十六进制表示</span></span><br><span class="line">          v1 = v14;</span><br><span class="line">          ++v8;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v8 &lt; <span class="number">5</span> );</span><br><span class="line">      &#125;</span><br><span class="line">      v0 = v13 + <span class="number">1</span>;</span><br><span class="line">      v13 = v0;</span><br><span class="line">      <span class="keyword">if</span> ( !inputstring[v0] )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">LABEL_25:</span><br><span class="line">    v11 = final_check;                          <span class="comment">// 目标：均为-1</span></span><br><span class="line">    <span class="keyword">while</span> ( *v11 == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v11;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v11 &gt;= (<span class="keyword">signed</span> <span class="keyword">int</span>)&amp;unk_40303C )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_401020(<span class="string">&quot;right, vnctf&#123;MD5(%s)&#125;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401020(<span class="string">&quot;wrong\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1 id="脚本求解"><a href="#脚本求解" class="headerlink" title="脚本求解"></a>脚本求解</h1><p>简单的说就是已知一个 $16\times 16$ 的 $01$ 方阵，每次对一个格子取反，都会对相邻的四个格子同样进行取反，最终求解一个操作顺序使得所有的数字为 $1$。</p><p>一开始写了个回溯，然后直接炸了。</p><p>经过队友的提醒开始用z3求解（<del>队友的z3还是从我这里学的。。。</del>），但没想到踩到了好多坑，也学会了一些z3的新用法。</p><p>直接上最后的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">init_check = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">posx = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">posy = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">change = [ [BitVec(<span class="string">&#x27;change%x%x&#x27;</span> % (i, j), <span class="number">2</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>) ]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> i + posx[k] &gt;= <span class="number">0</span> <span class="keyword">and</span> i + posx[k] &lt; <span class="number">16</span> <span class="keyword">and</span> j + posy[k] &gt;= <span class="number">0</span> <span class="keyword">and</span> j + posy[k] &lt; <span class="number">16</span>:</span><br><span class="line">                init_check[i][j] ^= (change[i + posx[k]][j + posy[k]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        solver.add(change[i][j] &amp; <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        solver.add(init_check[i][j] == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> solver.check() == sat:</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    model = solver.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">if</span> model[change[i][j]] == <span class="number">1</span>:</span><br><span class="line">                length += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">220</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                <span class="keyword">if</span> model[change[i][j]] == <span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&#x27;%X%X&#x27;</span> % (j, i), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> ()</span><br><span class="line">    condition = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            condition.append(change[i][j] != <span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (model[change[i][j]])))</span><br><span class="line">    solver.add(Or(condition))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nfinish&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> FilpGame python3 solve.py</span></span><br><span class="line">2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF</span><br><span class="line"></span><br><span class="line">finish</span><br></pre></td></tr></table></figure><p>过程中踩到的坑：</p><ol><li>这道题的行和列很绕，一定要看清楚；</li><li>不知道为什么，<code>BitVec</code> 大小不能设置成 $1$；</li><li>这题的解有很多，所以最后需要用一个 <code>condition</code> 和 <code>Or</code> 来找到所有的解；</li><li>如果对数没有最基本的约束的话，可能会出现一堆 <code>None</code> 的情况。</li></ol><p>程序运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> FilpGame ./FilpGame.exe</span></span><br><span class="line">Input: 2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999</span><br><span class="line">B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF</span><br><span class="line">right, vnctf&#123;MD5(2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D8</span><br><span class="line">1949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF)&#125;</span><br></pre></td></tr></table></figure><p>最后算一下md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hl = hashlib.md5()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hl.update(<span class="built_in">str</span>.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hl.hexdigest()</span><br><span class="line"><span class="string">&#x27;c51a6d6d3929cd2a0192572e604b371d&#x27;</span></span><br></pre></td></tr></table></figure><p>拿到flag！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>又学到了一些z3的用法，真不戳。</p><p>这道题告诉我们，以后算法题无脑上z3就完事了。。。</p><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p>感谢 SSGSS 师傅，在我纠结于官方WP的解法时提醒我还有Z3这个神奇的东西！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;V&amp;amp;NCTF2021 补题第二篇&lt;/p&gt;
&lt;p&gt;官方WP写的好玄学，其实用z3也可以解的&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>NepCTF2021 re writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/22/NepCTF2021-re-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/22/NepCTF2021-re-writeups/</id>
    <published>2021-03-22T10:30:03.000Z</published>
    <updated>2021-03-22T10:30:11.036Z</updated>
    
    <content type="html"><![CDATA[<p>NepCTF2021 reverse 前四题</p><a id="more"></a><h1 id="hardsharp-NET-逆向"><a href="#hardsharp-NET-逆向" class="headerlink" title="hardsharp (.NET 逆向)"></a>hardsharp (.NET 逆向)</h1><p>使用exeinfo发现是 C# .NET文件</p><p>直接用 dnSpy 打开</p><p>找到主函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AesClass aesClass = <span class="keyword">new</span> AesClass();</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> strB = <span class="string">&quot;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&quot;</span>;</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">81</span>,</span><br><span class="line"><span class="number">82</span>,</span><br><span class="line"><span class="number">87</span>,</span><br><span class="line"><span class="number">81</span>,</span><br><span class="line"><span class="number">82</span>,</span><br><span class="line"><span class="number">87</span>,</span><br><span class="line"><span class="number">68</span>,</span><br><span class="line"><span class="number">92</span>,</span><br><span class="line"><span class="number">94</span>,</span><br><span class="line"><span class="number">86</span>,</span><br><span class="line"><span class="number">93</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line"><span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Welcome to nepnep csharp test! plz input the magical code:&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> text2 = Console.ReadLine();</span><br><span class="line"><span class="keyword">if</span> (text2.Length != <span class="number">37</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (text2.Substring(<span class="number">0</span>, <span class="number">4</span>) != <span class="string">&quot;Nep&#123;&quot;</span> || text2[<span class="number">36</span>] != <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">text += Convert.ToChar((<span class="built_in">int</span>)(array[i] ^ <span class="number">51</span>)).ToString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">string</span>.Compare(aesClass.AesEncrypt(text2, text), strB) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;wow, you pass it!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这才是真正的签到题吧…</p><p>发现是 AES 加密</p><p>进入 AesEncrypt 函数看一眼</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">AesEncrypt</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(str))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">&#123;</span><br><span class="line">Key = Encoding.UTF8.GetBytes(key),</span><br><span class="line">Mode = CipherMode.ECB,</span><br><span class="line">Padding = PaddingMode.PKCS7</span><br><span class="line">&#125;.CreateEncryptor().TransformFinalBlock(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line"><span class="keyword">return</span> Convert.ToBase64String(array, <span class="number">0</span>, array.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现使用了 ECB 模式，那么直接上网找个 python 脚本计算就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">81</span>, <span class="number">82</span>, <span class="number">87</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">87</span>, <span class="number">68</span>, <span class="number">92</span>, <span class="number">94</span>, <span class="number">86</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>]</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    key += <span class="built_in">chr</span>(i ^ <span class="number">51</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">f&#x27;key: <span class="subst">&#123;key&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">f&#x27;key length: <span class="subst">&#123;<span class="built_in">len</span>(key)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&#x27;</span></span><br><span class="line">encrypt_data = message</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key)</span><br><span class="line">result2 = base64.b64decode(encrypt_data)</span><br><span class="line">a = cipher.decrypt(result2)</span><br><span class="line"></span><br><span class="line">a = a.decode(<span class="string">&#x27;utf-8&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">a = a.rstrip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">a = a.rstrip(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">a = a.rstrip(<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">a = a.replace(<span class="string">&#x27;\x06&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;data:&#x27;</span>,a)</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key: badbadwomen!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">key length: 32</span><br><span class="line"></span><br><span class="line"> data: Nep&#123;up_up_down_down_B_a_b_A_Nep_nep~&#125;</span><br></pre></td></tr></table></figure><h1 id="二十六进制-（c-c-逆向）"><a href="#二十六进制-（c-c-逆向）" class="headerlink" title="二十六进制 （c / c++ 逆向）"></a>二十六进制 （c / c++ 逆向）</h1><p>先用exeinfo打开，发现是无壳32位c++代码。</p><p>用ida打开，找到有用的字符串，定位关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_4010A0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+0h] [ebp-108h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  dword_403378 = (<span class="keyword">int</span>)<span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">  Memory = (<span class="keyword">void</span> *)dword_403378;</span><br><span class="line">  *(_DWORD *)(dword_403378 + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">  sub_401020(<span class="string">&quot;plz input right num:\n&quot;</span>, Dst);</span><br><span class="line">  sub_401060(<span class="string">&quot;%s&quot;</span>, &amp;Dst, <span class="number">32</span>);</span><br><span class="line">  v0 = atoi64(&amp;Dst);</span><br><span class="line">  sub_401120(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入一个数字，将其传入 <code>sub_401120</code> 函数。</p><p>进入这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">sub_401120</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 v1; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  v1 = __PAIR__(a1, HIDWORD(a1));</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = sub_401F00(__PAIR__(v1, HIDWORD(v1)), <span class="number">0x1A</span>u, <span class="number">0</span>);</span><br><span class="line">      LODWORD(v1) = v3;</span><br><span class="line">      v4 = byte_402194[HIDWORD(v1) - <span class="number">26</span> * v2];  <span class="comment">// 2163qwe)(*&amp;^%489$!057@#&gt;&lt;A</span></span><br><span class="line">      HIDWORD(v1) = v2;</span><br><span class="line">      sub_401160(v4 ^ <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v1 );</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401190();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据题目信息的提示，这是把输入数字转换成为26进制，随后进行一个异或运算，然后存到一个地址里。</p><p>进入 <code>sub_401190</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_401190</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  _DWORD *v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">void</span> *v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+10h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v0 = Memory;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v2 = Memory;</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(aFb726);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v5 = &amp;aFb726[v4];</span><br><span class="line">      v6 = *(_BYTE *)v2;</span><br><span class="line">      v7 = v10 + <span class="number">1</span>;</span><br><span class="line">      v2 = (_DWORD *)v2[<span class="number">1</span>];</span><br><span class="line">      ++v4;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != *v5 )</span><br><span class="line">        v7 = v10;</span><br><span class="line">      v1 = v7;</span><br><span class="line">      v10 = v7; <span class="comment">// 判断某内存种对应位置是否与 aFb726 字符串相同，相同就在长度上加 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 &lt; v3 );</span><br><span class="line">    v0 = Memory;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 ) </span><br><span class="line">  &#123;</span><br><span class="line">    v8 = v1;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = (<span class="keyword">void</span> *)v0[<span class="number">1</span>];</span><br><span class="line">      dword_403378 = (<span class="keyword">int</span>)v0;</span><br><span class="line">      Memory = v9;</span><br><span class="line">      <span class="built_in">free</span>(v0);</span><br><span class="line">      v0 = Memory;</span><br><span class="line">      --v8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( Memory ); <span class="comment">// 释放内存</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v10 != <span class="built_in">strlen</span>(aFb726) ) <span class="comment">// 根据之间计算的相同字母数量，判断两个字符串是否相同</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;flag is Error!!!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(v8);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;flag is Right!!!, please md5(&#x27;Nep&#123;you_input_num&#125;&#x27;) submit th4 flag&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(v8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以只需要将 aFb726 字符串进行反向计算即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = <span class="string">&#x27;Fb72&gt;&amp;6&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;2163qwe)(*&amp;^%489$!057@#&gt;&lt;A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line"><span class="meta">... </span>    num.append(<span class="built_in">str</span>.index(<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ <span class="number">7</span>)))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num</span><br><span class="line">[<span class="number">25</span>, <span class="number">6</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> num[::<span class="number">-1</span>]:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">sum</span> *= <span class="number">26</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">sum</span> += i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span></span><br><span class="line"><span class="number">518100101</span></span><br></pre></td></tr></table></figure><p>运行程序进行测试，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plz input right num:</span><br><span class="line">518100101</span><br><span class="line">flag is Right!!!, please md5(&#39;Nep&#123;you_input_num&#125;&#39;) submit th4 flag</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>根据题目信息，计算一下数字的32位小写md5（一开始算的是 Nep{51…01} 这个字符串的md5，发现不对，所以算数字的试了一下）</p><p>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;967fa25cbea166ded43127f141cff31a&#125;</span><br></pre></td></tr></table></figure><h1 id="password-（安卓逆向）"><a href="#password-（安卓逆向）" class="headerlink" title="password （安卓逆向）"></a>password （安卓逆向）</h1><p>这道题做了好久都没做出来，结果发现是把base64的 ‘+/‘ 记反了…</p><hr><p>首先用 <code>jeb</code> 打开，找到 <code>com.nepnep.app</code> 中的 <code>MainActivity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Encrypt en;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.en = <span class="keyword">new</span> Encrypt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg4);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F0B001C</span>);  <span class="comment">// activity_main</span></span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">0x7F080057</span>).setOnClickListener(<span class="keyword">new</span> View$OnClickListener(<span class="keyword">this</span>.findViewById(<span class="number">0x7F0800B7</span>), <span class="keyword">this</span>.findViewById(<span class="number">0x7F0800F2</span>)) &#123;  <span class="comment">// btn, key, password</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg4)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(MainActivity.<span class="keyword">this</span>.verify(<span class="keyword">this</span>.val$key.getText().toString()) == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.val$key.getText().toString());</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;key错误！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(MainActivity.<span class="keyword">this</span>.en.file(<span class="keyword">this</span>.val$passwd.getText().toString().getBytes(), <span class="keyword">this</span>.val$key.getText().toString())) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;明文正确，快去解压缩包获取flag吧！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;明文错误！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">verify</span><span class="params">(String arg1)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是读入 <code>key</code> 和 <code>password</code>，然后先判断 <code>key</code> 是否正确，如果正确的话判断 <code>password</code> 是否正确</p><p>那么肯定先破解 <code>key</code>，发现 <code>verify</code> 是外部函数</p><p>找到 <code>native-lib.so</code> 文件，拖入ida，找到函数名里搜索 <code>java</code> 或 <code>verify</code> 之类的，找到这个判断函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">  v4 = (<span class="keyword">char</span> *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + <span class="number">1352L</span>L))(a1, a3, <span class="number">0L</span>L);</span><br><span class="line">  v5 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + <span class="number">1344L</span>L))(a1, v3);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x3E8</span>uLL);</span><br><span class="line">  sub_710(v4, (__int64)&amp;s, v5 - 3 * (((unsigned __int64)(&#x27;UUUV&#x27; * v5) &gt;&gt; 63) + ((unsigned __int64)(&#x27;UUUV&#x27; * v5) &gt;&gt; 32)));</span><br><span class="line">  sub_820(&amp;s, (__int64)&amp;v22);                   <span class="comment">// s=&#x27;th1s_1s_k3ya!!!!&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )                                   <span class="comment">// base64</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 = v6;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6)];<span class="comment">// abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">1</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">1</span>)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">2</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">2</span>)];</span><br><span class="line">      v7 = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">3</span>)];</span><br><span class="line">      v6 += <span class="number">4</span>;</span><br><span class="line">      *((_BYTE *)&amp;v15 + v11 + <span class="number">3</span>) = v7;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">1</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">1</span>)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">2</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">2</span>)];</span><br><span class="line">      *((_BYTE *)&amp;v15 + v6 + <span class="number">3</span>) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_4:</span><br><span class="line">    v10 = __OFADD__(<span class="number">-3</span>, v5);</span><br><span class="line">    v8 = v5 == <span class="number">3</span>;</span><br><span class="line">    v9 = v5 - <span class="number">3</span> &lt; <span class="number">0</span>;</span><br><span class="line">    v5 -= <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v9 ^ v10) | v8 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)&amp;v15 + v6) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6)];</span><br><span class="line">  *((_BYTE *)&amp;v15 + v6 + <span class="number">1</span>) = aAbcdefghijklmn[*((<span class="keyword">char</span> *)&amp;v22 + v6 + <span class="number">1</span>)];</span><br><span class="line">  *(_WORD *)((char *)&amp;v15 + v6 + 2) = &#x27;==&#x27;;</span><br><span class="line">LABEL_10:</span><br><span class="line">  (*(<span class="keyword">void</span> (__fastcall **)(__int64, __int64, <span class="keyword">char</span> *))(*(_QWORD *)a1 + <span class="number">1360L</span>L))(a1, v3, v4);</span><br><span class="line">  v12 = _mm_movemask_epi8(</span><br><span class="line">          _mm_and_si128(</span><br><span class="line">            _mm_cmpeq_epi8(_mm_load_si128((<span class="keyword">const</span> __m128i *)&amp;v15), (__m128i)xmmword_BE0),</span><br><span class="line">            _mm_cmpeq_epi8(_mm_loadu_si128((<span class="keyword">const</span> __m128i *)((<span class="keyword">char</span> *)&amp;v15 + <span class="number">9</span>)), (__m128i)xmmword_BD0)));<span class="comment">// 3g6L2PWL2PXFmR+7ise7iq==</span></span><br><span class="line">  __android_log_print(<span class="number">4L</span>L, <span class="string">&quot;nepnep&quot;</span>, <span class="string">&quot;%s&quot;</span>, &amp;v15);</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( v12 == <span class="number">0xFFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __android_log_print(<span class="number">4L</span>L, <span class="string">&quot;nepnep&quot;</span>, <span class="string">&quot;key is true!&quot;</span>, v13);</span><br><span class="line">    result = <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>我们的目的肯定是让 <code>v12 = 0FFFF</code></p><p>虽然对于 mm 之类的指令不太清楚，但大概的意思应该还是两个字符串相等的，那么就让 <code>(const __m128i *)&amp;v15), (__m128i)xmmword_BE0)</code> 和 <code>((char *)&amp;v15 + 9)), (__m128i)xmmword_BD0))</code> 两两相等即可</p><p>在字符串中找到这两个，就能得到 <code>3g6L2PWL2PXFmR+7ise7iq==</code>，这个看起来是一个 base64，但解出来是乱码，所以还是得往前看。上面一大段从 <code>while</code> 开始的代码，显然就是 base64 的最后一步，点开字符串，发现这个不是标准的 base64。那么根据这个字符串反向求解 base64 就可以了。</p><p>实际操作时，继续阅读了 <code>sub_820</code> 和 <code>sub_710</code> 两个函数。只看 <code>sub_820</code> 的话看不太懂，建议先看 <code>sub_710</code>，发现 <code>sub_710</code> 中，将一个字符串的每个字符根据 ascii 数值直接拆开到了八个 char 上，每个 char 存 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code> （ <code>0x30</code> 和 <code>0x31</code> ）。到了 <code>sub_820</code> 函数，则每六个进行合并，每一位运算看起来很奇怪，但如果用 <code>0x30</code> 和 <code>0x31</code> 带入会发现就是很简单的将 0 和1 重新组合起来。就是做了一个 base64 运算。</p><p>于是写个代码反向求解就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">en_key = <span class="string">&#x27;7+RmFXP2LWP2L6g3&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;==qi7esi&#x27;</span>[::<span class="number">-1</span>]</span><br><span class="line">true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line">fake_base = string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span> + string.ascii_uppercase</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> en_key:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">        key += c</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    key += true_base[fake_base.index(c)]</span><br><span class="line"></span><br><span class="line">key = base64.b64decode(key)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure><p>得到 key: <code>th1s_1s_k3y!!!!!</code></p><blockquote><p>这里我因为打错了base的字符串，卡了整整一天（</p></blockquote><p>接下来就可以去求明文密码了</p><p>继续阅读 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encrypt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Encrypt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">en1</span><span class="params">(<span class="keyword">int</span>[] arg6, String arg7, <span class="keyword">int</span> arg8)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[v0];</span><br><span class="line">        <span class="keyword">byte</span>[] v7 = arg7.getBytes();</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v3;</span><br><span class="line">        <span class="keyword">for</span>(v3 = <span class="number">0</span>; v3 &lt; v0; ++v3) &#123;</span><br><span class="line">            arg6[v3] = <span class="number">0x100</span> - v3;  <span class="comment">// 256-1降序</span></span><br><span class="line">            v1[v3] = v7[v3 % arg8];  <span class="comment">// 用密钥填满v1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v7_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v2 &lt; v0) &#123;</span><br><span class="line">            v7_1 = (arg6[v2] + v7_1 + v1[v2]) % <span class="number">0x100</span>;</span><br><span class="line">            arg8 = arg6[v2];</span><br><span class="line">            arg6[v2] = arg6[v7_1];</span><br><span class="line">            arg6[v7_1] = arg8;</span><br><span class="line">            ++v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">en2</span><span class="params">(<span class="keyword">int</span>[] arg7, <span class="keyword">byte</span>[] arg8, <span class="keyword">int</span> arg9)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v0 &lt; arg9) &#123;</span><br><span class="line">            v1 = (v1 + <span class="number">1</span>) % <span class="number">0x100</span>;</span><br><span class="line">            v2 = ((arg7[v1] &amp; <span class="number">0xFF</span>) + v2) % <span class="number">0x100</span>;</span><br><span class="line">            <span class="keyword">int</span> v3 = arg7[v1];</span><br><span class="line">            arg7[v1] = arg7[v2];</span><br><span class="line">            arg7[v2] = v3;</span><br><span class="line">            arg8[v0] = ((<span class="keyword">byte</span>)(arg8[v0] ^ arg7[((arg7[v1] &amp; <span class="number">0xFF</span>) + (arg7[v2] &amp; <span class="number">0xFF</span>)) % <span class="number">0x100</span>]));</span><br><span class="line">            ++v0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">file</span><span class="params">(<span class="keyword">byte</span>[] arg6, String arg7)</span> </span>&#123;  <span class="comment">// passwd, key = &#x27;th1s_1s_k3ya!!!!&#x27;</span></span><br><span class="line">        <span class="keyword">int</span>[] v0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0x100</span>];</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">int</span>[] v2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0x8B</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x5D</span>, <span class="number">0x95</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x5F</span>, <span class="number">0x29</span>, <span class="number">0x56</span>, <span class="number">0x12</span>, <span class="number">0xB9</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xD0</span>, <span class="number">0x45</span>&#125;;</span><br><span class="line">        <span class="keyword">this</span>.en1(v0, arg7, arg7.length());</span><br><span class="line">        <span class="keyword">this</span>.en2(v0, arg6, arg6.length);</span><br><span class="line">        <span class="keyword">if</span>(arg6.length != v1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v7;</span><br><span class="line">        <span class="keyword">for</span>(v7 = <span class="number">0</span>; v7 &lt; v1; ++v7) &#123;</span><br><span class="line">            <span class="keyword">if</span>((arg6[v7] &amp; <span class="number">0xFF</span>) != v2[v7]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懂的话就会发现这个就是一个s盒从 <code>0-255</code> 变成 <code>256-1</code> 的 <code>RC4</code> 密码</p><p>不懂的话直接把代码复制出来，把 <code>file</code> 函数改写成 <code>main</code> 函数，反向求解一下就行（因为仔细观察就可以发现 <code>en2</code> 只对明文做了个异或运算，且异或的对象和明文本身没有关系），这里当密码学的题来做其实就好了。</p><p>这是我复制后改写的 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">en1</span><span class="params">(<span class="keyword">int</span>[] arg6, String arg7, <span class="keyword">int</span> arg8)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0x100</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[v0];</span><br><span class="line">        <span class="keyword">byte</span>[] v7 = arg7.getBytes();</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v3;</span><br><span class="line">        <span class="keyword">for</span>(v3 = <span class="number">0</span>; v3 &lt; v0; ++v3) &#123;</span><br><span class="line">            arg6[v3] = <span class="number">0x100</span> - v3;  <span class="comment">// 256-1降序</span></span><br><span class="line">            v1[v3] = v7[v3 % arg8];  <span class="comment">// 用密钥填满v1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v7_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v2 &lt; v0) &#123;</span><br><span class="line">            v7_1 = (arg6[v2] + v7_1 + v1[v2]) % <span class="number">0x100</span>;</span><br><span class="line">            arg8 = arg6[v2];</span><br><span class="line">            arg6[v2] = arg6[v7_1];</span><br><span class="line">            arg6[v7_1] = arg8;</span><br><span class="line">            ++v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">en2</span><span class="params">(<span class="keyword">int</span>[] arg7, <span class="keyword">int</span>[] arg8, <span class="keyword">int</span> arg9)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v0 &lt; arg9) &#123;</span><br><span class="line">            v1 = (v1 + <span class="number">1</span>) % <span class="number">0x100</span>;</span><br><span class="line">            v2 = ((arg7[v1] &amp; <span class="number">0xFF</span>) + v2) % <span class="number">0x100</span>;</span><br><span class="line">            <span class="keyword">int</span> v3 = arg7[v1];</span><br><span class="line">            arg7[v1] = arg7[v2];</span><br><span class="line">            arg7[v2] = v3;</span><br><span class="line">            arg8[v0] = ((<span class="keyword">byte</span>)(arg8[v0] ^ arg7[((arg7[v1] &amp; <span class="number">0xFF</span>) + (arg7[v2] &amp; <span class="number">0xFF</span>)) % <span class="number">0x100</span>]));</span><br><span class="line">            ++v0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String arg7 = <span class="string">&quot;th1s_1s_k3y!!!!!&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arg6 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0x8B</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x5D</span>, <span class="number">0x95</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x5F</span>, <span class="number">0x29</span>, <span class="number">0x56</span>, <span class="number">0x12</span>, <span class="number">0xB9</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xD0</span>, <span class="number">0x45</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] v0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0x100</span>];</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">int</span>[] v2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        en1(v0, arg7, arg7.length());</span><br><span class="line">        en2(v0, arg6, arg6.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arg6.length; i++) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)(arg6[i] &amp; <span class="number">0xff</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以跟在第一段 python 后面继续写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">en_key = <span class="string">&#x27;7+RmFXP2LWP2L6g3&#x27;</span>[::<span class="number">-1</span>] + <span class="string">&#x27;==qi7esi&#x27;</span>[::<span class="number">-1</span>]</span><br><span class="line">true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line">fake_base = string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span> + string.ascii_uppercase</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> en_key:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">        key += c</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    key += true_base[fake_base.index(c)]</span><br><span class="line"></span><br><span class="line">key = base64.b64decode(key)</span><br><span class="line">print(key)</span><br><span class="line"><span class="comment"># th1s_1s_k3y!!!!!</span></span><br><span class="line"></span><br><span class="line">ciphertext = [<span class="number">0x8B</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x5D</span>, <span class="number">0x95</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x5F</span>, <span class="number">0x29</span>, <span class="number">0x56</span>, <span class="number">0x12</span>, <span class="number">0xB9</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xD0</span>, <span class="number">0x45</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en1</span>(<span class="params">key, len_key</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    v0 = <span class="number">0x100</span></span><br><span class="line">    v1 = [<span class="number">0</span>] * v0</span><br><span class="line">    v7 = [c <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line">    v2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> v3 <span class="keyword">in</span> <span class="built_in">range</span>(v0):</span><br><span class="line">        res.append(<span class="number">0x100</span> - v3)</span><br><span class="line">        v1[v3] = v7[v3 % len_key]</span><br><span class="line">    v7_1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> v2 &lt; v0:</span><br><span class="line">        v7_1 = (res[v2] + v7_1 + v1[v2]) % <span class="number">0x100</span></span><br><span class="line">        len_key = res[v2]</span><br><span class="line">        res[v2] = res[v7_1]</span><br><span class="line">        res[v7_1] = len_key</span><br><span class="line">        v2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en2</span>(<span class="params">res_key, text, len_text</span>):</span></span><br><span class="line">    v0 = <span class="number">0</span></span><br><span class="line">    v1 = <span class="number">0</span></span><br><span class="line">    v2 = <span class="number">0</span></span><br><span class="line">    <span class="comment"># text = bytes(text)</span></span><br><span class="line">    <span class="keyword">while</span> v0 &lt; len_text:</span><br><span class="line">        v1 = (v1 + <span class="number">1</span>) % <span class="number">0x100</span></span><br><span class="line">        v2 = ((res_key[v1] &amp; <span class="number">0xFF</span>) + v2) % <span class="number">0x100</span></span><br><span class="line">        v3 = res_key[v1]</span><br><span class="line">        res_key[v1] = res_key[v2]</span><br><span class="line">        res_key[v2] = v3</span><br><span class="line">        text[v0] = ((text[v0] ^ res_key[((res_key[v1] &amp; <span class="number">0xFF</span>) + (res_key[v2] &amp; <span class="number">0xFF</span>)) % <span class="number">0x100</span>]))</span><br><span class="line">        v0 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line">list_key = en1(key[:], <span class="built_in">len</span>(key))</span><br><span class="line">plaintext = en2(list_key[:], ciphertext[:], <span class="built_in">len</span>(ciphertext))</span><br><span class="line"><span class="built_in">print</span> (plaintext)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> plaintext:</span><br><span class="line">    flag += <span class="built_in">chr</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><p>这样就拿到密码了 <code>Y0uG3tTheP4ssw0rd</code></p><p>然后将 apk 解压一下（用的 bandizip，可以直接解压），在目录下面可以找到 <code>\assets\flag.zip</code></p><p>解压即可拿到 flag</p><h1 id="easy-mips-（mips-逆向）"><a href="#easy-mips-（mips-逆向）" class="headerlink" title="easy_mips （mips 逆向）"></a>easy_mips （mips 逆向）</h1><p>这是一道mips的题，用ida无法反汇编，<del>爬了</del></p><p>先用ida的字符串搜索找到了关键代码在 <code>tty_write</code> 函数里，并且调用了 <code>encry</code> 函数和 <code>init</code> 函数，但因为没学过mips，也就没法继续分析了</p><p>于是第一次尝试使用 Ghidra</p><p>用 Ghidra 打开二进制文件</p><p>找到关键函数 <code>tty_write</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tty_write</span><span class="params">(<span class="keyword">char</span> *param_1,<span class="keyword">char</span> *param_2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> __fd;</span><br><span class="line">  <span class="keyword">size_t</span> __n;</span><br><span class="line">  <span class="keyword">int</span> iVar1;</span><br><span class="line">  EVP_PKEY_CTX aEStack56 [<span class="number">20</span>];</span><br><span class="line">  undefined4 local_24;</span><br><span class="line">  undefined4 local_20;</span><br><span class="line">  undefined4 local_1c;</span><br><span class="line">  undefined4 local_18;</span><br><span class="line">  undefined4 local_14;</span><br><span class="line">  <span class="keyword">char</span> local_10;</span><br><span class="line">  <span class="keyword">int</span> local_c;</span><br><span class="line">  </span><br><span class="line">  local_c = __stack_chk_guard;</span><br><span class="line">  local_24 = <span class="number">0x666c6167</span>;</span><br><span class="line">  local_20 = <span class="number">0x7b69745f</span>;</span><br><span class="line">  local_1c = <span class="number">0x69735f5f</span>;</span><br><span class="line">  local_18 = <span class="number">0x5f5f6661</span>;</span><br><span class="line">  local_14 = <span class="number">0x6b657d0a</span>;</span><br><span class="line">  local_10 = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  __fd = open(param_1,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> (__fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cannot open&quot;</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  __n = <span class="built_in">strlen</span>(param_2);</span><br><span class="line">  write(__fd,param_2,__n);</span><br><span class="line">  read(__fd,aEStack56,<span class="number">0x13</span>);</span><br><span class="line">  encry(aEStack56);</span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>((<span class="keyword">char</span> *)aEStack56,(<span class="keyword">char</span> *)&amp;local_24);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">    write(__fd,<span class="string">&quot;you get the fake flag\n&quot;</span>,<span class="number">0x16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    iVar1 = <span class="built_in">strcmp</span>((<span class="keyword">char</span> *)aEStack56,<span class="string">&quot;3_isjA0UeQZcNa\\`\\Vf&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (iVar1 != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;you_don\&#x27;t_get_the_flag&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LAB_00400b48;</span><br><span class="line">    &#125;</span><br><span class="line">    write(__fd,<span class="string">&quot;good_job!\n&quot;</span>,<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  close(__fd);</span><br><span class="line">LAB_00400b48:</span><br><span class="line">  <span class="keyword">if</span> (local_c != __stack_chk_guard) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前在 ida 中发现 <code>local_24</code> 是一个fake flag，就不管了</p><p>发现调用了一个 <code>encry</code> 函数，进入这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encry</span><span class="params">(EVP_PKEY_CTX *param_1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> cVar1;</span><br><span class="line">  <span class="keyword">int</span> local_10;</span><br><span class="line">  </span><br><span class="line">  init(param_1);</span><br><span class="line">  cVar1 = <span class="string">&#x27;\x05&#x27;</span>;</span><br><span class="line">  local_10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (local_10 &lt; <span class="number">0x13</span>) &#123;</span><br><span class="line">    param_1[local_10] = (EVP_PKEY_CTX)((<span class="keyword">char</span>)param_1[local_10] - cVar1);</span><br><span class="line">    cVar1 = cVar1 + <span class="string">&#x27;\x01&#x27;</span>;</span><br><span class="line">    local_10 = local_10 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现先调用了 <code>init</code> 函数，然后对每一位做了个减法</p><p>查看 <code>init</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(EVP_PKEY_CTX *ctx)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> iVar1;</span><br><span class="line">  <span class="keyword">char</span> extraout_var;</span><br><span class="line">  <span class="keyword">char</span> extraout_var_00;</span><br><span class="line">  <span class="keyword">char</span> extraout_var_01;</span><br><span class="line">  <span class="keyword">int</span> local_20;</span><br><span class="line">  </span><br><span class="line">  iVar1 = __stack_chk_guard;</span><br><span class="line">  srand(<span class="number">0x1c5e</span>);</span><br><span class="line">  rand();</span><br><span class="line">  rand();</span><br><span class="line">  rand();</span><br><span class="line">  *ctx = (EVP_PKEY_CTX)((byte)*ctx ^ extraout_var + <span class="number">0x32</span>U);</span><br><span class="line">  ctx[<span class="number">5</span>] = (EVP_PKEY_CTX)((byte)ctx[<span class="number">5</span>] ^ extraout_var_00 - <span class="number">0x39</span>U);</span><br><span class="line">  ctx[<span class="number">6</span>] = (EVP_PKEY_CTX)((byte)ctx[<span class="number">6</span>] ^ extraout_var_01 + <span class="number">0x30</span>U);</span><br><span class="line">  local_20 = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">while</span> (local_20 &lt; <span class="number">0xd</span>) &#123;</span><br><span class="line">    local_20 = local_20 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (iVar1 != __stack_chk_guard) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">    __stack_chk_fail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __stack_chk_guard;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里自动分析出现了问题，不知道 <code>extraout_var</code> 和 <code>rand</code> 有什么关系</p><p>于是只能去找对应的汇编慢慢读</p><p>根据 Ghidra 里代码与汇编的映射关系，找到了 <code>extraout_var</code> 的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00400d00 80  43  00  00    lb         v1,0x0 (v0)</span><br><span class="line">00400d04 8f  c2  00  24    lw         v0,local_1c (s8)</span><br><span class="line">00400d08 30  42  00  ff    andi       v0,v0,0xff</span><br><span class="line">00400d0c 24  42  00  32    addiu      v0,v0,0x32</span><br><span class="line">00400d10 30  42  00  ff    andi       v0,v0,0xff</span><br><span class="line">00400d14 7c  02  14  20    seb        v0,v0</span><br><span class="line">00400d18 00  62  10  26    xor        v0,v1,v0</span><br><span class="line">00400d1c 7c  02  1c  20    seb        v1,v0</span><br><span class="line">00400d20 8f  c2  00  1c    lw         v0,local_24 (s8)</span><br><span class="line">00400d24 a0  43  00  00    sb         v1,0x0 (v0)</span><br></pre></td></tr></table></figure><p>找到 <code>addiu</code> 说明 <code>v0</code> 对应的就是 <code>extraout_var</code>，发现是从 <code>local_1c</code> 处取出的</p><p>往上找 <code>local_1c</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00400c80 8f  dc  00  10    lw         gp,local_30 (s8)</span><br><span class="line">00400c84 8f  82  80  44    lw         v0,-0x7fbc (gp)&#x3D;&gt;-&gt;rand                          &#x3D; 004010e0</span><br><span class="line">00400c88 00  40  c8  25    or         t9,v0,zero</span><br><span class="line">00400c8c 03  20  f8  09    jalr       t9&#x3D;&gt;rand                                         int rand(void)</span><br><span class="line">00400c90 00  00  00  00    _nop</span><br><span class="line">00400c94 8f  dc  00  10    lw         gp,local_30 (s8)</span><br><span class="line">00400c98 00  40  18  25    or         v1,v0,zero</span><br><span class="line">00400c9c 83  c2  00  31    lb         v0,local_10 +0x1 (s8)</span><br><span class="line">00400ca0 00  62  10  26    xor        v0,v1,v0</span><br><span class="line">00400ca4 00  02  16  03    sra        v0,v0,0x18</span><br><span class="line">00400ca8 af  c2  00  24    sw         v0,local_1c (s8)</span><br></pre></td></tr></table></figure><p>从后往前看，最后是将 v0 存到 local_1c 中，倒数第二步是将 v0 右移 0x18 位（这里问了一下会mips的大佬…），虽然没法完美分析出 rand 的结果存到了哪里，但是可以猜测最后右移了 0x18 位并存到了 <code>local_1c</code> 中。</p><p>于是就可以尝试编写代码，破解flag了。</p><p>首先计算几个 <code>rand</code> 的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(<span class="number">0x1c5e</span>);</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, rand());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, rand());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, rand());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./test_rand</span><br><span class="line">446aef60</span><br><span class="line">5de30bb4</span><br><span class="line">27445d71</span><br></pre></td></tr></table></figure><p>随后写个反向的算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">encry = <span class="string">b&#x27;3_isjA0UeQZcNa\\`\\Vf&#x27;</span></span><br><span class="line">flag_1 = []</span><br><span class="line">t = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> encry:</span><br><span class="line">    flag_1.append(i + t)</span><br><span class="line">    t += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> (flag_1)</span><br><span class="line"></span><br><span class="line">rand = [<span class="number">0x44</span> + <span class="number">0x32</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x5d</span> - <span class="number">0x39</span>, <span class="number">0x27</span> + <span class="number">0x30</span>] + [<span class="number">0</span>] * <span class="number">15</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag_1)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(flag_1[i] ^ (rand[i] &amp; <span class="number">0xff</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><p>得到最终的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">56</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">123</span>, <span class="number">115</span>, <span class="number">75</span>, <span class="number">59</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">113</span>, <span class="number">108</span>, <span class="number">125</span>]</span><br><span class="line">Nep&#123;solar_is_sotql&#125;</span><br></pre></td></tr></table></figure><h1 id="worrrrms-（go语言逆向）"><a href="#worrrrms-（go语言逆向）" class="headerlink" title="worrrrms （go语言逆向）"></a>worrrrms （go语言逆向）</h1><p>只知道用了SM4算法加密，不会go语言，具体的看不懂，爬了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个比赛的前五道题其实就是各个方向的入门题目，有相应的工具并且能够看懂伪代码就可以做了，只需要进行静态分析。做go语言的时候发现go的函数调用太奇怪了，而且有各种指针，不愧是最安全的语言。</p><p>至于后面的几道题，由于解的人太少，也就没有去看，看完wp再补。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;NepCTF2021 reverse 前四题&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2021 week1 crypto 对称之美</title>
    <link href="https://s0uthwood.github.io/2021/03/17/HGAME2021-week1-crypto-%E5%AF%B9%E7%A7%B0%E4%B9%8B%E7%BE%8E/"/>
    <id>https://s0uthwood.github.io/2021/03/17/HGAME2021-week1-crypto-%E5%AF%B9%E7%A7%B0%E4%B9%8B%E7%BE%8E/</id>
    <published>2021-03-17T12:06:09.000Z</published>
    <updated>2021-03-24T09:50:22.551Z</updated>
    
    <content type="html"><![CDATA[<p>密码学实验正好做到弗纳姆密码，发现寒假时做到过，因此记录一下</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">bytes</span>([<span class="built_in">ord</span>(m)^<span class="built_in">ord</span>(k) <span class="keyword">for</span> m, k <span class="keyword">in</span> <span class="built_in">zip</span>(FLAG, itertools.cycle(key))])</span><br><span class="line"></span><br><span class="line">print(cipher)</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>由于给了大量的密文，完全可以对密钥空间进行范围上的缩小。</p><p>由于进行的是异或操作，且明文与密钥均为可见字符，只需要对相同位置的密文与所有可能的密钥字符进行异或计算，结果不在可见字符范围内的均可以排除掉。</p><p>经过初步筛选后密钥空间会小很多，进行爆破或者根据上下文手动选择即可。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="comment"># first = [94, 116, 57, 32, 54, 49, 33, 32, 54, 38, 116, 59, 37, 32, 32, 116, 60, 32, 57, 59, 51, 34, 38, 39, 116, 59, 116, 38, 60, 61, 35, 58, 39, 55, 59, 116, 49, 32, 48, 39, 55, 94, 59, 116, 38, 39, 116, 50, 59, 53, 48, 122, 60, 94, 116, 61, 54, 38, 38, 32, 39, 116, 56, 59, 53, 97, 1]</span></span><br><span class="line"><span class="comment"># first = [35, 25, 21, 25, 17, 2, 28, 3, 5, 21, 17, 3, 5, 80, 80, 18, 25, 31, 21, 31, 94, 21, 80, 4, 24, 31, 17, 3, 17, 4, 80, 80, 25, 17, 3, 0, 9, 24, 9, 25, 24, 17, 30, 3, 9, 80, 17, 17, 2, 80, 31, 80, 80, 22, 3, 3, 25, 9, 21, 24, 80, 17, 21, 80, 23, 93, 62]</span></span><br><span class="line"><span class="comment"># first = [78, 68, 89, 89, 91, 23, 83, 23, 67, 91, 89, 94, 82, 69, 78, 66, 89, 23, 67, 92, 23, 69, 67, 23, 86, 92, 89, 23, 83, 27, 67, 85, 84, 91, 82, 69, 25, 94, 23, 89, 94, 65, 23, 89, 23, 88, 23, 84, 23, 91, 64, 110, 68, 86, 78, 23, 91, 23, 23, 82, 61, 71, 68, 95, 13, 86, 89]</span></span><br><span class="line"><span class="comment"># first = [43, 102, 50, 33, 39, 76, 102, 50, 102, 39, 34, 50, 53, 35, 41, 53, 34, 53, 52, 102, 76, 39, 46, 47, 52, 102, 37, 43, 102, 102, 46, 41, 39, 106, 102, 35, 102, 53, 49, 33, 40, 41, 50, 39, 54, 52, 42, 35, 76, 47, 40, 41, 47, 37, 43, 47, 39, 39, 36, 52, 34, 54, 53, 35, 102, 25, 63]</span></span><br><span class="line"><span class="comment"># first = [3, 25, 29, 78, 0, 1, 12, 6, 7, 26, 78, 7, 64, 15, 27, 23, 78, 11, 23, 15, 58, 2, 7, 29, 10, 8, 7, 15, 100, 12, 15, 10, 2, 78, 1, 10, 100, 78, 6, 78, 9, 7, 6, 28, 15, 78, 1, 78, 15, 0, 78, 27, 10, 11, 3, 29, 26, 0, 1, 78, 7, 11, 78, 28, 100, 27, 49]</span></span><br><span class="line"><span class="comment"># first = [31, 18, 90, 21, 25, 15, 31, 31, 14, 31, 112, 21, 112, 22, 8, 90, 14, 31, 90, 14, 18, 90, 9, 90, 87, 21, 31, 3, 27, 15, 14, 19, 22, 27, 28, 27, 46, 25, 31, 27, 90, 30, 31, 22, 25, 24, 21, 19, 20, 31, 14, 93, 31, 90, 31, 90, 31, 30, 14, 9, 12, 27, 14, 31, 18, 41, 57]</span></span><br><span class="line"><span class="comment"># first = [69, 84, 94, 67, 84, 69, 17, 92, 17, 17, 94, 95, 104, 88, 17, 70, 89, 90, 70, 17, 84, 67, 31, 69, 70, 67, 95, 17, 17, 69, 17, 84, 72, 66, 17, 69, 89, 80, 69, 17, 85, 88, 17, 88, 90, 84, 90, 95, 85, 17, 89, 93, 66, 80, 69, 59, 67, 17, 89, 88, 88, 67, 89, 17, 86, 2, 0]</span></span><br><span class="line"><span class="comment"># first = [65, 93, 85, 19, 19, 29, 71, 64, 80, 71, 71, 82, 92, 73, 81, 92, 86, 19, 91, 82, 65, 86, 19, 91, 90, 19, 71, 93, 93, 19, 71, 64, 19, 19, 67, 92, 86, 94, 91, 94, 90, 93, 94, 93, 19, 82, 19, 19, 19, 64, 86, 95, 19, 65, 65, 88, 82, 90, 19, 87, 87, 19, 86, 90, 82, 85, 67]</span></span><br><span class="line"><span class="comment"># first = [49, 104, 104, 44, 45, 104, 32, 45, 41, 39, 32, 36, 61, 45, 58, 58, 104, 66, 45, 104, 45, 41, 28, 41, 58, 66, 104, 39, 41, 60, 32, 104, 59, 66, 39, 58, 58, 45, 45, 41, 38, 47, 45, 47, 39, 58, 41, 60, 33, 60, 104, 104, 39, 45, 33, 38, 36, 60, 59, 45, 33, 37, 104, 59, 37, 29, 0]</span></span><br><span class="line"><span class="comment"># first = [119, 35, 93, 37, 54, 3, 50, 59, 57, 119, 50, 119, 119, 119, 54, 60, 36, 56, 57, 39, 119, 36, 63, 35, 50, 62, 54, 35, 58, 63, 50, 32, 46, 32, 35, 36, 50, 119, 37, 35, 57, 119, 57, 123, 49, 36, 35, 63, 58, 37, 93, 36, 49, 119, 52, 56, 119, 112, 62, 119, 57, 56, 36, 119, 50, 102, 100]</span></span><br><span class="line"><span class="comment"># first = [57, 56, 49, 49, 51, 56, 112, 38, 112, 51, 34, 36, 61, 57, 57, 57, 51, 37, 112, 49, 49, 63, 53, 112, 52, 36, 62, 112, 53, 53, 57, 53, 61, 53, 53, 112, 54, 57, 112, 53, 53, 50, 37, 112, 112, 113, 112, 53, 49, 49, 61, 53, 112, 32, 49, 39, 35, 35, 52, 63, 55, 34, 49, 36, 43, 123, 34]</span></span><br><span class="line"><span class="comment"># first = [87, 92, 25, 78, 81, 80, 86, 92, 88, 86, 25, 92, 88, 77, 87, 87, 92, 77, 64, 80, 75, 87, 25, 78, 25, 23, 90, 81, 25, 64, 75, 75, 84, 75, 87, 86, 86, 87, 51, 21, 75, 92, 25, 51, 78, 51, 64, 25, 94, 80, 80, 92, 64, 75, 85, 87, 64, 25, 92, 95, 25, 92, 84, 81, 97, 13, 68]</span></span><br><span class="line"><span class="comment"># first = [65, 65, 17, 8, 65, 18, 3, 18, 13, 13, 2, 2, 24, 77, 65, 6, 15, 65, 14, 15, 4, 18, 107, 4, 21, 65, 4, 0, 7, 65, 65, 4, 4, 4, 21, 19, 19, 65, 2, 65, 65, 8, 14, 9, 14, 53, 14, 12, 8, 6, 5, 65, 14, 4, 79, 65, 12, 107, 18, 65, 13, 65, 4, 4, 81, 15, 107]</span></span><br><span class="line"><span class="comment"># first = [57, 61, 57, 54, 55, 120, 50, 116, 43, 55, 55, 48, 120, 120, 82, 120, 61, 43, 45, 44, 120, 120, 62, 127, 55, 23, 43, 46, 55, 51, 82, 120, 44, 120, 49, 120, 61, 48, 48, 59, 55, 54, 62, 45, 52, 57, 45, 49, 54, 48, 60, 58, 45, 44, 120, 57, 53, 47, 120, 44, 49, 55, 118, 120, 42, 60]</span></span><br><span class="line"><span class="comment"># first = [5, 27, 30, 16, 3, 20, 18, 87, 24, 5, 26, 25, 25, 21, 30, 21, 4, 14, 87, 30, 4, 17, 30, 5, 87, 2, 3, 18, 5, 25, 24, 21, 5, 3, 22, 7, 91, 22, 24, 22, 5, 16, 87, 25, 1, 28, 5, 5, 18, 3, 27, 24, 5, 3, 35, 4, 18, 31, 18, 31, 25, 5, 125, 17, 40, 83]</span></span><br><span class="line"><span class="comment"># first = [38, 55, 60, 114, 58, 61, 49, 88, 114, 33, 34, 59, 61, 39, 33, 55, 114, 63, 62, 60, 55, 61, 32, 55, 62, 32, 61, 114, 114, 55, 37, 51, 59, 58, 62, 32, 114, 60, 61, 38, 114, 114, 51, 53, 55, 55, 114, 32, 114, 114, 55, 38, 114, 43, 58, 114, 38, 55, 59, 59, 55, 114, 1, 62, 59, 52]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">char</span>):</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> first:</span><br><span class="line">        num = <span class="built_in">ord</span>(char) ^ c</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0x20</span> <span class="keyword">or</span> <span class="number">0x7f</span> &lt;= num) <span class="keyword">and</span> num != <span class="number">0x0a</span>: <span class="comment"># 可能出现换行符</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> (test(c)):</span><br><span class="line">        <span class="built_in">print</span> (c, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># T</span></span><br><span class="line"><span class="comment"># b d e k l o p q r s t u w x y      final: p</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># F</span></span><br><span class="line"><span class="comment"># n</span></span><br><span class="line"><span class="comment"># z</span></span><br><span class="line"><span class="comment"># b 1</span></span><br><span class="line"><span class="comment"># a c d e f g h i j k m n o p q r s t u v w x y z 0 1 2 3 4 5 7 9      final: 3</span></span><br><span class="line"><span class="comment"># H</span></span><br><span class="line"><span class="comment"># W</span></span><br><span class="line"><span class="comment"># C D E O P Q R S U V W             final: P</span></span><br><span class="line"><span class="comment"># k 9</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># X</span></span><br><span class="line"><span class="comment"># w</span></span><br><span class="line"><span class="comment"># x R</span></span><br></pre></td></tr></table></figure><p>将密文每十六个分一组，每一组相同位置对应的密钥应该是同一个，因此将这些密文字符组成一个 <code>list</code>，这里命名为 <code>first</code>。</p><p>对每一个位置进行密钥的初筛，最终可以得到代码块下面的注释所示的密钥空间</p><p>随便选择一组密钥进行解密运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;Tp7Fnz13HWP9aXwR&#x27;</span></span><br><span class="line">a = (<span class="built_in">bytes</span>([m ^ <span class="built_in">ord</span>(k) <span class="keyword">for</span> m, k <span class="keyword">in</span> <span class="built_in">zip</span>(cipher, itertools.cycle(key))]))</span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure><p>对这些密钥进行手动筛查并更新密钥即可，过程如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;\nLymmet y zn Art vs whe&lt; t&#123;e Elemznts o4 \nr pAintvng orrdrrwiNg b~lancereaph Othem \nout| T&#123;is\x00cousd be &amp;he3obJectl them!elees\x0c \nbjt it 1an3alSo rzlate &amp;o polOrs ~nd \no&amp;hea cOmpolition3l gecHniqjes.\nY=u ~ay\x00not?reali(e zt,\x00but?your 0razn *is &#125;usy w=rkzng\x00behvnd th7 spenEs tp seekr\noft Symmztry w:en3yoU lopk at 3 prinTing1 \nThe e rre\x00sevzral r7as|ns\x00for?this.rThv \nFirsk is t:at3we\x07re ward-w;rew tO lopk forr\nig. our ~ncien&amp; a&#125;ceStorl may &lt;ot3haVe h~d \na &lt;amv fOr ik, butrthvy Knew?that &amp;hezr *own?bodie! wvre\x00basvcallyrsy~meTric~l, asr\nwvre\x00thole of &quot;otvntIal oredat=rs3or\x00pref. \nTh7reuorE, twis ca?e zn Handf whet:er3\ncHoosvng a ?atv, Catcwing d;nnvr Or \n~voidi&lt;g qeiNg oq the ?enf oF a lnarli&lt;g,3\nhUngrf packrof3woLves?or be3rs2\nTAke ~ lookrat3yoUr f~ce inrthv mIrrom \nandrimrgiNe a?line !trrigHt dpwn th7 \n~idDle.?You\&#x27;l&gt; sve Both?sidesrof3yoUr \nyace a e creTty lymmet icrl.\x00Thil is \n9nodn As bvlater3l `ymMetrf and ;t\&#x27;` \nWherz bothrsiwes\x00eitwer si6e |f This?\ndivi6int lIne ~ppearrmoae Or lzss th7 srme\x0e\nSo?here ;s ghe\x00flax: \nhg3mehX0R_i52a_uS34U184nD$fUQny_C1&quot;H3a&#125;\n&#x27;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;o&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="number">112</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">112</span>)</span><br><span class="line"><span class="string">&#x27;p&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&#x27;\nSymmet y zn Art is whe&lt; t&#123;e Elements o4 \nr pAinting orrdrrwiNg balancereaph Other \nout| T&#123;is\x00could be &amp;he3obJects them!elees\x0c \nbut it 1an3alSo relate &amp;o polOrs and \no&amp;hea cOmposition3l gecHniques.\nY=u ~ay\x00not reali(e zt,\x00but your 0razn *is busy w=rkzng\x00behind th7 spenEs to seekr\noft Symmetry w:en3yoU look at 3 prinTing. \nThe e rre\x00several r7as|ns\x00for this.rThv \nFirst is t:at3we\x07re hard-w;rew tO look forr\nig. our ancien&amp; a&#125;ceStors may &lt;ot3haVe had \na &lt;amv fOr it, butrthvy Knew that &amp;hezr *own bodie! wvre\x00basicallyrsy~meTrical, asr\nwvre\x00those of &quot;otvntIal predat=rs3or\x00prey. \nTh7reuorE, this ca?e zn Handy whet:er3\ncHoosing a ?atv, Catching d;nnvr Or \navoidi&lt;g qeiNg on the ?enf oF a snarli&lt;g,3\nhUngry packrof3woLves or be3rs2\nTAke a lookrat3yoUr face inrthv mIrror \nandrimrgiNe a line !trrigHt down th7 \n~idDle. You\&#x27;l&gt; sve Both sidesrof3yoUr \nface a e creTty symmet icrl.\x00This is \n9nodn As bilater3l `ymMetry and ;t\&#x27;` \nWhere bothrsiwes\x00either si6e |f This \ndivi6int lIne appearrmoae Or less th7 srme\x0e\nSo here ;s ghe\x00flag: \nhg3mehX0R_i5-a_uS34U184nD$fUNny_C1&quot;H3a&#125;\n&#x27;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;;&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="number">51</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">51</span>)</span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&quot;\nSymmetry zn Art is when t&#123;e Elements of \nr pAinting or drrwiNg balance eaph Other \nout. T&#123;is\x00could be the3obJects themselees\x0c \nbut it can3alSo relate to polOrs and \nothea cOmpositional gecHniques.\nYou ~ay\x00not realize zt,\x00but your brazn *is busy workzng\x00behind the spenEs to seek \noft Symmetry when3yoU look at a prinTing. \nThere rre\x00several reas|ns\x00for this. Thv \nFirst is that3we\x07re hard-wirew tO look for \nig. our ancient a&#125;ceStors may not3haVe had \na namv fOr it, but thvy Knew that thezr *own bodies wvre\x00basically sy~meTrical, as \nwvre\x00those of potvntIal predators3or\x00prey. \nThereuorE, this came zn Handy whether3\ncHoosing a matv, Catching dinnvr Or \navoiding qeiNg on the menf oF a snarling,3\nhUngry pack of3woLves or bears2\nTAke a look at3yoUr face in thv mIrror \nand imrgiNe a line strrigHt down the \n~idDle. You&#x27;ll sve Both sides of3yoUr \nface are creTty symmetricrl.\x00This is \nknodn As bilateral `ymMetry and it&#x27;` \nWhere both siwes\x00either side |f This \ndividint lIne appear moae Or less the srme\x0e\nSo here is ghe\x00flag: \nhgamehX0R_i5-a_uS3fU184nD$fUNny_C1pH3a&#125;\n&quot;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="number">88</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">88</span>)</span><br><span class="line"><span class="string">&#x27;X&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&quot;\nSymmetry zn art is when t&#123;e elements of \nr painting or drrwing balance eaph other \nout. T&#123;is could be the3objects themselees, \nbut it can3also relate to polors and \nothea compositional gechniques.\nYou ~ay not realize zt, but your brazn \nis busy workzng behind the spenes to seek \noft symmetry when3you look at a printing. \nThere rre several reas|ns for this. Thv \nfirst is that3we&#x27;re hard-wirew to look for \nig. Our ancient a&#125;cestors may not3have had \na namv for it, but thvy knew that thezr \nown bodies wvre basically sy~metrical, as \nwvre those of potvntial predators3or prey. \nThereuore, this came zn handy whether3\nchoosing a matv, catching dinnvr or \navoiding qeing on the menf of a snarling,3\nhungry pack of3wolves or bears2\nTake a look at3your face in thv mirror \nand imrgine a line strright down the \n~iddle. You&#x27;ll sve both sides of3your \nface are cretty symmetricrl. This is \nknodn as bilateral `ymmetry and it&#x27;` \nwhere both siwes either side |f this \ndividint line appear moae or less the srme.\nSo here is ghe flag: \nhgamehX0r_i5-a_uS3fU184nd$fUNny_C1pH3a&#125;\n&quot;</span></span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (default, Jul <span class="number">28</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">59</span>:<span class="number">40</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">80</span>)</span><br><span class="line"><span class="string">&#x27;P&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py</span><br><span class="line"><span class="number">1069</span></span><br><span class="line"><span class="string">b&quot;\nSymmetry in art is when the elements of \na painting or drawing balance each other \nout. This could be the objects themselves, \nbut it can also relate to colors and \nother compositional techniques.\nYou may not realize it, but your brain \nis busy working behind the scenes to seek \nout symmetry when you look at a painting. \nThere are several reasons for this. The \nfirst is that we&#x27;re hard-wired to look for \nit. Our ancient ancestors may not have had \na name for it, but they knew that their \nown bodies were basically symmetrical, as \nwere those of potential predators or prey. \nTherefore, this came in handy whether \nchoosing a mate, catching dinner or \navoiding being on the menu of a snarling, \nhungry pack of wolves or bears!\nTake a look at your face in the mirror \nand imagine a line straight down the \nmiddle. You&#x27;ll see both sides of your \nface are pretty symmetrical. This is \nknown as bilateral symmetry and it&#x27;s \nwhere both sides either side of this \ndividing line appear more or less the same.\nSo here is the flag: \nhgame&#123;X0r_i5-a_uS3fU1+4nd$fUNny_C1pH3r&#125;\n&quot;</span></span><br></pre></td></tr></table></figure><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>得到 flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;X0r_i5-a_uS3fU1+4nd$fUNny_C1pH3r&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;密码学实验正好做到弗纳姆密码，发现寒假时做到过，因此记录一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;NCTF2021 re notsudoku</title>
    <link href="https://s0uthwood.github.io/2021/03/16/VNCTF2021-re-notsudoku/"/>
    <id>https://s0uthwood.github.io/2021/03/16/VNCTF2021-re-notsudoku/</id>
    <published>2021-03-16T14:15:03.000Z</published>
    <updated>2021-03-16T14:23:48.079Z</updated>
    
    <content type="html"><![CDATA[<p>V&amp;NCTF2021补题 第一篇</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>V&amp;NCTF直接白给了，全程耗在了Crackme2上，辛辛苦苦找到密文和算法后发现需要动态调试？过程中not sudoku这题就扫了一眼，结果还没发现是python逆向，于是就爬爬了。</p><p><del>感觉V&amp;N的题出得都好怪啊</del></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>好像是第一次做python exe的逆向</p><p>首先使用 <code>exeinfo</code> 差壳，发现有个 <code>UPX</code></p><p>用 <code>upx.exe -d</code> 脱壳</p><p>比赛的时候没想到这个是python逆向，直接拖到ida里面了，于是直接gg</p><p>再使用 <code>exeinfo</code> 查一下，会发现是 <code>pyinstaller</code> 编译的文件，说明是python逆向</p><p>上网下载一下 <code>pyinstxtractor.py</code> 进行反编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 pyinstxtractor.py notsudoku-noupx.exe</span></span><br></pre></td></tr></table></figure><p>进入文件夹，找没有后缀的文件，发现有一个叫做 <code>2</code> 的，使用 <code>010editor</code> 从 <code>struct</code> 文件复制文件头（第一行），然后添加 <code>.pyc</code> 后缀，进行 <code>pyc</code> 反编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uncompyle6 -o 2.py 2.pyc</span></span><br></pre></td></tr></table></figure><p>即可得到 python 源码文件</p><p>发现文件里有一些日文，于是边阅读边修改就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.7 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.6.9 (default, Jan 26 2021, 15:33:00) </span></span><br><span class="line"><span class="comment"># [GCC 8.4.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: 2.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 272 bytes</span></span><br><span class="line"><span class="keyword">import</span> time, sys, hashlib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_a</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.dic = &#123;&#125;</span><br><span class="line">        self.list_a = []</span><br><span class="line">        self.inputflag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.list_b = []</span><br><span class="line">        self.<span class="built_in">int</span> = <span class="number">65</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> え(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> の(<span class="params">f</span>):</span></span><br><span class="line">            self.dic[other] = f</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> の</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> お(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.dic.get(other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            invoke = self.list_a[i][<span class="number">0</span>]</span><br><span class="line">            value = self.list_a[i][<span class="number">1</span>]</span><br><span class="line">            value_2 = self.list_a[i][<span class="number">2</span>]</span><br><span class="line">            func = self.お(invoke)</span><br><span class="line">            func(value, value_2)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">object_a = class_a()</span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;add&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        object_a.list_b += b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;string&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        print(object_a.inputflag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">2</span>:</span><br><span class="line">            print(object_a.list_b)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> a == <span class="number">3</span>:</span><br><span class="line">                print((object_a.flag), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(a, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;exit&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;input&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    object_a.inputflag = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;sleep&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    time.sleep(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;crypt&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(object_a.inputflag) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> object_a.inputflag:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) &gt; <span class="number">52</span> <span class="keyword">or</span> <span class="built_in">ord</span>(i) &lt; <span class="number">48</span>: <span class="comment"># input &gt; &#x27;0&#x27;, input &lt; &#x27;4&#x27;</span></span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">str</span>(hashlib.new(<span class="string">&#x27;md5&#x27;</span>, <span class="built_in">bytes</span>((object_a.inputflag), encoding=<span class="string">&#x27;utf8&#x27;</span>)).hexdigest())</span><br><span class="line">    <span class="keyword">if</span> x[:<span class="number">6</span>] != <span class="string">&#x27;e3a912&#x27;</span>: <span class="comment"># md5 start with &#x27;e3a912&#x27;</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    object_a.flag = x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;initlist&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(object_a.inputflag), <span class="number">2</span>):</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        a = <span class="built_in">int</span>(object_a.inputflag[i])</span><br><span class="line">        b = <span class="built_in">int</span>(object_a.inputflag[(i + <span class="number">1</span>)])</span><br><span class="line">        object_a.list_b[a][b] = j <span class="comment"># 为list_b赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;basiccheck&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> object_a.list_b[<span class="number">0</span>][<span class="number">1</span>] != <span class="number">24</span> <span class="keyword">or</span> object_a.list_b[<span class="number">4</span>][<span class="number">3</span>] != <span class="number">2</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> object_a.list_b[<span class="number">0</span>][<span class="number">2</span>] != <span class="number">1</span> <span class="keyword">or</span> object_a.list_b[<span class="number">2</span>][<span class="number">3</span>] != <span class="number">20</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> object_a.list_b[<span class="number">1</span>][<span class="number">0</span>] != <span class="number">23</span> <span class="keyword">or</span> object_a.list_b[<span class="number">3</span>][<span class="number">4</span>] != <span class="number">3</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line"><span class="comment"># 024334xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx23xxxx1001xx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@object_a.え(&#x27;check&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="built_in">int</span> += object_a.list_b[a][i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span> != object_a.<span class="built_in">int</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="built_in">int</span> += object_a.list_b[i][b]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span> != object_a.<span class="built_in">int</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line"><span class="comment"># list_b 每行每列和为65</span></span><br><span class="line"><span class="comment"># 02433420112112034430403122130414004132233324100142</span></span><br><span class="line"></span><br><span class="line">object_a.list_a = [</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;welcome baby~ &#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;input your flag~:&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;input&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;your input is:&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&quot;let&#x27;s check......&quot;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;sleep&#x27;</span>, <span class="number">0.5</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]]], <span class="comment"># list_b 包含5个五元list</span></span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;crypt&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;initlist&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;basiccheck&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">1</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">2</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">3</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">4</span>, <span class="number">-1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;check&#x27;</span>, <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;Goodjob!&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;The flag is vnctf&#123;&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="number">0</span>],</span><br><span class="line"> [</span><br><span class="line">  <span class="string">&#x27;exit&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">object_a.run()</span><br></pre></td></tr></table></figure><p>不太懂python的注解，这里好像是通过给定的字符串调用相应的函数？</p><p>整体就是一个五阶幻方，最后使用hashlib里的md5算一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.new(<span class="string">&#x27;md5&#x27;</span>, <span class="built_in">bytes</span>((<span class="string">&#x27;02433420112112034430403122130414004132233324100142&#x27;</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>)).hexdigest()</span><br><span class="line"><span class="string">&#x27;e3a912c1e911ad82544af0c3d753f44f&#x27;</span></span><br></pre></td></tr></table></figure><p>套上 <code>vnctf&#123;&#125;</code> 即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;V&amp;amp;NCTF2021补题 第一篇&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>WUSTCTF2020 re writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/07/WUSTCTF2020-re-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/07/WUSTCTF2020-re-writeups/</id>
    <published>2021-03-07T13:35:10.000Z</published>
    <updated>2021-03-13T16:54:35.070Z</updated>
    
    <content type="html"><![CDATA[<p>平台：BUUOJ</p><a id="more"></a><h1 id="Crossfun"><a href="#Crossfun" class="headerlink" title="Crossfun"></a>Crossfun</h1><p>拖入ida，发现有个判断函数，里面对输入的每个字符进行了判断，把所有判断函数整合起来，就得到flag了</p><p>flag: <code>wctf2020&#123;cpp_@nd_r3verse_@re_fun&#125;</code></p><h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><p>拖入ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stream = fopen(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">fread(ptr, <span class="number">1u</span>LL, <span class="number">0x14</span>uLL, stream);</span><br><span class="line">fclose(stream);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &amp; <span class="number">1</span> )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i * ptr[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然 <code>ptr</code> 里面就是flag</p><p>看到 output.txt 里面正好有19行</p><p>对其进行逆变换（注意0）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ptr = [<span class="number">0</span>, <span class="number">198</span>, <span class="number">232</span>, <span class="number">816</span>, <span class="number">200</span>, <span class="number">1536</span>, <span class="number">300</span>, <span class="number">6144</span>, <span class="number">984</span>, <span class="number">51200</span>, <span class="number">570</span>, <span class="number">92160</span>, <span class="number">1200</span>, <span class="number">565248</span>, <span class="number">756</span>, <span class="number">1474560</span>, <span class="number">800</span>, <span class="number">6291456</span>, <span class="number">1782</span>, <span class="number">65536000</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(ptr[i] &gt;&gt; i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(ptr[i] // i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><p>得到flag <code>ctf2020&#123;d9-dE6-20c&#125;</code></p><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p>先使用upx进行脱壳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d attachment</span><br></pre></td></tr></table></figure><p>进入main函数</p><p>还没来得及按 <code>tab</code> 前就看到了flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">; __unwind &#123;</span><br><span class="line">lea     ecx, [esp+4]</span><br><span class="line">and     esp, 0FFFFFFF0h</span><br><span class="line">push    dword ptr [ecx-4]</span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">push    ecx</span><br><span class="line">sub     esp, 14h</span><br><span class="line">mov     [ebp+var_C], offset flag ; &quot;wctf2020&#123;Just_upx_-d&#125;&quot;</span><br><span class="line">sub     esp, 0Ch</span><br><span class="line">push    offset aWhereIsIt ; &quot;where is it?&quot;</span><br><span class="line">call    puts</span><br><span class="line">add     esp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">leave</span><br><span class="line">lea     esp, [ecx-4]</span><br><span class="line">retn</span><br><span class="line">; &#125; &#x2F;&#x2F; starts at 804887C</span><br></pre></td></tr></table></figure><p>这件事情告诉我们还是要看汇编代码的</p><p><code>flag&#123;Just_upx_-d&#125;</code></p><h1 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h1><p>首先尝试运行程序，发现是一个base64编码程序</p><p>进行测试后看到程序中输出一个字符串 <code>Is there something wrong?</code></p><p>推测这个base64可能不正确</p><p>使用在线工具测试后发现大写字母出现错误</p><p>查看base64_table字符串，发现没有问题，说明源代码中有对字符串进行操作的部分</p><p>查看源代码，发现一个函数是 <code>O_OLootAtYou</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i ) &#123;</span><br><span class="line">    v0 = base64_table[i];</span><br><span class="line">    base64_table[i] = base64_table[<span class="number">19</span> - i];</span><br><span class="line">    result = <span class="number">19</span> - i;</span><br><span class="line">    base64_table[result] = v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数中说有一个奇怪的字符串，显然是用错误的加密得到的结果</p><p>对其进行更正后解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    table.append(c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    c = table[i]</span><br><span class="line">    table[i] = table[<span class="number">19</span> - i]</span><br><span class="line">    table[<span class="number">19</span> - i] = c</span><br><span class="line"></span><br><span class="line">crypto = <span class="string">&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;</span></span><br><span class="line">msg = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(crypto)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(crypto[i]) &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(crypto[i]) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> table[j] == crypto[i]:</span><br><span class="line">                msg += <span class="built_in">chr</span>(j + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg += crypto[i]</span><br><span class="line"><span class="built_in">print</span> (msg)</span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(msg))</span><br></pre></td></tr></table></figure><p>运行得到flag为 <code>wctf2020&#123;Base64_is_the_start_of_reverse&#125;</code></p><h1 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h1><p>运行一下程序，发现这道题和结构体有关</p><p>拖入ida</p><p>看到主函数中输出的是type1和type2函数的结果</p><p>查看type1和type2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a1 ) &#123;</span><br><span class="line">    type1(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">putchar</span>(*a1);</span><br><span class="line">    result = type1(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a1 ) &#123;</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">    result = <span class="built_in">putchar</span>(*a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显是二叉树的中序遍历和后序遍历</p><p>反推出前序遍历，得到flag: <code>wctf2020&#123;This_IS_A_7reE&#125;</code></p><h1 id="funnyre"><a href="#funnyre" class="headerlink" title="funnyre"></a>funnyre</h1><p>拖入ida后，通过start函数进入main</p><p>发现main函数未定义，按p创建函数后F5，查看代码</p><p>看到一串如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v7 = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  *(_BYTE *)(v6 + v7++ + <span class="number">5</span>) ^= <span class="number">0x91</span>u;       <span class="comment">// 每一项异或0x91</span></span><br><span class="line"><span class="keyword">while</span> ( v7 != <span class="number">32</span> );</span><br></pre></td></tr></table></figure><p>除此之外，还有一些错误代码标红</p><p>以及JUMPOUT函数</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JUMPOUT(<span class="number">1</span>, (<span class="keyword">char</span> *)&amp;loc_400B81 + <span class="number">1</span>);</span><br><span class="line">JUMPOUT(<span class="number">0</span>, (<span class="keyword">char</span> *)&amp;loc_400B81 + <span class="number">1</span>);</span><br><span class="line">v89 = MEMORY[<span class="number">0xFFFFFFFF81003D16</span>](v6);</span><br><span class="line">JUMPOUT(v91, (<span class="keyword">char</span> *)&amp;loc_400B88 + <span class="number">2</span>);</span><br><span class="line">*(_DWORD *)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v89 - <span class="number">1065138106</span>) - <span class="number">125L</span>L) += v92;</span><br><span class="line">*(_BYTE *)(a3 - <span class="number">15</span>) &amp;= BYTE1(v90);</span><br></pre></td></tr></table></figure><p>经过学习后发现JUMPOUT函数是经典花指令，需要patch去除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400607 loc_400607:                             ; CODE XREF: main+64↓j</span><br><span class="line">.text:0000000000400607                 xor     byte ptr [rdx+rax+5], 91h</span><br><span class="line">.text:000000000040060C                 add     rax, 1</span><br><span class="line">.text:0000000000400610                 cmp     rax, 20h</span><br><span class="line">.text:0000000000400614                 jnz     short loc_400607</span><br><span class="line">.text:0000000000400616                 jz      short near ptr loc_40061A+1</span><br><span class="line">.text:0000000000400618                 jnz     short near ptr loc_40061A+1</span><br><span class="line">.text:000000000040061A</span><br><span class="line">.text:000000000040061A loc_40061A:                             ; CODE XREF: main+66↑j</span><br><span class="line">.text:000000000040061A                                         ; main+68↑j</span><br><span class="line">.text:000000000040061A                 call    near ptr 0FFFFFFFF810037AFh</span><br><span class="line">.text:000000000040061F                 jz      short near ptr loc_400621+2</span><br><span class="line">.text:0000000000400621</span><br></pre></td></tr></table></figure><p>发现40061A这个位置其实被跳过了</p><p>将这个位置的数据变为90（即nop）</p><p><img data-src="patch.png" alt="patch"></p><p>按c将其转换回汇编代码</p><p>得到正确代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400616                 jz      short loc_40061B</span><br><span class="line">.text:0000000000400618                 jnz     short loc_40061B</span><br><span class="line">.text:000000000040061A                 nop</span><br><span class="line">.text:000000000040061B</span><br><span class="line">.text:000000000040061B loc_40061B:                             ; CODE XREF: main+66↑j</span><br><span class="line">.text:000000000040061B                                         ; main+68↑j</span><br><span class="line">.text:000000000040061B                 nop</span><br><span class="line">.text:000000000040061C                 xor     eax, eax</span><br><span class="line">.text:000000000040061E</span><br><span class="line">.text:000000000040061E loc_40061E:                             ; CODE XREF: main+7B↓j</span><br><span class="line">.text:000000000040061E                 xor     byte ptr [rdx+rax+5], 0CDh</span><br><span class="line">.text:0000000000400623                 add     rax, 1</span><br><span class="line">.text:0000000000400627                 cmp     rax, 20h</span><br><span class="line">.text:000000000040062B                 jnz     short loc_40061E</span><br><span class="line">.text:000000000040062D                 xor     eax, eax</span><br><span class="line">.text:000000000040062F</span><br></pre></td></tr></table></figure><p>在ida汇编模式中将后面几个标红的部分进行同样的修改，随后再F5即可查看到正确的代码</p><p>找到函数结尾</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">memcmp</span>(v5 + <span class="number">5</span>, &amp;unk_4025C0, <span class="number">0x20</span>uLL) )</span><br><span class="line">      JUMPOUT(&amp;loc_4005BB);</span><br></pre></td></tr></table></figure><p>发现unk字符串，将其进行如上函数的逆变换，即可得到最终结果</p><p>我选择的方法是复制到vscode然后利用快捷键进行快速复制，最终得到答案</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">0xD9</span>, <span class="number">0x2C</span>, <span class="number">0x27</span>, <span class="number">0xD6</span>, <span class="number">0xD8</span>, <span class="number">0x2A</span>, <span class="number">0xDA</span>, <span class="number">0x2D</span>, <span class="number">0xD7</span>, <span class="number">0x2C</span>, <span class="number">0xDC</span>, <span class="number">0xE1</span>, <span class="number">0xDB</span>, <span class="number">0x2C</span>, <span class="number">0xD9</span>, <span class="number">0xDD</span>, <span class="number">0x27</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>, <span class="number">0xDC</span>, <span class="number">0xDB</span>, <span class="number">0x2C</span>, <span class="number">0xE1</span>, <span class="number">0x29</span>, <span class="number">0xDA</span>, <span class="number">0xDA</span>, <span class="number">0x2C</span>, <span class="number">0xDA</span>, <span class="number">0x2A</span>, <span class="number">0xD9</span>, <span class="number">0x29</span>, <span class="number">0x2A</span>]</span><br><span class="line">add = [<span class="number">80</span>, <span class="number">64</span>, <span class="number">79</span>, <span class="number">30</span>, <span class="number">91</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">83</span>, <span class="number">59</span>, <span class="number">58</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">57</span>, <span class="number">65</span>, <span class="number">53</span>, <span class="number">41</span>, <span class="number">85</span>, <span class="number">89</span>, <span class="number">44</span>, <span class="number">70</span>, <span class="number">12</span>, <span class="number">84</span>, <span class="number">10</span>, <span class="number">74</span>, <span class="number">17</span>, <span class="number">38</span>, <span class="number">43</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">94</span>, <span class="number">86</span>, <span class="number">55</span>, <span class="number">32</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">96</span>, <span class="number">56</span>, <span class="number">6</span>, <span class="number">73</span>, <span class="number">52</span>, <span class="number">42</span>, <span class="number">61</span>, <span class="number">69</span>, <span class="number">14</span>, <span class="number">75</span>, <span class="number">4</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">15</span>, <span class="number">77</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">62</span>, <span class="number">29</span>, <span class="number">49</span>, <span class="number">47</span>, <span class="number">27</span>, <span class="number">66</span>, <span class="number">82</span>, <span class="number">46</span>, <span class="number">19</span>, <span class="number">88</span>, <span class="number">63</span>, <span class="number">39</span>, <span class="number">35</span>, <span class="number">25</span>, <span class="number">51</span>, <span class="number">18</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">3</span>, <span class="number">72</span>, <span class="number">48</span>, <span class="number">36</span>, <span class="number">93</span>, <span class="number">76</span>, <span class="number">22</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">34</span>, <span class="number">78</span>, <span class="number">26</span>, <span class="number">54</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">20</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">8</span>]</span><br><span class="line">xor1 = [<span class="number">0xF9</span>, <span class="number">0xA9</span>, <span class="number">0x4E</span>, <span class="number">0xD3</span>, <span class="number">0xC7</span>, <span class="number">0xE2</span>, <span class="number">0xD2</span>, <span class="number">0x33</span>, <span class="number">0xA8</span>, <span class="number">0x96</span>, <span class="number">0xBD</span>, <span class="number">0xC</span>, <span class="number">0x13</span>, <span class="number">0x2F</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x9C</span>, <span class="number">0x12</span>, <span class="number">2</span>, <span class="number">0x32</span>, <span class="number">0x10</span>, <span class="number">0x84</span>, <span class="number">0xED</span>, <span class="number">0x95</span>, <span class="number">0x4D</span>, <span class="number">0x75</span>, <span class="number">0x2C</span>, <span class="number">0x5D</span>, <span class="number">0x39</span>, <span class="number">0x18</span>, <span class="number">0x4C</span>, <span class="number">0x49</span>, <span class="number">0x37</span>, <span class="number">0xF0</span>, <span class="number">0x99</span>, <span class="number">0x41</span>, <span class="number">0x86</span>, <span class="number">0x76</span>, <span class="number">0xF5</span>, <span class="number">5</span>, <span class="number">0xC8</span>, <span class="number">0x64</span>, <span class="number">0xFA</span>, <span class="number">0x50</span>, <span class="number">0x3B</span>, <span class="number">8</span>, <span class="number">0xE9</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0xff</span>, <span class="number">0x7D</span>, <span class="number">0x9D</span>, <span class="number">0x1D</span>, <span class="number">0xDA</span>, <span class="number">0xD8</span>, <span class="number">0xEB</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0x98</span>, <span class="number">0xE1</span>, <span class="number">0x34</span>, <span class="number">0x82</span>, <span class="number">0x7F</span>, <span class="number">0xD5</span>, <span class="number">0xE7</span>, <span class="number">0xB8</span>, <span class="number">0xDC</span>, <span class="number">0x97</span>, <span class="number">0xA3</span>, <span class="number">7</span>, <span class="number">0xB6</span>, <span class="number">0xB</span>, <span class="number">0x14</span>, <span class="number">0xCE</span>, <span class="number">0x66</span>, <span class="number">0x62</span>, <span class="number">0xEF</span>]</span><br><span class="line"><span class="comment"># 中间有一个0xff，对应这取反的那个循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> add:</span><br><span class="line">        res[i] -= j</span><br><span class="line">        res[i] %= <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xor1:</span><br><span class="line">        res[i] ^= j</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    res[i] += <span class="number">128</span></span><br><span class="line">    res[i] %= <span class="number">256</span></span><br><span class="line"></span><br><span class="line">xor2 = [<span class="number">0x91</span>, <span class="number">0xCD</span>, <span class="number">0x6A</span>, <span class="number">0x59</span>, <span class="number">0xA</span>, <span class="number">0xF3</span>, <span class="number">0xCA</span>, <span class="number">0x3E</span>, <span class="number">0x6C</span>, <span class="number">0x4F</span>, <span class="number">0x24</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>, <span class="number">0x53</span>, <span class="number">4</span>, <span class="number">0x9E</span>, <span class="number">0x42</span>, <span class="number">0xE</span>, <span class="number">0x8D</span>, <span class="number">0x38</span>, <span class="number">0x7A</span>, <span class="number">0xDD</span>, <span class="number">0x52</span>, <span class="number">0x1B</span>, <span class="number">0xAA</span>, <span class="number">0xAE</span>, <span class="number">0xF8</span>, <span class="number">0x58</span>, <span class="number">0xF2</span>, <span class="number">0x9F</span>, <span class="number">0x3C</span>, <span class="number">0xA1</span>, <span class="number">6</span>, <span class="number">0x78</span>, <span class="number">0x70</span>, <span class="number">0x28</span>, <span class="number">0xEA</span>, <span class="number">0x48</span>, <span class="number">0xE4</span>, <span class="number">0x6E</span>, <span class="number">0x40</span>, <span class="number">0x89</span>, <span class="number">0x16</span>, <span class="number">0xD7</span>, <span class="number">0xB5</span>, <span class="number">0xD</span>, <span class="number">0x17</span>, <span class="number">0x5A</span>, <span class="number">0xB1</span>, <span class="number">0x69</span>, <span class="number">0x5C</span>, <span class="number">0x21</span>, <span class="number">0xE5</span>, <span class="number">0x7E</span>, <span class="number">0x2A</span>, <span class="number">0x94</span>, <span class="number">0xBC</span>, <span class="number">1</span>, <span class="number">0x74</span>, <span class="number">0x57</span>, <span class="number">0x6D</span>, <span class="number">0x1E</span>, <span class="number">0xA2</span>, <span class="number">0x6B</span>, <span class="number">0x22</span>, <span class="number">0xC2</span>, <span class="number">0x3D</span>, <span class="number">0x44</span>, <span class="number">0x90</span>, <span class="number">0x8C</span>, <span class="number">0xB3</span>, <span class="number">0xA6</span>, <span class="number">0x79</span>, <span class="number">0x61</span>, <span class="number">0xD9</span>, <span class="number">0x5B</span>, <span class="number">0x1A</span>, <span class="number">0x43</span>, <span class="number">0x8F</span>, <span class="number">0xA5</span>, <span class="number">0xEE</span>, <span class="number">0x25</span>, <span class="number">0x46</span>, <span class="number">0xE6</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0x71</span>, <span class="number">0xE8</span>, <span class="number">9</span>, <span class="number">0x8A</span>, <span class="number">0x7B</span>, <span class="number">0xB4</span>, <span class="number">0x19</span>, <span class="number">0x15</span>, <span class="number">0x4A</span>, <span class="number">0x47</span>, <span class="number">0xDB</span>, <span class="number">0x72</span>, <span class="number">0x5F</span>, <span class="number">0x26</span>, <span class="number">0xA7</span>, <span class="number">0x8B</span>, <span class="number">0xBA</span>, <span class="number">0xBF</span>, <span class="number">0x87</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xFE</span>, <span class="number">0x77</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x2E</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x56</span>, <span class="number">0xF1</span>, <span class="number">0xB0</span>, <span class="number">0xD1</span>, <span class="number">0xE0</span>, <span class="number">0xF</span>, <span class="number">0x93</span>, <span class="number">0xD6</span>, <span class="number">0x1F</span>, <span class="number">0xCC</span>, <span class="number">0x4B</span>, <span class="number">0xCF</span>, <span class="number">0xDF</span>, <span class="number">0x55</span>, <span class="number">0xB9</span>, <span class="number">0x2B</span>, <span class="number">0x85</span>, <span class="number">0x31</span>, <span class="number">0x29</span>, <span class="number">0xFD</span>, <span class="number">0x3A</span>, <span class="number">0x5E</span>, <span class="number">0xDE</span>, <span class="number">3</span>, <span class="number">0xC6</span>, <span class="number">0xC1</span>, <span class="number">0xC5</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0xFC</span>, <span class="number">0xBE</span>, <span class="number">0xEC</span>, <span class="number">0xC0</span>, <span class="number">0xAD</span>, <span class="number">0xA4</span>, <span class="number">0xD0</span>, <span class="number">0x35</span>, <span class="number">0xB7</span>, <span class="number">0x51</span>, <span class="number">0xAB</span>, <span class="number">0x2D</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0x60</span>, <span class="number">0xAC</span>, <span class="number">0x30</span>, <span class="number">0xD4</span>, <span class="number">0xCB</span>, <span class="number">0x9B</span>, <span class="number">0x9A</span>, <span class="number">0xFB</span>, <span class="number">0x6F</span>, <span class="number">0xF7</span>, <span class="number">0x8E</span>, <span class="number">0xA0</span>, <span class="number">0x27</span>, <span class="number">0xC9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xor2:</span><br><span class="line">        res[i] ^= j</span><br><span class="line">    print(<span class="built_in">chr</span>(res[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到 flag: <code>1dc20f6e3d497d15cef47d9a66d6f1af</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;平台：BUUOJ&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF2020 reverse writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/04/MRCTF2020-reverse-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/04/MRCTF2020-reverse-writeups/</id>
    <published>2021-03-04T08:38:52.000Z</published>
    <updated>2021-03-13T16:54:08.805Z</updated>
    
    <content type="html"><![CDATA[<p>平台：BUUOJ</p><p>做题的时候懒了，没写思路，暂时先贴上代码吧</p><a id="more"></a><h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dword = [ <span class="number">9</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x17</span>, <span class="number">0x7</span>, <span class="number">0x18</span>, <span class="number">0xc</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0x10</span>, <span class="number">0x3</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x1D</span>, <span class="number">0x0b</span>, <span class="number">0x1e</span>, <span class="number">0x1b</span>, <span class="number">0x16</span>, <span class="number">0x4</span>, <span class="number">0x0d</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x2</span>, <span class="number">0x19</span>, <span class="number">0x5</span>, <span class="number">0x1f</span>, <span class="number">0x8</span>, <span class="number">0x12</span>, <span class="number">0x1a</span>, <span class="number">0x1c</span>, <span class="number">0xe</span>, <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line">flag = [ <span class="number">0x67</span>, <span class="number">0x79</span>, <span class="number">0x7b</span>, <span class="number">0x7f</span>, <span class="number">0x75</span>, <span class="number">0x2b</span>, <span class="number">0x3c</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x79</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x42</span>, <span class="number">0x7B</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>, <span class="number">0x66</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x4C</span>, <span class="number">0x57</span>, <span class="number">0x79</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>, <span class="number">0x5C</span>, <span class="number">0x45</span>, <span class="number">0x6F</span>, <span class="number">0x62</span>, <span class="number">0x4D</span>, <span class="number">0x3f</span>]</span><br><span class="line">print(<span class="built_in">len</span>(dword), <span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dword)):</span><br><span class="line">    flag[i] ^= dword[i]</span><br><span class="line"></span><br><span class="line">code = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dword)):</span><br><span class="line">    code[dword[i]] = flag[i]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">    print(<span class="built_in">chr</span>(code[i]), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p>flag: <code>MRCTF&#123;Tr4nsp0sltiON_Clph3r_1s_3z&#125;</code></p><h1 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;MSAWB~FXZ:J:`tQJ&quot;N@ bpdd&#125;8g&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    print(<span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) ^ i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p>flag: <code>MRCTF&#123;@_R3@1ly_E2_R3verse!&#125;</code></p><h1 id="hello-world-go"><a href="#hello-world-go" class="headerlink" title="hello_world_go"></a>hello_world_go</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.rodata:00000000004D3C58 unk_4D3C58      db  66h ; f             ; DATA XREF: main_main:loc_49A40A↑o</span><br><span class="line">.rodata:00000000004D3C58                                         ; main_main+25C↑o</span><br><span class="line">.rodata:00000000004D3C59                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C5A                 db  61h ; a</span><br><span class="line">.rodata:00000000004D3C5B                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C5C                 db  7Bh ; &#123;</span><br><span class="line">.rodata:00000000004D3C5D                 db  68h ; h</span><br><span class="line">.rodata:00000000004D3C5E                 db  65h ; e</span><br><span class="line">.rodata:00000000004D3C5F                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C60                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C61                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C62                 db  5Fh ; _</span><br><span class="line">.rodata:00000000004D3C63                 db  77h ; w</span><br><span class="line">.rodata:00000000004D3C64                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C65                 db  72h ; r</span><br><span class="line">.rodata:00000000004D3C66                 db  6Ch ; l</span><br><span class="line">.rodata:00000000004D3C67                 db  64h ; d</span><br><span class="line">.rodata:00000000004D3C68                 db  5Fh ; _</span><br><span class="line">.rodata:00000000004D3C69                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C6A                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C6B                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C6C                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C6D                 db  67h ; g</span><br><span class="line">.rodata:00000000004D3C6E                 db  6Fh ; o</span><br><span class="line">.rodata:00000000004D3C6F                 db  7Dh ; &#125;</span><br></pre></td></tr></table></figure><h1 id="PixelShooter"><a href="#PixelShooter" class="headerlink" title="PixelShooter"></a>PixelShooter</h1><p>先使用NoxPlayer打开这个apk，发现游戏结束后有个flag信息，说得分不够高，说明flag会在游戏结束时根据得分获得</p><p>使用apktool解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar apktool_2.5.0.jar d PixelShooter.apk</span></span><br></pre></td></tr></table></figure><p>这个显然是unity3d逆向，找到 <code>/assets/bin/Data/Managed</code>，使用 dnSpy打开 <code>Assembly-CSharp.dll</code></p><p>看到有个gameController，其中有个gameOver</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GameOver</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.isGameOver = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.UI.GetComponent&lt;UIController&gt;().GameOver(<span class="keyword">this</span>.score, <span class="keyword">this</span>.bestScore);</span><br><span class="line"><span class="keyword">if</span> (PlayerPrefs.HasKey(<span class="string">&quot;bestScore&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.bestScore = Mathf.Max(<span class="keyword">this</span>.score, PlayerPrefs.GetInt(<span class="string">&quot;bestScore&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.bestScore = <span class="keyword">this</span>.score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">base</span>.GetComponent&lt;AudioSource&gt;().Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个获取ui的函数，查看</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GameOver</span>(<span class="params"><span class="built_in">int</span> score, <span class="built_in">int</span> bestScore</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pad.SetActive(<span class="literal">false</span>);</span><br><span class="line">Time.timeScale = <span class="number">0f</span>;</span><br><span class="line"><span class="built_in">string</span> text = <span class="string">&quot;您的飞机已坠毁\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (bestScore &lt; score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> text2 = text;</span><br><span class="line">text = <span class="built_in">string</span>.Concat(<span class="keyword">new</span> <span class="built_in">object</span>[]</span><br><span class="line">&#123;</span><br><span class="line">text2,</span><br><span class="line"><span class="string">&quot;获得最高分:&quot;</span>,</span><br><span class="line">score,</span><br><span class="line"><span class="string">&quot;!\n&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">PlayerPrefs.SetInt(<span class="string">&quot;bestScore&quot;</span>, score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;少年继续努力！要拿到flag还差亿点点\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;战绩不错！但是要拿到flag还差亿点&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">500</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;惊人的成绩！！但是要拿到flag还差一点\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;MRCTF&#123;Unity_1S_Fun_233&#125;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Time.time - <span class="keyword">this</span>.lastTime &lt; <span class="number">15f</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;以及，别作死啊！\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Time.time - <span class="keyword">this</span>.lastTime &lt; <span class="number">60f</span>)</span><br><span class="line">&#123;</span><br><span class="line">text += <span class="string">&quot;以及注意闪避！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.gameOverText.text = text;</span><br><span class="line"><span class="keyword">this</span>.gameOverUI.SetActive(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;平台：BUUOJ&lt;/p&gt;
&lt;p&gt;做题的时候懒了，没写思路，暂时先贴上代码吧&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>GUETCTF2019 re writeups</title>
    <link href="https://s0uthwood.github.io/2021/03/04/GUETCTF2019-reverse-writeups/"/>
    <id>https://s0uthwood.github.io/2021/03/04/GUETCTF2019-reverse-writeups/</id>
    <published>2021-03-04T08:17:36.000Z</published>
    <updated>2021-03-13T17:00:53.275Z</updated>
    
    <content type="html"><![CDATA[<p>平台：BUUOJ</p><a id="more"></a><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先upx脱壳</p><p>然后拖入ida</p><p>找到关键字符串</p><p>进入函数</p><p>发现是对每一位进行乘法然后判断</p><p>直接扔到python里算一下，发现 <code>a[6]</code> 缺失，以及有一位算不出来，可能出现了溢出</p><p>用c语言把这一位算出来，得到是 <code>a</code></p><p>对第7位进行暴力破解，发现1可以，得到flag</p><p><code>flag&#123;e165421110ba03099a1c039337&#125;</code></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = [ <span class="number">1629056</span>,  <span class="number">6771600</span>,  <span class="number">3682944</span>, <span class="number">10431000</span>,  <span class="number">3977328</span>,  <span class="number">5138336</span>,  <span class="number">7532250</span>,  <span class="number">5551632</span>,  <span class="number">3409728</span>, <span class="number">13013670</span>,  <span class="number">6088797</span>,  <span class="number">7884663</span>,  <span class="number">8944053</span>,  <span class="number">5198490</span>,  <span class="number">4544518</span>,   <span class="number">10115280</span>,<span class="number">3645600</span>,  <span class="number">9667504</span>,  <span class="number">5364450</span>, <span class="number">13464540</span>,  <span class="number">5488432</span>, <span class="number">14479500</span>,  <span class="number">6451830</span>,  <span class="number">6252576</span>,  <span class="number">7763364</span>,  <span class="number">7327320</span>,  <span class="number">8741520</span>,  <span class="number">8871876</span>,  <span class="number">4086720</span>,  <span class="number">9374400</span>, <span class="number">5759124</span> ]</span><br><span class="line">a = [ <span class="number">166163712</span> , <span class="number">731332800</span> , <span class="number">357245568</span> , <span class="number">1074393000</span>, <span class="number">489211344</span> , <span class="number">518971936</span> , <span class="number">406741500</span> , <span class="number">294236496</span> , <span class="number">177305856</span> ,  <span class="number">650683500</span>,  <span class="number">298351053</span>,  <span class="number">386348487</span>,  <span class="number">438258597</span>,  <span class="number">249527520</span>,  <span class="number">445362764</span>, <span class="number">981182160</span>, <span class="number">174988800</span>, <span class="number">493042704</span>,  <span class="number">257493600</span>,  <span class="number">767478780</span>,  <span class="number">312840624</span>,  <span class="number">140451150</span>,  <span class="number">316139670</span>,  <span class="number">619005024</span>,  <span class="number">372641472</span>,  <span class="number">373693320</span>,  <span class="number">498266640</span>,  <span class="number">452465676</span>,  <span class="number">208422720</span>,  <span class="number">515592000</span>,  <span class="number">719890500</span> ]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    <span class="keyword">if</span> (a[i] % x[i] == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(a[i] // x[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>, i)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nfinish&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e65421110ba03099</span><br><span class="line"> 21</span><br><span class="line">1c039337&#125;</span><br><span class="line">finish</span><br></pre></td></tr></table></figure><p>再写个c把这一位算一下（其实不如直接用c暴力破解了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0x21</span>; x &lt; <span class="number">0x7f</span>; x++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">14479500</span> * x == <span class="number">1404511500</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;finish\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="number-game"><a href="#number-game" class="headerlink" title="number game"></a>number game</h1><p>先拖入ida进行静态分析，查看main函数核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;v5, a3);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_input((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v5) )<span class="comment">// 长度为10且只能是&quot;01234&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  v3 = sub_400758((__int64)&amp;v5, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  sub_400807((__int64)v3, (__int64)&amp;v7);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  sub_400881((<span class="keyword">char</span> *)&amp;v7);                    <span class="comment">// v7 = &quot;0421421430&quot;</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400917() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;TQL!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>, &amp;v7);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your are cxk!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入的字符串需要通过两个if语句</p><p>先看第一个if语句对应的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(a1) == <span class="number">10</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1[i] &gt; <span class="number">52</span> || a1[i] &lt;= <span class="number">47</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是对输入数据的简单要求，要求是10个0-4自成的字符串</p><p>再查看第二个if中的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = j + <span class="number">1</span>; k &lt;= <span class="number">4</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)&amp;unk_601060 + <span class="number">5</span> * i + j) == *((_BYTE *)&amp;unk_601060 + <span class="number">5</span> * i + k) )</span><br><span class="line">        v1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)&amp;unk_601060 + <span class="number">5</span> * j + i) == *((_BYTE *)&amp;unk_601060 + <span class="number">5</span> * k + i) )</span><br><span class="line">        v1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求在某条件下unk_601060中的两个字符不相同</p><p>再查看一下中间的几个函数</p><p>先查看 <code>sub_400881</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_400881</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  byte_601062 = *a1;</span><br><span class="line">  byte_601067 = a1[<span class="number">1</span>];</span><br><span class="line">  byte_601069 = a1[<span class="number">2</span>];</span><br><span class="line">  byte_60106B = a1[<span class="number">3</span>];</span><br><span class="line">  byte_60106E = a1[<span class="number">4</span>];</span><br><span class="line">  byte_60106F = a1[<span class="number">5</span>];</span><br><span class="line">  byte_601071 = a1[<span class="number">6</span>];</span><br><span class="line">  byte_601072 = a1[<span class="number">7</span>];</span><br><span class="line">  byte_601076 = a1[<span class="number">8</span>];</span><br><span class="line">  result = (<span class="keyword">unsigned</span> __int8)a1[<span class="number">9</span>];</span><br><span class="line">  byte_601077 = a1[<span class="number">9</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是将a1中的数据放到指定的内存位置上</p><p>查看这个内存地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">data:0000000000601060 unk_601060      db  31h ; 1</span><br><span class="line">.data:0000000000601061                 db  34h ; 4</span><br><span class="line">.data:0000000000601062 byte_601062     db 23h                  ; DATA XREF: sub_400881+F↑w</span><br><span class="line">.data:0000000000601063                 db  32h ; 2</span><br><span class="line">.data:0000000000601064                 db  33h ; 3</span><br><span class="line">.data:0000000000601065                 db  33h ; 3</span><br><span class="line">.data:0000000000601066                 db  30h ; 0</span><br><span class="line">.data:0000000000601067 byte_601067     db 23h                  ; DATA XREF: sub_400881+1D↑w</span><br><span class="line">.data:0000000000601068                 db  31h ; 1</span><br><span class="line">.data:0000000000601069 byte_601069     db 23h                  ; DATA XREF: sub_400881+2B↑w</span><br><span class="line">.data:000000000060106A                 db  30h ; 0</span><br><span class="line">.data:000000000060106B byte_60106B     db 23h                  ; DATA XREF: sub_400881+39↑w</span><br><span class="line">.data:000000000060106C                 db  32h ; 2</span><br><span class="line">.data:000000000060106D                 db  33h ; 3</span><br><span class="line">.data:000000000060106E byte_60106E     db 23h                  ; DATA XREF: sub_400881+47↑w</span><br><span class="line">.data:000000000060106F byte_60106F     db 23h                  ; DATA XREF: sub_400881+55↑w</span><br><span class="line">.data:0000000000601070                 db  33h ; 3</span><br><span class="line">.data:0000000000601071 byte_601071     db 23h                  ; DATA XREF: sub_400881+63↑w</span><br><span class="line">.data:0000000000601072 byte_601072     db 23h                  ; DATA XREF: sub_400881+71↑w</span><br><span class="line">.data:0000000000601073                 db  30h ; 0</span><br><span class="line">.data:0000000000601074                 db  34h ; 4</span><br><span class="line">.data:0000000000601075                 db  32h ; 2</span><br><span class="line">.data:0000000000601076 byte_601076     db 23h                  ; DATA XREF: sub_400881+7F↑w</span><br><span class="line">.data:0000000000601077 byte_601077     db 23h                  ; DATA XREF: sub_400881+8D↑w</span><br><span class="line">.data:0000000000601078                 db  31h ; 1</span><br></pre></td></tr></table></figure><p>发现与 <code>unk_601060</code> 对应</p><p>说明这个程序是将输入数据填到指定内存上，然后判断是否符合某个特殊条件</p><p>由于总共有25个字符，并且程序中出现了形如 <code>5 * i + j</code> 的值，以及题目名称 <code>number_game</code> 推测是一种类似数独的填数游戏，每行每列数字只能为01234且不能重复</p><p>查看已有的数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">14 23</span><br><span class="line">30 1 </span><br><span class="line">0 23 </span><br><span class="line"> 3  0</span><br><span class="line">42  1</span><br></pre></td></tr></table></figure><p>那么最后v7中应该为 <code>0421421430</code></p><p>简单查看了 <code>sub_400758</code> 和 <code>sub_400807</code> 后，确定这两个函数只进行了顺序的转换，只要得知其结果就可以</p><p>因此使用gdb进行动态调试，目的是找到这两个函数的顺序调换结果</p><p>首先 <code>start</code> 运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> start</span></span><br></pre></td></tr></table></figure><p>在 <code>0x40a62</code> 处打上断点（输入后，第一个if前）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> b *0x400a62</span></span><br></pre></td></tr></table></figure><p>运行，并输入 <code>0123456789</code></p><p>接下来需要绕过第一个if判断</p><p>在调用函数前修改eip，直接跳到jz后面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> <span class="built_in">set</span> var <span class="variable">$rip</span>=0x400a76</span></span><br></pre></td></tr></table></figure><p>接下来需要查看两个函数运行后的值，这个值是 <code>sub_400881</code> 的参数，因此在call这个函数前打上断点，并查看 rdi 寄存器的结果即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> b *0x400aae</span></span><br><span class="line">Breakpoint 3 at 0x400aae</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> c</span></span><br><span class="line">Continuing.</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x7ffffffedf40</span><br><span class="line">RBX: 0x400b20 --&gt; 0x41ff894156415741</span><br><span class="line">RCX: 0xe</span><br><span class="line">RDX: 0x7ffffffedf40</span><br><span class="line">RSI: 0x7ffffffedf40</span><br><span class="line">RDI: 0x7ffffffedf40</span><br><span class="line">RBP: 0x7ffffffedf60</span><br><span class="line">RSP: 0x7ffffffedf20</span><br><span class="line">RIP: 0x400aae --&gt; 0xb8fffffdcee8</span><br><span class="line">R8 : 0x6033d0 --&gt; 0x36 (&#x27;6&#x27;)</span><br><span class="line">R9 : 0x7c (&#x27;|&#x27;)</span><br><span class="line">R10: 0x4003ce --&gt; 0x5f00636f6c6c616d (&#x27;malloc&#x27;)</span><br><span class="line">R11: 0x7fffff78bbe0 --&gt; 0x6033e0 --&gt; 0x0</span><br><span class="line">R12: 0x4005e0 --&gt; 0x89485ed18949ed31</span><br><span class="line">R13: 0x7ffffffee050</span><br><span class="line">R14: 0x0</span><br><span class="line">R15: 0x0</span><br><span class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400aa3:    mov    BYTE PTR [rbp-0x16],0x0</span><br><span class="line">   0x400aa7:    lea    rax,[rbp-0x20]</span><br><span class="line">   0x400aab:    mov    rdi,rax</span><br><span class="line">=&gt; 0x400aae:    call   0x400881</span><br><span class="line">   0x400ab3:    mov    eax,0x0</span><br><span class="line">   0x400ab8:    call   0x400917</span><br><span class="line">   0x400abd:    test   eax,eax</span><br><span class="line">   0x400abf:    je     0x400afc</span><br><span class="line">Guessed arguments:</span><br><span class="line">arg[0]: 0x7ffffffedf40</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">Invalid $SP address: 0x7ffffffedf20</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line"></span><br><span class="line">Breakpoint 3, 0x0000000000400aae in ?? ()</span><br></pre></td></tr></table></figure><p>注意到 <code>RDI: 0x7ffffffedf40</code></p><p>因此查看这个内存地址下的值即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> x/2x 0x7ffffffedf40</span></span><br><span class="line">0x7ffffffedf40: 0x3530343931383337      0x0000000000003632</span><br></pre></td></tr></table></figure><p>根据小端模式</p><p><code>0123456789</code> 被转换为 <code>7381940526</code></p><p>根据这个信息将 <code>0421421430</code> 还原，得到 <code>1134240024</code></p><p>运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./number_game</span></span><br><span class="line">1134240024</span><br><span class="line">TQL!</span><br><span class="line">flag&#123;1134240024&#125;</span><br></pre></td></tr></table></figure><h1 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h1><p>拖入ida，查看主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input your flag:&quot;</span>, a2, v19);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line"><span class="built_in">memset</span>(&amp;v9, <span class="number">0</span>, <span class="number">0x408</span>uLL);</span><br><span class="line">sub_4006B6(&amp;v9, (__int64)&amp;v10, <span class="number">8</span>);</span><br><span class="line">v3 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">sub_4007DB(&amp;v9, (__int64)&amp;s, v3);</span><br><span class="line">v4 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">sub_4008FA((__int64)&amp;s, v4, v19, &amp;v6);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( v19[i] != byte_602080[i] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Good&quot;</span>);</span><br></pre></td></tr></table></figure><p>在进行判断前执行了三个函数</p><p>最后一个函数是一个类base64</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v20 &lt; a2 )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = v20++;</span><br><span class="line">  v17 = *(_BYTE *)(v4 + a1);</span><br><span class="line">  <span class="keyword">if</span> ( v20 &gt;= a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = v20++;</span><br><span class="line">    v6 = *(_BYTE *)(v5 + a1);</span><br><span class="line">  &#125;</span><br><span class="line">  v18 = v6;</span><br><span class="line">  <span class="keyword">if</span> ( v20 &gt;= a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = v20++;</span><br><span class="line">    v8 = *(_BYTE *)(v7 + a1);</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = v8;</span><br><span class="line">  v10 = v19;</span><br><span class="line">  v11 = v19 + <span class="number">1</span>;</span><br><span class="line">  a3[v10] = ((v17 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">  v12 = v11++;</span><br><span class="line">  a3[v12] = ((((v18 &amp; <span class="number">0xFF</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">16</span> * v17) &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">  a3[v11] = ((((v9 &amp; <span class="number">0xFF</span>) &gt;&gt; <span class="number">6</span>) | <span class="number">4</span> * v18) &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">  v13 = v11 + <span class="number">1</span>;</span><br><span class="line">  v19 = v11 + <span class="number">2</span>;</span><br><span class="line">  a3[v13] = (v9 &amp; <span class="number">0x3F</span>) + <span class="number">61</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( a2 % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  a3[--v19] = <span class="number">61</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( a2 % <span class="number">3</span> != <span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">&#125;</span><br><span class="line">a3[v19 - <span class="number">1</span>] = <span class="number">61</span>;</span><br></pre></td></tr></table></figure><p>将每一位减少61后映射到base64的字符串上就可以得到base64结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Z`TzzTrD|fQP[_VVL|yneURyUmFklVJgLasJroZpHRxIUlH\\vZE&#x27;</span> <span class="comment"># 注意转义字符</span></span><br><span class="line">base = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">map</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    base += <span class="built_in">map</span>[<span class="built_in">ord</span>(c) - <span class="number">61</span>]</span><br><span class="line"><span class="built_in">print</span> (base)</span><br><span class="line"><span class="comment"># base = &#x27;djX99X1H/pUTeiZZP/8xoYV8YwJuvZNqPk2N1ydzLV7MYvLf5dI&#x27;</span></span><br><span class="line"><span class="comment"># 最后再补充一个 &#x27;=&#x27; 即可</span></span><br></pre></td></tr></table></figure><p>破解完这个函数后再查看上两个函数</p><p>根据调用判断第一个函数为第二个函数提供密钥，这个应该是固定结果，动态调试即可得到</p><p>查看第二个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a3; ++i ) &#123;</span><br><span class="line">  v7 = (<span class="keyword">unsigned</span> __int8)(v7 + <span class="number">1</span>);</span><br><span class="line">  v3 = *(_DWORD *)(<span class="number">4L</span>L * v7 + v9);</span><br><span class="line">  v8 = (<span class="keyword">unsigned</span> __int8)(v8 + v3);</span><br><span class="line">  v4 = *(_DWORD *)(<span class="number">4L</span>L * v8 + v9);</span><br><span class="line">  *(_DWORD *)(v9 + <span class="number">4L</span>L * v7) = v4;</span><br><span class="line">  *(_DWORD *)(v9 + <span class="number">4L</span>L * v8) = v3;</span><br><span class="line">  *(_BYTE *)(i + a2) ^= *(_BYTE *)(<span class="number">4L</span>L * (<span class="keyword">unsigned</span> __int8)(v3 + v4) + v9);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这对输入的每一位做了个异或运算，异或的数字也是固定的，直接进行动态调试即可（根据经验猜测是RC4或者与其类似）</p><p>根据base64的位数得知flag最多有39位</p><p>进行动态调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> start</span></span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> c</span></span><br><span class="line">Continuing.</span><br><span class="line">please input your flag:flag&#123;abcdefghijklmnopqrstuvwxyz0123456&#125;</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x27 (&quot;&#x27;&quot;)</span><br><span class="line">RBX: 0x0</span><br><span class="line">RCX: 0x0</span><br><span class="line">RDX: 0x7ffffffed9c0 (&quot;flag&#123;abcdefghijklmnopqrstuvwxyz0123456&#125;&quot;)</span><br><span class="line">RSI: 0x7ffffffed9b0 --&gt; 0x4010202030302010</span><br><span class="line">RDI: 0x7ffffffed9e0 --&gt; 0x7d363534333231 (&#x27;123456&#125;&#x27;)</span><br><span class="line">RBP: 0x7ffffffeded0 --&gt; 0x400c80 --&gt; 0x41ff894156415741</span><br><span class="line">RSP: 0x7ffffffed590 --&gt; 0x0</span><br><span class="line">RIP: 0x400bbc --&gt; 0xfffaf08d8d48c289</span><br><span class="line">R8 : 0x0</span><br><span class="line">R9 : 0x0</span><br><span class="line">R10: 0x3</span><br><span class="line">R11: 0x7fffff18ee90 (&lt;__memset_avx2_unaligned_erms&gt;:    vmovd  xmm0,esi)</span><br><span class="line">R12: 0x4005c0 --&gt; 0x89485ed18949ed31</span><br><span class="line">R13: 0x7ffffffedfb0 --&gt; 0x1</span><br><span class="line">R14: 0x0</span><br><span class="line">R15: 0x0</span><br><span class="line">EFLAGS: 0x206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400bad:    lea    rax,[rbp-0x510]</span><br><span class="line">   0x400bb4:    mov    rdi,rax</span><br><span class="line">   0x400bb7:    call   0x400550 &lt;strlen@plt&gt;</span><br><span class="line">=&gt; 0x400bbc:    mov    edx,eax</span><br><span class="line">   0x400bbe:    lea    rcx,[rbp-0x510]</span><br><span class="line">   0x400bc5:    lea    rax,[rbp-0x930]</span><br><span class="line">   0x400bcc:    mov    rsi,rcx</span><br><span class="line">   0x400bcf:    mov    rdi,rax</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7ffffffed590 --&gt; 0x0</span><br><span class="line">0008| 0x7ffffffed598 --&gt; 0x5f4f636d (&#x27;mcO_&#x27;)</span><br><span class="line">0016| 0x7ffffffed5a0 --&gt; 0x0</span><br><span class="line">0024| 0x7ffffffed5a8 --&gt; 0x31000000b0</span><br><span class="line">0032| 0x7ffffffed5b0 --&gt; 0x7000000075 (&#x27;u&#x27;)</span><br><span class="line">0040| 0x7ffffffed5b8 --&gt; 0xdf000000f8</span><br><span class="line">0048| 0x7ffffffed5c0 --&gt; 0x3c00000007</span><br><span class="line">0056| 0x7ffffffed5c8 --&gt; 0x7100000078 (&#x27;x&#x27;)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400bbc in ?? ()</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> x/10x <span class="variable">$rdx</span></span></span><br><span class="line">0x7ffffffed9c0: 0x6362617b67616c66      0x6b6a696867666564</span><br><span class="line">0x7ffffffed9d0: 0x737271706f6e6d6c      0x307a797877767574</span><br><span class="line">0x7ffffffed9e0: 0x007d363534333231      0x0000000000000000</span><br><span class="line">0x7ffffffed9f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffffffeda00: 0x0000000000000000      0x0000000000000000</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> c</span></span><br><span class="line">Continuing.</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x7ffffffed5a0 --&gt; 0x1c00000027</span><br><span class="line">RBX: 0x0</span><br><span class="line">RCX: 0x138</span><br><span class="line">RDX: 0x1c</span><br><span class="line">RSI: 0x7d (&#x27;&#125;&#x27;)</span><br><span class="line">RDI: 0x7ffffffed5a0 --&gt; 0x1c00000027</span><br><span class="line">RBP: 0x7ffffffeded0 --&gt; 0x400c80 --&gt; 0x41ff894156415741</span><br><span class="line">RSP: 0x7ffffffed590 --&gt; 0x0</span><br><span class="line">RIP: 0x400bd7 --&gt; 0x48fffffaf0858d48</span><br><span class="line">R8 : 0x0</span><br><span class="line">R9 : 0x0</span><br><span class="line">R10: 0x3</span><br><span class="line">R11: 0x7fffff18ee90 (&lt;__memset_avx2_unaligned_erms&gt;:    vmovd  xmm0,esi)</span><br><span class="line">R12: 0x4005c0 --&gt; 0x89485ed18949ed31</span><br><span class="line">R13: 0x7ffffffedfb0 --&gt; 0x1</span><br><span class="line">R14: 0x0</span><br><span class="line">R15: 0x0</span><br><span class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400bcc:    mov    rsi,rcx</span><br><span class="line">   0x400bcf:    mov    rdi,rax</span><br><span class="line">   0x400bd2:    call   0x4007db</span><br><span class="line">=&gt; 0x400bd7:    lea    rax,[rbp-0x510]</span><br><span class="line">   0x400bde:    mov    rdi,rax</span><br><span class="line">   0x400be1:    call   0x400550 &lt;strlen@plt&gt;</span><br><span class="line">   0x400be6:    mov    esi,eax</span><br><span class="line">   0x400be8:    lea    rcx,[rbp-0x93c]</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7ffffffed590 --&gt; 0x0</span><br><span class="line">0008| 0x7ffffffed598 --&gt; 0x5f4f636d (&#x27;mcO_&#x27;)</span><br><span class="line">0016| 0x7ffffffed5a0 --&gt; 0x1c00000027</span><br><span class="line">0024| 0x7ffffffed5a8 --&gt; 0x67000000b0</span><br><span class="line">0032| 0x7ffffffed5b0 --&gt; 0x4b000000b8</span><br><span class="line">0040| 0x7ffffffed5b8 --&gt; 0xe000000069</span><br><span class="line">0048| 0x7ffffffed5c0 --&gt; 0x3f000000b9</span><br><span class="line">0056| 0x7ffffffed5c8 --&gt; 0xc5000000ec</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line"></span><br><span class="line">Breakpoint 3, 0x0000000000400bd7 in ?? ()</span><br><span class="line"><span class="meta">gdb-peda$</span><span class="bash"> x/10x 0x7ffffffed9c0</span></span><br><span class="line">0x7ffffffed9c0: 0xc6ad437df5fd3576      0xa862a26e0d237b16</span><br><span class="line">0x7ffffffed9d0: 0x2c84ae7c0c342488      0x5e656c6895cb5d7c</span><br><span class="line">0x7ffffffed9e0: 0x00e699b5d8f9689b      0x0000000000000000</span><br><span class="line">0x7ffffffed9f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffffffeda00: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>将输入在函数执行前后两次的结果进行异或即可得到异或的数字，再与base64解码的结果进行异或即可，注意大小端问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line"></span><br><span class="line">before = <span class="number">0x7d363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362617b67616c66</span></span><br><span class="line">after = <span class="number">0xe699b5d8f9689b5e656c6895cb5d7c2c84ae7c0c342488a862a26e0d237b16c6ad437df5fd3576</span></span><br><span class="line">flag = <span class="string">b&quot;v5\xfd\xf5&#125;G\xfe\x95\x13z&amp;Y?\xff1\xa1\x85|c\x02n\xbd\x93j&gt;M\x8d\xd7&#x27;s-^\xccb\xf2\xdf\xe5\xd2&quot;</span>[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (n2s(s2n(flag) ^ before ^ after)[::<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;e10adc3949ba59abbe56e057f20f883e&#125;\x9b&#x27;</span></span><br></pre></td></tr></table></figure><p>得到flag</p><p><code>flag&#123;e10adc3949ba59abbe56e057f20f883e&#125;</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;平台：BUUOJ&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2021 week3 FAKE writeup</title>
    <link href="https://s0uthwood.github.io/2021/02/28/HGAME2021-week3-FAKE-writeup/"/>
    <id>https://s0uthwood.github.io/2021/02/28/HGAME2021-week3-FAKE-writeup/</id>
    <published>2021-02-28T07:31:36.000Z</published>
    <updated>2021-03-13T16:53:07.668Z</updated>
    
    <content type="html"><![CDATA[<p>from HGAME2021</p><a id="more"></a><h1 id="step-0：错误的做法"><a href="#step-0：错误的做法" class="headerlink" title="step 0：错误的做法"></a>step 0：错误的做法</h1><p>拖入ida</p><p>进入主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">__int64 __usercall main@&lt;rax&gt;(<span class="keyword">char</span> **a1@&lt;rsi&gt;, <span class="keyword">char</span> **a2@&lt;rdx&gt;, __int64 a3@&lt;rbp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp-D8h] [rbp-D8h]</span></span><br><span class="line">  __int64 flag; <span class="comment">// [rsp-48h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp-Ch] [rbp-Ch]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  v9 = a3;</span><br><span class="line">  print(<span class="string">&quot;Give me your true flag:&quot;</span>, a1, a2);</span><br><span class="line">  scan(<span class="string">&quot;%50s&quot;</span>, &amp;flag);</span><br><span class="line">  <span class="keyword">if</span> ( length(&amp;flag) != <span class="number">36</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    print(<span class="string">&quot;Wrong length.&quot;</span>, &amp;flag, v3);</span><br><span class="line">    sub_401120();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; ++i )</span><br><span class="line">    *((_DWORD *)&amp;v9 + i - <span class="number">52</span>) = *((<span class="keyword">char</span> *)&amp;v9 + i - <span class="number">64</span>);<span class="comment">// v9 - 64 = flag, flag往前偏移12个字节</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_401216((__int64)&amp;v6) == <span class="number">1</span> )<span class="comment">// 动态调试结果显示，v6就是输入的flag</span></span><br><span class="line">    print(<span class="string">&quot;Ohhhhhhhhhh!&quot;</span>, &amp;flag, v4);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    print(<span class="string">&quot;Wrong flag. Keep looking!&quot;</span>, &amp;flag, v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现对于输入的flag，进行一个函数的判断</p><p>进入函数，发现一串如下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="number">-37</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">4</span>)</span><br><span class="line">   + <span class="number">-58</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">132</span>)</span><br><span class="line">   + <span class="number">17</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">28</span>)</span><br><span class="line">   + <span class="number">26</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">124</span>)</span><br><span class="line">   + <span class="number">-20</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">48</span>)</span><br><span class="line">   + <span class="number">-56</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">104</span>)</span><br><span class="line">   + <span class="number">70</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">76</span>)</span><br><span class="line">   + <span class="number">29</span> * *(_DWORD *)*(v1 - <span class="number">3</span>)</span><br><span class="line">   + <span class="number">-42</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">68</span>)</span><br><span class="line">   + <span class="number">67</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">140</span>)</span><br><span class="line">   + <span class="number">11</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">24</span>)</span><br><span class="line">   + <span class="number">66</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">60</span>)</span><br><span class="line">   + <span class="number">53</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">44</span>)</span><br><span class="line">   - <span class="number">53</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">12</span>)</span><br><span class="line">   + <span class="number">63</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">128</span>)</span><br><span class="line">   - <span class="number">65</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">84</span>)</span><br><span class="line">   + <span class="number">9</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">36</span>)</span><br><span class="line">   - <span class="number">50</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">112</span>)</span><br><span class="line">   - <span class="number">48</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">32</span>)</span><br><span class="line">   - <span class="number">70</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">88</span>)</span><br><span class="line">   + <span class="number">48</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">52</span>);</span><br><span class="line"><span class="keyword">if</span> ( <span class="number">-35</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">8</span>)</span><br><span class="line">   + <span class="number">89</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">96</span>)</span><br><span class="line">   + <span class="number">-49</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">64</span>)</span><br><span class="line">   + <span class="number">-19</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">16</span>)</span><br><span class="line">   + <span class="number">88</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">100</span>)</span><br><span class="line">   + <span class="number">-7</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">120</span>)</span><br><span class="line">   + *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">108</span>)</span><br><span class="line">   + <span class="number">-33</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">80</span>)</span><br><span class="line">   + <span class="number">-23</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">92</span>)</span><br><span class="line">   + <span class="number">90</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">56</span>)</span><br><span class="line">   + <span class="number">-99</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">40</span>)</span><br><span class="line">   + <span class="number">30</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">116</span>)</span><br><span class="line">   + v2</span><br><span class="line">   - <span class="number">68</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">136</span>)</span><br><span class="line">   - <span class="number">14</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">20</span>)</span><br><span class="line">   - <span class="number">67</span> * *(_DWORD *)(*(v1 - <span class="number">3</span>) + <span class="number">72</span>) != <span class="number">-874</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_42;</span><br></pre></td></tr></table></figure><p>用gdb调试看了一下，发现 <code>*(v1 - 3) + 4 * i</code> 就对应 <code>input[i]</code></p><p>总共有36个方程，使用z3求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">f = [ Int(<span class="string">&#x27;f%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    s.add(f[i] &gt; <span class="number">0x20</span>)</span><br><span class="line">    s.add(f[i] &lt; <span class="number">0x7f</span>)</span><br><span class="line"></span><br><span class="line">s.add(f[ <span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">4</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">5</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line">s.add(f[<span class="number">35</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">-37</span> * f[<span class="number">1</span>] + <span class="number">-58</span> * f[<span class="number">33</span>] + <span class="number">17</span> * f[<span class="number">7</span>] + <span class="number">26</span> * f[<span class="number">31</span>] + <span class="number">-20</span> * f[<span class="number">12</span>] + <span class="number">-56</span> * f[<span class="number">26</span>] + <span class="number">70</span> * f[<span class="number">19</span>] + <span class="number">29</span> * f[<span class="number">0</span>] + <span class="number">-42</span> * f[<span class="number">17</span>] + <span class="number">67</span> * f[<span class="number">35</span>] + <span class="number">11</span> * f[<span class="number">6</span>] + <span class="number">66</span> * f[<span class="number">15</span>] + <span class="number">53</span> * f[<span class="number">11</span>] - <span class="number">53</span> * f[<span class="number">3</span>] + <span class="number">63</span> * f[<span class="number">32</span>] - <span class="number">65</span> * f[<span class="number">21</span>] + <span class="number">9</span> * f[<span class="number">9</span>] - <span class="number">50</span> * f[<span class="number">28</span>] - <span class="number">48</span> * f[<span class="number">8</span>] - <span class="number">70</span> * f[<span class="number">22</span>] + <span class="number">48</span> * f[<span class="number">13</span>] <span class="number">-35</span> * f[<span class="number">2</span>] + <span class="number">89</span> * f[<span class="number">24</span>] + <span class="number">-49</span> * f[<span class="number">16</span>] + <span class="number">-19</span> * f[<span class="number">4</span>] + <span class="number">88</span> * f[<span class="number">25</span>] + <span class="number">-7</span> * f[<span class="number">30</span>] + f[<span class="number">27</span>] + <span class="number">-33</span> * f[<span class="number">20</span>] + <span class="number">-23</span> * f[<span class="number">23</span>] + <span class="number">90</span> * f[<span class="number">14</span>] + <span class="number">-99</span> * f[<span class="number">10</span>] + <span class="number">30</span> * f[<span class="number">29</span>] - <span class="number">68</span> * f[<span class="number">34</span>] - <span class="number">14</span> * f[<span class="number">5</span>] - <span class="number">67</span> * f[<span class="number">18</span>] == <span class="number">-874</span>)</span><br><span class="line">s.add(<span class="number">64</span> * f[<span class="number">18</span>] + <span class="number">-57</span> * f[<span class="number">15</span>] + <span class="number">90</span> * f[<span class="number">21</span>] + <span class="number">57</span> * f[<span class="number">4</span>] + <span class="number">-63</span> * f[<span class="number">13</span>] + <span class="number">13</span> * f[<span class="number">2</span>] + <span class="number">10</span> * f[<span class="number">35</span>] + <span class="number">-56</span> * f[<span class="number">8</span>] + <span class="number">56</span> * f[<span class="number">31</span>] + <span class="number">-40</span> * f[<span class="number">0</span>] + <span class="number">-91</span> * f[<span class="number">27</span>] + <span class="number">57</span> * f[<span class="number">23</span>] + <span class="number">62</span> * f[<span class="number">10</span>] + <span class="number">90</span> * f[<span class="number">9</span>] + <span class="number">-92</span> * f[<span class="number">17</span>] + <span class="number">-5</span> * f[<span class="number">29</span>] + <span class="number">60</span> * f[<span class="number">22</span>] - <span class="number">13</span> * f[<span class="number">12</span>] + <span class="number">5</span> * f[<span class="number">28</span>] - <span class="number">63</span> * f[<span class="number">32</span>] + <span class="number">5</span> * f[<span class="number">26</span>] <span class="number">-41</span> * f[<span class="number">25</span>] + <span class="number">-47</span> * f[<span class="number">16</span>] + f[<span class="number">14</span>] + <span class="number">67</span> * f[<span class="number">34</span>] + <span class="number">-20</span> * f[<span class="number">1</span>] + <span class="number">47</span> * f[<span class="number">33</span>] + <span class="number">-79</span> * f[<span class="number">19</span>] + <span class="number">-17</span> * f[<span class="number">6</span>] + <span class="number">30</span> * f[<span class="number">5</span>] + <span class="number">70</span> * f[<span class="number">3</span>] + <span class="number">41</span> * f[<span class="number">7</span>] + <span class="number">71</span> * f[<span class="number">24</span>] + <span class="number">15</span> * f[<span class="number">11</span>] + <span class="number">42</span> * f[<span class="number">20</span>] == <span class="number">21163</span>)</span><br><span class="line">s.add(<span class="number">28</span> * f[<span class="number">13</span>] + <span class="number">77</span> * f[<span class="number">19</span>] + <span class="number">2</span> * f[<span class="number">7</span>] + <span class="number">-53</span> * f[<span class="number">10</span>] + <span class="number">-61</span> * f[<span class="number">4</span>] + <span class="number">12</span> * f[<span class="number">17</span>] + <span class="number">93</span> * f[<span class="number">11</span>] + <span class="number">-13</span> * f[<span class="number">32</span>] + <span class="number">53</span> * f[<span class="number">9</span>] + <span class="number">29</span> * f[<span class="number">16</span>] + <span class="number">-77</span> * f[<span class="number">14</span>] + <span class="number">77</span> * f[<span class="number">33</span>] + <span class="number">74</span> * f[<span class="number">34</span>] + <span class="number">-100</span> * f[<span class="number">30</span>] - <span class="number">99</span> * f[<span class="number">27</span>] - <span class="number">87</span> * f[<span class="number">25</span>] + <span class="number">36</span> * f[<span class="number">6</span>] + <span class="number">59</span> * f[<span class="number">3</span>] + <span class="number">81</span> * f[<span class="number">21</span>] + <span class="number">28</span> * f[<span class="number">28</span>] + <span class="number">7</span> * f[<span class="number">0</span>] + <span class="number">73</span> * f[<span class="number">26</span>] + <span class="number">50</span> * f[<span class="number">20</span>] + <span class="number">88</span> * f[<span class="number">35</span>] + <span class="number">49</span> * f[<span class="number">1</span>] + <span class="number">34</span> * f[<span class="number">23</span>] + <span class="number">58</span> * f[<span class="number">29</span>] + <span class="number">69</span> * f[<span class="number">24</span>] + <span class="number">54</span> * f[<span class="number">22</span>] - <span class="number">5</span> * f[<span class="number">31</span>] - <span class="number">41</span> * f[<span class="number">2</span>] + <span class="number">5</span> * f[<span class="number">18</span>] - <span class="number">93</span> * f[<span class="number">15</span>] + <span class="number">10</span> * f[<span class="number">12</span>] - <span class="number">27</span> * f[<span class="number">8</span>] + <span class="number">24</span> * f[<span class="number">5</span>] == <span class="number">45615</span>)</span><br><span class="line">s.add(<span class="number">-46</span> * f[<span class="number">20</span>] + <span class="number">-61</span> * f[<span class="number">6</span>] + <span class="number">-46</span> * f[<span class="number">19</span>] + <span class="number">51</span> * f[<span class="number">4</span>] + <span class="number">-76</span> * f[<span class="number">34</span>] + <span class="number">-17</span> * f[<span class="number">31</span>] + <span class="number">8</span> * f[<span class="number">28</span>] + <span class="number">94</span> * f[<span class="number">30</span>] + <span class="number">23</span> * f[<span class="number">8</span>] + <span class="number">-61</span> * f[<span class="number">29</span>] + <span class="number">-52</span> * f[<span class="number">35</span>] + <span class="number">81</span> * f[<span class="number">33</span>] + <span class="number">-44</span> * f[<span class="number">1</span>] + <span class="number">75</span> * f[<span class="number">32</span>] + <span class="number">-9</span> * f[<span class="number">24</span>] - <span class="number">96</span> * f[<span class="number">12</span>] + <span class="number">5</span> * f[<span class="number">26</span>] + <span class="number">2</span> * f[<span class="number">25</span>] + <span class="number">31</span> * f[<span class="number">22</span>] + <span class="number">43</span> * f[<span class="number">15</span>] - <span class="number">2</span> * f[<span class="number">0</span>] - <span class="number">17</span> * f[<span class="number">23</span>] + <span class="number">53</span> * f[<span class="number">21</span>] + <span class="number">51</span> * f[<span class="number">13</span>] + <span class="number">58</span> * f[<span class="number">17</span>] + <span class="number">-52</span> * f[<span class="number">10</span>] + <span class="number">-77</span> * f[<span class="number">7</span>] + <span class="number">86</span> * f[<span class="number">11</span>] + <span class="number">-77</span> * f[<span class="number">16</span>] + <span class="number">-100</span> * f[<span class="number">18</span>] + <span class="number">-61</span> * f[<span class="number">2</span>] - <span class="number">92</span> * f[<span class="number">14</span>] + <span class="number">13</span> * f[<span class="number">5</span>] - <span class="number">99</span> * f[<span class="number">3</span>] + <span class="number">63</span> * f[<span class="number">27</span>] + <span class="number">8</span> * f[<span class="number">9</span>] == <span class="number">-37017</span>)</span><br><span class="line">s.add(<span class="number">9</span> * f[<span class="number">16</span>] + <span class="number">59</span> * f[<span class="number">3</span>] + <span class="number">-29</span> * f[<span class="number">14</span>] + <span class="number">32</span> * f[<span class="number">18</span>] + <span class="number">-69</span> * f[<span class="number">26</span>] + <span class="number">-81</span> * f[<span class="number">33</span>] + <span class="number">-69</span> * f[<span class="number">9</span>] + <span class="number">60</span> * f[<span class="number">19</span>] + <span class="number">-35</span> * f[<span class="number">21</span>] + <span class="number">40</span> * f[<span class="number">11</span>] + <span class="number">-44</span> * f[<span class="number">7</span>] + <span class="number">78</span> * f[<span class="number">22</span>] + <span class="number">68</span> * f[<span class="number">28</span>] + <span class="number">70</span> * f[<span class="number">29</span>] + <span class="number">3</span> * f[<span class="number">2</span>] + <span class="number">61</span> * f[<span class="number">6</span>] + <span class="number">37</span> * f[<span class="number">35</span>] - <span class="number">36</span> * f[<span class="number">27</span>] + <span class="number">40</span> * f[<span class="number">34</span>] + <span class="number">23</span> * f[<span class="number">17</span>] + <span class="number">81</span> * f[<span class="number">12</span>] - <span class="number">25</span> * f[<span class="number">4</span>] + <span class="number">91</span> * f[<span class="number">0</span>] + <span class="number">-43</span> * f[<span class="number">32</span>] + <span class="number">17</span> * f[<span class="number">13</span>] + <span class="number">9</span> * f[<span class="number">15</span>] + f[<span class="number">1</span>] * <span class="number">64</span>  + <span class="number">69</span> * f[<span class="number">30</span>] - <span class="number">9</span> * f[<span class="number">23</span>] - <span class="number">75</span> * f[<span class="number">25</span>] - <span class="number">62</span> * f[<span class="number">20</span>] + <span class="number">56</span> * f[<span class="number">31</span>] + <span class="number">96</span> * f[<span class="number">5</span>] + <span class="number">69</span> * f[<span class="number">8</span>] + <span class="number">80</span> * f[<span class="number">10</span>] + <span class="number">99</span> * f[<span class="number">24</span>] == <span class="number">72092</span>)</span><br><span class="line">s.add(<span class="number">-79</span> * f[<span class="number">26</span>] + <span class="number">-20</span> * f[<span class="number">8</span>] + <span class="number">90</span> * f[<span class="number">6</span>] + <span class="number">6</span> * f[<span class="number">30</span>] + <span class="number">47</span> * f[<span class="number">16</span>] + <span class="number">50</span> * f[<span class="number">20</span>] + <span class="number">51</span> * f[<span class="number">23</span>] + <span class="number">-13</span> * f[<span class="number">33</span>] + <span class="number">-86</span> * f[<span class="number">13</span>] + <span class="number">32</span> * f[<span class="number">31</span>] + <span class="number">-89</span> * f[<span class="number">2</span>] + <span class="number">79</span> * f[<span class="number">11</span>] + <span class="number">-41</span> * f[<span class="number">7</span>] + <span class="number">-56</span> * f[<span class="number">14</span>] + <span class="number">54</span> * f[<span class="number">19</span>] - <span class="number">96</span> * f[<span class="number">34</span>] - <span class="number">34</span> * f[<span class="number">25</span>] - <span class="number">64</span> * f[<span class="number">4</span>] - <span class="number">36</span> * f[<span class="number">35</span>] + <span class="number">48</span> * f[<span class="number">10</span>] - <span class="number">39</span> * f[<span class="number">5</span>] + <span class="number">51</span> * f[<span class="number">32</span>] + <span class="number">-63</span> * f[<span class="number">21</span>] + <span class="number">78</span> * f[<span class="number">24</span>] + <span class="number">-76</span> * f[<span class="number">28</span>] + <span class="number">48</span> * f[<span class="number">18</span>] + <span class="number">93</span> * f[<span class="number">1</span>] + <span class="number">66</span> * f[<span class="number">29</span>] + <span class="number">-86</span> * f[<span class="number">27</span>] + <span class="number">-3</span> * f[<span class="number">0</span>] + <span class="number">20</span> * f[<span class="number">3</span>] + <span class="number">61</span> * f[<span class="number">17</span>] - <span class="number">56</span> * f[<span class="number">15</span>] - <span class="number">97</span> * f[<span class="number">22</span>] + <span class="number">96</span> * f[<span class="number">9</span>] - <span class="number">61</span> * f[<span class="number">12</span>] == <span class="number">-27809</span>)</span><br><span class="line">s.add(<span class="number">-74</span> * f[<span class="number">28</span>] + <span class="number">76</span> * f[<span class="number">33</span>] + <span class="number">91</span> * f[<span class="number">5</span>] + <span class="number">83</span> * f[<span class="number">19</span>] + <span class="number">99</span> * f[<span class="number">32</span>] + <span class="number">98</span> * f[<span class="number">7</span>] + <span class="number">22</span> * f[<span class="number">34</span>] + <span class="number">83</span> * f[<span class="number">13</span>] + <span class="number">-13</span> * f[<span class="number">0</span>] + <span class="number">-66</span> * f[<span class="number">11</span>] + <span class="number">-25</span> * f[<span class="number">2</span>] + <span class="number">-9</span> * f[<span class="number">31</span>] + <span class="number">35</span> * f[<span class="number">25</span>] + <span class="number">31</span> * f[<span class="number">18</span>] - <span class="number">95</span> * f[<span class="number">21</span>] + <span class="number">37</span> * f[<span class="number">22</span>] - <span class="number">74</span> * f[<span class="number">16</span>] + <span class="number">17</span> * f[<span class="number">12</span>] - <span class="number">27</span> * f[<span class="number">24</span>] + <span class="number">11</span> * f[<span class="number">3</span>] + <span class="number">83</span> * f[<span class="number">9</span>] + <span class="number">-44</span> * f[<span class="number">35</span>] + <span class="number">-26</span> * f[<span class="number">30</span>] + <span class="number">-36</span> * f[<span class="number">4</span>] + <span class="number">64</span> * f[<span class="number">6</span>] + <span class="number">-65</span> * f[<span class="number">26</span>] + <span class="number">-46</span> * f[<span class="number">8</span>] + <span class="number">-33</span> * f[<span class="number">14</span>] + <span class="number">-45</span> * f[<span class="number">1</span>] + <span class="number">-32</span> * f[<span class="number">23</span>] - <span class="number">60</span> * f[<span class="number">27</span>] + <span class="number">77</span> * f[<span class="number">20</span>] + <span class="number">96</span> * f[<span class="number">15</span>] - <span class="number">23</span> * f[<span class="number">10</span>] - <span class="number">5</span> * f[<span class="number">29</span>] - <span class="number">73</span> * f[<span class="number">17</span>] == <span class="number">9604</span>)</span><br><span class="line">s.add(<span class="number">-57</span> * f[<span class="number">31</span>] + <span class="number">32</span> * f[<span class="number">25</span>] + <span class="number">55</span> * f[<span class="number">16</span>] + <span class="number">42</span> * f[<span class="number">24</span>] + <span class="number">-93</span> * f[<span class="number">26</span>] + <span class="number">69</span> * f[<span class="number">17</span>] + <span class="number">84</span> * f[<span class="number">12</span>] + <span class="number">9</span> * f[<span class="number">23</span>] + <span class="number">-34</span> * f[<span class="number">32</span>] + <span class="number">-84</span> * f[<span class="number">2</span>] + <span class="number">-18</span> * f[<span class="number">7</span>] + <span class="number">60</span> * f[<span class="number">29</span>] - <span class="number">99</span> * f[<span class="number">30</span>] - f[<span class="number">0</span>] + <span class="number">24</span> * f[<span class="number">21</span>] - <span class="number">36</span> * f[<span class="number">4</span>] + <span class="number">9</span> * f[<span class="number">35</span>] + <span class="number">89</span> * f[<span class="number">15</span>] + <span class="number">72</span> * f[<span class="number">19</span>] + <span class="number">86</span> * f[<span class="number">13</span>] - <span class="number">8</span> * f[<span class="number">28</span>] + <span class="number">-79</span> * f[<span class="number">10</span>] + <span class="number">82</span> * f[<span class="number">8</span>] + <span class="number">-88</span> * f[<span class="number">3</span>] + <span class="number">-26</span> * f[<span class="number">11</span>] + <span class="number">76</span> * f[<span class="number">1</span>] + <span class="number">69</span> * f[<span class="number">27</span>] + <span class="number">-51</span> * f[<span class="number">14</span>] + <span class="number">78</span> * f[<span class="number">33</span>] + <span class="number">-11</span> * f[<span class="number">18</span>] + <span class="number">-83</span> * f[<span class="number">5</span>] + <span class="number">70</span> * f[<span class="number">20</span>] + <span class="number">-36</span> * f[<span class="number">22</span>] + <span class="number">64</span> * f[<span class="number">6</span>] + <span class="number">19</span> * f[<span class="number">9</span>] + <span class="number">71</span> * f[<span class="number">34</span>] == <span class="number">25498</span>)</span><br><span class="line">s.add(<span class="number">-80</span> * f[<span class="number">15</span>] + <span class="number">-54</span> * f[<span class="number">2</span>] + <span class="number">75</span> * f[<span class="number">6</span>] + <span class="number">-31</span> * f[<span class="number">17</span>] + <span class="number">29</span> * f[<span class="number">12</span>] + <span class="number">28</span> * f[<span class="number">28</span>] + <span class="number">57</span> * f[<span class="number">14</span>] + <span class="number">-68</span> * f[<span class="number">4</span>] + <span class="number">86</span> * f[<span class="number">0</span>] + <span class="number">82</span> * f[<span class="number">13</span>] + <span class="number">-20</span> * f[<span class="number">11</span>] + <span class="number">-18</span> * f[<span class="number">23</span>] + <span class="number">88</span> * f[<span class="number">18</span>] + <span class="number">-57</span> * f[<span class="number">25</span>] + <span class="number">94</span> * f[<span class="number">9</span>] - <span class="number">51</span> * f[<span class="number">5</span>] - <span class="number">58</span> * f[<span class="number">7</span>] - <span class="number">2</span> * f[<span class="number">3</span>] + <span class="number">94</span> * f[<span class="number">31</span>] - <span class="number">6</span> * f[<span class="number">21</span>] - <span class="number">59</span> * f[<span class="number">19</span>] + <span class="number">-70</span> * f[<span class="number">8</span>] + <span class="number">50</span> * f[<span class="number">30</span>] + <span class="number">26</span> * f[<span class="number">16</span>] + <span class="number">65</span> * f[<span class="number">32</span>] + <span class="number">-62</span> * f[<span class="number">34</span>] + <span class="number">79</span> * f[<span class="number">10</span>] + <span class="number">-82</span> * f[<span class="number">27</span>] + <span class="number">-16</span> * f[<span class="number">29</span>] + <span class="number">-60</span> * f[<span class="number">1</span>] + <span class="number">25</span> * f[<span class="number">20</span>] - <span class="number">66</span> * f[<span class="number">35</span>] - <span class="number">62</span> * f[<span class="number">24</span>] + <span class="number">89</span> * f[<span class="number">26</span>] + <span class="number">12</span> * f[<span class="number">22</span>] - <span class="number">86</span> * f[<span class="number">33</span>] == <span class="number">-10472</span>)</span><br><span class="line">s.add(<span class="number">-91</span> * f[<span class="number">20</span>] + <span class="number">-11</span> * f[<span class="number">17</span>] + <span class="number">38</span> * f[<span class="number">3</span>] + <span class="number">53</span> * f[<span class="number">35</span>] + <span class="number">31</span> * f[<span class="number">5</span>] + <span class="number">-75</span> * f[<span class="number">22</span>] + <span class="number">14</span> * f[<span class="number">26</span>] + <span class="number">-7</span> * f[<span class="number">24</span>] + <span class="number">-7</span> * f[<span class="number">31</span>] + <span class="number">77</span> * f[<span class="number">23</span>] + <span class="number">-46</span> * f[<span class="number">6</span>] + <span class="number">47</span> * f[<span class="number">19</span>] + <span class="number">48</span> * f[<span class="number">33</span>] + <span class="number">74</span> * f[ <span class="number">1</span>] - <span class="number">24</span> * f[<span class="number">30</span>] + <span class="number">87</span> * f[<span class="number">9</span>] + <span class="number">33</span> * f[<span class="number">11</span>] + <span class="number">86</span> * f[<span class="number">28</span>] + <span class="number">37</span> * f[<span class="number">21</span>] - <span class="number">97</span> * f[<span class="number">27</span>] - <span class="number">30</span> * f[<span class="number">13</span>] + <span class="number">31</span> * f[<span class="number">14</span>] + <span class="number">-11</span> * f[<span class="number">2</span>] + <span class="number">30</span> * f[<span class="number">10</span>] + <span class="number">72</span> * f[<span class="number">8</span>] + <span class="number">72</span> * f[<span class="number">29</span>] + <span class="number">-49</span> * f[<span class="number">34</span>] + <span class="number">83</span> * f[<span class="number">18</span>] + <span class="number">-63</span> * f[<span class="number">0</span>] + <span class="number">-88</span> * f[<span class="number">4</span>] - <span class="number">59</span> * f[<span class="number">16</span>] + <span class="number">5</span> * f[<span class="number">7</span>] - <span class="number">3</span> * f[<span class="number">15</span>] + <span class="number">13</span> * f[<span class="number">12</span>] - <span class="number">73</span> * f[<span class="number">32</span>] - <span class="number">56</span> * f[<span class="number">25</span>] == <span class="number">6560</span>)</span><br><span class="line">s.add(<span class="number">-74</span> * f[<span class="number">20</span>] + <span class="number">-97</span> * f[<span class="number">6</span>] + <span class="number">14</span> * f[<span class="number">15</span>] + <span class="number">77</span> * f[<span class="number">30</span>] + <span class="number">-66</span> * f[<span class="number">28</span>] + <span class="number">-89</span> * f[<span class="number">12</span>] + <span class="number">-95</span> * f[<span class="number">13</span>] + <span class="number">-70</span> * f[<span class="number">10</span>] + <span class="number">-27</span> * f[<span class="number">1</span>] + <span class="number">-85</span> * f[<span class="number">22</span>] + <span class="number">-66</span> * f[<span class="number">34</span>] + <span class="number">-91</span> * f[<span class="number">4</span>] - <span class="number">5</span> * f[<span class="number">19</span>] - <span class="number">94</span> * f[<span class="number">29</span>] - <span class="number">24</span> * f[<span class="number">35</span>] - <span class="number">7</span> * f[<span class="number">32</span>] + <span class="number">63</span> * f[<span class="number">5</span>] - <span class="number">49</span> * f[<span class="number">14</span>] - <span class="number">96</span> * f[<span class="number">18</span>] - <span class="number">100</span> * f[<span class="number">7</span>] + <span class="number">81</span> * f[<span class="number">16</span>] + <span class="number">59</span> * f[<span class="number">23</span>] + <span class="number">-81</span> * f[<span class="number">8</span>] + <span class="number">49</span> * f[<span class="number">0</span>] + <span class="number">-52</span> * f[<span class="number">3</span>] + <span class="number">84</span> * f[<span class="number">2</span>] + <span class="number">26</span> * f[<span class="number">25</span>] + <span class="number">70</span> * f[<span class="number">11</span>] + <span class="number">3</span> * f[<span class="number">21</span>] + <span class="number">28</span> * f[<span class="number">24</span>] - <span class="number">14</span> * f[<span class="number">9</span>] + <span class="number">59</span> * f[<span class="number">17</span>] + <span class="number">24</span> * f[<span class="number">31</span>] - <span class="number">25</span> * f[<span class="number">27</span>] + <span class="number">20</span> * f[<span class="number">33</span>] - <span class="number">77</span> * f[<span class="number">26</span>] == <span class="number">-69431</span>)</span><br><span class="line">s.add(<span class="number">-69</span> * f[<span class="number">25</span>] + <span class="number">33</span> * f[<span class="number">20</span>] + <span class="number">55</span> * f[<span class="number">24</span>] + <span class="number">69</span> * f[<span class="number">18</span>] + <span class="number">83</span> * f[<span class="number">15</span>] + <span class="number">-19</span> * f[<span class="number">13</span>] + <span class="number">22</span> * f[<span class="number">21</span>] + f[<span class="number">16</span>] + <span class="number">-53</span> * f[<span class="number">22</span>] + <span class="number">-58</span> * f[<span class="number">4</span>] + <span class="number">-63</span> * f[<span class="number">29</span>] - <span class="number">91</span> * f[<span class="number">26</span>] + <span class="number">28</span> * f[<span class="number">34</span>] + <span class="number">5</span> * f[<span class="number">3</span>] + <span class="number">35</span> * f[<span class="number">8</span>] + <span class="number">27</span> * f[ <span class="number">1</span>] - <span class="number">31</span> * f[<span class="number">27</span>] + <span class="number">10</span> * f[<span class="number">12</span>] + <span class="number">84</span> * f[<span class="number">33</span>] + <span class="number">24</span> * f[<span class="number">14</span>] + <span class="number">42</span> * f[<span class="number">11</span>] + <span class="number">98</span> * f[<span class="number">28</span>] + <span class="number">2</span> * f[<span class="number">7</span>] + <span class="number">70</span> * f[<span class="number">19</span>] + <span class="number">53</span> * f[<span class="number">35</span>] + <span class="number">34</span> * f[<span class="number">6</span>] + <span class="number">30</span> * f[<span class="number">5</span>] + <span class="number">55</span> * f[<span class="number">23</span>] + <span class="number">69</span> * f[<span class="number">10</span>] + <span class="number">60</span> * f[<span class="number">2</span>] - <span class="number">2</span> * f[<span class="number">17</span>] + <span class="number">68</span> * f[<span class="number">32</span>] + <span class="number">21</span> * f[<span class="number">0</span>] - f[<span class="number">9</span>] + <span class="number">60</span> * f[<span class="number">31</span>] - <span class="number">60</span> * f[<span class="number">30</span>] == <span class="number">54106</span>)</span><br><span class="line">s.add(<span class="number">15</span> * f[<span class="number">31</span>] + <span class="number">-96</span> * f[<span class="number">21</span>] + <span class="number">38</span> * f[<span class="number">19</span>] + <span class="number">-81</span> * f[<span class="number">9</span>] + <span class="number">-68</span> * f[<span class="number">12</span>] + <span class="number">89</span> * f[<span class="number">20</span>] + <span class="number">33</span> * f[<span class="number">2</span>] + <span class="number">70</span> * f[<span class="number">34</span>] + <span class="number">79</span> * f[<span class="number">28</span>] + <span class="number">-80</span> * f[<span class="number">35</span>] + <span class="number">76</span> * f[<span class="number">10</span>] - <span class="number">38</span> * f[<span class="number">5</span>] + <span class="number">5</span> * f[<span class="number">6</span>] + <span class="number">60</span> * f[<span class="number">11</span>] - <span class="number">8</span> * f[<span class="number">26</span>] - <span class="number">59</span> * f[<span class="number">23</span>] + <span class="number">9</span> * f[<span class="number">24</span>] + <span class="number">34</span> * f[<span class="number">17</span>] - <span class="number">60</span> * f[<span class="number">1</span>] + <span class="number">98</span> * f[<span class="number">25</span>] + <span class="number">48</span> * f[<span class="number">16</span>] + <span class="number">-88</span> * f[<span class="number">22</span>] + <span class="number">-96</span> * f[<span class="number">3</span>] + f[<span class="number">18</span>] * <span class="number">64</span> + <span class="number">-61</span> * f[<span class="number">15</span>] + <span class="number">-92</span> * f[<span class="number">13</span>] + <span class="number">50</span> * f[<span class="number">8</span>] + <span class="number">90</span> * f[<span class="number">29</span>] + <span class="number">32</span> * f[<span class="number">4</span>] + <span class="number">-97</span> * f[<span class="number">27</span>] + <span class="number">14</span> * f[<span class="number">14</span>] + f[<span class="number">30</span>] + <span class="number">97</span> * f[<span class="number">7</span>] - <span class="number">17</span> * f[<span class="number">32</span>] - <span class="number">96</span> * f[<span class="number">0</span>] + <span class="number">54</span> * f[<span class="number">33</span>] == <span class="number">-8292</span>)</span><br><span class="line">s.add(<span class="number">-7</span> * f[<span class="number">3</span>] + <span class="number">49</span> * f[<span class="number">17</span>] + <span class="number">60</span> * f[<span class="number">25</span>] + <span class="number">-45</span> * f[<span class="number">16</span>] + <span class="number">-50</span> * f[<span class="number">0</span>] + <span class="number">-98</span> * f[<span class="number">28</span>] + <span class="number">-92</span> * f[<span class="number">12</span>] + <span class="number">-22</span> * f[<span class="number">23</span>] + <span class="number">33</span> * f[<span class="number">13</span>] + <span class="number">57</span> * f[<span class="number">31</span>] - <span class="number">15</span> * f[<span class="number">5</span>] + <span class="number">36</span> * f[<span class="number">29</span>] - <span class="number">88</span> * f[<span class="number">15</span>] + <span class="number">12</span> * f[<span class="number">21</span>] + <span class="number">71</span> * f[<span class="number">14</span>] - <span class="number">48</span> * f[<span class="number">35</span>] + <span class="number">79</span> * f[<span class="number">34</span>] - <span class="number">5</span> * f[<span class="number">19</span>] + <span class="number">68</span> * f[<span class="number">33</span>] - <span class="number">2</span> * f[<span class="number">4</span>] - <span class="number">82</span> * f[<span class="number">10</span>] + <span class="number">-58</span> * f[<span class="number">32</span>] + <span class="number">53</span> * f[<span class="number">8</span>] + <span class="number">-57</span> * f[<span class="number">30</span>] + <span class="number">-29</span> * f[<span class="number">24</span>] + <span class="number">-28</span> * f[<span class="number">26</span>] - <span class="number">16</span> * f[<span class="number">18</span>] - <span class="number">98</span> * f[<span class="number">22</span>] - f[<span class="number">27</span>] * <span class="number">64</span> + <span class="number">32</span> * f[<span class="number">11</span>] + <span class="number">73</span> * f[<span class="number">2</span>] - <span class="number">38</span> * f[<span class="number">20</span>] + <span class="number">27</span> * f[<span class="number">9</span>] - <span class="number">7</span> * f[<span class="number">7</span>] - <span class="number">30</span> * f[ <span class="number">1</span>] - <span class="number">35</span> * f[<span class="number">6</span>] == <span class="number">-44677</span>)</span><br><span class="line">s.add(<span class="number">4</span> * f[<span class="number">31</span>] + <span class="number">-43</span> * f[<span class="number">18</span>] + <span class="number">-36</span> * f[<span class="number">29</span>] + <span class="number">60</span> * f[<span class="number">14</span>] + <span class="number">29</span> * f[<span class="number">20</span>] + <span class="number">-85</span> * f[<span class="number">19</span>] + <span class="number">71</span> * f[<span class="number">27</span>] + <span class="number">-22</span> * f[<span class="number">11</span>] + <span class="number">95</span> * f[<span class="number">9</span>] + <span class="number">19</span> * f[<span class="number">12</span>] + <span class="number">-20</span> * f[<span class="number">30</span>] + <span class="number">6</span> * f[<span class="number">34</span>] + <span class="number">49</span> * f[<span class="number">6</span>] + <span class="number">13</span> * f[<span class="number">10</span>] - <span class="number">23</span> * f[<span class="number">13</span>] + <span class="number">17</span> * f[<span class="number">7</span>] - <span class="number">79</span> * f[<span class="number">22</span>] + <span class="number">12</span> * f[<span class="number">3</span>] - <span class="number">7</span> * f[<span class="number">4</span>] - <span class="number">12</span> * f[<span class="number">2</span>] - <span class="number">78</span> * f[<span class="number">17</span>] + <span class="number">-86</span> * f[<span class="number">28</span>] + <span class="number">-69</span> * f[<span class="number">33</span>] + <span class="number">-31</span> * f[<span class="number">21</span>] + <span class="number">91</span> * f[<span class="number">15</span>] + <span class="number">91</span> * f[<span class="number">8</span>] + <span class="number">58</span> * f[<span class="number">16</span>] + <span class="number">-91</span> * f[<span class="number">23</span>] - <span class="number">56</span> * f[<span class="number">5</span>] + <span class="number">59</span> * f[<span class="number">26</span>] + <span class="number">18</span> * f[<span class="number">32</span>] - <span class="number">87</span> * f[<span class="number">35</span>] - <span class="number">30</span> * f[<span class="number">24</span>] + <span class="number">54</span> * f[<span class="number">25</span>] - <span class="number">5</span> * f[ <span class="number">1</span>] - <span class="number">94</span> * f[<span class="number">0</span>] == <span class="number">-17772</span>)</span><br><span class="line">s.add(<span class="number">-17</span> * f[<span class="number">9</span>] + <span class="number">-93</span> * f[<span class="number">12</span>] + <span class="number">-85</span> * f[<span class="number">20</span>] + <span class="number">-73</span> * f[<span class="number">35</span>] + <span class="number">-87</span> * f[<span class="number">24</span>] + <span class="number">-80</span> * f[<span class="number">25</span>] + <span class="number">-87</span> * f[<span class="number">4</span>] + <span class="number">56</span> * f[<span class="number">27</span>] + <span class="number">-89</span> * f[<span class="number">21</span>] + <span class="number">52</span> * f[<span class="number">15</span>] + <span class="number">97</span> * f[<span class="number">0</span>] + <span class="number">-11</span> * f[<span class="number">19</span>] + <span class="number">-94</span> * f[<span class="number">10</span>] + <span class="number">-92</span> * f[<span class="number">29</span>] + <span class="number">-20</span> * f[<span class="number">17</span>] - <span class="number">95</span> * f[<span class="number">5</span>] - <span class="number">13</span> * f[<span class="number">8</span>] + <span class="number">80</span> * f[<span class="number">31</span>] - f[<span class="number">33</span>] + <span class="number">37</span> * f[<span class="number">30</span>] + <span class="number">64</span> * f[<span class="number">32</span>] + <span class="number">-18</span> * f[<span class="number">18</span>] + <span class="number">-76</span> * f[<span class="number">34</span>] + <span class="number">65</span> * f[<span class="number">3</span>] + <span class="number">-78</span> * f[<span class="number">13</span>] + <span class="number">-71</span> * f[<span class="number">26</span>] + <span class="number">-44</span> * f[<span class="number">23</span>] + <span class="number">61</span> * f[<span class="number">7</span>] + <span class="number">63</span> * f[<span class="number">1</span>] + <span class="number">9</span> * f[<span class="number">16</span>] + <span class="number">11</span> * f[<span class="number">22</span>] - <span class="number">39</span> * f[<span class="number">14</span>] + <span class="number">80</span> * f[<span class="number">6</span>] - <span class="number">33</span> * f[<span class="number">11</span>] - <span class="number">62</span> * f[<span class="number">2</span>] - <span class="number">74</span> * f[<span class="number">28</span>] == <span class="number">-77151</span>)</span><br><span class="line">s.add(<span class="number">54</span> * f[<span class="number">20</span>] + <span class="number">65</span> * f[<span class="number">22</span>] + <span class="number">-9</span> * f[<span class="number">9</span>] + <span class="number">-61</span> * f[<span class="number">24</span>] + <span class="number">-45</span> * f[<span class="number">25</span>] + <span class="number">47</span> * f[<span class="number">4</span>] + <span class="number">31</span> * f[<span class="number">5</span>] + <span class="number">36</span> * f[<span class="number">23</span>] + <span class="number">20</span> * f[<span class="number">13</span>] - <span class="number">40</span> * f[<span class="number">2</span>] - <span class="number">64</span> * f[<span class="number">12</span>] - <span class="number">40</span> * f[<span class="number">14</span>] + <span class="number">81</span> * f[<span class="number">10</span>] - <span class="number">35</span> * f[<span class="number">0</span>] - <span class="number">12</span> * f[<span class="number">27</span>] + <span class="number">35</span> * f[<span class="number">30</span>] + <span class="number">63</span> * f[<span class="number">15</span>] - <span class="number">65</span> * f[<span class="number">19</span>] + <span class="number">31</span> * f[<span class="number">18</span>] - <span class="number">42</span> * f[<span class="number">35</span>] + <span class="number">33</span> * f[<span class="number">11</span>] + <span class="number">43</span> * f[<span class="number">33</span>] + <span class="number">76</span> * f[<span class="number">32</span>] + <span class="number">-4</span> * f[<span class="number">26</span>] + <span class="number">59</span> * f[<span class="number">6</span>] + <span class="number">-85</span> * f[<span class="number">34</span>] + <span class="number">69</span> * f[<span class="number">29</span>] + <span class="number">77</span> * f[<span class="number">31</span>] + <span class="number">-95</span> * f[<span class="number">8</span>] + <span class="number">75</span> * f[<span class="number">16</span>] - <span class="number">19</span> * f[<span class="number">3</span>] + <span class="number">65</span> * f[<span class="number">21</span>] - <span class="number">78</span> * f[<span class="number">7</span>] - <span class="number">48</span> * f[<span class="number">28</span>] - <span class="number">77</span> * f[<span class="number">17</span>] == <span class="number">11531</span>)</span><br><span class="line">s.add(<span class="number">-12</span> * f[<span class="number">0</span>] + <span class="number">55</span> * f[<span class="number">17</span>] + <span class="number">35</span> * f[<span class="number">20</span>] + <span class="number">76</span> * f[<span class="number">13</span>] + <span class="number">-73</span> * f[<span class="number">15</span>] + <span class="number">84</span> * f[<span class="number">12</span>] + <span class="number">-72</span> * f[<span class="number">3</span>] + <span class="number">71</span> * f[<span class="number">24</span>] + <span class="number">-41</span> * f[<span class="number">7</span>] + <span class="number">28</span> * f[<span class="number">8</span>] + <span class="number">-93</span> * f[<span class="number">34</span>] + <span class="number">-63</span> * f[<span class="number">30</span>] + <span class="number">35</span> * f[<span class="number">6</span>] - <span class="number">38</span> * f[<span class="number">10</span>] - <span class="number">4</span> * f[<span class="number">16</span>] + <span class="number">99</span> * f[<span class="number">11</span>] + <span class="number">10</span> * f[<span class="number">4</span>] - <span class="number">98</span> * f[<span class="number">35</span>] - <span class="number">9</span> * f[<span class="number">18</span>] + <span class="number">22</span> * f[<span class="number">21</span>] - <span class="number">6</span> * f[<span class="number">26</span>] + <span class="number">67</span> * f[<span class="number">23</span>] + <span class="number">95</span> * f[<span class="number">5</span>] + <span class="number">-37</span> * f[<span class="number">9</span>] + <span class="number">-71</span> * f[<span class="number">25</span>] + <span class="number">33</span> * f[<span class="number">32</span>] + <span class="number">96</span> * f[<span class="number">14</span>] + <span class="number">47</span> * f[<span class="number">31</span>] + <span class="number">-92</span> * f[<span class="number">27</span>] + <span class="number">-51</span> * f[<span class="number">1</span>] + <span class="number">-25</span> * f[<span class="number">28</span>] + <span class="number">82</span> * f[<span class="number">2</span>] - <span class="number">6</span> * f[<span class="number">33</span>] - <span class="number">13</span> * f[<span class="number">29</span>] + <span class="number">25</span> * f[<span class="number">22</span>] - <span class="number">35</span> * f[<span class="number">19</span>] == <span class="number">4538</span>)</span><br><span class="line">s.add(<span class="number">79</span> * f[<span class="number">27</span>] + <span class="number">87</span> * f[<span class="number">24</span>] + <span class="number">-52</span> * f[<span class="number">29</span>] + <span class="number">-72</span> * f[<span class="number">13</span>] + <span class="number">-17</span> * f[<span class="number">23</span>] + <span class="number">54</span> * f[<span class="number">0</span>] + <span class="number">45</span> * f[<span class="number">10</span>] + <span class="number">-17</span> * f[<span class="number">33</span>] + <span class="number">-49</span> * f[<span class="number">4</span>] + <span class="number">-34</span> * f[<span class="number">17</span>] + <span class="number">87</span> * f[<span class="number">7</span>] + <span class="number">-41</span> * f[<span class="number">18</span>] + <span class="number">2</span> * f[<span class="number">30</span>] + <span class="number">-81</span> * f[<span class="number">11</span>] + <span class="number">37</span> * f[<span class="number">35</span>] - <span class="number">46</span> * f[<span class="number">9</span>] + <span class="number">25</span> * f[<span class="number">32</span>] - <span class="number">45</span> * f[<span class="number">14</span>] - <span class="number">30</span> * f[<span class="number">12</span>] + <span class="number">83</span> * f[<span class="number">19</span>] + <span class="number">24</span> * f[<span class="number">1</span>] + <span class="number">98</span> * f[<span class="number">16</span>] + <span class="number">64</span> * f[<span class="number">21</span>] + <span class="number">93</span> * f[<span class="number">8</span>] + <span class="number">78</span> * f[<span class="number">2</span>] + <span class="number">56</span> * f[<span class="number">15</span>] + <span class="number">-51</span> * f[<span class="number">6</span>] + <span class="number">-17</span> * f[<span class="number">26</span>] + <span class="number">-50</span> * f[<span class="number">25</span>] + <span class="number">-76</span> * f[<span class="number">3</span>] + <span class="number">-65</span> * f[<span class="number">28</span>] + <span class="number">-36</span> * f[<span class="number">31</span>] + <span class="number">88</span> * f[<span class="number">34</span>] + <span class="number">77</span> * f[<span class="number">20</span>] - <span class="number">62</span> * f[<span class="number">5</span>] + <span class="number">67</span> * f[<span class="number">22</span>] == <span class="number">33735</span>)</span><br><span class="line">s.add(<span class="number">37</span> * f[<span class="number">17</span>] + <span class="number">-21</span> * f[<span class="number">19</span>] + <span class="number">55</span> * f[<span class="number">21</span>] + <span class="number">-70</span> * f[<span class="number">26</span>] + <span class="number">92</span> * f[<span class="number">6</span>] + <span class="number">75</span> * f[<span class="number">31</span>] + <span class="number">-35</span> * f[<span class="number">29</span>] + <span class="number">-50</span> * f[<span class="number">25</span>] + <span class="number">8</span> * f[<span class="number">33</span>] + <span class="number">-74</span> * f[<span class="number">13</span>] + <span class="number">34</span> * f[<span class="number">35</span>] + <span class="number">29</span> * f[<span class="number">24</span>] + <span class="number">-10</span> * f[<span class="number">15</span>] + <span class="number">-75</span> * f[<span class="number">16</span>] + <span class="number">24</span> * f[<span class="number">18</span>] + <span class="number">98</span> * f[<span class="number">0</span>] + <span class="number">41</span> * f[<span class="number">20</span>] - <span class="number">54</span> * f[<span class="number">28</span>] - <span class="number">5</span> * f[<span class="number">23</span>] - <span class="number">66</span> * f[<span class="number">9</span>] + <span class="number">3</span> * f[<span class="number">5</span>] + <span class="number">30</span> * f[<span class="number">1</span>] + <span class="number">-29</span> * f[<span class="number">7</span>] + <span class="number">-71</span> * f[<span class="number">30</span>] + <span class="number">61</span> * f[<span class="number">10</span>] + <span class="number">-25</span> * f[<span class="number">4</span>] + <span class="number">82</span> * f[<span class="number">32</span>] + <span class="number">62</span> * f[<span class="number">22</span>] + <span class="number">-40</span> * f[<span class="number">34</span>] + <span class="number">90</span> * f[<span class="number">3</span>] + <span class="number">-36</span> * f[<span class="number">14</span>] - <span class="number">66</span> * f[<span class="number">2</span>] + <span class="number">15</span> * f[<span class="number">12</span>] - <span class="number">74</span> * f[<span class="number">27</span>] + <span class="number">31</span> * f[<span class="number">8</span>] - <span class="number">68</span> * f[<span class="number">11</span>] == <span class="number">-7107</span>)</span><br><span class="line">s.add(<span class="number">-34</span> * f[<span class="number">13</span>] + <span class="number">-13</span> * f[<span class="number">15</span>] + <span class="number">-11</span> * f[<span class="number">19</span>] + <span class="number">28</span> * f[<span class="number">17</span>] + <span class="number">98</span> * f[<span class="number">9</span>] + <span class="number">-69</span> * f[<span class="number">3</span>] + <span class="number">64</span> * f[<span class="number">25</span>] + <span class="number">-66</span> * f[<span class="number">7</span>] + <span class="number">-71</span> * f[<span class="number">6</span>] + <span class="number">75</span> * f[<span class="number">34</span>] + <span class="number">19</span> * f[<span class="number">32</span>] + <span class="number">-94</span> * f[<span class="number">33</span>] - <span class="number">72</span> * f[<span class="number">18</span>] + <span class="number">35</span> * f[<span class="number">26</span>] - <span class="number">32</span> * f[<span class="number">27</span>] + <span class="number">76</span> * f[<span class="number">1</span>] + <span class="number">80</span> * f[<span class="number">28</span>] + <span class="number">66</span> * f[<span class="number">10</span>] + <span class="number">3</span> * f[<span class="number">12</span>] - <span class="number">99</span> * f[<span class="number">14</span>] + <span class="number">17</span> * f[<span class="number">30</span>] + <span class="number">-79</span> * f[<span class="number">24</span>] + <span class="number">-83</span> * f[<span class="number">29</span>] + <span class="number">55</span> * f[<span class="number">35</span>] + <span class="number">-75</span> * f[<span class="number">8</span>] + <span class="number">77</span> * f[<span class="number">31</span>] + <span class="number">84</span> * f[<span class="number">22</span>] - <span class="number">94</span> * f[<span class="number">0</span>] + <span class="number">12</span> * f[<span class="number">2</span>] + <span class="number">61</span> * f[<span class="number">20</span>] - <span class="number">24</span> * f[<span class="number">23</span>] + <span class="number">62</span> * f[<span class="number">11</span>] + <span class="number">37</span> * f[<span class="number">16</span>] - <span class="number">65</span> * f[<span class="number">21</span>] - <span class="number">2</span> * f[<span class="number">4</span>] - <span class="number">90</span> * f[<span class="number">5</span>] == <span class="number">-17028</span>)</span><br><span class="line">s.add(<span class="number">24</span> * f[<span class="number">3</span>] + <span class="number">-76</span> * f[<span class="number">2</span>] + <span class="number">-94</span> * f[<span class="number">16</span>] + <span class="number">-37</span> * f[<span class="number">4</span>] + <span class="number">-31</span> * f[<span class="number">7</span>] + <span class="number">-65</span> * f[<span class="number">0</span>] + <span class="number">-23</span> * f[<span class="number">22</span>] + <span class="number">80</span> * f[<span class="number">24</span>] + <span class="number">-48</span> * f[<span class="number">20</span>] + <span class="number">-42</span> * f[<span class="number">32</span>] + <span class="number">47</span> * f[<span class="number">9</span>] - <span class="number">95</span> * f[<span class="number">6</span>] - <span class="number">10</span> * f[<span class="number">35</span>] - <span class="number">30</span> * f[<span class="number">34</span>] - <span class="number">67</span> * f[<span class="number">12</span>] + <span class="number">81</span> * f[<span class="number">14</span>] - <span class="number">21</span> * f[<span class="number">27</span>] + <span class="number">65</span> * f[<span class="number">18</span>] + <span class="number">60</span> * f[<span class="number">25</span>] + <span class="number">31</span> * f[<span class="number">17</span>] - <span class="number">20</span> * f[<span class="number">31</span>] + <span class="number">-17</span> * f[<span class="number">21</span>] + <span class="number">-34</span> * f[<span class="number">26</span>] + <span class="number">64</span> * f[<span class="number">15</span>] + <span class="number">43</span> * f[<span class="number">11</span>] + <span class="number">39</span> * f[<span class="number">23</span>] + <span class="number">68</span> * f[<span class="number">33</span>] + <span class="number">-58</span> * f[<span class="number">13</span>] + <span class="number">21</span> * f[<span class="number">1</span>] + <span class="number">19</span> * f[<span class="number">19</span>] + <span class="number">96</span> * f[<span class="number">8</span>] - <span class="number">32</span> * f[<span class="number">30</span>] - <span class="number">83</span> * f[<span class="number">28</span>] + <span class="number">20</span> * f[<span class="number">5</span>] - <span class="number">3</span> * f[<span class="number">29</span>] + <span class="number">7</span> * f[<span class="number">10</span>] == <span class="number">-21641</span>)</span><br><span class="line">s.add(<span class="number">-76</span> * f[<span class="number">0</span>] + <span class="number">-82</span> * f[<span class="number">22</span>] + <span class="number">-92</span> * f[<span class="number">24</span>] + <span class="number">53</span> * f[<span class="number">20</span>] + <span class="number">-90</span> * f[<span class="number">5</span>] + <span class="number">3</span> * f[<span class="number">34</span>] + <span class="number">93</span> * f[<span class="number">2</span>] + <span class="number">77</span> * f[<span class="number">25</span>] + <span class="number">-40</span> * f[<span class="number">16</span>] + <span class="number">-59</span> * f[<span class="number">26</span>] + <span class="number">-91</span> * f[<span class="number">15</span>] + <span class="number">55</span> * f[<span class="number">9</span>] + <span class="number">-84</span> * f[<span class="number">35</span>] + <span class="number">-46</span> * f[<span class="number">12</span>] + <span class="number">-41</span> * f[<span class="number">31</span>] + <span class="number">-55</span> * f[<span class="number">8</span>] + <span class="number">97</span> * f[<span class="number">32</span>] + <span class="number">56</span> * f[<span class="number">19</span>] - <span class="number">15</span> * f[<span class="number">13</span>] - <span class="number">93</span> * f[<span class="number">4</span>] + <span class="number">37</span> * f[<span class="number">33</span>] + <span class="number">-52</span> * f[<span class="number">7</span>] + <span class="number">-82</span> * f[<span class="number">23</span>] + <span class="number">14</span> * f[<span class="number">27</span>] + <span class="number">52</span> * f[<span class="number">6</span>] + <span class="number">67</span> * f[<span class="number">11</span>] + f[<span class="number">3</span>] + <span class="number">-37</span> * f[<span class="number">30</span>] - <span class="number">88</span> * f[<span class="number">18</span>] - <span class="number">16</span> * f[<span class="number">10</span>] + f[<span class="number">14</span>] + <span class="number">48</span> * f[<span class="number">17</span>] - <span class="number">80</span> * f[<span class="number">21</span>] + <span class="number">17</span> * f[<span class="number">29</span>] - <span class="number">94</span> * f[<span class="number">28</span>] - <span class="number">12</span> * f[ <span class="number">1</span>] == <span class="number">-71317</span>)</span><br><span class="line">s.add(<span class="number">-71</span> * f[<span class="number">21</span>] + <span class="number">-55</span> * f[<span class="number">5</span>] + <span class="number">-76</span> * f[<span class="number">4</span>] + <span class="number">-94</span> * f[<span class="number">10</span>] + <span class="number">-79</span> * f[<span class="number">26</span>] + <span class="number">95</span> * f[<span class="number">28</span>] + <span class="number">58</span> * f[<span class="number">3</span>] + <span class="number">-85</span> * f[<span class="number">13</span>] + <span class="number">-74</span> * f[<span class="number">27</span>] + <span class="number">-35</span> * f[<span class="number">16</span>] + <span class="number">68</span> * f[<span class="number">2</span>] + <span class="number">84</span> * f[<span class="number">11</span>] + <span class="number">-25</span> * f[<span class="number">23</span>] + <span class="number">-91</span> * f[<span class="number">33</span>] + <span class="number">-87</span> * f[<span class="number">14</span>] + <span class="number">-65</span> * f[<span class="number">34</span>] + <span class="number">23</span> * f[<span class="number">20</span>] + <span class="number">-91</span> * f[<span class="number">15</span>] + <span class="number">34</span> * f[<span class="number">12</span>] + <span class="number">53</span> * f[ <span class="number">1</span>] - <span class="number">16</span> * f[<span class="number">24</span>] + <span class="number">46</span> * f[<span class="number">9</span>] + <span class="number">-26</span> * f[<span class="number">0</span>] + <span class="number">42</span> * f[<span class="number">30</span>] + <span class="number">22</span> * f[<span class="number">25</span>] + <span class="number">-89</span> * f[<span class="number">19</span>] + <span class="number">34</span> * f[<span class="number">32</span>] + <span class="number">-12</span> * f[<span class="number">29</span>] + <span class="number">-16</span> * f[<span class="number">7</span>] + <span class="number">22</span> * f[<span class="number">18</span>] + <span class="number">-52</span> * f[<span class="number">31</span>] + <span class="number">83</span> * f[<span class="number">22</span>] + <span class="number">5</span> * f[<span class="number">17</span>] - <span class="number">71</span> * f[<span class="number">6</span>] + <span class="number">41</span> * f[<span class="number">35</span>] + <span class="number">68</span> * f[<span class="number">8</span>] == <span class="number">-41387</span>)</span><br><span class="line">s.add(<span class="number">-97</span> * f[<span class="number">12</span>] + <span class="number">-19</span> * f[<span class="number">19</span>] + <span class="number">-87</span> * f[<span class="number">3</span>] + <span class="number">89</span> * f[<span class="number">27</span>] + <span class="number">54</span> * f[<span class="number">5</span>] + <span class="number">59</span> * f[<span class="number">22</span>] + <span class="number">95</span> * f[<span class="number">17</span>] + <span class="number">62</span> * f[<span class="number">26</span>] + <span class="number">6</span> * f[<span class="number">20</span>] + <span class="number">64</span> * f[<span class="number">14</span>] + <span class="number">-50</span> * f[<span class="number">13</span>] + <span class="number">-95</span> * f[<span class="number">30</span>] + <span class="number">-68</span> * f[<span class="number">16</span>] + <span class="number">10</span> * f[<span class="number">0</span>] - f[<span class="number">2</span>] - f[<span class="number">28</span>] + <span class="number">17</span> * f[<span class="number">18</span>] - <span class="number">76</span> * f[<span class="number">6</span>] - <span class="number">24</span> * f[<span class="number">23</span>] - <span class="number">76</span> * f[<span class="number">11</span>] + <span class="number">33</span> * f[<span class="number">34</span>] - <span class="number">98</span> * f[<span class="number">31</span>] + <span class="number">-59</span> * f[<span class="number">10</span>] + <span class="number">35</span> * f[<span class="number">4</span>] + <span class="number">-53</span> * f[<span class="number">8</span>] + <span class="number">-18</span> * f[<span class="number">1</span>] + <span class="number">9</span> * f[<span class="number">32</span>] + <span class="number">-45</span> * f[<span class="number">9</span>] - <span class="number">60</span> * f[<span class="number">29</span>] - <span class="number">74</span> * f[<span class="number">35</span>] + <span class="number">31</span> * f[<span class="number">7</span>] + <span class="number">50</span> * f[<span class="number">24</span>] + <span class="number">25</span> * f[<span class="number">21</span>] - <span class="number">83</span> * f[<span class="number">33</span>] + <span class="number">25</span> * f[<span class="number">25</span>] + <span class="number">52</span> * f[<span class="number">15</span>] == <span class="number">-30463</span>)</span><br><span class="line">s.add(<span class="number">-27</span> * f[<span class="number">25</span>] + <span class="number">84</span> * f[<span class="number">34</span>] + <span class="number">-73</span> * f[<span class="number">14</span>] + <span class="number">-54</span> * f[<span class="number">7</span>] + <span class="number">-45</span> * f[<span class="number">26</span>] + <span class="number">-97</span> * f[<span class="number">18</span>] + <span class="number">40</span> * f[<span class="number">10</span>] + <span class="number">73</span> * f[<span class="number">27</span>] + <span class="number">-55</span> * f[<span class="number">11</span>] + <span class="number">52</span> * f[<span class="number">29</span>] + <span class="number">-29</span> * f[<span class="number">13</span>] + <span class="number">32</span> * f[<span class="number">24</span>] + <span class="number">-80</span> * f[<span class="number">0</span>] + <span class="number">-79</span> * f[<span class="number">17</span>] + <span class="number">-39</span> * f[<span class="number">6</span>] + <span class="number">88</span> * f[<span class="number">1</span>] + <span class="number">44</span> * f[<span class="number">2</span>] - <span class="number">50</span> * f[<span class="number">3</span>] - <span class="number">2</span> * f[<span class="number">22</span>] - <span class="number">44</span> * f[<span class="number">31</span>] - <span class="number">62</span> * f[<span class="number">8</span>] + <span class="number">-68</span> * f[<span class="number">5</span>] + <span class="number">77</span> * f[<span class="number">21</span>] + <span class="number">-34</span> * f[<span class="number">15</span>] + <span class="number">-42</span> * f[<span class="number">35</span>] + <span class="number">30</span> * f[<span class="number">28</span>] + <span class="number">-54</span> * f[<span class="number">30</span>] + <span class="number">-53</span> * f[<span class="number">20</span>] + <span class="number">98</span> * f[<span class="number">33</span>] + <span class="number">70</span> * f[<span class="number">32</span>] + <span class="number">99</span> * f[<span class="number">19</span>] - <span class="number">51</span> * f[<span class="number">4</span>] + <span class="number">12</span> * f[<span class="number">16</span>] - <span class="number">55</span> * f[<span class="number">9</span>] + <span class="number">40</span> * f[<span class="number">12</span>] + <span class="number">76</span> * f[<span class="number">23</span>] == <span class="number">-14435</span>)</span><br><span class="line">s.add(<span class="number">86</span> * f[<span class="number">20</span>] + <span class="number">70</span> * f[<span class="number">13</span>] + <span class="number">-76</span> * f[<span class="number">19</span>] + <span class="number">-31</span> * f[<span class="number">28</span>] + <span class="number">77</span> * f[<span class="number">14</span>] + <span class="number">48</span> * f[<span class="number">15</span>] + <span class="number">-78</span> * f[<span class="number">31</span>] + <span class="number">-82</span> * f[<span class="number">26</span>] + <span class="number">69</span> * f[<span class="number">3</span>] + <span class="number">70</span> * f[<span class="number">5</span>] + <span class="number">95</span> * f[<span class="number">6</span>] - <span class="number">60</span> * f[<span class="number">4</span>] + <span class="number">30</span> * f[<span class="number">27</span>] + <span class="number">3</span> * f[<span class="number">29</span>] - <span class="number">29</span> * f[<span class="number">32</span>] + <span class="number">5</span> * f[<span class="number">24</span>] + <span class="number">55</span> * f[<span class="number">0</span>] + <span class="number">36</span> * f[<span class="number">23</span>] - <span class="number">90</span> * f[<span class="number">22</span>] + <span class="number">37</span> * f[<span class="number">35</span>] + <span class="number">78</span> * f[<span class="number">34</span>] + <span class="number">20</span> * f[<span class="number">11</span>] + <span class="number">-64</span> * f[<span class="number">1</span>] + <span class="number">74</span> * f[<span class="number">30</span>] + <span class="number">16</span> * f[<span class="number">16</span>] + <span class="number">-83</span> * f[<span class="number">33</span>] + <span class="number">16</span> * f[<span class="number">2</span>] + <span class="number">-17</span> * f[<span class="number">17</span>] + <span class="number">-28</span> * f[<span class="number">8</span>] + <span class="number">9</span> * f[<span class="number">7</span>] - <span class="number">62</span> * f[<span class="number">10</span>] + <span class="number">46</span> * f[<span class="number">9</span>] + <span class="number">63</span> * f[<span class="number">21</span>] - <span class="number">39</span> * f[<span class="number">12</span>] - <span class="number">64</span> * f[<span class="number">18</span>] - <span class="number">27</span> * f[<span class="number">25</span>] == <span class="number">23472</span>)</span><br><span class="line">s.add(<span class="number">7</span> * f[<span class="number">0</span>] + <span class="number">92</span> * f[<span class="number">6</span>] + <span class="number">-57</span> * f[<span class="number">24</span>] + <span class="number">-89</span> * f[<span class="number">11</span>] + <span class="number">-47</span> * f[<span class="number">5</span>] + <span class="number">-39</span> * f[<span class="number">30</span>] + <span class="number">64</span> * f[<span class="number">8</span>] + <span class="number">-63</span> * f[<span class="number">12</span>] + <span class="number">-46</span> * f[<span class="number">9</span>] + <span class="number">-82</span> * f[<span class="number">17</span>] + <span class="number">39</span> * f[<span class="number">23</span>] + <span class="number">58</span> * f[<span class="number">13</span>] - <span class="number">81</span> * f[<span class="number">1</span>] + <span class="number">33</span> * f[<span class="number">29</span>] + <span class="number">89</span> * f[<span class="number">7</span>] - <span class="number">14</span> * f[<span class="number">20</span>] + <span class="number">97</span> * f[<span class="number">33</span>] + <span class="number">10</span> * f[<span class="number">35</span>] - <span class="number">46</span> * f[<span class="number">14</span>] + <span class="number">81</span> * f[<span class="number">4</span>] + <span class="number">89</span> * f[<span class="number">15</span>] + <span class="number">97</span> * f[<span class="number">21</span>] + <span class="number">-71</span> * f[<span class="number">2</span>] + <span class="number">-7</span> * f[<span class="number">19</span>] + <span class="number">-55</span> * f[<span class="number">3</span>] + <span class="number">85</span> * f[<span class="number">16</span>] + <span class="number">-97</span> * f[<span class="number">34</span>] + <span class="number">-29</span> * f[<span class="number">27</span>] + <span class="number">-79</span> * f[<span class="number">32</span>] + <span class="number">50</span> * f[<span class="number">28</span>] + <span class="number">81</span> * f[<span class="number">22</span>] - <span class="number">44</span> * f[<span class="number">31</span>] - <span class="number">60</span> * f[<span class="number">10</span>] - <span class="number">20</span> * f[<span class="number">26</span>] + <span class="number">18</span> * f[<span class="number">18</span>] + <span class="number">91</span> * f[<span class="number">25</span>] == <span class="number">7913</span>)</span><br><span class="line">s.add(<span class="number">49</span> * f[<span class="number">17</span>] + <span class="number">52</span> * f[<span class="number">18</span>] + <span class="number">-89</span> * f[<span class="number">25</span>] + <span class="number">-93</span> * f[<span class="number">35</span>] + <span class="number">-70</span> * f[<span class="number">11</span>] + <span class="number">-45</span> * f[<span class="number">24</span>] + <span class="number">88</span> * f[<span class="number">30</span>] + <span class="number">92</span> * f[<span class="number">31</span>] + <span class="number">44</span> * f[<span class="number">26</span>] + <span class="number">-5</span> * f[<span class="number">1</span>] + <span class="number">-48</span> * f[<span class="number">6</span>] + <span class="number">-16</span> * f[<span class="number">22</span>] + <span class="number">88</span> * f[<span class="number">32</span>] + <span class="number">91</span> * f[<span class="number">33</span>] + <span class="number">82</span> * f[<span class="number">28</span>] + <span class="number">98</span> * f[<span class="number">8</span>] - <span class="number">63</span> * f[<span class="number">13</span>] - <span class="number">8</span> * f[<span class="number">9</span>] - f[<span class="number">16</span>] - <span class="number">4</span> * f[<span class="number">27</span>] - <span class="number">47</span> * f[<span class="number">4</span>] + <span class="number">-41</span> * f[<span class="number">10</span>] + <span class="number">67</span> * f[<span class="number">29</span>] + <span class="number">-22</span> * f[<span class="number">15</span>] + <span class="number">-79</span> * f[<span class="number">12</span>] + <span class="number">-18</span> * f[<span class="number">2</span>] + <span class="number">23</span> * f[<span class="number">20</span>] + <span class="number">-20</span> * f[<span class="number">14</span>] + <span class="number">64</span> * f[<span class="number">19</span>] + <span class="number">91</span> * f[<span class="number">5</span>] - <span class="number">6</span> * f[<span class="number">7</span>] + <span class="number">84</span> * f[<span class="number">3</span>] - <span class="number">6</span> * f[<span class="number">34</span>] + <span class="number">69</span> * f[<span class="number">21</span>] - <span class="number">4</span> * f[<span class="number">23</span>] - <span class="number">80</span> * f[<span class="number">0</span>] == <span class="number">23824</span>)</span><br><span class="line">s.add(<span class="number">89</span> * f[<span class="number">11</span>] + <span class="number">61</span> * f[<span class="number">7</span>] + <span class="number">-92</span> * f[<span class="number">31</span>] + <span class="number">99</span> * f[<span class="number">21</span>] + <span class="number">27</span> * f[<span class="number">16</span>] + <span class="number">-48</span> * f[<span class="number">24</span>] + <span class="number">-51</span> * f[<span class="number">4</span>] + <span class="number">-39</span> * f[<span class="number">25</span>] + <span class="number">84</span> * f[<span class="number">30</span>] + <span class="number">34</span> * f[<span class="number">14</span>] + <span class="number">-73</span> * f[<span class="number">17</span>] + <span class="number">-92</span> * f[<span class="number">18</span>] + <span class="number">72</span> * f[<span class="number">2</span>] - <span class="number">14</span> * f[<span class="number">13</span>] - f[<span class="number">19</span>] + <span class="number">2</span> * f[<span class="number">9</span>] + <span class="number">3</span> * f[<span class="number">29</span>] - <span class="number">61</span> * f[<span class="number">33</span>] - <span class="number">6</span> * f[<span class="number">26</span>] - <span class="number">57</span> * f[<span class="number">15</span>] - <span class="number">8</span> * f[<span class="number">27</span>] + <span class="number">-28</span> * f[<span class="number">35</span>] + <span class="number">-72</span> * f[<span class="number">6</span>] + <span class="number">-46</span> * f[<span class="number">32</span>] + <span class="number">99</span> * f[<span class="number">20</span>] + <span class="number">-69</span> * f[<span class="number">22</span>] + <span class="number">-94</span> * f[<span class="number">12</span>] + <span class="number">-35</span> * f[<span class="number">8</span>] + <span class="number">-29</span> * f[<span class="number">0</span>] - <span class="number">29</span> * f[<span class="number">10</span>] - <span class="number">2</span> * f[<span class="number">23</span>] - <span class="number">23</span> * f[<span class="number">34</span>] + <span class="number">41</span> * f[<span class="number">3</span>] + <span class="number">42</span> * f[<span class="number">28</span>] == <span class="number">-13865</span>)</span><br><span class="line">s.add(<span class="number">62</span> * f[<span class="number">25</span>] + <span class="number">85</span> * f[<span class="number">8</span>] + <span class="number">-66</span> * f[<span class="number">32</span>] + <span class="number">43</span> * f[<span class="number">10</span>] + <span class="number">32</span> * f[<span class="number">33</span>] + <span class="number">75</span> * f[<span class="number">34</span>] + <span class="number">44</span> * f[<span class="number">1</span>] + <span class="number">49</span> * f[<span class="number">28</span>] + <span class="number">-21</span> * f[<span class="number">26</span>] + <span class="number">60</span> * f[<span class="number">4</span>] + <span class="number">-40</span> * f[<span class="number">0</span>] + <span class="number">-98</span> * f[<span class="number">15</span>] + <span class="number">-37</span> * f[<span class="number">9</span>] + <span class="number">78</span> * f[<span class="number">16</span>] + <span class="number">96</span> * f[<span class="number">35</span>] - <span class="number">84</span> * f[<span class="number">18</span>] - <span class="number">2</span> * f[<span class="number">7</span>] + <span class="number">43</span> * f[<span class="number">2</span>] - <span class="number">28</span> * f[<span class="number">6</span>] - <span class="number">77</span> * f[<span class="number">3</span>] - <span class="number">30</span> * f[<span class="number">17</span>] + <span class="number">90</span> * f[<span class="number">19</span>] + <span class="number">58</span> * f[<span class="number">30</span>] + <span class="number">74</span> * f[<span class="number">12</span>] + <span class="number">22</span> * f[<span class="number">29</span>] + <span class="number">-29</span> * f[<span class="number">20</span>] + <span class="number">-49</span> * f[<span class="number">22</span>] + <span class="number">88</span> * f[<span class="number">14</span>] + <span class="number">-51</span> * f[<span class="number">24</span>] + <span class="number">44</span> * f[<span class="number">21</span>] + <span class="number">28</span> * f[<span class="number">13</span>] - <span class="number">95</span> * f[<span class="number">5</span>] + <span class="number">5</span> * f[<span class="number">23</span>] + <span class="number">85</span> * f[<span class="number">31</span>] + <span class="number">5</span> * f[<span class="number">27</span>] + <span class="number">47</span> * f[<span class="number">11</span>] == <span class="number">50179</span>)</span><br><span class="line">s.add(<span class="number">-100</span> * f[<span class="number">25</span>] + <span class="number">-88</span> * f[<span class="number">18</span>] + <span class="number">46</span> * f[<span class="number">33</span>] + <span class="number">50</span> * f[<span class="number">31</span>] + <span class="number">-85</span> * f[<span class="number">4</span>] + <span class="number">-92</span> * f[<span class="number">6</span>] + <span class="number">-54</span> * f[<span class="number">7</span>] + <span class="number">83</span> * f[<span class="number">23</span>] + <span class="number">-25</span> * f[<span class="number">24</span>] + <span class="number">-91</span> * f[<span class="number">5</span>] + <span class="number">85</span> * f[<span class="number">10</span>] + <span class="number">-15</span> * f[<span class="number">16</span>] - <span class="number">59</span> * f[<span class="number">27</span>] - <span class="number">91</span> * f[<span class="number">8</span>] + <span class="number">73</span> * f[<span class="number">32</span>] + <span class="number">44</span> * f[<span class="number">19</span>] + <span class="number">5</span> * f[<span class="number">34</span>] + <span class="number">68</span> * f[<span class="number">14</span>] - <span class="number">32</span> * f[<span class="number">21</span>] - <span class="number">26</span> * f[<span class="number">30</span>] - <span class="number">56</span> * f[<span class="number">17</span>] + <span class="number">30</span> * f[<span class="number">1</span>] + <span class="number">-92</span> * f[<span class="number">26</span>] + <span class="number">4</span> * f[<span class="number">29</span>] + <span class="number">-89</span> * f[<span class="number">20</span>] + <span class="number">57</span> * f[<span class="number">15</span>] + <span class="number">-66</span> * f[<span class="number">0</span>] + <span class="number">-85</span> * f[<span class="number">12</span>] + <span class="number">91</span> * f[<span class="number">35</span>] + <span class="number">-68</span> * f[<span class="number">2</span>] - <span class="number">95</span> * f[<span class="number">3</span>] - <span class="number">16</span> * f[<span class="number">13</span>] - <span class="number">76</span> * f[<span class="number">11</span>] - <span class="number">48</span> * f[<span class="number">9</span>] - <span class="number">88</span> * f[<span class="number">22</span>] + <span class="number">65</span> * f[<span class="number">28</span>] == <span class="number">-75429</span>)</span><br><span class="line">s.add(<span class="number">-49</span> * f[<span class="number">20</span>] + <span class="number">-71</span> * f[<span class="number">13</span>] + <span class="number">-23</span> * f[<span class="number">23</span>] + <span class="number">-19</span> * f[<span class="number">21</span>] + <span class="number">62</span> * f[<span class="number">2</span>] + <span class="number">-41</span> * f[<span class="number">19</span>] + <span class="number">46</span> * f[<span class="number">15</span>] + <span class="number">5</span> * f[<span class="number">1</span>] + <span class="number">-2</span> * f[<span class="number">5</span>] + <span class="number">88</span> * f[<span class="number">9</span>] + <span class="number">84</span> * f[<span class="number">16</span>] + <span class="number">77</span> * f[<span class="number">6</span>] - <span class="number">6</span> * f[<span class="number">26</span>] + <span class="number">51</span> * f[<span class="number">33</span>] - <span class="number">96</span> * f[<span class="number">31</span>] + <span class="number">59</span> * f[<span class="number">14</span>] - <span class="number">62</span> * f[<span class="number">8</span>] - <span class="number">55</span> * f[<span class="number">25</span>] - <span class="number">32</span> * f[<span class="number">34</span>] + <span class="number">69</span> * f[<span class="number">32</span>] - <span class="number">48</span> * f[<span class="number">28</span>] + <span class="number">85</span> * f[<span class="number">30</span>] + <span class="number">-35</span> * f[<span class="number">24</span>] + <span class="number">-58</span> * f[<span class="number">18</span>] + <span class="number">16</span> * f[<span class="number">12</span>] + <span class="number">-45</span> * f[<span class="number">7</span>] + <span class="number">49</span> * f[<span class="number">35</span>] + <span class="number">8</span> * f[<span class="number">11</span>] + <span class="number">54</span> * f[<span class="number">22</span>] + <span class="number">-33</span> * f[<span class="number">4</span>] + <span class="number">4</span> * f[<span class="number">17</span>] - <span class="number">21</span> * f[<span class="number">27</span>] + <span class="number">31</span> * f[<span class="number">0</span>] - <span class="number">98</span> * f[<span class="number">10</span>] - <span class="number">96</span> * f[<span class="number">29</span>] - <span class="number">71</span> * f[<span class="number">3</span>] == <span class="number">-18764</span>)</span><br><span class="line">s.add(<span class="number">74</span> * f[<span class="number">20</span>] + <span class="number">-50</span> * f[<span class="number">2</span>] + <span class="number">-46</span> * f[<span class="number">21</span>] + <span class="number">28</span> * f[<span class="number">15</span>] + <span class="number">-100</span> * f[<span class="number">5</span>] + <span class="number">53</span> * f[<span class="number">28</span>] + <span class="number">-93</span> * f[<span class="number">9</span>] + <span class="number">-69</span> * f[<span class="number">1</span>] + <span class="number">-61</span> * f[<span class="number">0</span>] + <span class="number">26</span> * f[<span class="number">8</span>] + <span class="number">-66</span> * f[<span class="number">6</span>] + <span class="number">-66</span> * f[<span class="number">27</span>] - <span class="number">42</span> * f[<span class="number">4</span>] + <span class="number">89</span> * f[<span class="number">33</span>] - <span class="number">30</span> * f[<span class="number">31</span>] - <span class="number">45</span> * f[<span class="number">22</span>] + <span class="number">13</span> * f[<span class="number">14</span>] - <span class="number">29</span> * f[<span class="number">3</span>] + <span class="number">33</span> * f[<span class="number">10</span>] + <span class="number">54</span> * f[<span class="number">23</span>] + <span class="number">18</span> * f[<span class="number">30</span>] + <span class="number">88</span> * f[<span class="number">12</span>] + <span class="number">84</span> * f[<span class="number">34</span>] + <span class="number">66</span> * f[<span class="number">24</span>] + <span class="number">99</span> * f[<span class="number">16</span>] + <span class="number">-78</span> * f[<span class="number">32</span>] + <span class="number">-88</span> * f[<span class="number">11</span>] + <span class="number">-21</span> * f[<span class="number">35</span>] + <span class="number">25</span> * f[<span class="number">18</span>] + <span class="number">-81</span> * f[<span class="number">19</span>] - <span class="number">39</span> * f[<span class="number">29</span>] + <span class="number">15</span> * f[<span class="number">13</span>] + <span class="number">83</span> * f[<span class="number">26</span>] - <span class="number">28</span> * f[<span class="number">7</span>] + <span class="number">2</span> * f[<span class="number">25</span>] == <span class="number">-20428</span>)</span><br><span class="line">s.add(<span class="number">-97</span> * f[<span class="number">22</span>] + <span class="number">14</span> * f[<span class="number">33</span>] + <span class="number">-43</span> * f[<span class="number">11</span>] + <span class="number">40</span> * f[<span class="number">20</span>] + <span class="number">31</span> * f[<span class="number">13</span>] + <span class="number">44</span> * f[<span class="number">29</span>] + <span class="number">-68</span> * f[<span class="number">3</span>] + <span class="number">-36</span> * f[<span class="number">1</span>] + <span class="number">-38</span> * f[<span class="number">9</span>] + <span class="number">-7</span> * f[<span class="number">12</span>] + f[<span class="number">26</span>] + <span class="number">-50</span> * f[<span class="number">6</span>] + <span class="number">59</span> * f[<span class="number">8</span>] + <span class="number">88</span> * f[<span class="number">30</span>] + <span class="number">46</span> * f[<span class="number">0</span>] - <span class="number">34</span> * f[<span class="number">15</span>] + <span class="number">10</span> * f[<span class="number">4</span>] + <span class="number">84</span> * f[<span class="number">18</span>] + <span class="number">13</span> * f[<span class="number">7</span>] + <span class="number">14</span> * f[<span class="number">25</span>] - <span class="number">5</span> * f[<span class="number">16</span>] + <span class="number">10</span> * f[<span class="number">31</span>] + <span class="number">64</span> * f[<span class="number">28</span>] + <span class="number">97</span> * f[<span class="number">5</span>] + <span class="number">-7</span> * f[<span class="number">27</span>] + <span class="number">62</span> * f[<span class="number">14</span>] + <span class="number">60</span> * f[<span class="number">24</span>] + <span class="number">27</span> * f[<span class="number">34</span>] + <span class="number">-11</span> * f[<span class="number">10</span>] - <span class="number">31</span> * f[<span class="number">32</span>] - <span class="number">48</span> * f[<span class="number">19</span>] - <span class="number">55</span> * f[<span class="number">35</span>] - <span class="number">96</span> * f[<span class="number">2</span>] - <span class="number">83</span> * f[<span class="number">23</span>] == <span class="number">11973</span>)</span><br><span class="line">s.add(<span class="number">-99</span> * f[<span class="number">4</span>] + <span class="number">-57</span> * f[<span class="number">8</span>] + <span class="number">2</span> * f[<span class="number">7</span>] + <span class="number">57</span> * f[<span class="number">24</span>] + <span class="number">-54</span> * f[<span class="number">25</span>] + <span class="number">39</span> * f[<span class="number">29</span>] + <span class="number">-91</span> * f[<span class="number">1</span>] + <span class="number">-32</span> * f[<span class="number">20</span>] + <span class="number">-30</span> * f[<span class="number">11</span>] + <span class="number">16</span> * f[<span class="number">12</span>] + <span class="number">45</span> * f[<span class="number">17</span>] + <span class="number">90</span> * f[<span class="number">32</span>] + <span class="number">26</span> * f[<span class="number">5</span>] - <span class="number">59</span> * f[<span class="number">28</span>] + <span class="number">7</span> * f[<span class="number">2</span>] - <span class="number">88</span> * f[<span class="number">3</span>] + <span class="number">36</span> * f[<span class="number">15</span>] - <span class="number">73</span> * f[<span class="number">6</span>] - <span class="number">6</span> * f[<span class="number">27</span>] + <span class="number">99</span> * f[<span class="number">13</span>] - <span class="number">96</span> * f[<span class="number">0</span>] + <span class="number">-45</span> * f[<span class="number">26</span>] + <span class="number">-10</span> * f[<span class="number">35</span>] + <span class="number">-40</span> * f[<span class="number">9</span>] + <span class="number">97</span> * f[<span class="number">10</span>] + <span class="number">6</span> * f[<span class="number">22</span>] + <span class="number">58</span> * f[<span class="number">34</span>] + <span class="number">4</span> * f[<span class="number">31</span>] + <span class="number">55</span> * f[<span class="number">21</span>] - <span class="number">72</span> * f[<span class="number">16</span>] + <span class="number">27</span> * f[<span class="number">19</span>] + <span class="number">79</span> * f[<span class="number">23</span>] - <span class="number">28</span> * f[<span class="number">18</span>] - <span class="number">90</span> * f[<span class="number">30</span>] - <span class="number">6</span> * f[<span class="number">33</span>] + <span class="number">58</span> * f[<span class="number">14</span>] == <span class="number">-23186</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">      <span class="built_in">print</span> (<span class="built_in">chr</span>(model[f[i]].as_long().real), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nfinish&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;@_FAKE_flag!_do_Y0u_know_SMC?&#125;</span><br></pre></td></tr></table></figure><p>提交一下发现不正确，说明这是一个假flag，提示我们这道题使用了SMC（self-modifying code）</p><h1 id="step-1：找到SMC位置和加密方法"><a href="#step-1：找到SMC位置和加密方法" class="headerlink" title="step 1：找到SMC位置和加密方法"></a>step 1：找到SMC位置和加密方法</h1><p>既然对某一个片段进行了加密，说明程序中肯定有一部分乱码（或者逻辑混乱的汇编代码）</p><p>在0x409080处找到一大段数字</p><p>交叉引用一下，定位到负责加密代码40699B</p><p>发现是一个简单异或，用刚才找到的一长串方程的那个函数与这段乱码进行逐位异或</p><h1 id="step-2：破解SMC"><a href="#step-2：破解SMC" class="headerlink" title="step 2：破解SMC"></a>step 2：破解SMC</h1><p>接下来手动patch一下</p><p>在二进制文件中找到两段代码的位置，进行异或，上网找个二进制文件修改的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&quot;FAKE&quot;</span></span><br><span class="line">fr = <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">fw = <span class="built_in">open</span>(<span class="string">&#x27;modify_&#x27;</span>+file_path, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">data = fr.read()</span><br><span class="line">fw.write(data)</span><br><span class="line">fw.seek(<span class="number">0x1216</span>)</span><br><span class="line"></span><br><span class="line">fw.write(<span class="string">b&#x27;\xf3\x0f\x1e\xfa\x55\x48\x89\xe5\x48\x81\xec\x60\x01\x00\x00\x48&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x89\xbd\x28\xfe\xff\xff\x48\x8d\x95\x50\xff\xff\xff\xb8\x00\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\xb9\x12\x00\x00\x00\x48\x89\xd7\xf3\x48\xab\xc7\x85\xc0&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xfe\xff\xff\xf6\xd6\x00\x00\xc7\x85\xc4\xfe\xff\xff\xa7\xee\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\xc8\xfe\xff\xff\xf7\xea\x00\x00\xc7\x85\xcc\xfe\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x9f\xdf\x00\x00\xc7\x85\xd0\xfe\xff\xff\xcc\xdd\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\xd4\xfe\xff\xff\xae\xd9\x00\x00\xc7\x85\xd8\xfe\xff\xff\x32&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xb6\x00\x00\xc7\x85\xdc\xfe\xff\xff\xc3\xce\x00\x00\xc7\x85\xe0&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xfe\xff\xff\x4c\xd1\x00\x00\xc7\x85\xe4\xfe\xff\xff\x05\xc5\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\xe8\xfe\xff\xff\x8e\xc3\x00\x00\xc7\x85\xec\xfe\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x9a\xac\x00\x00\xc7\x85\xf0\xfe\xff\xff\x6d\xaf\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\xf4\xfe\xff\xff\x9a\xb5\x00\x00\xc7\x85\xf8\xfe\xff\xff\xc8&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xb3\x00\x00\xc7\x85\xfc\xfe\xff\xff\x3b\xad\x00\x00\xc7\x85\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\xff\xff\x4a\xab\x00\x00\xc7\x85\x04\xff\xff\xff\x50\xad\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\x08\xff\xff\xff\xce\xd6\x00\x00\xc7\x85\x0c\xff\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\xbc\xf1\x00\x00\xc7\x85\x10\xff\xff\xff\x12\xef\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\x14\xff\xff\xff\x1b\xe3\x00\x00\xc7\x85\x18\xff\xff\xff\x82&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xe1\x00\x00\xc7\x85\x1c\xff\xff\xff\xb4\xd6\x00\x00\xc7\x85\x20&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\xff\xff\xd1\xbe\x00\x00\xc7\x85\x24\xff\xff\xff\x52\xc7\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\x28\xff\xff\xff\xdd\xc1\x00\x00\xc7\x85\x2c\xff\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x5b\xbc\x00\x00\xc7\x85\x30\xff\xff\xff\x20\xbb\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\x34\xff\xff\xff\x87\xc6\x00\x00\xc7\x85\x38\xff\xff\xff\x04&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xb6\x00\x00\xc7\x85\x3c\xff\xff\xff\x55\xc5\x00\x00\xc7\x85\x40&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\xff\xff\x25\xbd\x00\x00\xc7\x85\x44\xff\xff\xff\x3f\xb4\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\x48\xff\xff\xff\x16\xb4\x00\x00\xc7\x85\x4c\xff\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x98\xb6\x00\x00\xc7\x85\x30\xfe\xff\xff\x68\x00\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\x34\xfe\xff\xff\x67\x00\x00\x00\xc7\x85\x38\xfe\xff\xff\x61&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\x00\xc7\x85\x3c\xfe\xff\xff\x6d\x00\x00\x00\xc7\x85\x40&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xfe\xff\xff\x65\x00\x00\x00\xc7\x85\x44\xfe\xff\xff\x7b\x00\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\x48\xfe\xff\xff\x40\x00\x00\x00\xc7\x85\x4c\xfe\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x5f\x00\x00\x00\xc7\x85\x50\xfe\xff\xff\x46\x00\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\x54\xfe\xff\xff\x41\x00\x00\x00\xc7\x85\x58\xfe\xff\xff\x4b&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\x00\xc7\x85\x5c\xfe\xff\xff\x45\x00\x00\x00\xc7\x85\x60&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xfe\xff\xff\x5f\x00\x00\x00\xc7\x85\x64\xfe\xff\xff\x66\x00\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\x68\xfe\xff\xff\x6c\x00\x00\x00\xc7\x85\x6c\xfe\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x61\x00\x00\x00\xc7\x85\x70\xfe\xff\xff\x67\x00\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\x74\xfe\xff\xff\x21\x00\x00\x00\xc7\x85\x78\xfe\xff\xff\x2d&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\x00\xc7\x85\x7c\xfe\xff\xff\x64\x00\x00\x00\xc7\x85\x80&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xfe\xff\xff\x6f\x00\x00\x00\xc7\x85\x84\xfe\xff\xff\x5f\x00\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\x88\xfe\xff\xff\x59\x00\x00\x00\xc7\x85\x8c\xfe\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x30\x00\x00\x00\xc7\x85\x90\xfe\xff\xff\x75\x00\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\x94\xfe\xff\xff\x5f\x00\x00\x00\xc7\x85\x98\xfe\xff\xff\x6b&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\x00\xc7\x85\x9c\xfe\xff\xff\x6f\x00\x00\x00\xc7\x85\xa0&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xfe\xff\xff\x6e\x00\x00\x00\xc7\x85\xa4\xfe\xff\xff\x77\x00\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\xc7\x85\xa8\xfe\xff\xff\x5f\x00\x00\x00\xc7\x85\xac\xfe\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\x53\x00\x00\x00\xc7\x85\xb0\xfe\xff\xff\x4d\x00\x00\x00\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x85\xb4\xfe\xff\xff\x43\x00\x00\x00\xc7\x85\xb8\xfe\xff\xff\x3f&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\x00\xc7\x85\xbc\xfe\xff\xff\x7d\x00\x00\x00\xc7\x45\xfc&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x01\x00\x00\x00\xc7\x45\xf8\x00\x00\x00\x00\xe9\xb9\x00\x00\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xc7\x45\xf4\x00\x00\x00\x00\xe9\x9f\x00\x00\x00\xc7\x45\xf0\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\x00\xe9\x85\x00\x00\x00\x8b\x55\xf8\x89\xd0\x01\xc0\x01&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xd0\x01\xc0\x89\xc2\x8b\x45\xf4\x01\xd0\x48\x98\x8b\xb4\x85\x50&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\xff\xff\x8b\x55\xf8\x89\xd0\x01\xc0\x01\xd0\x01\xc0\x89\xc2&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x8b\x45\xf0\x01\xd0\x48\x98\x48\x8d\x14\x85\x00\x00\x00\x00\x48&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x8b\x85\x28\xfe\xff\xff\x48\x01\xd0\x8b\x00\x89\xc1\x8b\x55\xf0&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x89\xd0\x01\xc0\x01\xd0\x01\xc0\x89\xc2\x8b\x45\xf4\x01\xd0\x48&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x98\x8b\x84\x85\x30\xfe\xff\xff\x0f\xaf\xc8\x8b\x55\xf8\x89\xd0&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x01\xc0\x01\xd0\x01\xc0\x89\xc2\x8b\x45\xf4\x01\xd0\x8d\x14\x0e&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x48\x98\x89\x94\x85\x50\xff\xff\xff\x83\x45\xf0\x01\x83\x7d\xf0&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x05\x0f\x8e\x71\xff\xff\xff\x83\x45\xf4\x01\x83\x7d\xf4\x05\x0f&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x8e\x57\xff\xff\xff\x83\x45\xf8\x01\x83\x7d\xf8\x05\x0f\x8e\x3d&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xff\xff\xff\xc7\x45\xec\x00\x00\x00\x00\xeb\x58\xc7\x45\xe8\x00&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x00\x00\x00\xeb\x45\x8b\x55\xec\x89\xd0\x01\xc0\x01\xd0\x01\xc0&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x89\xc2\x8b\x45\xe8\x01\xd0\x48\x98\x8b\x8c\x85\x50\xff\xff\xff&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x8b\x55\xec\x89\xd0\x01\xc0\x01\xd0\x01\xc0\x89\xc2\x8b\x45\xe8&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x01\xd0\x48\x98\x8b\x84\x85\xc0\xfe\xff\xff\x39\xc1\x74\x07\xc7&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x45\xfc\x00\x00\x00\x00\x83\x45\xe8\x01\x83\x7d\xe8\x05\x7e\xb5&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\x83\x45\xec\x01\x83\x7d\xec\x05\x7e\xa2\x8b\x45\xfc\xc9\xc3\x45&#x27;</span> )</span><br><span class="line">fw.write(<span class="string">b&#x27;\xec\x38\xc3\xc0\x38\x8b\x00\x01&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fw.flush()</span><br><span class="line">fw.close()</span><br><span class="line">fr.close()</span><br></pre></td></tr></table></figure><h1 id="step-3：查看修改后的代码"><a href="#step-3：查看修改后的代码" class="headerlink" title="step 3：查看修改后的代码"></a>step 3：查看修改后的代码</h1><p>使用ida64打开修改后的文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">__int64 __usercall sub_401216@&lt;rax&gt;(__int64 a1@&lt;rbp&gt;, __int64 a2@&lt;rdi&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  v54 = a1;</span><br><span class="line">  *(&amp;v54 - <span class="number">59</span>) = a2;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v47, <span class="number">0</span>, <span class="number">0x90</span>uLL);</span><br><span class="line">  v11 = <span class="number">55030</span>;</span><br><span class="line">  v12 = <span class="number">61095</span>;</span><br><span class="line">  v13 = <span class="number">60151</span>;</span><br><span class="line">  v14 = <span class="number">57247</span>;</span><br><span class="line">  v15 = <span class="number">56780</span>;</span><br><span class="line">  v16 = <span class="number">55726</span>;</span><br><span class="line">  v17 = <span class="number">46642</span>;</span><br><span class="line">  v18 = <span class="number">52931</span>;</span><br><span class="line">  v19 = <span class="number">53580</span>;</span><br><span class="line">  v20 = <span class="number">50437</span>;</span><br><span class="line">  v21 = <span class="number">50062</span>;</span><br><span class="line">  v22 = <span class="number">44186</span>;</span><br><span class="line">  v23 = <span class="number">44909</span>;</span><br><span class="line">  v24 = <span class="number">46490</span>;</span><br><span class="line">  v25 = <span class="number">46024</span>;</span><br><span class="line">  v26 = <span class="number">44347</span>;</span><br><span class="line">  v27 = <span class="number">43850</span>;</span><br><span class="line">  v28 = <span class="number">44368</span>;</span><br><span class="line">  v29 = <span class="number">54990</span>;</span><br><span class="line">  v30 = <span class="number">61884</span>;</span><br><span class="line">  v31 = <span class="number">61202</span>;</span><br><span class="line">  v32 = <span class="number">58139</span>;</span><br><span class="line">  v33 = <span class="number">57730</span>;</span><br><span class="line">  v34 = <span class="number">54964</span>;</span><br><span class="line">  v35 = <span class="number">48849</span>;</span><br><span class="line">  v36 = <span class="number">51026</span>;</span><br><span class="line">  v37 = <span class="number">49629</span>;</span><br><span class="line">  v38 = <span class="number">48219</span>;</span><br><span class="line">  v39 = <span class="number">47904</span>;</span><br><span class="line">  v40 = <span class="number">50823</span>;</span><br><span class="line">  v41 = <span class="number">46596</span>;</span><br><span class="line">  v42 = <span class="number">50517</span>;</span><br><span class="line">  v43 = <span class="number">48421</span>;</span><br><span class="line">  v44 = <span class="number">46143</span>;</span><br><span class="line">  v45 = <span class="number">46102</span>;</span><br><span class="line">  v46 = <span class="number">46744</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">116</span>) = <span class="number">104</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">115</span>) = <span class="number">103</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">114</span>) = <span class="number">97</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">113</span>) = <span class="number">109</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">112</span>) = <span class="number">101</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">111</span>) = <span class="number">123</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">110</span>) = <span class="number">64</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">109</span>) = <span class="number">95</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">108</span>) = <span class="number">70</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">107</span>) = <span class="number">65</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">106</span>) = <span class="number">75</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">105</span>) = <span class="number">69</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">104</span>) = <span class="number">95</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">103</span>) = <span class="number">102</span>;</span><br><span class="line"></span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">102</span>) = <span class="number">108</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">101</span>) = <span class="number">97</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">100</span>) = <span class="number">103</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">99</span>) = <span class="number">33</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">98</span>) = <span class="number">45</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">97</span>) = <span class="number">100</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">96</span>) = <span class="number">111</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">95</span>) = <span class="number">95</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">94</span>) = <span class="number">89</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">93</span>) = <span class="number">48</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">92</span>) = <span class="number">117</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">91</span>) = <span class="number">95</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">90</span>) = <span class="number">107</span>;</span><br><span class="line">  *((_DWORD *)&amp;v54 - <span class="number">89</span>) = <span class="number">111</span>;</span><br><span class="line">  v3 = <span class="number">110</span>;</span><br><span class="line">  v4 = <span class="number">119</span>;</span><br><span class="line">  v5 = <span class="number">95</span>;</span><br><span class="line">  v6 = <span class="number">83</span>;</span><br><span class="line">  v7 = <span class="number">77</span>;</span><br><span class="line">  v8 = <span class="number">67</span>;</span><br><span class="line">  v9 = <span class="number">63</span>;</span><br><span class="line">  v10 = <span class="number">125</span>;</span><br><span class="line">  v53 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">5</span>; ++k )</span><br><span class="line">        *((_DWORD *)&amp;v54 + <span class="number">6</span> * i + j - <span class="number">44</span>) += *((_DWORD *)&amp;v54 + <span class="number">6</span> * k + j - <span class="number">116</span>)</span><br><span class="line">                                            * *(_DWORD *)(<span class="number">4L</span>L * (<span class="number">6</span> * i + k) + *(&amp;v54 - <span class="number">59</span>));<span class="comment">// 矩阵乘法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= <span class="number">5</span>; ++l )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt;= <span class="number">5</span>; ++m )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_DWORD *)&amp;v54 + <span class="number">6</span> * l + m - <span class="number">44</span>) != *((_DWORD *)&amp;v54 + <span class="number">6</span> * l + m - <span class="number">80</span>) )<span class="comment">// 与v11到v46比较</span></span><br><span class="line">        v53 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v53;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现判断函数发生了变化</p><p>第一个三重循环明显是一个矩阵乘法，第二个则是简单比较，由于这里指针有点绕，使用了gdb对每一项进行了判断</p><p>首先在第二个循环打断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004015FB loc_4015FB:                             ; CODE XREF: sub_401216+42E↓j</span><br><span class="line">.text:00000000004015FB                 mov     edx, [rbp-14h]</span><br><span class="line">.text:00000000004015FE                 mov     eax, edx</span><br><span class="line">.text:0000000000401600                 add     eax, eax</span><br><span class="line">.text:0000000000401602                 add     eax, edx</span><br><span class="line">.text:0000000000401604                 add     eax, eax</span><br><span class="line">.text:0000000000401606                 mov     edx, eax</span><br><span class="line">.text:0000000000401608                 mov     eax, [rbp-18h]</span><br><span class="line">.text:000000000040160B                 add     eax, edx</span><br><span class="line">.text:000000000040160D                 cdqe</span><br><span class="line">.text:000000000040160F                 mov     ecx, [rbp+rax*4-0B0h]</span><br><span class="line">.text:0000000000401616                 mov     edx, [rbp-14h]</span><br><span class="line">.text:0000000000401619                 mov     eax, edx</span><br><span class="line">.text:000000000040161B                 add     eax, eax</span><br><span class="line">.text:000000000040161D                 add     eax, edx</span><br><span class="line">.text:000000000040161F                 add     eax, eax</span><br><span class="line">.text:0000000000401621                 mov     edx, eax</span><br><span class="line">.text:0000000000401623                 mov     eax, [rbp-18h]</span><br><span class="line">.text:0000000000401626                 add     eax, edx</span><br><span class="line">.text:0000000000401628                 cdqe</span><br><span class="line">.text:000000000040162A                 mov     eax, [rbp+rax*4-140h]</span><br><span class="line">.text:0000000000401631                 cmp     ecx, eax</span><br><span class="line">.text:0000000000401633                 jz      short loc_40163C</span><br><span class="line">.text:0000000000401635                 mov     dword ptr [rbp-4], 0</span><br></pre></td></tr></table></figure><p>在cmp命令处打断点，查看ecx和eax寄存器的值，发现是拿计算结果和v11-v46进行比较</p><p>随后查看第一个大循环，关键点显然是乘法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040159E                 imul    ecx, eax</span><br></pre></td></tr></table></figure><p>打上断点后，发现是拿输入的6*6矩阵和104-125这段由36个数字构成的矩阵进行乘法</p><h1 id="step-4：进行求解"><a href="#step-4：进行求解" class="headerlink" title="step 4：进行求解"></a>step 4：进行求解</h1><p>所以接下来只需要求解矩阵即可，这里还是使用了z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">f = [ Int(<span class="string">&#x27;f%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    s.add(f[i] &gt; <span class="number">0x20</span>)</span><br><span class="line">    s.add(f[i] &lt; <span class="number">0x7f</span>)</span><br><span class="line"></span><br><span class="line">s.add(f[ <span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">4</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>))</span><br><span class="line">s.add(f[ <span class="number">5</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line">s.add(f[<span class="number">35</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">a = [<span class="number">104</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">123</span>, <span class="number">64</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">45</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">48</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">119</span>, <span class="number">95</span>, <span class="number">83</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> a:</span><br><span class="line">    print(<span class="built_in">chr</span>(c), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">ans = [<span class="number">55030</span>, <span class="number">61095</span>, <span class="number">60151</span>, <span class="number">57247</span>, <span class="number">56780</span>, <span class="number">55726</span>, <span class="number">46642</span>, <span class="number">52931</span>, <span class="number">53580</span>, <span class="number">50437</span>, <span class="number">50062</span>, <span class="number">44186</span>, <span class="number">44909</span>, <span class="number">46490</span>, <span class="number">46024</span>, <span class="number">44347</span>, <span class="number">43850</span>, <span class="number">44368</span>, <span class="number">54990</span>, <span class="number">61884</span>, <span class="number">61202</span>, <span class="number">58139</span>, <span class="number">57730</span>, <span class="number">54964</span>, <span class="number">48849</span>, <span class="number">51026</span>, <span class="number">49629</span>, <span class="number">48219</span>, <span class="number">47904</span>, <span class="number">50823</span>, <span class="number">46596</span>, <span class="number">50517</span>, <span class="number">48421</span>, <span class="number">46143</span>, <span class="number">46102</span>, <span class="number">46744</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        s.add(f[<span class="number">6</span> * i] * a[j] + f[<span class="number">6</span> * i + <span class="number">1</span>] * a[<span class="number">6</span> + j] + f[<span class="number">6</span> * i + <span class="number">2</span>] * a[<span class="number">12</span> + j] + f[<span class="number">6</span> * i + <span class="number">3</span>] * a[<span class="number">18</span> + j] + f[<span class="number">6</span> * i + <span class="number">4</span>] * a[<span class="number">24</span> + j] + f[<span class="number">6</span> * i + <span class="number">5</span>] * a[<span class="number">30</span> + j] == ans[<span class="number">6</span> * i + j])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">chr</span>(model[f[i]].as_long().real), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\nfinish&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到真正的flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;E@sy_Se1f-Modifying_C0oodee33&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;from HGAME2021&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Reverse入门</title>
    <link href="https://s0uthwood.github.io/2021/01/15/Reverse%E5%85%A5%E9%97%A8/"/>
    <id>https://s0uthwood.github.io/2021/01/15/Reverse%E5%85%A5%E9%97%A8/</id>
    <published>2021-01-15T10:29:48.000Z</published>
    <updated>2021-01-15T10:45:55.270Z</updated>
    
    <content type="html"><![CDATA[<p>几道BUUCTF上的Reverse入门题题解</p><a id="more"></a><h1 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h1><p>首先使用file命令，发现exe是32位的，将其拖入ida中</p><p>进入main函数</p><p>点击进入main0函数</p><p>可以看到一串v2字符串</p><p>结合程序运行时出现的文字：”这里本来应该是答案的“</p><p>猜测v2就是答案</p><p>直接提交</p><p>发现不对</p><p>将开头修改为flag</p><p>提交后直接通过</p><h1 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h1><p>首先使用file命令查看exe文件信息，发现是32位</p><p>尝试运行发现是要求输入flag</p><p>拖入ida进行静态分析</p><p>发现只有一个start函数，ida各种报错，无法分析</p><p>猜测使用了upx壳</p><p>使用exeinfope软件进行查看，upx壳实锤</p><p>脱壳后再次拖入ida</p><p>发现v4为”HappyNewYear!”</p><p>对于输入v5，直接与v4进行strncmp的比较</p><p>因此只需要与v4相同即可</p><p>尝试后发现没问题</p><p>套上flag提交</p><p>成功</p><h1 id="guessgame"><a href="#guessgame" class="headerlink" title="guessgame"></a>guessgame</h1><p>使用软件，发现是一个猜数游戏</p><p>拖入ida分析</p><p>发现整个代码与flag没有任何关系，就是一个猜测随机数的游戏</p><p>于是猜测flag隐藏在字符串常量中</p><p>进入字符串常量最顶部，发现如下字符串：</p><p>BJD{S1mple_ReV3r5e_W1th_0D_0r_IDA}</p><p>即为flag</p><h1 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h1><p>下载后发现是apk文件</p><p>首先将apk后缀更改为zip</p><p>解压后发现文件夹中含有一个classes.dex文件</p><p>使用dex2jar软件将其转换为jar文件</p><p>使用jd-gui.jar对其进行逆向分析</p><p>在源代码中有com.example.helloword文件夹，用过Java的都知道com.example是什么东西，因此进入该目录下，发现有个MainActivity.class文件，查看源代码，发现有个flag字符串并对其使用了一个比较方法(compareTo)，猜测这个就是需要的flag，提交后发现正确</p><h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p>拖入ida进行静态分析，发现对输入进行了异或处理，处理结果符合某个特定的函数值即可求解</p><p>看到一个for循环，是对每个字符与前面一个字符进行异或</p><p>根据异或的性质可知，只需要再异或一次就能还原</p><p>所以从后往前进行异或</p><p>随便写个脚本计算一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">35</span>];</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    flag[<span class="number">2</span>] = <span class="string">&#x27;k&#x27;</span>;</span><br><span class="line">    flag[<span class="number">3</span>] = <span class="string">&#x27;\f&#x27;</span>;</span><br><span class="line">    flag[<span class="number">4</span>] = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    flag[<span class="number">5</span>] = <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">    flag[<span class="number">6</span>] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">    flag[<span class="number">7</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    flag[<span class="number">8</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">    flag[<span class="number">9</span>] = <span class="string">&#x27;\x11&#x27;</span>;</span><br><span class="line">    flag[<span class="number">10</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    flag[<span class="number">11</span>] = <span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">    flag[<span class="number">12</span>] = <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">    flag[<span class="number">13</span>] = <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">    flag[<span class="number">14</span>] = <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">    flag[<span class="number">15</span>] = <span class="string">&#x27;\x11&#x27;</span>;</span><br><span class="line">    flag[<span class="number">16</span>] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">    flag[<span class="number">17</span>] = <span class="string">&#x27;\x19&#x27;</span>;</span><br><span class="line">    flag[<span class="number">18</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">    flag[<span class="number">19</span>] = <span class="string">&#x27;\x1F&#x27;</span>;</span><br><span class="line">    flag[<span class="number">20</span>] = <span class="string">&#x27;v&#x27;</span>;</span><br><span class="line">    flag[<span class="number">21</span>] = <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">    flag[<span class="number">22</span>] = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">    flag[<span class="number">23</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    flag[<span class="number">24</span>] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    flag[<span class="number">25</span>] = <span class="string">&#x27;\x0E&#x27;</span>;</span><br><span class="line">    flag[<span class="number">26</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">    flag[<span class="number">27</span>] = <span class="number">6</span>;</span><br><span class="line">    flag[<span class="number">28</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    flag[<span class="number">29</span>] = <span class="string">&#x27;\x0F&#x27;</span>;</span><br><span class="line">    flag[<span class="number">30</span>] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">    flag[<span class="number">31</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    flag[<span class="number">32</span>] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">    flag[<span class="number">33</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        flag[i] ^= flag[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><code>flag&#123;QianQiuWanDai_YiTongJiangHu&#125;</code></p><p>提交</p><p>成功</p><h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><p>进行初步检查后拖入ida进行静态分析</p><p>发现对于输入内容使用了一个函数进行变换</p><p>查看字符串发现使用了一个”ABCD…+/=”的字符串，猜测使用了BASE64编码</p><p>回到主函数，发现使用了一个<code>str2</code>与base64后的结果进行比较</p><p>查看字符串可知：<code>str2=e3nifIH9b_C@n@dH</code></p><p>明显不是base64的结果</p><p>回到主函数发现对base64结果进行了加法操作</p><p>编程进行反向操作后得到：<code>e2lfbDB2ZV95b3V9</code></p><p>使用在线工具可得解码结果：<code>&#123;i_l0ve_you&#125;</code></p><p>套上flag提交，通过</p><h1 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h1><p>首先测试一下软件</p><p>发现好像是个前进后退的游戏</p><p>猜测是一个迷宫</p><p>进入ida静态分析</p><p>发现当<code>v8[x]==35</code>时为成功<code>v8[x]==49</code>时失败</p><p>查阅ASCII发现35对应<code>#</code>，49对应<code>1</code>因此查找同时含有这两个字符的字符串：</p><p><code>*11110100001010000101111#</code></p><p>总长度为24，与<code>5*v4+v5</code>的最大值一致，因此忽略<code>-41</code></p><p>要求是不能进入1的位置而到达#</p><p>因此进行简单的推导即可得到要求的序列（完全可以写个代码跑一下，但由于这个题比较简单，直接手算即可）</p><p>得到输入序列：<code>222441144222</code></p><p>套上flag提交即可</p><p>注：此题可以看作是一个5*5的迷宫：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 1 1 1 1</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line">1 1 1 1 #</span><br></pre></td></tr></table></figure><p>1是障碍，0是可以走的路，*是起点，#是重点</p><p>这样就与运行程序时的 up, down, left, right 对应上了</p><h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><p>拖入ida</p><p>发现这道题涉及到类型转换，需要将int转换为char插入到字符串后面</p><p>需要注意的是在转换时要把顺序倒过来</p><p>转换后text为<code>killshadow</code>，key为<code>ADSFKNDCLS</code></p><p>随后将key转换为小写字母，即<code>adsfkndcls</code></p><p>编程枚举求解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main&#123;</span><br><span class="line"><span class="keyword">char</span> text[<span class="number">25</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(text, <span class="string">&quot;killshadow&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">25</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(key, <span class="string">&quot;adsfkndcls&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> str2[<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">int</span> textlen = <span class="built_in">strlen</span>(text);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; textlen; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; ++c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c &lt;= <span class="number">96</span> || c &gt; <span class="number">122</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">64</span> &amp;&amp; c &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(text[i] == (c - <span class="number">39</span> - key[i] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d%c &quot;</span>, i, c);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(text[i] == (c - <span class="number">39</span> - key[i] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d%c &quot;</span>, i, c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个位置均可以算出两个解，一个是大写字母，一个是小写字母</p><p>全部挑选大写字母后提交，可以通过</p><p>想尝试一下其它组合方案是否也可以，但可惜提交平台不允许多次提交</p><h1 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h1><p>将.class文件拖入jd-gui.jar中进行逆向</p><p>可以得到Reverse.class源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;Please input the flag );</span></span><br><span class="line"><span class="string">    String str = s.next();</span></span><br><span class="line"><span class="string">    System.out.println(&quot;</span>Your input is );</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">char</span>[] stringArr = str.toCharArray();</span><br><span class="line">    Encrypt(stringArr);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="keyword">char</span>[] arr)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> result = arr[i] + <span class="number">64</span> ^ <span class="number">0x20</span>;</span><br><span class="line">      Resultlist.add(Integer.valueOf(result));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">int</span>[] KEY = &#123; </span><br><span class="line">        <span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, </span><br><span class="line">        <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span> &#125;;</span><br><span class="line">    ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; KEY.length; j++)</span><br><span class="line">      KEYList.add(Integer.valueOf(KEY[j])); </span><br><span class="line">    System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Resultlist.equals(KEYList)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Congratulations);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      System.err.println(&quot;</span>Error);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是将输入的每个字符加64后与0x20进行异或</p><p>因此使用python进行暴力破解（其实完全可以反向计算就出来的，当时大意了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>, <span class="number">0x80</span>):</span><br><span class="line">        <span class="keyword">if</span> (c + <span class="number">64</span>) ^ <span class="number">0x20</span> == k:</span><br><span class="line">            <span class="built_in">print</span> <span class="built_in">chr</span>(c)</span><br></pre></td></tr></table></figure><p>得到<code>This_is_the_flag_!</code></p><p>提交，通过</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;几道BUUCTF上的Reverse入门题题解&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://s0uthwood.github.io/tags/CTF/"/>
    
    <category term="Reverse" scheme="https://s0uthwood.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Fabric-系统链码</title>
    <link href="https://s0uthwood.github.io/2020/12/18/Fabric-%E7%B3%BB%E7%BB%9F%E9%93%BE%E7%A0%81/"/>
    <id>https://s0uthwood.github.io/2020/12/18/Fabric-%E7%B3%BB%E7%BB%9F%E9%93%BE%E7%A0%81/</id>
    <published>2020-12-18T05:40:28.000Z</published>
    <updated>2021-01-15T09:41:40.595Z</updated>
    
    <content type="html"><![CDATA[<p>Fabric系统链码部分</p><a id="more"></a><h1 id="系统链码"><a href="#系统链码" class="headerlink" title="系统链码"></a>系统链码</h1><p><img data-src="系统链码结构图.png" alt="系统链码结构图"></p><h2 id="与普通链码对比"><a href="#与普通链码对比" class="headerlink" title="与普通链码对比"></a>与普通链码对比</h2><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">系统链码</th><th>普通链码</th></tr></thead><tbody><tr><td style="text-align:center">链码源码</td><td style="text-align:left">无main函数</td><td>有main函数</td></tr><tr><td style="text-align:center">运行空间</td><td style="text-align:left">背书节点进程</td><td>Docker</td></tr><tr><td style="text-align:center">调用方式</td><td style="text-align:left">网络+进程内部</td><td>网络</td></tr><tr><td style="text-align:center">启动参数</td><td style="text-align:left">内置</td><td>动态输入</td></tr><tr><td style="text-align:center">通信方式</td><td style="text-align:left">Golang的通道机制</td><td>网络</td></tr><tr><td style="text-align:center">数据存取</td><td style="text-align:left">Golang的通道+本地文件</td><td>网络</td></tr><tr><td style="text-align:center">升级方式</td><td style="text-align:left">和背书节点一起升级</td><td>单独升级</td></tr><tr><td style="text-align:center">背书策略</td><td style="text-align:left">无</td><td>有</td></tr></tbody></table></div><h1 id="系统链码在Peer节点上的注册与部署"><a href="#系统链码在Peer节点上的注册与部署" class="headerlink" title="系统链码在Peer节点上的注册与部署"></a>系统链码在Peer节点上的注册与部署</h1><p>peer节点存在于docker容器中，在启动时通过执行<code>peer node start</code>命令来启动peer节点。</p><blockquote><p>/internal/peer/node/start.go</p></blockquote><p>start命令的入口函数为serve函数。</p><p>以下源代码中仅保留部署系统链码的部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serve</span><span class="params">(args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Initialize chaincode service</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// deploy system chaincodes</span></span><br><span class="line"><span class="keyword">for</span> _, cc := <span class="keyword">range</span> []scc.SelfDescribingSysCC&#123;lsccInst, csccInst, qsccInst, lifecycleSCC&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> enabled, ok := chaincodeConfig.SCCWhitelist[cc.Name()]; !ok || !enabled &#123;</span><br><span class="line">logger.Infof(<span class="string">&quot;not deploying chaincode %s as it is not enabled&quot;</span>, cc.Name())</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="comment">// 判断链码的设置是否为enabled</span></span><br><span class="line">scc.DeploySysCC(cc, chaincodeSupport) <span class="comment">// 部署系统链码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.Infof(<span class="string">&quot;Deployed system chaincodes&quot;</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过遍历scc.SelfDescribingSysCC返回值，调用scc.DeploySysCC函数。</p><p>找到scc源文件：</p><blockquote><p>corn/scc/scc.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SelfDescribingSysCC <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">//Unique name of the system chaincode</span></span><br><span class="line">Name() <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Chaincode returns the underlying chaincode</span></span><br><span class="line">Chaincode() shim.Chaincode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SelfDescribingSysCC</code>的第二个方法为<code>Chaincode()</code>返回值为<code>shim.Chaincode</code>类型。在<code>core\scc\cscc\configure.go</code>中发现如下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *PeerConfiger)</span> <span class="title">Chaincode</span><span class="params">()</span> <span class="title">shim</span>.<span class="title">Chaincode</span></span> &#123; <span class="keyword">return</span> e &#125;</span><br></pre></td></tr></table></figure><p>可知<code>start.go</code>中的<code>cc</code>为每个链码的配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PeerConfiger <span class="keyword">struct</span> &#123;</span><br><span class="line">policyChecker          policy.PolicyChecker</span><br><span class="line">configMgr              config.Manager</span><br><span class="line">aclProvider            aclmgmt.ACLProvider</span><br><span class="line">deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider</span><br><span class="line">legacyLifecycle        plugindispatcher.LifecycleResources</span><br><span class="line">newLifecycle           plugindispatcher.CollectionAndLifecycleResources</span><br><span class="line">peer                   *peer.Peer</span><br><span class="line">bccsp                  bccsp.BCCSP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<code>DeploySysCC</code>的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChaincodeStreamHandler <span class="keyword">interface</span> &#123;</span><br><span class="line">HandleChaincodeStream(ccintf.ChaincodeStream) error</span><br><span class="line">LaunchInProc(packageID <span class="keyword">string</span>) &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125; <span class="comment">// 负责peer节点与链码之间的通信</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeploySysCC</span><span class="params">(sysCC SelfDescribingSysCC, chaincodeStreamHandler ChaincodeStreamHandler)</span></span> &#123;</span><br><span class="line">sysccLogger.Infof(<span class="string">&quot;deploying system chaincode &#x27;%s&#x27;&quot;</span>, sysCC.Name())</span><br><span class="line"></span><br><span class="line">ccid := ChaincodeID(sysCC.Name())</span><br><span class="line">done := chaincodeStreamHandler.LaunchInProc(ccid)</span><br><span class="line"></span><br><span class="line">peerRcvCCSend := <span class="built_in">make</span>(<span class="keyword">chan</span> *pb.ChaincodeMessage)</span><br><span class="line">ccRcvPeerSend := <span class="built_in">make</span>(<span class="keyword">chan</span> *pb.ChaincodeMessage)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并行传输数据</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">stream := newInProcStream(peerRcvCCSend, ccRcvPeerSend)</span><br><span class="line"><span class="keyword">defer</span> stream.CloseSend()</span><br><span class="line"></span><br><span class="line">sysccLogger.Debugf(<span class="string">&quot;starting chaincode-support stream for  %s&quot;</span>, ccid)</span><br><span class="line">err := chaincodeStreamHandler.HandleChaincodeStream(stream)</span><br><span class="line">sysccLogger.Criticalf(<span class="string">&quot;shim stream ended with err: %v&quot;</span>, err)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(sysCC SelfDescribingSysCC)</span></span> &#123;</span><br><span class="line">stream := newInProcStream(ccRcvPeerSend, peerRcvCCSend)</span><br><span class="line"><span class="keyword">defer</span> stream.CloseSend()</span><br><span class="line"></span><br><span class="line">sysccLogger.Debugf(<span class="string">&quot;chaincode started for %s&quot;</span>, ccid)</span><br><span class="line">err := shim.StartInProc(ccid, stream, sysCC.Chaincode())</span><br><span class="line">sysccLogger.Criticalf(<span class="string">&quot;system chaincode ended with err: %v&quot;</span>, err)</span><br><span class="line">&#125;(sysCC)</span><br><span class="line">&lt;-done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在serve.go代码中，对lscc,qscc,cscc三个系统链码进行相应的初始创建，随后根据配置信息部署到peer节点中。</p><h1 id="查询系统链码-Querier-System-Chaincode-QSCC"><a href="#查询系统链码-Querier-System-Chaincode-QSCC" class="headerlink" title="查询系统链码 (Querier System Chaincode, QSCC)"></a>查询系统链码 (<em>Querier System Chaincode</em>, QSCC)</h1><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><blockquote><p>/core/scc/qscc/query.go</p></blockquote><p>在所有Peer节点上运行，提供账本查询接口，包括了区块查询、交易查询等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> qscc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span>                       <span class="comment">// 格式化IO</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span>                   <span class="comment">// 数据类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/shim&quot;</span> <span class="comment">// shim包提供API访问链码chaincode的状态变量，chaincode用来和peer沟通的接口</span></span><br><span class="line">pb <span class="string">&quot;github.com/hyperledger/fabric-protos-go/peer&quot;</span> <span class="comment">// 调用.pb.go文件，由proto文件生成</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/common/flogging&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/aclmgmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/ledger&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/protoutil&quot;</span>         <span class="comment">// Proto Buffer的通用方法</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LedgerGetter gets the PeerLedger associated with a channel.</span></span><br><span class="line"><span class="keyword">type</span> LedgerGetter <span class="keyword">interface</span> &#123;</span><br><span class="line">GetLedger(cid <span class="keyword">string</span>) ledger.PeerLedger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New returns an instance of QSCC.</span></span><br><span class="line"><span class="comment">// Typically this is called once per peer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(aclProvider aclmgmt.ACLProvider, ledgers LedgerGetter)</span> *<span class="title">LedgerQuerier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;LedgerQuerier&#123;</span><br><span class="line">aclProvider: aclProvider,</span><br><span class="line">ledgers:     ledgers,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (e *LedgerQuerier) 表示这是LedgerQuerier结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *LedgerQuerier)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span>              &#123; <span class="keyword">return</span> <span class="string">&quot;qscc&quot;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *LedgerQuerier)</span> <span class="title">Chaincode</span><span class="params">()</span> <span class="title">shim</span>.<span class="title">Chaincode</span></span> &#123; <span class="keyword">return</span> e &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LedgerQuerier implements the ledger query functions, including:</span></span><br><span class="line"><span class="comment">// - GetChainInfo returns BlockchainInfo</span></span><br><span class="line"><span class="comment">// - GetBlockByNumber returns a block</span></span><br><span class="line"><span class="comment">// - GetBlockByHash returns a block</span></span><br><span class="line"><span class="comment">// - GetTransactionByID returns a transaction</span></span><br><span class="line"><span class="keyword">type</span> LedgerQuerier <span class="keyword">struct</span> &#123;</span><br><span class="line">aclProvider aclmgmt.ACLProvider</span><br><span class="line">ledgers     LedgerGetter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> qscclogger = flogging.MustGetLogger(<span class="string">&quot;qscc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数名定义为字符串常量，用于invoke的第一个arg参数</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">GetChainInfo       <span class="keyword">string</span> = <span class="string">&quot;GetChainInfo&quot;</span></span><br><span class="line">GetBlockByNumber   <span class="keyword">string</span> = <span class="string">&quot;GetBlockByNumber&quot;</span></span><br><span class="line">GetBlockByHash     <span class="keyword">string</span> = <span class="string">&quot;GetBlockByHash&quot;</span></span><br><span class="line">GetTransactionByID <span class="keyword">string</span> = <span class="string">&quot;GetTransactionByID&quot;</span></span><br><span class="line">GetBlockByTxID     <span class="keyword">string</span> = <span class="string">&quot;GetBlockByTxID&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init is called once per chain when the chain is created.</span></span><br><span class="line"><span class="comment">// This allows the chaincode to initialize any variables on the ledger prior</span></span><br><span class="line"><span class="comment">// to any transaction execution on the chain.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *LedgerQuerier)</span> <span class="title">Init</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">qscclogger.Info(<span class="string">&quot;Init QSCC&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用Invoke时，args[0]为查询函数名，args[1]为chain id，在加到stub包之前为暂时的id</span></span><br><span class="line"><span class="comment">// 每个函数都需要额外的参数，如下:</span></span><br><span class="line"><span class="comment">// # GetChainInfo: 返回一个以字节为单位的BlockchainInfo对象</span></span><br><span class="line"><span class="comment">// # GetBlockByNumber: 返回args[2]中所指定的块</span></span><br><span class="line"><span class="comment">// # GetBlockByHash: 返回args[2]中的块哈希值所指定的块</span></span><br><span class="line"><span class="comment">// # GetTransactionByID: 返回args[2]中的id所指定的交易事务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *LedgerQuerier)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123; <span class="comment">// 通过args调用内部函数</span></span><br><span class="line">args := stub.GetArgs() <span class="comment">// stub是RPC中客户端与服务器端传输的消息包，将其解包并获取args</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// args数量小于2时，返回错误信息</span></span><br><span class="line">    <span class="comment">// 第一个args为调用的函数名，第二个args为chain ID</span></span><br><span class="line">fname := <span class="keyword">string</span>(args[<span class="number">0</span>])</span><br><span class="line">cid := <span class="keyword">string</span>(args[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">sp, err := stub.GetSignedProposal() <span class="comment">// 获取签名交易提议的解码对象，类型为SignedProposal</span></span><br><span class="line"></span><br><span class="line">name, err := protoutil.InvokedChaincodeName(sp.ProposalBytes)</span><br><span class="line"></span><br><span class="line">targetLedger := e.ledgers.GetLedger(cid)</span><br><span class="line"></span><br><span class="line">qscclogger.Debugf(<span class="string">&quot;Invoke function: %s on chain: %s&quot;</span>, fname, cid)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle ACL: （ACL：访问控制权限）</span></span><br><span class="line">res := getACLResource(fname)</span><br><span class="line"><span class="keyword">if</span> err = e.aclProvider.CheckACL(res, cid, sp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(fmt.Sprintf(<span class="string">&quot;access denied for [%s][%s]: [%s]&quot;</span>, fname, cid, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用相应的函数并传递参数</span></span><br><span class="line"><span class="keyword">switch</span> fname &#123;</span><br><span class="line"><span class="keyword">case</span> GetTransactionByID:</span><br><span class="line"><span class="keyword">return</span> getTransactionByID(targetLedger, args[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">case</span> GetBlockByNumber:</span><br><span class="line"><span class="keyword">return</span> getBlockByNumber(targetLedger, args[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">case</span> GetBlockByHash:</span><br><span class="line"><span class="keyword">return</span> getBlockByHash(targetLedger, args[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">case</span> GetChainInfo:</span><br><span class="line"><span class="keyword">return</span> getChainInfo(targetLedger)</span><br><span class="line"><span class="keyword">case</span> GetBlockByTxID:</span><br><span class="line"><span class="keyword">return</span> getBlockByTxID(targetLedger, args[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Error(fmt.Sprintf(<span class="string">&quot;Requested function %s not found.&quot;</span>, fname))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下为五个private方法，只能通过invoke进行调用。</span></span><br><span class="line"><span class="comment">// 五个方法在进行异常处理后，调用账本中对应的方法，并将成功或错误结果通过shim发送</span></span><br><span class="line"><span class="comment">// - getTransactionByID: 返回对应id的交易内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTransactionByID</span><span class="params">(vledger ledger.PeerLedger, tid []<span class="keyword">byte</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="comment">// 异常：交易为空</span></span><br><span class="line">processedTran, err := vledger.GetTransactionByID(<span class="keyword">string</span>(tid)) <span class="comment">// 调用ledger.PeerLedger中的方法</span></span><br><span class="line">bytes, err := protoutil.Marshal(processedTran) <span class="comment">// 使用proto工具进行编排 my_<span class="doctag">TODO:</span> read protoutil</span></span><br><span class="line"><span class="keyword">return</span> shim.Success(bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下四个方法的整体结果与第一个相似</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBlockByNumber</span><span class="params">(vledger ledger.PeerLedger, number []<span class="keyword">byte</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">bnum, err := strconv.ParseUint(<span class="keyword">string</span>(number), <span class="number">10</span>, <span class="number">64</span>) <span class="comment">// 转换成uint型</span></span><br><span class="line">block, err := vledger.GetBlockByNumber(bnum) <span class="comment">// 调用账本中的方法</span></span><br><span class="line">bytes, err := protoutil.Marshal(block) </span><br><span class="line"><span class="keyword">return</span> shim.Success(bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBlockByHash</span><span class="params">(vledger ledger.PeerLedger, hash []<span class="keyword">byte</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">block, err := vledger.GetBlockByHash(hash)</span><br><span class="line">bytes, err := protoutil.Marshal(block)</span><br><span class="line"><span class="keyword">return</span> shim.Success(bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getChainInfo</span><span class="params">(vledger ledger.PeerLedger)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">binfo, err := vledger.GetBlockchainInfo()</span><br><span class="line">bytes, err := protoutil.Marshal(binfo)</span><br><span class="line"><span class="keyword">return</span> shim.Success(bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBlockByTxID</span><span class="params">(vledger ledger.PeerLedger, rawTxID []<span class="keyword">byte</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">txID := <span class="keyword">string</span>(rawTxID)</span><br><span class="line">block, err := vledger.GetBlockByTxID(txID)</span><br><span class="line">bytes, err := protoutil.Marshal(block)</span><br><span class="line"><span class="keyword">return</span> shim.Success(bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getACLResource</span><span class="params">(fname <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;qscc/&quot;</span> + fname</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Get方法"><a href="#Get方法" class="headerlink" title="Get方法"></a>Get方法</h3><p>QSCC提供的方法都是get方法，用于从通道中获取各种数据。</p><h1 id="配置系统链码-Configuration-System-Chaincode-CSCC"><a href="#配置系统链码-Configuration-System-Chaincode-CSCC" class="headerlink" title="配置系统链码 (Configuration System Chaincode, CSCC)"></a>配置系统链码 (<em>Configuration System Chaincode</em>, CSCC)</h1><blockquote><p>/core/scc/cscc/configure.go</p></blockquote><p>CSCC管理peer节点上通道相关的信息并执行通道配置交易</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PeerConfiger <span class="keyword">struct</span> &#123;</span><br><span class="line">policyChecker          policy.PolicyChecker</span><br><span class="line">configMgr              config.Manager</span><br><span class="line">aclProvider            aclmgmt.ACLProvider</span><br><span class="line">deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider</span><br><span class="line">legacyLifecycle        plugindispatcher.LifecycleResources</span><br><span class="line">newLifecycle           plugindispatcher.CollectionAndLifecycleResources</span><br><span class="line">peer                   *peer.Peer</span><br><span class="line">bccsp                  bccsp.BCCSP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSCC中提供了PeerConfiger类。这个类实现了peer节点配置信息的处理。对于所有的从排序服务中进来的配置交易，都会调用这个系统链码来处理交易。</p><p>CSCC提供了三种方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">JoinChain      <span class="keyword">string</span> = <span class="string">&quot;JoinChain&quot;</span></span><br><span class="line">GetConfigBlock <span class="keyword">string</span> = <span class="string">&quot;GetConfigBlock&quot;</span></span><br><span class="line">GetChannels    <span class="keyword">string</span> = <span class="string">&quot;GetChannels&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="JoinChain方法"><a href="#JoinChain方法" class="headerlink" title="JoinChain方法"></a>JoinChain方法</h2><p>JoinChain 方法用来使一个peer加入通道。它需要一个参数，即通道配置区块的序列化的protobuf byte。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">block, err := protoutil.UnmarshalBlock(args[<span class="number">1</span>])</span><br><span class="line">cid, err := protoutil.GetChainIDFromBlock(block)</span><br><span class="line"><span class="comment">// 1. 检查配置块的格式和要求</span></span><br><span class="line"><span class="comment">// 2. 检查加入的政策</span></span><br><span class="line"><span class="comment">// 初始化txsFilter</span></span><br><span class="line">txsFilter := util.TxValidationFlags(block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER])</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(txsFilter) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// add array of validation code hardcoded to valid</span></span><br><span class="line">txsFilter = util.NewTxValidationFlagsSetValue(<span class="built_in">len</span>(block.Data.Data), pb.TxValidationCode_VALID)</span><br><span class="line">block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER] = txsFilter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e.joinChain(cid, block, e.deployedCCInfoProvider, e.legacyLifecycle, e.newLifecycle)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GetConfigBlock方法"><a href="#GetConfigBlock方法" class="headerlink" title="GetConfigBlock方法"></a>GetConfigBlock方法</h2><p>这个方法用于获取给定通道的当前的配置区块。需要一个参数：通道名字的bytes形式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> GetConfigBlock:</span><br><span class="line"><span class="comment">// 2. check policy</span></span><br><span class="line"><span class="keyword">if</span> err = e.aclProvider.CheckACL(resources.Cscc_GetConfigBlock, <span class="keyword">string</span>(args[<span class="number">1</span>]), sp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(fmt.Sprintf(<span class="string">&quot;access denied for [%s][%s]: %s&quot;</span>, fname, args[<span class="number">1</span>], err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e.getConfigBlock(args[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="GetChannel方法"><a href="#GetChannel方法" class="headerlink" title="GetChannel方法"></a>GetChannel方法</h2><p>这个方法用于获取peer节点目前所加入的通道。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> GetChannels:</span><br><span class="line"><span class="comment">// 2. check get channels policy</span></span><br><span class="line"><span class="keyword">if</span> err = e.aclProvider.CheckACL(resources.Cscc_GetChannels, <span class="string">&quot;&quot;</span>, sp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(fmt.Sprintf(<span class="string">&quot;access denied for [%s]: %s&quot;</span>, fname, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e.getChannels()</span><br></pre></td></tr></table></figure><h1 id="生命周期系统链码-Life-Cycle-System-Chaincode-LSCC"><a href="#生命周期系统链码-Life-Cycle-System-Chaincode-LSCC" class="headerlink" title="生命周期系统链码 (Life Cycle System Chaincode, LSCC)"></a>生命周期系统链码 (<em>Life Cycle System Chaincode</em>, LSCC)</h1><p>LSCC主要管理链码的生命周期，主要包括：</p><ul><li>在peer节点上安装链码</li><li>在通道上部署和升级链码</li><li>用户从运行中的链码获取信息</li></ul><h2 id="链码的生命周期"><a href="#链码的生命周期" class="headerlink" title="链码的生命周期"></a>链码的生命周期</h2><h3 id="打包链码"><a href="#打包链码" class="headerlink" title="打包链码"></a>打包链码</h3><p>在被安装到peer节点之前，链码需要被打包进一个<code>.tar.gz</code>文件，其中包含两个文件：”metadata.json”和另一个包含链码文件的文件”code.tar.gz”</p><p>“metadata.json”包含了指定链码语言、代码路径、以及包标签的JSON文件。</p><h3 id="安装链码"><a href="#安装链码" class="headerlink" title="安装链码"></a>安装链码</h3><p>每个要执行和背书交易的peer节点上都需要安装链码包。安装完成后，peer节点会构造链码。一般建议每个组织下的所有peer使用相同的链码包。</p><h3 id="批准链码定义"><a href="#批准链码定义" class="headerlink" title="批准链码定义"></a>批准链码定义</h3><p>通过 <strong>链码定义</strong> 来管理链码。当通道成员批准一个链码定义，这个批准便作为一个组织在接受链码参数方面的投票。这些同意的组织定义允许通道成员在链码可以在通道上使用之前达成一致意见（同意链码运行在此通道上）。</p><p>链码定义包含以下参数（需要在组织之间保持一致）：<strong>名称</strong>、<strong>版本</strong>、<strong>序列号</strong>、<strong>背书策略</strong>、<strong>私有数据集合配置</strong>、<strong>ECSS/VSCC插件</strong>、<strong>初始化</strong></p><h3 id="提交链码定义到通道"><a href="#提交链码定义到通道" class="headerlink" title="提交链码定义到通道"></a>提交链码定义到通道</h3><p>足够多的成员同意一个链码定义后，某个组织能够提交定义到通道。提交交易首先发送给通道成员的peer节点，peer节点会查询链码定义的被同意状况，确认组织同意后为其背书，交易随后被提交到排序服务，排序服务会把链码定义提交给通道。</p><h2 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h2><p>部署时的config</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">lsccInst := &amp;lscc.SCC&#123;</span><br><span class="line">BuiltinSCCs: builtinSCCs,</span><br><span class="line">    <span class="comment">// type: FilesystemSupport</span></span><br><span class="line">    <span class="comment">// Support提供了一些静态函数的实现</span></span><br><span class="line">Support: &amp;lscc.SupportImpl&#123;</span><br><span class="line">GetMSPIDs: peerInstance.GetMSPIDs,</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// type: sysccprovider.SystemChaincodeProvider</span></span><br><span class="line">    <span class="comment">// SCCProvider是用于访问系统其他部分的接口</span></span><br><span class="line">SCCProvider:        &amp;lscc.PeerShim&#123;Peer: peerInstance&#125;,</span><br><span class="line">    <span class="comment">// type: aclmgmt.ACLProvider</span></span><br><span class="line">    <span class="comment">// ACLProvider负责访问权限控制</span></span><br><span class="line">ACLProvider:        aclProvider, </span><br><span class="line">GetMSPIDs:          peerInstance.GetMSPIDs,</span><br><span class="line">    <span class="comment">// type: policy.PolicyChecker</span></span><br><span class="line">    <span class="comment">// PolicyChecker是用于执行访问控制的接口</span></span><br><span class="line">PolicyChecker:      policyChecker,</span><br><span class="line">BCCSP:              factory.GetDefault(),</span><br><span class="line">BuildRegistry:      buildRegistry,</span><br><span class="line">ChaincodeBuilder:   containerRouter,</span><br><span class="line">EbMetadataProvider: ebMetadataProvider,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>/core/scc/lscc/lscc.go</p></blockquote><p><code>Invoke</code>代码的形式与QSCC部分类似，都是使用switch语句选择所调用的方法（将函数名定义为常量）</p><p>由于代码过长，以下代码省略异常处理部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lscc *SCC)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">args := stub.GetArgs()</span><br><span class="line"></span><br><span class="line">function := <span class="keyword">string</span>(args[<span class="number">0</span>]) <span class="comment">// 第一个参数是函数名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> function &#123;</span><br><span class="line"><span class="keyword">case</span> INSTALL:</span><br><span class="line">depSpec := args[<span class="number">1</span>]</span><br><span class="line">err := lscc.executeInstall(stub, depSpec) <span class="comment">// 根据第二个参数 deployment spec 安装链码</span></span><br><span class="line"><span class="keyword">return</span> shim.Success([]<span class="keyword">byte</span>(<span class="string">&quot;OK&quot;</span>))</span><br><span class="line"><span class="keyword">case</span> DEPLOY, UPGRADE:</span><br><span class="line"><span class="comment">// 至少有三个参数： 函数名，链码名和deployment spec</span></span><br><span class="line"></span><br><span class="line">channel := <span class="keyword">string</span>(args[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">ac, exists := lscc.SCCProvider.GetApplicationConfig(channel) <span class="comment">// 通过第二个参数获取配置</span></span><br><span class="line"></span><br><span class="line">depSpec := args[<span class="number">2</span>]</span><br><span class="line">cds := &amp;pb.ChaincodeDeploymentSpec&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数：</span></span><br><span class="line"><span class="comment">// 第四个参数是 已编组的 SignaturePolicyEnvelope 代表了背书政策</span></span><br><span class="line"><span class="comment">// 第五个参数是 escc名</span></span><br><span class="line"><span class="comment">// 第六个参数是 vscc名</span></span><br><span class="line"><span class="comment">// 第七个参数是 一个已编组的 CollectionConfigPackage 类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四个参数：</span></span><br><span class="line"><span class="keyword">var</span> EP []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">3</span> &amp;&amp; <span class="built_in">len</span>(args[<span class="number">3</span>]) &gt; <span class="number">0</span> &#123;</span><br><span class="line">EP = args[<span class="number">3</span>] <span class="comment">// EP为一个背书政策</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mspIDs := lscc.GetMSPIDs(channel)</span><br><span class="line">p := policydsl.SignedByAnyMember(mspIDs) <span class="comment">// 根据通道的mspID获取背书政策？</span></span><br><span class="line">EP, err = protoutil.Marshal(p) <span class="comment">// 将结果进行编组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第五个参数：</span></span><br><span class="line"><span class="keyword">var</span> escc []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">4</span> &amp;&amp; <span class="built_in">len</span>(args[<span class="number">4</span>]) &gt; <span class="number">0</span> &#123;</span><br><span class="line">escc = args[<span class="number">4</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">escc = []<span class="keyword">byte</span>(<span class="string">&quot;escc&quot;</span>) <span class="comment">// 默认为escc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第六个参数：</span></span><br><span class="line"><span class="keyword">var</span> vscc []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">5</span> &amp;&amp; <span class="built_in">len</span>(args[<span class="number">5</span>]) &gt; <span class="number">0</span> &#123;</span><br><span class="line">vscc = args[<span class="number">5</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">vscc = []<span class="keyword">byte</span>(<span class="string">&quot;vscc&quot;</span>) <span class="comment">// 默认为vscc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有第七个参数：</span></span><br><span class="line"><span class="keyword">var</span> collectionsConfig []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> ac.Capabilities().PrivateChannelData() &amp;&amp; <span class="built_in">len</span>(args) &gt; <span class="number">6</span> &#123;</span><br><span class="line">collectionsConfig = args[<span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有的参数传入executeDeployOrUpgrade方法中执行</span></span><br><span class="line">cd, err := lscc.executeDeployOrUpgrade(stub, channel, cds, EP, escc, vscc, collectionsConfig, function)</span><br><span class="line"><span class="keyword">return</span> shim.Success(cdbytes)</span><br><span class="line"><span class="keyword">case</span> CCEXISTS, CHAINCODEEXISTS, GETDEPSPEC, GETDEPLOYMENTSPEC, GETCCDATA, GETCHAINCODEDATA:</span><br><span class="line"><span class="comment">// 变量个数必须为3</span></span><br><span class="line">channel := <span class="keyword">string</span>(args[<span class="number">1</span>])</span><br><span class="line">ccname := <span class="keyword">string</span>(args[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">cdbytes, err := lscc.getCCInstance(stub, ccname) <span class="comment">// 获取实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> function &#123;</span><br><span class="line"><span class="keyword">case</span> CCEXISTS, CHAINCODEEXISTS:</span><br><span class="line">cd, err := lscc.getChaincodeData(ccname, cdbytes) <span class="comment">// 获取链码数据</span></span><br><span class="line"><span class="keyword">case</span> GETCCDATA, GETCHAINCODEDATA:</span><br><span class="line"><span class="keyword">return</span> shim.Success(cdbytes)</span><br><span class="line"><span class="keyword">case</span> GETDEPSPEC, GETDEPLOYMENTSPEC:</span><br><span class="line">_, depspecbytes, err := lscc.getCCCode(ccname, cdbytes)</span><br><span class="line"><span class="keyword">return</span> shim.Success(depspecbytes)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;unreachable&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> GETCHAINCODES, GETCHAINCODESALIAS:</span><br><span class="line"><span class="comment">// 变量个数必须为1</span></span><br><span class="line"><span class="keyword">return</span> lscc.getChaincodes(stub) <span class="comment">// 调用对应方法</span></span><br><span class="line"><span class="keyword">case</span> GETINSTALLEDCHAINCODES, GETINSTALLEDCHAINCODESALIAS:</span><br><span class="line"><span class="comment">// 变量个数必须为1</span></span><br><span class="line"><span class="keyword">return</span> lscc.getInstalledChaincodes() <span class="comment">// 调用对应方法</span></span><br><span class="line"><span class="keyword">case</span> GETCOLLECTIONSCONFIG, GETCOLLECTIONSCONFIGALIAS:</span><br><span class="line"><span class="comment">// 变量个数必须为2</span></span><br><span class="line">chaincodeName := <span class="keyword">string</span>(args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> lscc.getChaincodeCollectionData(stub, chaincodeName) <span class="comment">// 调用对应方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Error(InvalidFunctionErr(function).Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Install方法"><a href="#Install方法" class="headerlink" title="Install方法"></a>Install方法</h3><p>用于存储chaincode程序到peer的文件系统，需要一个参数，及chancode deployment spec的序列化protobuf bytes。</p><h3 id="Deploy方法"><a href="#Deploy方法" class="headerlink" title="Deploy方法"></a>Deploy方法</h3><p>用于在给定的通道上实例化合约，可以接受五个参数，前两个参数是必须的：通道名称与chaincode deployment spec。另外三个参数为：倍数策略、背书系统合约的名字和验证系统合约的名字。</p><h3 id="Upgrade方法"><a href="#Upgrade方法" class="headerlink" title="Upgrade方法"></a>Upgrade方法</h3><p>用于升级合约</p><h3 id="Get方法-1"><a href="#Get方法-1" class="headerlink" title="Get方法"></a>Get方法</h3><p>剩下的get方法都用于获取相应的合约数据</p><h1 id="背书系统链码-Endorser-System-Chaincode-ESCC"><a href="#背书系统链码-Endorser-System-Chaincode-ESCC" class="headerlink" title="背书系统链码 (Endorser System Chaincode, ESCC)"></a>背书系统链码 (<em>Endorser System Chaincode</em>, ESCC)</h1><p>在背书节点上运行，对交易结束进行结构转换和签名背书。</p><blockquote><p>/core/endorser/endorser.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> endorser</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/shim&quot;</span></span><br><span class="line">pb <span class="string">&quot;github.com/hyperledger/fabric-protos-go/peer&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-protos-go/transientstore&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/common/flogging&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/common/util&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/chaincode/lifecycle&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/common/ccprovider&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/ledger&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/internal/pkg/identity&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/msp&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/protoutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pkg/errors&quot;</span></span><br><span class="line"><span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> endorserLogger = flogging.MustGetLogger(<span class="string">&quot;endorser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Jira issue that documents Endorser flow along with its relationship to</span></span><br><span class="line"><span class="comment">// the lifecycle chaincode - https://jira.hyperledger.org/browse/FAB-181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate counterfeiter -o fake/prvt_data_distributor.go --fake-name PrivateDataDistributor . PrivateDataDistributor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PrivateDataDistributor <span class="keyword">interface</span> &#123;</span><br><span class="line">DistributePrivateData(channel <span class="keyword">string</span>, txID <span class="keyword">string</span>, privateData *transientstore.TxPvtReadWriteSetWithConfigInfo, blkHt <span class="keyword">uint64</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Support contains functions that the endorser requires to execute its tasks</span></span><br><span class="line"><span class="keyword">type</span> Support <span class="keyword">interface</span> &#123;</span><br><span class="line">identity.SignerSerializer</span><br><span class="line"><span class="comment">// GetTxSimulator returns the transaction simulator for the specified ledger</span></span><br><span class="line"><span class="comment">// a client may obtain more than one such simulator; they are made unique</span></span><br><span class="line"><span class="comment">// by way of the supplied txid</span></span><br><span class="line">GetTxSimulator(ledgername <span class="keyword">string</span>, txid <span class="keyword">string</span>) (ledger.TxSimulator, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetHistoryQueryExecutor gives handle to a history query executor for the</span></span><br><span class="line"><span class="comment">// specified ledger</span></span><br><span class="line">GetHistoryQueryExecutor(ledgername <span class="keyword">string</span>) (ledger.HistoryQueryExecutor, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetTransactionByID retrieves a transaction by id</span></span><br><span class="line">GetTransactionByID(chid, txID <span class="keyword">string</span>) (*pb.ProcessedTransaction, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsSysCC returns true if the name matches a system chaincode&#x27;s</span></span><br><span class="line"><span class="comment">// system chaincode names are system, chain wide</span></span><br><span class="line">IsSysCC(name <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute - execute proposal, return original response of chaincode</span></span><br><span class="line">Execute(txParams *ccprovider.TransactionParams, name <span class="keyword">string</span>, input *pb.ChaincodeInput) (*pb.Response, *pb.ChaincodeEvent, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExecuteLegacyInit - executes a deployment proposal, return original response of chaincode</span></span><br><span class="line">ExecuteLegacyInit(txParams *ccprovider.TransactionParams, name, version <span class="keyword">string</span>, spec *pb.ChaincodeInput) (*pb.Response, *pb.ChaincodeEvent, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeEndorsementInfo returns the information from lifecycle required to endorse the chaincode.</span></span><br><span class="line">ChaincodeEndorsementInfo(channelID, chaincodeID <span class="keyword">string</span>, txsim ledger.QueryExecutor) (*lifecycle.ChaincodeEndorsementInfo, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckACL checks the ACL for the resource for the channel using the</span></span><br><span class="line"><span class="comment">// SignedProposal from which an id can be extracted for testing against a policy</span></span><br><span class="line">CheckACL(channelID <span class="keyword">string</span>, signedProp *pb.SignedProposal) error</span><br><span class="line"></span><br><span class="line"><span class="comment">// EndorseWithPlugin endorses the response with a plugin</span></span><br><span class="line">EndorseWithPlugin(pluginName, channnelID <span class="keyword">string</span>, prpBytes []<span class="keyword">byte</span>, signedProposal *pb.SignedProposal) (*pb.Endorsement, []<span class="keyword">byte</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetLedgerHeight returns ledger height for given channelID</span></span><br><span class="line">GetLedgerHeight(channelID <span class="keyword">string</span>) (<span class="keyword">uint64</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetDeployedCCInfoProvider returns ledger.DeployedChaincodeInfoProvider</span></span><br><span class="line">GetDeployedCCInfoProvider() ledger.DeployedChaincodeInfoProvider</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate counterfeiter -o fake/channel_fetcher.go --fake-name ChannelFetcher . ChannelFetcher</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ChannelFetcher fetches the channel context for a given channel ID.</span></span><br><span class="line"><span class="keyword">type</span> ChannelFetcher <span class="keyword">interface</span> &#123;</span><br><span class="line">Channel(channelID <span class="keyword">string</span>) *Channel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Channel <span class="keyword">struct</span> &#123;</span><br><span class="line">IdentityDeserializer msp.IdentityDeserializer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Endorser provides the Endorser service ProcessProposal</span></span><br><span class="line"><span class="keyword">type</span> Endorser <span class="keyword">struct</span> &#123;</span><br><span class="line">ChannelFetcher         ChannelFetcher</span><br><span class="line">LocalMSP               msp.IdentityDeserializer</span><br><span class="line">PrivateDataDistributor PrivateDataDistributor</span><br><span class="line">Support                Support</span><br><span class="line">PvtRWSetAssembler      PvtRWSetAssembler</span><br><span class="line">Metrics                *Metrics</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call specified chaincode (system or user)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endorser)</span> <span class="title">callChaincode</span><span class="params">(txParams *ccprovider.TransactionParams, input *pb.ChaincodeInput, chaincodeName <span class="keyword">string</span>)</span> <span class="params">(*pb.Response, *pb.ChaincodeEvent, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(start time.Time)</span></span> &#123;</span><br><span class="line">logger := endorserLogger.WithOptions(zap.AddCallerSkip(<span class="number">1</span>))</span><br><span class="line">logger = decorateLogger(logger, txParams)</span><br><span class="line">elapsedMillisec := time.Since(start).Milliseconds()</span><br><span class="line">logger.Infof(<span class="string">&quot;finished chaincode: %s duration: %dms&quot;</span>, chaincodeName, elapsedMillisec)</span><br><span class="line">&#125;(time.Now())</span><br><span class="line"></span><br><span class="line">meterLabels := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;channel&quot;</span>, txParams.ChannelID,</span><br><span class="line"><span class="string">&quot;chaincode&quot;</span>, chaincodeName,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, ccevent, err := e.Support.Execute(txParams, chaincodeName, input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// per doc anything &lt; 400 can be sent as TX.</span></span><br><span class="line"><span class="comment">// fabric errors will always be &gt;= 400 (ie, unambiguous errors )</span></span><br><span class="line"><span class="comment">// &quot;lscc&quot; will respond with status 200 or 500 (ie, unambiguous OK or ERROR)</span></span><br><span class="line"><span class="keyword">if</span> res.Status &gt;= shim.ERRORTHRESHOLD &#123;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unless this is the weirdo LSCC case, just return</span></span><br><span class="line"><span class="keyword">if</span> chaincodeName != <span class="string">&quot;lscc&quot;</span> || <span class="built_in">len</span>(input.Args) &lt; <span class="number">3</span> || (<span class="keyword">string</span>(input.Args[<span class="number">0</span>]) != <span class="string">&quot;deploy&quot;</span> &amp;&amp; <span class="keyword">string</span>(input.Args[<span class="number">0</span>]) != <span class="string">&quot;upgrade&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> res, ccevent, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----- BEGIN -  SECTION THAT MAY NEED TO BE DONE IN LSCC ------</span></span><br><span class="line"><span class="comment">// if this a call to deploy a chaincode, We need a mechanism</span></span><br><span class="line"><span class="comment">// to pass TxSimulator into LSCC. Till that is worked out this</span></span><br><span class="line"><span class="comment">// special code does the actual deploy, upgrade here so as to collect</span></span><br><span class="line"><span class="comment">// all state under one TxSimulator</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// NOTE that if there&#x27;s an error all simulation, including the chaincode</span></span><br><span class="line"><span class="comment">// table changes in lscc will be thrown away</span></span><br><span class="line">cds, err := protoutil.UnmarshalChaincodeDeploymentSpec(input.Args[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this should not be a system chaincode</span></span><br><span class="line"><span class="keyword">if</span> e.Support.IsSysCC(cds.ChaincodeSpec.ChaincodeId.Name) &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.Errorf(<span class="string">&quot;attempting to deploy a system chaincode %s/%s&quot;</span>, cds.ChaincodeSpec.ChaincodeId.Name, txParams.ChannelID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(cds.CodePackage) != <span class="number">0</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.Errorf(<span class="string">&quot;lscc upgrade/deploy should not include a code packages&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, _, err = e.Support.ExecuteLegacyInit(txParams, cds.ChaincodeSpec.ChaincodeId.Name, cds.ChaincodeSpec.ChaincodeId.Version, cds.ChaincodeSpec.Input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// increment the failure to indicate instantion/upgrade failures</span></span><br><span class="line">meterLabels = []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;channel&quot;</span>, txParams.ChannelID,</span><br><span class="line"><span class="string">&quot;chaincode&quot;</span>, cds.ChaincodeSpec.ChaincodeId.Name,</span><br><span class="line">&#125;</span><br><span class="line">e.Metrics.InitFailed.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, ccevent, err</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimulateProposal simulates the proposal by calling the chaincode</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endorser)</span> <span class="title">SimulateProposal</span><span class="params">(txParams *ccprovider.TransactionParams, chaincodeName <span class="keyword">string</span>, chaincodeInput *pb.ChaincodeInput)</span> <span class="params">(*pb.Response, []<span class="keyword">byte</span>, *pb.ChaincodeEvent, error)</span></span> &#123;</span><br><span class="line">logger := decorateLogger(endorserLogger, txParams)</span><br><span class="line"></span><br><span class="line">meterLabels := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;channel&quot;</span>, txParams.ChannelID,</span><br><span class="line"><span class="string">&quot;chaincode&quot;</span>, chaincodeName,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---3. execute the proposal and get simulation results</span></span><br><span class="line">res, ccevent, err := e.callChaincode(txParams, chaincodeInput, chaincodeName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">&quot;failed to invoke chaincode %s, error: %+v&quot;</span>, chaincodeName, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> txParams.TXSimulator == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span>, ccevent, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note, this is a little goofy, as if there is private data, Done() gets called</span></span><br><span class="line"><span class="comment">// early, so this is invoked multiple times, but that is how the code worked before</span></span><br><span class="line"><span class="comment">// this change, so, should be safe.  Long term, let&#x27;s move the Done up to the create.</span></span><br><span class="line"><span class="keyword">defer</span> txParams.TXSimulator.Done()</span><br><span class="line"></span><br><span class="line">simResult, err := txParams.TXSimulator.GetTxSimulationResults()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simResult.PvtSimulationResults != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> chaincodeName == <span class="string">&quot;lscc&quot;</span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> remove once we can store collection configuration outside of LSCC</span></span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, errors.New(<span class="string">&quot;Private data is forbidden to be used in instantiate&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">pvtDataWithConfig, err := AssemblePvtRWSet(txParams.ChannelID, simResult.PvtSimulationResults, txParams.TXSimulator, e.Support.GetDeployedCCInfoProvider())</span><br><span class="line"><span class="comment">// To read collection config need to read collection updates before</span></span><br><span class="line"><span class="comment">// releasing the lock, hence txParams.TXSimulator.Done()  moved down here</span></span><br><span class="line">txParams.TXSimulator.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">&quot;failed to obtain collections config&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">endorsedAt, err := e.Support.GetLedgerHeight(txParams.ChannelID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, errors.WithMessage(err, fmt.Sprintf(<span class="string">&quot;failed to obtain ledger height for channel &#x27;%s&#x27;&quot;</span>, txParams.ChannelID))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Add ledger height at which transaction was endorsed,</span></span><br><span class="line"><span class="comment">// `endorsedAt` is obtained from the block storage and at times this could be &#x27;endorsement Height + 1&#x27;.</span></span><br><span class="line"><span class="comment">// However, since we use this height only to select the configuration (3rd parameter in distributePrivateData) and</span></span><br><span class="line"><span class="comment">// manage transient store purge for orphaned private writesets (4th parameter in distributePrivateData), this works for now.</span></span><br><span class="line"><span class="comment">// Ideally, ledger should add support in the simulator as a first class function `GetHeight()`.</span></span><br><span class="line">pvtDataWithConfig.EndorsedAt = endorsedAt</span><br><span class="line"><span class="keyword">if</span> err := e.PrivateDataDistributor.DistributePrivateData(txParams.ChannelID, txParams.TxID, pvtDataWithConfig, endorsedAt); err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pubSimResBytes, err := simResult.GetPubSimulationBytes()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.SimulationFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, pubSimResBytes, ccevent, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preProcess checks the tx proposal headers, uniqueness and ACL</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endorser)</span> <span class="title">preProcess</span><span class="params">(up *UnpackedProposal, channel *Channel)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// at first, we check whether the message is valid</span></span><br><span class="line"></span><br><span class="line">err := up.Validate(channel.IdentityDeserializer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.ProposalValidationFailed.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> errors.WithMessage(err, <span class="string">&quot;error validating proposal&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> up.ChannelHeader.ChannelId == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// chainless proposals do not/cannot affect ledger and cannot be submitted as transactions</span></span><br><span class="line"><span class="comment">// ignore uniqueness checks; also, chainless proposals are not validated using the policies</span></span><br><span class="line"><span class="comment">// of the chain since by definition there is no chain; they are validated against the local</span></span><br><span class="line"><span class="comment">// MSP of the peer instead by the call to ValidateUnpackProposal above</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// labels that provide context for failure metrics</span></span><br><span class="line">meterLabels := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;channel&quot;</span>, up.ChannelHeader.ChannelId,</span><br><span class="line"><span class="string">&quot;chaincode&quot;</span>, up.ChaincodeName,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here we handle uniqueness check and ACLs for proposals targeting a chain</span></span><br><span class="line"><span class="comment">// Notice that ValidateProposalMessage has already verified that TxID is computed properly</span></span><br><span class="line"><span class="keyword">if</span> _, err = e.Support.GetTransactionByID(up.ChannelHeader.ChannelId, up.ChannelHeader.TxId); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// increment failure due to duplicate transactions. Useful for catching replay attacks in</span></span><br><span class="line"><span class="comment">// addition to benign retries</span></span><br><span class="line">e.Metrics.DuplicateTxsFailure.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(<span class="string">&quot;duplicate transaction found [%s]. Creator [%x]&quot;</span>, up.ChannelHeader.TxId, up.SignatureHeader.Creator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check ACL only for application chaincodes; ACLs</span></span><br><span class="line"><span class="comment">// for system chaincodes are checked elsewhere</span></span><br><span class="line"><span class="keyword">if</span> !e.Support.IsSysCC(up.ChaincodeName) &#123;</span><br><span class="line"><span class="comment">// check that the proposal complies with the Channel&#x27;s writers</span></span><br><span class="line"><span class="keyword">if</span> err = e.Support.CheckACL(up.ChannelHeader.ChannelId, up.SignedProposal); err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.ProposalACLCheckFailed.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProcessProposal process the Proposal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endorser)</span> <span class="title">ProcessProposal</span><span class="params">(ctx context.Context, signedProp *pb.SignedProposal)</span> <span class="params">(*pb.ProposalResponse, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// start time for computing elapsed time metric for successfully endorsed proposals</span></span><br><span class="line">startTime := time.Now()</span><br><span class="line">e.Metrics.ProposalsReceived.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">addr := util.ExtractRemoteAddress(ctx)</span><br><span class="line">endorserLogger.Debug(<span class="string">&quot;request from&quot;</span>, addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// variables to capture proposal duration metric</span></span><br><span class="line">success := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">up, err := UnpackProposal(signedProp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">e.Metrics.ProposalValidationFailed.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> channel *Channel</span><br><span class="line"><span class="keyword">if</span> up.ChannelID() != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">channel = e.ChannelFetcher.Channel(up.ChannelID())</span><br><span class="line"><span class="keyword">if</span> channel == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: fmt.Sprintf(<span class="string">&quot;channel &#x27;%s&#x27; not found&quot;</span>, up.ChannelHeader.ChannelId)&#125;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel = &amp;Channel&#123;</span><br><span class="line">IdentityDeserializer: e.LocalMSP,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 -- check and validate</span></span><br><span class="line">err = e.preProcess(up, channel)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">meterLabels := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;channel&quot;</span>, up.ChannelHeader.ChannelId,</span><br><span class="line"><span class="string">&quot;chaincode&quot;</span>, up.ChaincodeName,</span><br><span class="line"><span class="string">&quot;success&quot;</span>, strconv.FormatBool(success),</span><br><span class="line">&#125;</span><br><span class="line">e.Metrics.ProposalDuration.With(meterLabels...).Observe(time.Since(startTime).Seconds())</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">pResp, err := e.ProcessProposalSuccessfullyOrError(up)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pResp.Endorsement != <span class="literal">nil</span> || up.ChannelHeader.ChannelId == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// We mark the tx as successfull only if it was successfully endorsed, or</span></span><br><span class="line"><span class="comment">// if it was a system chaincode on a channel-less channel and therefore</span></span><br><span class="line"><span class="comment">// cannot be endorsed.</span></span><br><span class="line">success = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// total failed proposals = ProposalsReceived-SuccessfulProposals</span></span><br><span class="line">e.Metrics.SuccessfulProposals.Add(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pResp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endorser)</span> <span class="title">ProcessProposalSuccessfullyOrError</span><span class="params">(up *UnpackedProposal)</span> <span class="params">(*pb.ProposalResponse, error)</span></span> &#123;</span><br><span class="line">txParams := &amp;ccprovider.TransactionParams&#123;</span><br><span class="line">ChannelID:  up.ChannelHeader.ChannelId,</span><br><span class="line">TxID:       up.ChannelHeader.TxId,</span><br><span class="line">SignedProp: up.SignedProposal,</span><br><span class="line">Proposal:   up.Proposal,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger := decorateLogger(endorserLogger, txParams)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> acquireTxSimulator(up.ChannelHeader.ChannelId, up.ChaincodeName) &#123;</span><br><span class="line">txSim, err := e.Support.GetTxSimulator(up.ChannelID(), up.TxID())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// txsim acquires a shared lock on the stateDB. As this would impact the block commits (i.e., commit</span></span><br><span class="line"><span class="comment">// of valid write-sets to the stateDB), we must release the lock as early as possible.</span></span><br><span class="line"><span class="comment">// Hence, this txsim object is closed in simulateProposal() as soon as the tx is simulated and</span></span><br><span class="line"><span class="comment">// rwset is collected before gossip dissemination if required for privateData. For safety, we</span></span><br><span class="line"><span class="comment">// add the following defer statement and is useful when an error occur. Note that calling</span></span><br><span class="line"><span class="comment">// txsim.Done() more than once does not cause any issue. If the txsim is already</span></span><br><span class="line"><span class="comment">// released, the following txsim.Done() simply returns.</span></span><br><span class="line"><span class="keyword">defer</span> txSim.Done()</span><br><span class="line"></span><br><span class="line">hqe, err := e.Support.GetHistoryQueryExecutor(up.ChannelID())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txParams.TXSimulator = txSim</span><br><span class="line">txParams.HistoryQueryExecutor = hqe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cdLedger, err := e.Support.ChaincodeEndorsementInfo(up.ChannelID(), up.ChaincodeName, txParams.TXSimulator)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessagef(err, <span class="string">&quot;make sure the chaincode %s has been successfully defined on channel %s and try again&quot;</span>, up.ChaincodeName, up.ChannelID())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 -- simulate</span></span><br><span class="line">res, simulationResult, ccevent, err := e.SimulateProposal(txParams, up.ChaincodeName, up.Input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">&quot;error in simulation&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cceventBytes, err := CreateCCEventBytes(ccevent)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">&quot;failed to marshal chaincode event&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prpBytes, err := protoutil.GetBytesProposalResponsePayload(up.ProposalHash, res, simulationResult, cceventBytes, &amp;pb.ChaincodeID&#123;</span><br><span class="line">Name:    up.ChaincodeName,</span><br><span class="line">Version: cdLedger.Version,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warning(<span class="string">&quot;Failed marshaling the proposal response payload to bytes&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">&quot;failed to create the proposal response&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if error, capture endorsement failure metric</span></span><br><span class="line">meterLabels := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;channel&quot;</span>, up.ChannelID(),</span><br><span class="line"><span class="string">&quot;chaincode&quot;</span>, up.ChaincodeName,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> res.Status &gt;= shim.ERROR:</span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;</span><br><span class="line">Response: res,</span><br><span class="line">Payload:  prpBytes,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> up.ChannelID() == <span class="string">&quot;&quot;</span>:</span><br><span class="line"><span class="comment">// Chaincode invocations without a channel ID is a broken concept</span></span><br><span class="line"><span class="comment">// that should be removed in the future.  For now, return unendorsed</span></span><br><span class="line"><span class="comment">// success.</span></span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;</span><br><span class="line">Response: res,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> res.Status &gt;= shim.ERRORTHRESHOLD:</span><br><span class="line">meterLabels = <span class="built_in">append</span>(meterLabels, <span class="string">&quot;chaincodeerror&quot;</span>, strconv.FormatBool(<span class="literal">true</span>))</span><br><span class="line">e.Metrics.EndorsementsFailed.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line">logger.Debugf(<span class="string">&quot;chaincode error %d&quot;</span>, res.Status)</span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;</span><br><span class="line">Response: res,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">escc := cdLedger.EndorsementPlugin</span><br><span class="line"></span><br><span class="line">logger.Debugf(<span class="string">&quot;escc for chaincode %s is %s&quot;</span>, up.ChaincodeName, escc)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note, mPrpBytes is the same as prpBytes by default endorsement plugin, but others could change it.</span></span><br><span class="line">endorsement, mPrpBytes, err := e.Support.EndorseWithPlugin(escc, up.ChannelID(), prpBytes, up.SignedProposal)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">meterLabels = <span class="built_in">append</span>(meterLabels, <span class="string">&quot;chaincodeerror&quot;</span>, strconv.FormatBool(<span class="literal">false</span>))</span><br><span class="line">e.Metrics.EndorsementsFailed.With(meterLabels...).Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">&quot;endorsing with plugin failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;</span><br><span class="line">Version:     <span class="number">1</span>,</span><br><span class="line">Endorsement: endorsement,</span><br><span class="line">Payload:     mPrpBytes,</span><br><span class="line">Response:    res,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determine whether or not a transaction simulator should be</span></span><br><span class="line"><span class="comment">// obtained for a proposal.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">acquireTxSimulator</span><span class="params">(chainID <span class="keyword">string</span>, chaincodeName <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> chainID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ¯\_(ツ)_/¯ locking.</span></span><br><span class="line"><span class="comment">// Don&#x27;t get a simulator for the query and config system chaincode.</span></span><br><span class="line"><span class="comment">// These don&#x27;t need the simulator and its read lock results in deadlocks.</span></span><br><span class="line"><span class="keyword">switch</span> chaincodeName &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;qscc&quot;</span>, <span class="string">&quot;cscc&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorttxid replicates the chaincode package function to shorten txids.</span></span><br><span class="line"><span class="comment">// ~~TODO utilize a common shorttxid utility across packages.~~</span></span><br><span class="line"><span class="comment">// TODO use a formal type for transaction ID and make it a stringer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shorttxid</span><span class="params">(txid <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(txid) &lt; <span class="number">8</span> &#123;</span><br><span class="line"><span class="keyword">return</span> txid</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> txid[<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateCCEventBytes</span><span class="params">(ccevent *pb.ChaincodeEvent)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> ccevent == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> proto.Marshal(ccevent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decorateLogger</span><span class="params">(logger *flogging.FabricLogger, txParams *ccprovider.TransactionParams)</span> *<span class="title">flogging</span>.<span class="title">FabricLogger</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> logger.With(<span class="string">&quot;channel&quot;</span>, txParams.ChannelID, <span class="string">&quot;txID&quot;</span>, shorttxid(txParams.TxID))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="验证系统链码-Validator-System-Chaincode-VSCC"><a href="#验证系统链码-Validator-System-Chaincode-VSCC" class="headerlink" title="验证系统链码 (Validator System Chaincode, VSCC)"></a>验证系统链码 (<em>Validator System Chaincode</em>, VSCC)</h1><blockquote><p>/core/committer/txvalidator/v14/vscc_validator.go</p></blockquote><p>被记账节点(validator)调用，根据合约的背书政策验证交易的有效性和背书的正确性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> txvalidator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-protos-go/common&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-protos-go/peer&quot;</span></span><br><span class="line">commonerrors <span class="string">&quot;github.com/hyperledger/fabric/common/errors&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/common/policydsl&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/common/ccprovider&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/common/sysccprovider&quot;</span></span><br><span class="line">validation <span class="string">&quot;github.com/hyperledger/fabric/core/handlers/validation/api&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric/protoutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pkg/errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// VsccValidatorImpl is the implementation used to call</span></span><br><span class="line"><span class="comment">// the vscc chaincode and validate block transactions</span></span><br><span class="line"><span class="keyword">type</span> VsccValidatorImpl <span class="keyword">struct</span> &#123;</span><br><span class="line">channelID       <span class="keyword">string</span></span><br><span class="line">cr              ChannelResources</span><br><span class="line">pluginValidator *PluginValidator</span><br><span class="line">&#125; <span class="comment">// 用于调用vscc链码并验证区块事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// newVSCCValidator creates new vscc validator</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newVSCCValidator</span><span class="params">(channelID <span class="keyword">string</span>, cr ChannelResources, pluginValidator *PluginValidator)</span> *<span class="title">VsccValidatorImpl</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;VsccValidatorImpl&#123;</span><br><span class="line">channelID:       channelID,</span><br><span class="line">cr:              cr,</span><br><span class="line">pluginValidator: pluginValidator,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getChaincodeHeaderExtension</span><span class="params">(hdr *common.Header)</span> <span class="params">(*peer.ChaincodeHeaderExtension, error)</span></span> &#123;</span><br><span class="line">chdr, err := protoutil.UnmarshalChannelHeader(hdr.ChannelHeader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chaincodeHdrExt := &amp;peer.ChaincodeHeaderExtension&#123;&#125;</span><br><span class="line">err = proto.Unmarshal(chdr.Extension, chaincodeHdrExt)</span><br><span class="line"><span class="keyword">return</span> chaincodeHdrExt, errors.Wrap(err, <span class="string">&quot;error unmarshaling ChaincodeHeaderExtension&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VSCCValidateTx executes vscc validation for transaction</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *VsccValidatorImpl)</span> <span class="title">VSCCValidateTx</span><span class="params">(seq <span class="keyword">int</span>, payload *common.Payload, envBytes []<span class="keyword">byte</span>, block *common.Block)</span> <span class="params">(error, peer.TxValidationCode)</span></span> &#123;</span><br><span class="line">chainID := v.channelID</span><br><span class="line">logger.Debugf(<span class="string">&quot;[%s] VSCCValidateTx starts for bytes %p&quot;</span>, chainID, envBytes)</span><br><span class="line"></span><br><span class="line"><span class="comment">// get header extensions so we have the chaincode ID</span></span><br><span class="line">hdrExt, err := getChaincodeHeaderExtension(payload.Header)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_BAD_HEADER_EXTENSION</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get channel header</span></span><br><span class="line">chdr, err := protoutil.UnmarshalChannelHeader(payload.Header.ChannelHeader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_BAD_CHANNEL_HEADER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* obtain the list of namespaces we&#x27;re writing stuff to;</span></span><br><span class="line"><span class="comment">   at first, we establish a few facts about this invocation:</span></span><br><span class="line"><span class="comment">   1) which namespaces does it write to?</span></span><br><span class="line"><span class="comment">   2) does it write to LSCC&#x27;s namespace?</span></span><br><span class="line"><span class="comment">   3) does it write to any cc that cannot be invoked? */</span></span><br><span class="line">writesToLSCC := <span class="literal">false</span></span><br><span class="line">writesToNonInvokableSCC := <span class="literal">false</span></span><br><span class="line">respPayload, err := protoutil.GetActionFromEnvelope(envBytes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.WithMessage(err, <span class="string">&quot;GetActionFromEnvelope failed&quot;</span>), peer.TxValidationCode_BAD_RESPONSE_PAYLOAD</span><br><span class="line">&#125;</span><br><span class="line">txRWSet := &amp;rwsetutil.TxRwSet&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err = txRWSet.FromProtoBytes(respPayload.Results); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.WithMessage(err, <span class="string">&quot;txRWSet.FromProtoBytes failed&quot;</span>), peer.TxValidationCode_BAD_RWSET</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify the header extension and response payload contain the ChaincodeId</span></span><br><span class="line"><span class="keyword">if</span> hdrExt.ChaincodeId == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;nil ChaincodeId in header extension&quot;</span>), peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> respPayload.ChaincodeId == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;nil ChaincodeId in ChaincodeAction&quot;</span>), peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get name and version of the cc we invoked</span></span><br><span class="line">ccID := hdrExt.ChaincodeId.Name</span><br><span class="line">ccVer := respPayload.ChaincodeId.Version</span><br><span class="line"></span><br><span class="line"><span class="comment">// sanity check on ccID</span></span><br><span class="line"><span class="keyword">if</span> ccID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">&quot;invalid chaincode ID&quot;</span>)</span><br><span class="line">logger.Errorf(<span class="string">&quot;%+v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ccID != respPayload.ChaincodeId.Name &#123;</span><br><span class="line">err = errors.Errorf(<span class="string">&quot;inconsistent ccid info (%s/%s)&quot;</span>, ccID, respPayload.ChaincodeId.Name)</span><br><span class="line">logger.Errorf(<span class="string">&quot;%+v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sanity check on ccver</span></span><br><span class="line"><span class="keyword">if</span> ccVer == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">&quot;invalid chaincode version&quot;</span>)</span><br><span class="line">logger.Errorf(<span class="string">&quot;%+v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrNamespace []<span class="keyword">string</span></span><br><span class="line">alwaysEnforceOriginalNamespace := v.cr.Capabilities().V1_2Validation()</span><br><span class="line"><span class="keyword">if</span> alwaysEnforceOriginalNamespace &#123;</span><br><span class="line">wrNamespace = <span class="built_in">append</span>(wrNamespace, ccID)</span><br><span class="line"><span class="keyword">if</span> respPayload.Events != <span class="literal">nil</span> &#123;</span><br><span class="line">ccEvent := &amp;peer.ChaincodeEvent&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err = proto.Unmarshal(respPayload.Events, ccEvent); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrapf(err, <span class="string">&quot;invalid chaincode event&quot;</span>), peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ccEvent.ChaincodeId != ccID &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(<span class="string">&quot;chaincode event chaincode id does not match chaincode action chaincode id&quot;</span>), peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespaces := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> _, ns := <span class="keyword">range</span> txRWSet.NsRwSets &#123;</span><br><span class="line"><span class="comment">// check to make sure there is no duplicate namespace in txRWSet</span></span><br><span class="line"><span class="keyword">if</span> _, ok := namespaces[ns.NameSpace]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(<span class="string">&quot;duplicate namespace &#x27;%s&#x27; in txRWSet&quot;</span>, ns.NameSpace),</span><br><span class="line">peer.TxValidationCode_ILLEGAL_WRITESET</span><br><span class="line">&#125;</span><br><span class="line">namespaces[ns.NameSpace] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !v.txWritesToNamespace(ns) &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check to make sure we did not already populate this chaincode</span></span><br><span class="line"><span class="comment">// name to avoid checking the same namespace twice</span></span><br><span class="line"><span class="keyword">if</span> ns.NameSpace != ccID || !alwaysEnforceOriginalNamespace &#123;</span><br><span class="line">wrNamespace = <span class="built_in">append</span>(wrNamespace, ns.NameSpace)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !writesToLSCC &amp;&amp; ns.NameSpace == <span class="string">&quot;lscc&quot;</span> &#123;</span><br><span class="line">writesToLSCC = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !writesToNonInvokableSCC &amp;&amp; IsSysCCAndNotInvokableCC2CC(ns.NameSpace) &#123;</span><br><span class="line">writesToNonInvokableSCC = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !writesToNonInvokableSCC &amp;&amp; IsSysCCAndNotInvokableExternal(ns.NameSpace) &#123;</span><br><span class="line">writesToNonInvokableSCC = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we&#x27;ve gathered all the info required to proceed to validation;</span></span><br><span class="line"><span class="comment">// validation will behave differently depending on the type of</span></span><br><span class="line"><span class="comment">// chaincode (system vs. application)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !IsSysCC(ccID) &#123;</span><br><span class="line"><span class="comment">// if we&#x27;re here, we know this is an invocation of an application chaincode;</span></span><br><span class="line"><span class="comment">// first of all, we make sure that:</span></span><br><span class="line"><span class="comment">// 1) we don&#x27;t write to LSCC - an application chaincode is free to invoke LSCC</span></span><br><span class="line"><span class="comment">//    for instance to get information about itself or another chaincode; however</span></span><br><span class="line"><span class="comment">//    these legitimate invocations only ready from LSCC&#x27;s namespace; currently</span></span><br><span class="line"><span class="comment">//    only two functions of LSCC write to its namespace: deploy and upgrade and</span></span><br><span class="line"><span class="comment">//    neither should be used by an application chaincode</span></span><br><span class="line"><span class="keyword">if</span> writesToLSCC &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(<span class="string">&quot;chaincode %s attempted to write to the namespace of LSCC&quot;</span>, ccID),</span><br><span class="line">peer.TxValidationCode_ILLEGAL_WRITESET</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2) we don&#x27;t write to the namespace of a chaincode that we cannot invoke - if</span></span><br><span class="line"><span class="comment">//    the chaincode cannot be invoked in the first place, there&#x27;s no legitimate</span></span><br><span class="line"><span class="comment">//    way in which a transaction has a write set that writes to it; additionally</span></span><br><span class="line"><span class="comment">//    we don&#x27;t have any means of verifying whether the transaction had the rights</span></span><br><span class="line"><span class="comment">//    to perform that write operation because in v1, system chaincodes do not have</span></span><br><span class="line"><span class="comment">//    any endorsement policies to speak of. So if the chaincode can&#x27;t be invoked</span></span><br><span class="line"><span class="comment">//    it can&#x27;t be written to by an invocation of an application chaincode</span></span><br><span class="line"><span class="keyword">if</span> writesToNonInvokableSCC &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(<span class="string">&quot;chaincode %s attempted to write to the namespace of a system chaincode that cannot be invoked&quot;</span>, ccID),</span><br><span class="line">peer.TxValidationCode_ILLEGAL_WRITESET</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// validate *EACH* read write set according to its chaincode&#x27;s endorsement policy</span></span><br><span class="line"><span class="keyword">for</span> _, ns := <span class="keyword">range</span> wrNamespace &#123;</span><br><span class="line"><span class="comment">// Get latest chaincode version, vscc and validate policy</span></span><br><span class="line">txcc, vscc, policy, err := v.GetInfoForValidate(chdr, ns)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">&quot;GetInfoForValidate for txId = %s returned error: %+v&quot;</span>, chdr.TxId, err)</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the namespace corresponds to the cc that was originally</span></span><br><span class="line"><span class="comment">// invoked, we check that the version of the cc that was</span></span><br><span class="line"><span class="comment">// invoked corresponds to the version that lscc has returned</span></span><br><span class="line"><span class="keyword">if</span> ns == ccID &amp;&amp; txcc.ChaincodeVersion != ccVer &#123;</span><br><span class="line">err = errors.Errorf(<span class="string">&quot;chaincode %s:%s/%s didn&#x27;t match %s:%s/%s in lscc&quot;</span>, ccID, ccVer, chdr.ChannelId, txcc.ChaincodeName, txcc.ChaincodeVersion, chdr.ChannelId)</span><br><span class="line">logger.Errorf(<span class="string">&quot;%+v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_EXPIRED_CHAINCODE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do VSCC validation</span></span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">Seq:       seq,</span><br><span class="line">Envelope:  envBytes,</span><br><span class="line">Block:     block,</span><br><span class="line">TxID:      chdr.TxId,</span><br><span class="line">Channel:   chdr.ChannelId,</span><br><span class="line">Namespace: ns,</span><br><span class="line">Policy:    policy,</span><br><span class="line">VSCCName:  vscc.ChaincodeName,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = v.VSCCValidateTxForCC(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *commonerrors.VSCCEndorsementPolicyError:</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_ENDORSEMENT_POLICY_FAILURE</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// make sure that we can invoke this system chaincode - if the chaincode</span></span><br><span class="line"><span class="comment">// cannot be invoked through a proposal to this peer, we have to drop the</span></span><br><span class="line"><span class="comment">// transaction; if we didn&#x27;t, we wouldn&#x27;t know how to decide whether it&#x27;s</span></span><br><span class="line"><span class="comment">// valid or not because in v1, system chaincodes have no endorsement policy</span></span><br><span class="line"><span class="keyword">if</span> IsSysCCAndNotInvokableExternal(ccID) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Errorf(<span class="string">&quot;committing an invocation of cc %s is illegal&quot;</span>, ccID),</span><br><span class="line">peer.TxValidationCode_ILLEGAL_WRITESET</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get latest chaincode version, vscc and validate policy</span></span><br><span class="line">_, vscc, policy, err := v.GetInfoForValidate(chdr, ccID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">&quot;GetInfoForValidate for txId = %s returned error: %+v&quot;</span>, chdr.TxId, err)</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// validate the transaction as an invocation of this system chaincode;</span></span><br><span class="line"><span class="comment">// vscc will have to do custom validation for this system chaincode</span></span><br><span class="line"><span class="comment">// currently, VSCC does custom validation for LSCC only; if an hlf</span></span><br><span class="line"><span class="comment">// user creates a new system chaincode which is invokable from the outside</span></span><br><span class="line"><span class="comment">// they have to modify VSCC to provide appropriate validation</span></span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">Seq:       seq,</span><br><span class="line">Envelope:  envBytes,</span><br><span class="line">Block:     block,</span><br><span class="line">TxID:      chdr.TxId,</span><br><span class="line">Channel:   chdr.ChannelId,</span><br><span class="line">Namespace: ccID,</span><br><span class="line">Policy:    policy,</span><br><span class="line">VSCCName:  vscc.ChaincodeName,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = v.VSCCValidateTxForCC(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *commonerrors.VSCCEndorsementPolicyError:</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_ENDORSEMENT_POLICY_FAILURE</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> err, peer.TxValidationCode_INVALID_OTHER_REASON</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">logger.Debugf(<span class="string">&quot;[%s] VSCCValidateTx completes env bytes %p&quot;</span>, chainID, envBytes)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, peer.TxValidationCode_VALID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *VsccValidatorImpl)</span> <span class="title">VSCCValidateTxForCC</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">logger.Debug(<span class="string">&quot;Validating&quot;</span>, ctx, <span class="string">&quot;with plugin&quot;</span>)</span><br><span class="line">err := v.pluginValidator.ValidateWithPlugin(ctx)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the error is a pluggable validation execution error, cast it to the common errors ExecutionFailureError.</span></span><br><span class="line"><span class="keyword">if</span> e, isExecutionError := err.(*validation.ExecutionFailureError); isExecutionError &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;commonerrors.VSCCExecutionFailureError&#123;Err: e&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Else, treat it as an endorsement error.</span></span><br><span class="line"><span class="keyword">return</span> &amp;commonerrors.VSCCEndorsementPolicyError&#123;Err: err&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *VsccValidatorImpl)</span> <span class="title">getCDataForCC</span><span class="params">(chid, ccid <span class="keyword">string</span>)</span> <span class="params">(*ccprovider.ChaincodeData, error)</span></span> &#123;</span><br><span class="line">l := v.cr.Ledger()</span><br><span class="line"><span class="keyword">if</span> l == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;nil ledger instance&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qe, err := l.NewQueryExecutor()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">&quot;could not retrieve QueryExecutor&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> qe.Done()</span><br><span class="line"></span><br><span class="line">bytes, err := qe.GetState(<span class="string">&quot;lscc&quot;</span>, ccid)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, &amp;commonerrors.VSCCInfoLookupFailureError&#123;</span><br><span class="line">Reason: fmt.Sprintf(<span class="string">&quot;Could not retrieve state for chaincode %s, error %s&quot;</span>, ccid, err),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bytes == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Errorf(<span class="string">&quot;lscc&#x27;s state for [%s] not found.&quot;</span>, ccid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cd := &amp;ccprovider.ChaincodeData&#123;&#125;</span><br><span class="line">err = proto.Unmarshal(bytes, cd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">&quot;unmarshalling ChaincodeQueryResponse failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cd.Vscc == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Errorf(<span class="string">&quot;lscc&#x27;s state for [%s] is invalid, vscc field must be set&quot;</span>, ccid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(cd.Policy) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Errorf(<span class="string">&quot;lscc&#x27;s state for [%s] is invalid, policy field must be set&quot;</span>, ccid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cd, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetInfoForValidate gets the ChaincodeInstance(with latest version) of tx, vscc and policy from lscc</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *VsccValidatorImpl)</span> <span class="title">GetInfoForValidate</span><span class="params">(chdr *common.ChannelHeader, ccID <span class="keyword">string</span>)</span> <span class="params">(*sysccprovider.ChaincodeInstance, *sysccprovider.ChaincodeInstance, []<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">cc := &amp;sysccprovider.ChaincodeInstance&#123;</span><br><span class="line">ChannelID:     chdr.ChannelId,</span><br><span class="line">ChaincodeName: ccID,</span><br><span class="line">&#125;</span><br><span class="line">vscc := &amp;sysccprovider.ChaincodeInstance&#123;</span><br><span class="line">ChannelID:     chdr.ChannelId,</span><br><span class="line">ChaincodeName: <span class="string">&quot;vscc&quot;</span>, <span class="comment">// default vscc for system chaincodes</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> policy []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">if</span> !IsSysCC(ccID) &#123;</span><br><span class="line"><span class="comment">// when we are validating a chaincode that is not a</span></span><br><span class="line"><span class="comment">// system CC, we need to ask the CC to give us the name</span></span><br><span class="line"><span class="comment">// of VSCC and of the policy that should be used</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obtain name of the VSCC and the policy</span></span><br><span class="line">cd, err := v.getCDataForCC(chdr.ChannelId, ccID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">msg := fmt.Sprintf(<span class="string">&quot;Unable to get chaincode data from ledger for txid %s, due to %s&quot;</span>, chdr.TxId, err)</span><br><span class="line">logger.Errorf(msg)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">cc.ChaincodeName = cd.Name</span><br><span class="line">cc.ChaincodeVersion = cd.Version</span><br><span class="line">vscc.ChaincodeName, policy = cd.Vscc, cd.Policy</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// when we are validating a system CC, we use the default</span></span><br><span class="line"><span class="comment">// VSCC and a default policy that requires one signature</span></span><br><span class="line"><span class="comment">// from any of the members of the channel</span></span><br><span class="line">p := policydsl.SignedByAnyMember(v.cr.GetMSPIDs())</span><br><span class="line">policy, err = protoutil.Marshal(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cc, vscc, policy, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// txWritesToNamespace returns true if the supplied NsRwSet</span></span><br><span class="line"><span class="comment">// performs a ledger write</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *VsccValidatorImpl)</span> <span class="title">txWritesToNamespace</span><span class="params">(ns *rwsetutil.NsRwSet)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// check for public writes first</span></span><br><span class="line"><span class="keyword">if</span> ns.KvRwSet != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(ns.KvRwSet.Writes) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only look at collection data if we support that capability</span></span><br><span class="line"><span class="keyword">if</span> v.cr.Capabilities().PrivateChannelData() &#123;</span><br><span class="line"><span class="comment">// check for private writes for all collections</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> ns.CollHashedRwSets &#123;</span><br><span class="line"><span class="keyword">if</span> c.HashedRwSet != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(c.HashedRwSet.HashedWrites) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only look at private metadata writes if we support that capability</span></span><br><span class="line"><span class="keyword">if</span> v.cr.Capabilities().KeyLevelEndorsement() &#123;</span><br><span class="line"><span class="comment">// private metadata updates</span></span><br><span class="line"><span class="keyword">if</span> c.HashedRwSet != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(c.HashedRwSet.MetadataWrites) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only look at metadata writes if we support that capability</span></span><br><span class="line"><span class="keyword">if</span> v.cr.Capabilities().KeyLevelEndorsement() &#123;</span><br><span class="line"><span class="comment">// public metadata updates</span></span><br><span class="line"><span class="keyword">if</span> ns.KvRwSet != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(ns.KvRwSet.MetadataWrites) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsSysCCAndNotInvokableExternal</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> name == <span class="string">&quot;vscc&quot;</span> || name == <span class="string">&quot;escc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsSysCC</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> name == <span class="string">&quot;vscc&quot;</span> || name == <span class="string">&quot;escc&quot;</span> || name == <span class="string">&quot;lscc&quot;</span> || name == <span class="string">&quot;qscc&quot;</span> || name == <span class="string">&quot;cscc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsSysCCAndNotInvokableCC2CC</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> name == <span class="string">&quot;vscc&quot;</span> || name == <span class="string">&quot;escc&quot;</span> || name == <span class="string">&quot;cscc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Fabric系统链码部分&lt;/p&gt;</summary>
    
    
    
    
    <category term="fabric" scheme="https://s0uthwood.github.io/tags/fabric/"/>
    
    <category term="go" scheme="https://s0uthwood.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>gRPC 介绍</title>
    <link href="https://s0uthwood.github.io/2020/12/11/gRPC-%E4%BB%8B%E7%BB%8D/"/>
    <id>https://s0uthwood.github.io/2020/12/11/gRPC-%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-12-10T18:12:29.000Z</published>
    <updated>2020-12-11T17:46:50.094Z</updated>
    
    <content type="html"><![CDATA[<p>学习gRPC框架原理</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>A high-performance, open-source universal RPC framework</p></blockquote><p>gRPC框架具有高性能，开源，跨语言的特点，使用了RPC框架，基于HTTP/2设计。</p><blockquote><p>RPC(<em>remote procedure call</em>，远程过程调用)框架提供了一套机制，使得应用程序之间可以进行通信，遵从server/client模型。<br>RPC将一个服务调用封装在一个本地方法中，让调用者像使用本地方法一样调用服务，对其屏蔽实现细节。具体的实现则通过调用方和服务方的协议，基于TCP连接进行数据交互达成。</p><p>在本地调用过程中，通常需要通过接口，调用具体实现，最终获取相应的数据。<br>而在RPC中，本地获取到接口，随后通过网络，调用远程的实现。在使用网络时，需要通过数据序列化来传输数据。</p></blockquote><p>在gRPC中，支持多个语言的应用程序的远程调用，数据交换格式则采用了<em>Protocol Buffer</em>。</p><p><img data-src="gRPC-basic.png" alt="gRPC-basic"></p><p>如上图所示，左侧为c++语言编写的客户端，其中包含了接口的具体实现。右侧为Ruby和Java客户端，其中对接口进行了调用。客户端获取接口后，将数据通过<em>Protocol Buffer</em>的序列化处理后交给服务端，服务端调用具体实现，并把数据同样以序列化的形式返回给客户端。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习gRPC框架原理&lt;/p&gt;</summary>
    
    
    
    
    <category term="fabric" scheme="https://s0uthwood.github.io/tags/fabric/"/>
    
    <category term="rpc" scheme="https://s0uthwood.github.io/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>BabyRSA WriteUp</title>
    <link href="https://s0uthwood.github.io/2020/12/09/BabyRSA-WriteUp/"/>
    <id>https://s0uthwood.github.io/2020/12/09/BabyRSA-WriteUp/</id>
    <published>2020-12-09T15:27:25.000Z</published>
    <updated>2021-03-17T12:18:02.875Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源：N1CTF 2019</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">N = <span class="number">23981306327188221819291352455300124608114670714977979223022816906368788909398653961976023086718129607035805397846230124785550919468973090809881210560931396002918119995710297723411794214888622784232065592366390586879306041418300835178522354945438521139847806375923379136235993890801176301812907708937658277646761892297209069757559519399120988948212988924583632878840216559421398253025960456164998680766732013248599742397199862820924441357624187811402515396393385081892966284318521068948266144251848088067639941653475035145362236917008153460707675427945577597137822575880268720238301307972813226576071488632898694390629</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = number.bytes_to_long(flag)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> m:</span><br><span class="line">        padding = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">1000</span>) ** <span class="number">2</span></span><br><span class="line">        message = padding &lt;&lt; <span class="number">1</span> + m % <span class="number">2</span></span><br><span class="line">        cipher = <span class="built_in">pow</span>(message, e, N)</span><br><span class="line">        f.write(<span class="built_in">hex</span>(cipher)+<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">        m /= <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先阅读代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> m:</span><br><span class="line">    <span class="comment"># several operations</span></span><br><span class="line">    m /= <span class="number">2</span></span><br></pre></td></tr></table></figure><p>由上述代码部分以及过程中出现了<code>m % 2</code>操作可知，flag的二进制数据每一位被存进了<code>key.enc</code>文件的每行数据中，因此对<code>key.enc</code>文件的每一行进行读取，只要能够判断该位为0还是1，即可完成解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">padding = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">1000</span>) ** <span class="number">2</span></span><br><span class="line">message = padding &lt;&lt; <span class="built_in">pow</span>(m, p - <span class="number">1</span>, p) + m % <span class="number">2</span></span><br><span class="line">cipher = <span class="built_in">pow</span>(message, e, N)</span><br></pre></td></tr></table></figure><p>由上述代码可知，$c\equiv m^e\ (\mathrm{mod}\ N), m = r^2\cdot 2^{1+flag\%2}$ （r为random结果），因此<code>m%2=1</code>时，有$c\equiv r^2\cdot 2^2\equiv (2^er^e)^2\ (\mathrm{mod}\ N)$，而<code>m%2=0</code>时，有$c\equiv 2^e\cdot r^{2^e}$。</p><p>首先猜测可以通过破解RSA密码，将加密信息还原为明文信息，判断该数整除2的奇数次方还是偶数次方即可得知该位的二进制数。使用factordb网站失败后贼心不死，又尝试了网上找的多种攻击脚本，发现均无法分解，于是寻找其它方法。</p><p>观察<del>README.md</del>发现，本题可以尝试用二次剩余求解。<code>m%2=1</code>时，有$c\equiv (2^er^e)^2\ (\mathrm{mod}\ N)$，<code>m%2=0</code>时，有$c\equiv (2\cdot r^2)^e\ (\mathrm{mod}\ N)$，因此，当c为N的二次剩余时，对应<code>m%2=1</code>，c为N的二次非剩余时，对应<code>m%2=0</code>。</p><p>可以使用Jacobi判断是否为二次剩余。只需满足$\left(\dfrac{2^e\cdot r^{2^e}}{N}\right)=-1$即可求解。由于$\left(\dfrac{2^e\cdot r^{2^e}}{N}\right)=\left(\dfrac{2}{p}\right)\left(\dfrac{2}{q}\right)$，所以当<code>m%2=0</code>时，Jacobi计算结果仅取决于p和q，且在实际计算中发现存在Jacobi计算结果为-1的情况，又因为<code>m%2=1</code>时Jacobi计算结果必然为1，说明本题中2分别是p和q的二次剩余和二次非剩余，可得下式</p><script type="math/tex; mode=display">\left(\dfrac{c}{N}\right)= \begin{cases}\left(\dfrac{2}{p}\right)\left(\dfrac{2}{q}\right)=-1,m\%2=0\\1, m\%2=1\end{cases}</script><p>因此可以用Jacobi来计算flag的二进制结果。</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> AITMCLab.Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jacobi</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">-1</span>) ** ((b * b - <span class="number">1</span>) / <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> a == b - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">-1</span>) ** ((b - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        res *= jacobi(<span class="number">2</span>, b)</span><br><span class="line">        a /= <span class="number">2</span></span><br><span class="line">    res *= (<span class="number">-1</span>)**((a - <span class="number">1</span>) * (b - <span class="number">1</span>) / <span class="number">4</span>) * jacobi(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">n = <span class="number">23981306327188221819291352455300124608114670714977979223022816906368788909398653961976023086718129607035805397846230124785550919468973090809881210560931396002918119995710297723411794214888622784232065592366390586879306041418300835178522354945438521139847806375923379136235993890801176301812907708937658277646761892297209069757559519399120988948212988924583632878840216559421398253025960456164998680766732013248599742397199862820924441357624187811402515396393385081892966284318521068948266144251848088067639941653475035145362236917008153460707675427945577597137822575880268720238301307972813226576071488632898694390629</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        line = line.strip(<span class="string">&quot;L\n&quot;</span>)    <span class="comment"># Filter out &quot;L\n&quot; at the end of line</span></span><br><span class="line">        cur = <span class="built_in">int</span>(line, <span class="number">16</span>)         <span class="comment"># Convert hax string to number</span></span><br><span class="line">        <span class="keyword">if</span> (jacobi(cur, n) == <span class="number">1</span>):</span><br><span class="line">            flag += <span class="number">1</span> &lt;&lt; i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> flag</span><br><span class="line"><span class="built_in">print</span> long_to_bytes(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先从<code>key.enc</code>中逐行读取，并对每一行结尾的’L\n’进行过滤，将其转换为整数cur后，计算Jacobi符号$J\left( cur, N\right)$。计算Jacobi符号时主要使用二次互反律进行计算（可以再使用其它定律进行加速，但没必要）。</p><p>由于第一行储存的为flag的最后一位（即从后往前储存），因此进行<code>flag += 1 &lt;&lt; i</code>即可将相应位置的二进制结果还原。</p><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>N1CTF\{You_can_leak_the_jacobi_symbol_from_RSA\}</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题在代码阅读上难度较低，唯一需要留意的地方就是<code>padding &lt;&lt; pow(m, p - 1, p) + m % 2</code>这个运算的优先级问题（感谢bg的注释提示）。把代码转换成数学公式后，二次剩余的方法就比较明显了，需要注意的是<code>Jacobi</code>符号无法准确判断二次剩余与二次非剩余（感谢bg指出了这个问题），简单推导后发现这个方法有一定的使用条件，如果题目中的p和q不满足一定的条件，这个方法就无法正确区分0和1。</p><hr><p>后经大佬提醒发现这道题用的是Goldwasser-Micali密码（上课走神实锤了）。简单对比发现，当GM密码选取的x满足<code>J(x, p) = 1</code>且<code>J(x, q) = -1</code>时，可能能够利用本题的方法进行破解。因此选取的x不能仅满足是n的二次非剩余，需要同时是p和q的二次非剩余。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目来源：N1CTF 2019&lt;/p&gt;</summary>
    
    
    
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>not RSA WriteUp</title>
    <link href="https://s0uthwood.github.io/2020/12/09/not-RSA-WriteUp/"/>
    <id>https://s0uthwood.github.io/2020/12/09/not-RSA-WriteUp/</id>
    <published>2020-12-09T14:34:12.000Z</published>
    <updated>2021-03-17T12:18:30.476Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源：安恒四月赛（DASCTF 2020）</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> AITMCLab.libnum <span class="keyword">import</span> gcd, invmod, s2n</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144922079001013</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q)</span><br><span class="line">n = p * q</span><br><span class="line">flag = s2n(flag)</span><br><span class="line">r = randint(<span class="number">1</span>, n)</span><br><span class="line">c = (<span class="built_in">pow</span>(n + <span class="number">1</span>, flag, n * n) * <span class="built_in">pow</span>(r, n, n * n)) % (n * n)</span><br><span class="line"><span class="built_in">print</span> c</span><br><span class="line"><span class="comment"># c = 13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428</span></span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>代码很简单，就是道纯数学题</p><p>由源码：</p><p>$c\equiv (n+1)^f\cdot r^n\ (\mathrm{mod}\ n^2)$</p><p>根据二项式定理：</p><p>$c\equiv (fn+1)\cdot r^n\ (mod\ n^2)$</p><p>左右两式同乘$\varphi(n)$次方，得$c^{\varphi(n)}\equiv (fn+1)^{\varphi(n)}\cdot r^{n\varphi(n)}\ (mod\ n^2)$</p><p>由$\varphi(n^2)=n\cdot \varphi(n)$且当$r\neq p$或$r\neq q$时有，$gcd(r,n)=1$可知，$r^{n\varphi(n)}\equiv 1\ (mod\ n^2)$，可得：</p><p>$c^{\varphi(n)}\equiv (fn+1)^{\varphi(n)}\ (mod\ n^2)$</p><p>因为r为随机数，所以$r\neq p,q$的概率为$\dfrac{2}{n}$，可认为$gcd(r,n)=1$成立。</p><p>再次使用二次项定理，可得$c^{\varphi(n)}\equiv fn\varphi(n)+1\ (mod\ n^2)$</p><p>由费曼小定理可知$c^{\varphi(n)}\equiv 1\ (mod\ n)$，即$n|c^{\varphi(n)}-1$，因此将1移到同余式左边并对同余式同除n，得：</p><p>$\dfrac{c^{\varphi(n)}-1}{n}\equiv f\varphi(n)\ (mod\ n)$</p><p>对于左式，设$\dfrac{c^{\varphi(n)}-1}{n}=kn+r’$</p><p>$c^{\varphi(n)}=kn^2+rn+1$</p><p>只需求解出$rn+1$即可，因此可以对$c^{\varphi(n)}$进行模$n^2$，实现时可直接使用python中的pow函数。</p><p>将左式求解后，化为求解$\varphi(n)\cdot f\equiv r’\ (mod\ n)$，即$f\equiv \varphi(n)^{-1}\cdot r’\ (mod\ n)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> AITMCLab.libnum <span class="keyword">import</span> s2n, invmod, n2s</span><br><span class="line"></span><br><span class="line">c = <span class="number">131344898203946132222826076816862720814198751469464018831726821670</span> <span class="number">117591133883733491804579798978481132759822192648790811898868530627</span> <span class="number">177645803646988883380321414340538322474760104004492720100824604377</span> <span class="number">471904687667402745879993363591712830981372613960131531302654404256</span> <span class="number">76242061845667887640808895666325466803989428</span></span><br><span class="line">p = <span class="number">104879397075344024438671231239628115011303349344697797964879592144</span> <span class="number">922079000957</span> </span><br><span class="line">q = <span class="number">104879397075344024438671231239628115011303349344697797964879592144</span> <span class="number">922079001013</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">n = p * q</span><br><span class="line">r = (<span class="built_in">pow</span>(c, phi_n, n * n) - <span class="number">1</span>) // n</span><br><span class="line"><span class="built_in">print</span> n2s(r * invmod(phi_n, n) % n)</span><br></pre></td></tr></table></figure><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>flag\{can_you_find_me??\}</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>纯数学题</p><p>学长带着推了一遍。。。这也太难了。。。</p><p>听说是<em>paillier</em>加密，果然不是RSA</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目来源：安恒四月赛（DASCTF 2020）&lt;/p&gt;</summary>
    
    
    
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>fabric学习1-架构</title>
    <link href="https://s0uthwood.github.io/2020/12/08/fabric%E5%AD%A6%E4%B9%A01-%E6%9E%B6%E6%9E%84/"/>
    <id>https://s0uthwood.github.io/2020/12/08/fabric%E5%AD%A6%E4%B9%A01-%E6%9E%B6%E6%9E%84/</id>
    <published>2020-12-07T17:33:07.000Z</published>
    <updated>2021-03-17T12:17:44.973Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献：<a href="/download/1801.10228.pdf">Hyperledger Fabric: A Distributed Operation System for Permissioned Blockchains</a></p><a id="more"></a><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>Fabric是一个许可区块链的分布式操作系统，可以执行多种编程语言编写的分布式应用。它能够在一个只能追加的数据结构中安全地跟踪执行历史，并且没有内置的加密账本。</p><p>Fabric使用了“执行-order-验证”的区块链架构，而没有遵顼标准的“order-执行”设计。其整体的分布式应用可以分为两个部分</p><ul><li><p>智能合约，称为链码 (<em>Chaincode</em>) ，是一段实现了应用逻辑的程序代码，并在执行过程中运行。链码是Fabric分布式应用的核心部分，可能会被未受信任的开发者修改。有一种特殊的链码被用于管理区块链系统并维护参数，被称为系统链码 (<em>system chaincode</em>) </p></li><li><p>背书政策 (<em>endorsement policy</em>) 在验证阶段进行评价。许可政策无法被未受信任的开发者选择或修改。其在区块链中充当一个用于事物验证的静态库，且只能通过链码进行参数化。只有指定的管理员有权限使用系统管理功能修改。</p></li></ul><p>“执行-排序-验证”结构示意图：</p><p><img data-src="execute-order-validate.png" alt=""></p><p>一个客户端向背书政策指定的peer节点(peers)发送交易。这个交易被特殊的peer节点执行并且记录输出信息，这一步骤被称为背书。执行完成后，交易进入了排序(ordering)阶段，在这一个阶段中，使用了一种可插入的共识协议来产生一个完成排序的已背书交易的序列，并按区块分组。这些交易被广播到所有的节点。这个序列的顺序由输出和状态的依赖性决定。在验证阶段，每个peer节点都需要根据背书政策和执行的一致性对已背书交易的状态变化进行验证。所有peer节点都已相同的顺序进行验证，因此结果具有确定性。</p><p>Fabric网络支持多个区块链链接到同一个排序服务上。每个区块链被称为一个通道(<em>Channel</em>)，可以有不同的peer节点作为其成员。这些通道可以被用来分离不同的区块链之间的状态，但每个通道的共识并不一致，并且通道中的交易顺序是相互分开的。认为所有排序都是可信的部署，可以通过通道访问控制来实现对节点的控制。</p><p>其中的节点可分为：客户端、peer节点（其中一部分为背书节点）、排序服务节点(OSN, <em>Ordering Service Nodes</em> or <em>orderers</em>)</p><h2 id="交易的三个阶段"><a href="#交易的三个阶段" class="headerlink" title="交易的三个阶段"></a>交易的三个阶段</h2><p><img data-src="transaction_flow.png" alt="transaction_flow"></p><h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>在执行阶段，客户端签署并发送一个交易提案给一个或多个背书节点来执行（根据背书政策，每个chaincode都有特定的一组背书节点）。一个交易提案包含了提交客户端的身份（根据MSP），交易的载荷、参数、链码标识符、每个客户端只能使用一次的nonce（随机值或计数器），以及客户端标识符和nonce生成的交易标识符。</p><p>背书节点会对交易提案进行模拟，在指定的区块链链码上执行操作。模拟操作在背书节点的本地区块链状态中进行模拟，不与其它节点同步，也不会将模拟的结果永久化到帐本中。区块链的状态仍然由节点交易管理器(<em>Peer Transaction Manager</em>)维护。一个链码创建的状态只能限定在该链码上，不能被其他的链码直接访问。需要注意的是，链码只能维护GetState、PutState、DelState操作访问的内容（<em>可能意思是：需要使用这些接口进行访问，不能直接修改，猜测状态权限为private</em>）。给予适当的权限，链码可以调用同一个通道的链码，并访问其状态。</p><p>在模拟后，背书节点会产生一个<em>writeset</em>，其中包括模拟产生的状态更新，和一个<em>readset</em>，代表交易提案模拟的版本依赖（模拟时的所有密钥以及对应的版本号）。在模拟结束后，背书节点会以加密的方式签署一份“背书”消息，包括了<em>writeset</em>和<em>readset</em>（包括交易id和背书节点的一些数据），随后以响应的方式发送给客户端。客户端收集背书，直到满足链码的背书政策，开始交易。特别的，这要求政策决定的所有背书节点都返回相同的<em>writeset</em>和<em>readset</em>。然后，客户端将继续创建交易，并传递给排序阶段。</p><h3 id="排序阶段"><a href="#排序阶段" class="headerlink" title="排序阶段"></a>排序阶段</h3><p>客户端收集到足够的背书后，将会把交易组装起来并发送给排序服务端。整个交易包括了载荷(<em>payload</em>)（包括参数的链码操作）、交易元数据、背书的集合。排序阶段对每个通道的所有提交建立了一个排序。排序服务端会将多个交易分成块，输出包含交易的哈希链序列，以提高广播协议的吞吐量。</p><ul><li><code>broadcast(tx)</code>：客户端调用这个函数来广播交易<code>tx</code>，包含了载荷和签名。</li><li><code>B</code> $\leftarrow$ <code>deliver(s)</code>：客户端调用这个函数来获取非负序列号<code>s</code>的区块<code>B</code>，$B=([tx_1,tx_2,\ldots,tx_k],h)$，$h$为<code>s-1</code>区块的哈希值。</li></ul><p>排序服务确保了一个通道中的交付区块被完全排序，确保安全。</p><p>然而，每一个单独的排序实现都允许在客户端请求中保证自己的活跃性与公平性。</p><p>由于区块链中包含了大量的节点，但仅有少部分节点实现了排序服务，因此Fabric可以配置使用内置的gossip服务，将排序服务中交付的区块分发给所有的节点。</p><h3 id="验证阶段"><a href="#验证阶段" class="headerlink" title="验证阶段"></a>验证阶段</h3><p>排序服务会把区块直接分发给各个节点（或通过<em>gossip</em>）。随后，一个新的区块进入验证阶段，包含三个连续步骤：</p><ul><li>并行执行区块中所有的交易的背书政策评估。评估是验证系统链码(VSCC, <em>validation system chaincode</em>)的任务。VSCC是一个静态库，是区块链配置的一部分，负责根据链码中的背书政策验证背书。如果不满足，这个交易会被标记为无效，并被忽略。</li><li>对块中的所有交易进行读写冲突检查(<em>read-write conflict check</em>)（版本号比较）。对于每个交易，将会对比其中readset的版本号和节点本地存储的账本当前状态中的版本号，确保版本相同。如果版本不匹配，交易会被标记为无效，并被忽略。</li><li>最后进行账本的更新阶段，在这个阶段，区块被追加到本地存储的账本中，并且更新区块链的状态。将区块添加到账本时，前两步的检查结果将被持久化以掩码的形式表示区块中的交易有效。这有助于后面进行重建状态。此外，所有的状态更新都是通过将<em>writeset</em>中的键值对写入本地完成的。</li></ul><h2 id="信任与故障模型"><a href="#信任与故障模型" class="headerlink" title="信任与故障模型"></a>信任与故障模型</h2><p>Fabric可以适应灵活的信任和故障假设。通常情况下，所有的客户端都被认为是潜在的恶意用户或是<em>Byzantine</em>。节点都被归入组织(<em>organization</em>)并且每个组织组成一个信任域(<em>trust domain</em>)。每个节点信任其组织内部的其他节点，而不信任其他组织的节点。排序服务同样认为所有的节点（或客户端）都是潜在的拜占庭。</p><p>Fabric网络的完整性依赖于排序服务的一致性。排序服务的信任模型取决于其实现。</p><p>在Fabric中，分布式应用可以定义自己的信任假设，通过背书政策来传达，并且独立于排序服务实现的共识的信任假设。</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>Fabric使用了gRPC架构实现客户端、节点和排序服务之间的通信。</p><h2 id="成员身份管理服务（MSP）"><a href="#成员身份管理服务（MSP）" class="headerlink" title="成员身份管理服务（MSP）"></a>成员身份管理服务（MSP）</h2><p>成员身份管理服务(MSP, <em>membership service provider</em>)维护了系统中所有节点（客户端、节点、排序服务）的身分，并负责发布节点的凭证，用于认证和授权。节点之间的所有交互都是通过已认证的消息（通常是数字签名）发生的。成员身份管理包括每个节点的组件，可以认证交易、验证交易的完整性、签署并确认背书、验证其他的区块链操作。MSP中还包括了用于密钥管理和节点注册的工具。</p><p>MSP是抽象的，可以有不同的实例。Fabric中，默认的MSP实现可以处理基于数字签名的PKI认证方法，并且容纳商业认证机构(CA)。Fabric提供了独立的CA——Fabric-CA。</p><p>Fabric允许设置区块链网络的两种模式。在离线模式下，凭证由CA生成，并分发到所有节点。peer节点和排序节点只能在离线模式下注册。对于客户端的注册，Fabric-CA提供了在线模式，向客户端发送加密凭证。MSP的配置必须要确保所有的节点都能识别相同的身份和认证认定为有效（特别是所有的peer节点）。</p><p>例如，当多个组织在同一个区块链网络中时，MSP需要能够允许身份的联合。每个组织向自己的成员发放身份，每个peer节点都能识别所有组织的成员。这可以通过多个MSP实例来实现。例如，在每个组织和一个MSP之间建立一个映射。</p><h2 id="排序服务"><a href="#排序服务" class="headerlink" title="排序服务"></a>排序服务</h2><p>排序服务可管理多个通道，对每个通道，都提供如下三个服务：</p><ol><li><em>Atomic broadcast</em>，用于对交易进行排序，实现广播和分发</li><li>重新配置(<em>reconfiguration</em>)通道，成员通过广播一个配置更新事物(<em>configuration update transaction</em>)修改通道。</li><li>（可选择）访问控制(<em>access control</em>)，在这些配置中，排序服务作为可信的实体，限制交易的广播和指定peer节点和客户端的块的接收</li></ol><p>排序服务通过系统通道上的生成块进行引导。生成块携带了配置事务(<em>configuration transaction</em>)，定义了排序服务的操作。</p><p>当前版本的实现由OSN组成，OSN实现了描述的操作并且通过系统通道通信。实际的<em>atomic broadcast</em>函数由基于<em>ZooKeeper</em>的Kafka实例提供，这个实例提供了可以扩展的发布-订阅消息，在节点崩溃后仍具有强一致性(<em>consistency</em>)。这个实现可以运行在与OSN分离的物理节点上。OSN作为peers和Kafka实例之间的代理。</p><p>OSN直接将收到的新交易注入到广播中。OSN将从广播中接收到的交易转换成块。只要满足三个情况之一，块就会被断开。</p><ul><li>区块包含了交易允许的最大值</li><li>区块达到最大大小</li><li>从接收到第一个交易后超过某特定时间</li></ul><p>批处理的过程是确定的，因此在所有节点上都会产生相同的区块。考虑到从广播中接收的交易数据流，前两项情况是已经确定的。对于第三个条件，当节点读入块中的第一个交易时，会开启一个计时器。如果计时器超时后，这个区块仍然没有断开，OSN会在通道上广播一个特殊的“到时断开(<em>time-to-cut</em>)”交易，其中记录了需要断开的区块的序列号。另一方面，每个OSN在收到“到时断开”交易后，会根据其给定的序列号，立即切断新的区块。这个交易是原子性的分发给所有连接的OSN，所以区块中都包含相同的交易列表。OSN将最近交付的一系列区块直接持久化到文件系统中，因此可以通过分发回答peer节点来回收区块。</p><h2 id="Peer-Gossip"><a href="#Peer-Gossip" class="headerlink" title="Peer Gossip"></a>Peer Gossip</h2><p>将三个阶段分开的好处是在开发的时候可以独立扩展。然而，由于共识算法往往有带宽限制，排序服务的吞吐量被节点的网络容量所限制。共识无法通过增加节点而扩展，反而会让吞吐量降低。然而，由于排序和验证是分开的，在排序阶段后，重要的是如何有效地广播执行阶段的结果，以交给peer节点进行验证。此外，还有如何对新加入的peer节点和长期断开的peer节点进行状态转移。这两个问题就是gossip组件所需要解决的。Fabric gossip利用流行组播(<em>epidemic multicast</em>)来解决这个问题。区块是由排序服务签署的。这意味着一个peer节点在收到所有区块后，可以独立的组装为区块链并验证其完整性。</p><p>gossip的通信基于gRPC，利用TLS（传输层安全协议）进行相互识别，使得每一方都可以将TLS凭证与远程peer节点的身份绑定。gossip组件用来维护系统中当前在线的peer节点的成员视图。所有的peer节点通过定期传播成员数据独立建立一个本地视图。此外，一个peer节点可以在网络崩溃或者中断后重新连入成员视图。</p><p>Fabric的gossip组件采用了两个阶段进行信息的传播：</p><ul><li>在<em>push</em>阶段，每个peer节点从成员视图中选择一个随机的活跃邻居集合，并向他们发送信息</li><li>在<em>pull</em>阶段，每个peer节点定期探测一个随机选择的peer节点集合，并请求缺失的信息</li></ul><blockquote><p>研究表明，同时使用这两种方法可以优化可用带宽并确保所有peer节点有很高的概率接收到所有信息。</p></blockquote><p>为了减少从排序节点向网络中发送的区块的负载，协议同时在peer中选择了一个领导者(<em>elects a leader peer</em>)，代表peer节点从排序服务中<em>pull</em>区块，并启动gossip分发。这个机制对领导者出现故障具有弹性。</p><h2 id="分布式账本-Ledger"><a href="#分布式账本-Ledger" class="headerlink" title="分布式账本(Ledger)"></a>分布式账本(<em>Ledger</em>)</h2><p>账本组件在各个peer节点中维持分布式账本并建立持久性的存储，并实现账本的模拟、验证和更新阶段。整体上由一个区块存储(<em>block store</em>)和一个peer节点交易管理器(<em>peer transaction manager</em>)组成。</p><h3 id="区块存储-Ledger-Block-Store"><a href="#区块存储-Ledger-Block-Store" class="headerlink" title="区块存储(Ledger Block Store)"></a>区块存储(Ledger Block Store)</h3><p>账本区块存储持久化交易区块，并以一组仅追加文件的形式实现。由于区块无法被改变，并以一个特定的顺序到达，一个仅追加的结构能够带来最好的性能。此外，区块存储中维护了一些索引(<em>indices</em>)，用来随机访问区块或区块中的交易。</p><h3 id="peer交易管理器-Peer-Transaction-Manager"><a href="#peer交易管理器-Peer-Transaction-Manager" class="headerlink" title="peer交易管理器(Peer Transaction Manager)"></a>peer交易管理器(Peer Transaction Manager)</h3><p>peer节点交易管理器(PTM)保持版本键值对处于最新状态。它能为每一个唯一的条目(<em>entry</em>)的<em>key</em>以(<em>key</em>,<em>val</em>, <em>ver</em>)存储一个元组，其中包含了最近存储的值<em>val</em>，和最新的版本号<em>var</em>。版本由区块序列号和区块内的交易序列号组成，因此版本号都是唯一且递增的。PTM使用了本地键值存储来识别版本变量，具体实现使用了LevelDB和Apache CouchDB。</p><p>在模拟时，PTM提供了一个稳定的最新状态快照。<strong>执行阶段</strong>中提到，PTM在<em>readset</em>中为GetState访问的每个条目记录一个元组(<em>key</em>, <em>ver</em>)，在<em>writeset</em>中为交易调用PutState更新的每个条目记录一个元组(<em>key</em>, <em>val</em>)。此外，PTM支持范围查询(<em>range queries</em>)，并计算出查询结果的加密哈希（一组(<em>key</em>, <em>ver</em>)元组），并将查询字符串和哈希添加到readset中。</p><p>在验证阶段，PTM依次验证一个区块中的所有交易，检查交易是否与之前的任何交易产生冲突。对于readset中的所有key，如果readset中的版本记录与最新状态的版本不同，PTM就会把这个交易标记为无效。对于范围查找，PTM会重新执行查询并与之前的<em>readset</em>比较哈希值，确保不发生错误的读取。</p><h3 id="崩溃处理"><a href="#崩溃处理" class="headerlink" title="崩溃处理"></a>崩溃处理</h3><p>账本组件在更新时需要能处理peer节点的崩溃。</p><p>在接收到一个新区块后，PTM已经对其进行了验证，并使用了掩码将区块中的交易标记为有效或无效。此时，账本将区块写入账本的区块存储中，刷新到磁盘，随后更新区块存储的索引。随后，PTM将所有有效交易的<em>writeset</em>状态变化应用到本地存储中。最后，计算并持久化一个<em>savepoint</em>的值，表示成功应用区块数量的最大值。从崩溃中恢复时，<em>savepoint</em>值用来从持久化块中恢复索引和最新状态。</p><h2 id="链码执行"><a href="#链码执行" class="headerlink" title="链码执行"></a>链码执行</h2><p>Chaincode在一个与其余peer节点松散耦合的环境中执行。支持增添新的链码编程语言的插件。目前支持Go、Java和Node。</p><p>每个用户级或应用链码都在Docker容器环境中的独立进程中执行，这使得链码和peer节点之间相互隔离，简化了链码的生命周期管理（启动、停止、中止）。链码和peer节点通过gRCP通信。通过松散的耦合关系，peer节点不知道链码具体使用了什么语言实现。</p><p>不同于应用链码，系统链码直接在peer节点的进程中运行，可以实现Fabric所需要的特定功能，可以用于用户链码之间的隔离限制过多的情况。</p><h2 id="配置和系统链码"><a href="#配置和系统链码" class="headerlink" title="配置和系统链码"></a>配置和系统链码</h2><p>Fabric通过通道配置(<em>channel configuration</em>)和系统链码(<em>system chaincodes</em>)进行定制。</p><p>Fabric中每个通道都会形成一个逻辑区块链。通道的配置由元数据进行维护，并永久保留在配置区块(<em>configuration blocks</em>)中。每个配置区块都会包含完整的通道配置，并不会包括任何其他的东西。每个区块链都以一个配置区块开始，称之为创世块(<em>genesis block</em>)，用于引导通道。通道的配置包括：</p><ol><li>参与节点的MSP定义；</li><li>OSN的网络地址；</li><li>共识实现和配许服务的共享配置，比如大小和超时等设置；</li><li>管理对排序服务操作（广播和分发）访问的规则；</li><li>管理如何修改通道配置的各个部分的规则。</li></ol><p>通道的配置可以使用通道配置更新事务(<em>channel configuration update transaction</em>)进行更新，其中需要包括对配置进行的修改和一组签名。排序节点通过使用当前的配置验证该签名是否得到授权，来评估此次更新是否有效。然后，排序节点生成一个新的配置区块，嵌入新的配置和配置更新事务。Peer节点接收后，根据当前的配置验证更新是否得到了授权，有效则进行配置更新。</p><p>在部署应用链码时，会<u>参考</u>一个认可系统链码（<em>endorsement system chaincode</em>, ESCC）和一个验证系统链码（<em>validation system chaincode</em>, VSCC）。这两个链码的选择使得ESCC输出的背书，可以作为VSCC输入的一部分进行验证。ESCC将一个提案和提案模拟的结果作为输入。如果结果符合要求，则ESCC产生一个包含结果和认可的响应。对于默认的ESCC，这个背书只是peer节点的本地签名身份的签名。VSCC将一个事务作为输入，并输出该事务是否有效。对于默认的VSCC，背书被收集，并根据为链码指定的背书策略进行评估。进一步的系统链码实现其他支持功能，如链码生命周期。</p><blockquote><p>系统链码的核心代码在/fabric/core/common/sysccprovider和/fabric/core/scc下</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考文献：&lt;a href=&quot;/download/1801.10228.pdf&quot;&gt;Hyperledger Fabric: A Distributed Operation System for Permissioned Blockchains&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Crypto" scheme="https://s0uthwood.github.io/tags/Crypto/"/>
    
    <category term="fabric" scheme="https://s0uthwood.github.io/tags/fabric/"/>
    
  </entry>
  
</feed>
